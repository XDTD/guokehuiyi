#!/usr/bin/env node

/*
 * Copyright (C) 2021 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* eslint-disable no-console, import/no-extraneous-dependencies */

/*
 * This file gets the list of translation files for canvas-planner from
 * packages/translations/lib/canvas-planner and uses them to generate
 * a function that will import the file corresponding to the given locale.
 * In this way the individual translation files are in their own webpack
 * bundle, rather than all contained in one.
 */

const fs = require('fs')
const getTranslationList = require('@instructure/translations/bin/get-translation-list')

const copyright = `/*
 * Copyright (C) 2021 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */
`

getTranslationList()
  .then(canvasTranslations => {
    const canvasLocaleFileBasenames = canvasTranslations.map(t => t.replace('.json', ''))
    generateGetTranslations(canvasLocaleFileBasenames.sort())
  })
  .catch(ex => {
    console.error('Failed generatig translations list', ex)
  })

// generate the getTranslations() function
// that serves to code-split the translations
// into their own webpack bundle then provide
// them to the planner
function generateGetTranslations(localeFileBasenames) {
  const preface = `${copyright}
/* eslint-disable import/no-extraneous-dependencies */

/*
 * ********************************************************
 * This file is generated by scripts/generateGetTranslations.js
 * as part of the build. DO NOT EDIT
 * ********************************************************
 */

export default function getTranslations(locale) {
  const transReadyPromise = new Promise((resolve, reject) => {
    let p
    switch (locale) {
`

  const cases = []
  for (const locale of localeFileBasenames) {
    if (locale === 'en') {
      cases.push(`      case 'en':
        p = Promise.resolve(null)
        break`)
    } else {
      cases.push(`      case '${locale.replace(/_/g, '-')}':
        p = import('@instructure/translations/lib/canvas-planner/${locale}.json')
        break`)
    }
  }

  const trailer = `
      default:
        p = Promise.resolve(null)
    }
    p.then(resolve).catch(reject)
  }).catch(ex => {
    throw ex
  })
  return transReadyPromise
}
`
  const content = `${preface}${cases.join('\n')}${trailer}`

  fs.writeFileSync('./src/i18n/getTranslations.js', content, {flag: 'w'})
}

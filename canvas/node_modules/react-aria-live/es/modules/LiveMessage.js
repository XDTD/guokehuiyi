var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import { Component } from 'react';

var LiveMessage = (_temp = _class = function (_Component) {
  _inherits(LiveMessage, _Component);

  function LiveMessage(props) {
    _classCallCheck(this, LiveMessage);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.announce = _this.announce.bind(_this);
    return _this;
  }

  LiveMessage.prototype.componentDidMount = function componentDidMount() {
    this.announce();
  };

  LiveMessage.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    var message = this.props.message;

    if (message !== prevProps.message) {
      this.announce();
    }
  };

  LiveMessage.prototype.componentWillUnmount = function componentWillUnmount() {
    var clearOnUnmount = this.props.clearOnUnmount;

    if (clearOnUnmount === true || clearOnUnmount === 'true') {
      this.context.announceAssertive('');
      this.context.announcePolite('');
    }
  };

  LiveMessage.prototype.announce = function announce() {
    var _props = this.props,
        message = _props.message,
        ariaLive = _props['aria-live'];

    if (ariaLive === 'assertive') {
      this.context.announceAssertive(message || '');
    }
    if (ariaLive === 'polite') {
      this.context.announcePolite(message || '');
    }
  };

  LiveMessage.prototype.render = function render() {
    return null;
  };

  return LiveMessage;
}(Component), _class.contextTypes = {
  announcePolite: PropTypes.func.isRequired,
  announceAssertive: PropTypes.func.isRequired
}, _temp);
LiveMessage.propTypes = process.env.NODE_ENV !== "production" ? {
  message: PropTypes.string.isRequired,
  'aria-live': PropTypes.string.isRequired,
  clearOnUnmount: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['true', 'false'])])
} : {};


export default LiveMessage;
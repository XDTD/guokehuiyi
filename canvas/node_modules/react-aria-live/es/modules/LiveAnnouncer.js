var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropTypes from 'prop-types';
import React, { Component } from 'react';
import Announcer from './Announcer';

var LiveAnnouncer = (_temp = _class = function (_Component) {
  _inherits(LiveAnnouncer, _Component);

  function LiveAnnouncer(props) {
    _classCallCheck(this, LiveAnnouncer);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.state = {
      announcePoliteMessage: '',
      announceAssertiveMessage: ''
    };


    _this.announcePolite = _this.announcePolite.bind(_this);
    _this.announceAssertive = _this.announceAssertive.bind(_this);
    return _this;
  }

  LiveAnnouncer.prototype.getChildContext = function getChildContext() {
    return {
      announcePolite: this.announcePolite,
      announceAssertive: this.announceAssertive
    };
  };

  LiveAnnouncer.prototype.announcePolite = function announcePolite(message) {
    this.setState({
      announcePoliteMessage: message
    });
  };

  LiveAnnouncer.prototype.announceAssertive = function announceAssertive(message) {
    this.setState({
      announceAssertiveMessage: message
    });
  };

  LiveAnnouncer.prototype.render = function render() {
    var _state = this.state,
        announcePoliteMessage = _state.announcePoliteMessage,
        announceAssertiveMessage = _state.announceAssertiveMessage;

    return React.createElement(
      'div',
      null,
      React.createElement(Announcer, {
        assertiveMessage: announceAssertiveMessage,
        politeMessage: announcePoliteMessage
      }),
      this.props.children
    );
  };

  return LiveAnnouncer;
}(Component), _class.childContextTypes = {
  announcePolite: PropTypes.func.isRequired,
  announceAssertive: PropTypes.func.isRequired
}, _temp);


export default LiveAnnouncer;
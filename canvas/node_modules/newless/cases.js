// The simple case of a newless function
var A = newless(function() {});
A();     // 1
new A(); // 2

// Another newless function should be able to inherit from the original
var B = newless(function() {
  this.x = "something";
  A.call(this);
  this.y = "another thing";
});
B();     // 3
new B(); // 4

// A non-newless function should be able to do the same
var C = function() {
  this.x = "something";
  A.call(this);
  this.y = "another thing";
};
new C(); // 5

// Now, a newless *class* constructor
var D = newless(class D {});
D();     // 6
new D(); // 7

// Another newless class constructor should be able to extend it
var E = newless(class E extends D {
  constructor() { super(); }
});
E();     // 8
new E(); // 9

// And a non-newless class constructor should be able to do the same
var F = class F extends D {
  constructor() { super(); }
}
new F(); // 10

// And a non-newless *function* should also be able to extend a newless class constructor
var G = function() {
  this.x = "something";
  D.call(this);
  this.y = "another thing";
};
new G(); //

var H = class H extends A {
  constructor() { super(); }
};
new H; //

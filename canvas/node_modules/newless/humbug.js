"use strict";



var newless = require("./newless");

var allocated = new Set();

// var Point = newless(class Point {
//     constructor(x, y) {
//         console.log("Core Point constructor");
//         this.x = x;
//         this.y = y;
//         allocated.add(this);
//     }
//     toString() {
//         return '(' + this.x + ', ' + this.y + ')';
//     }
// });
//
// var ColorPoint = newless(class ColorPoint extends Point {
//     constructor(x, y, color) {
//         // console.log("new.target is ColorPoint?", new.target === ColorPoint, new.target);
//         console.log("Core ColorPoint constructor");
//         super(x, y);
//         this.color = color;
//         allocated.add(this);
//     }
//     toString() {
//         return super.toString() + ' in ' + this.color;
//     }
// });
//
// var ThreePoint = newless(class ThreePoint extends ColorPoint {
//     constructor(x, y, color, z) {
//         console.log("Core ThreePoint constructor");
//         super(x, y, color);
//         this.z = z;
//         allocated.add(this);
//     }
//     toString() {
//         return super.toString() + ' at ' + this.z;
//     }
// });




var Point = newless(function Point(x, y) {
  console.log("Core Point constructor");
  this.x = x;
  this.y = y;
  allocated.add(this);
});
Point.prototype.toString = function() {
  return '(' + this.x + ', ' + this.y + ')';
}

var ColorPoint = newless(function ColorPoint(x, y, color) {
  // console.log("new.target is ColorPoint?", new.target === ColorPoint, new.target);
  console.log("Core ColorPoint constructor");
  Point.call(this, x, y);
  this.color = color;
  allocated.add(this);
});
Object.setPrototypeOf(ColorPoint.prototype, Point.prototype);
// ColorPoint.prototype = Object.create(Point.prototype);
ColorPoint.prototype.toString = function() {
  return Point.prototype.toString.call(this) + ' in ' + this.color;
};

var ThreePoint = newless(function ThreePoint(x, y, color, z) {
  console.log("Core ThreePoint constructor");
  ColorPoint.call(this, x, y, color);
  this.z = z;
  allocated.add(this);
});
Object.setPrototypeOf(ThreePoint.prototype, ColorPoint.prototype);
// ThreePoint.prototype = Object.create(ColorPoint.prototype);
ThreePoint.prototype.toString = function() {
  return ColorPoint.prototype.toString.call(this) + ' at ' + this.z;
};




console.log("Constructing ColorPoint...");
var cp = new ColorPoint(25, 8, 'green');
console.log("---- " + cp.toString()); // '(25, 8) in green'

console.log("\nConstructing ThreePoint...");
var tp = new ThreePoint(25, 8, 'green', 10);
console.log("---- " + tp.toString());

console.log("\nObjects:", allocated.size);

console.log("ColorPoint.__proto__ === Point?", Object.getPrototypeOf(ColorPoint) === Point);
console.log("ThreePoint.__proto__ === ColorPoint?", Object.getPrototypeOf(ThreePoint) === ColorPoint);

console.log("cp instanceof ColorPoint?", cp instanceof ColorPoint); // true
console.log("cp instanceof Point?", cp instanceof Point); // true


console.log("tp instanceof ThreePoint?", tp instanceof ThreePoint);
console.log("tp instanceof ColorPoint?", tp instanceof ColorPoint);
console.log("tp instanceof Point?", tp instanceof Point);

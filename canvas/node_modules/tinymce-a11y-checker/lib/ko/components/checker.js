"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _preventDefault = _interopRequireDefault(require("prevent-default"));

var _reactAriaLive = require("react-aria-live");

var _uiA11yContent = require("@instructure/ui-a11y-content");

var _uiButtons = require("@instructure/ui-buttons");

var _uiTray = require("@instructure/ui-tray");

var _uiPopover = require("@instructure/ui-popover");

var _uiView = require("@instructure/ui-view");

var _uiGrid = require("@instructure/ui-grid");

var _uiHeading = require("@instructure/ui-heading");

var _uiLink = require("@instructure/ui-link");

var _uiSpinner = require("@instructure/ui-spinner");

var _uiText = require("@instructure/ui-text");

var _uiCheckbox = require("@instructure/ui-checkbox");

var _uiTextInput = require("@instructure/ui-text-input");

var _uiTextArea = require("@instructure/ui-text-area");

var _uiSimpleSelect = require("@instructure/ui-simple-select");

var _uiIcons = require("@instructure/ui-icons");

var _uiThemeable = require("@instructure/ui-themeable");

var _colorField = _interopRequireDefault(require("./color-field"));

var _placeholderSvg = _interopRequireDefault(require("./placeholder-svg"));

var _describe = _interopRequireDefault(require("../utils/describe"));

var dom = _interopRequireWildcard(require("../utils/dom"));

var _nodeChecker = _interopRequireDefault(require("../node-checker"));

var _formatMessage = _interopRequireDefault(require("../format-message"));

var _indicate = require("../utils/indicate");

const noop = () => {};

class Checker extends _react.default.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      open: false,
      checking: false,
      errors: [],
      formState: {},
      formStateValid: false,
      errorIndex: 0,
      config: {},
      showWhyPopover: false
    };

    this.updateFormState = ({
      target
    }) => {
      const formState = Object.assign({}, this.state.formState);

      if (target.type === "checkbox") {
        formState[target.name] = target.checked;
      } else {
        formState[target.name] = target.value;
      }

      this.setState({
        formState,
        formStateValid: this.formStateValid(formState)
      });
    };
  }

  componentDidMount() {
    this.props.editor.on("Remove", editor => {
      this.setState({
        open: false
      });
    });
  }

  setConfig(config) {
    this.setState({
      config
    });
  }

  check(done) {
    if (typeof done !== "function") done = noop;
    this.setState({
      open: true,
      checking: true,
      errors: [],
      errorIndex: 0
    }, () => {
      if (typeof this.state.config.beforeCheck === "function") {
        this.state.config.beforeCheck(this.props.editor, () => {
          this._check(() => {
            if (typeof this.state.config.afterCheck === "function") {
              this.state.config.afterCheck(this.props.editor, done);
            } else {
              done();
            }
          });
        });
      } else if (typeof this.state.config.afterCheck === "function") {
        this._check(() => {
          this.state.config.afterCheck(this.props.editor, done);
        });
      } else {
        this._check(done);
      }
    });
  }

  _check(done) {
    const node = this.props.getBody();

    const checkDone = errors => {
      this.setState({
        errorIndex: 0,
        errors,
        checking: false
      }, () => {
        this.selectCurrent();
        done();
      });
    };

    (0, _nodeChecker.default)(node, checkDone, this.state.config, this.props.additionalRules);
  }

  firstError() {
    if (this.state.errors.length > 0) {
      this.setErrorIndex(0);
    }
  }

  nextError() {
    const next = (this.state.errorIndex + 1) % this.state.errors.length;
    this.setErrorIndex(next);
  }

  prevError() {
    const len = this.state.errors.length;
    const prev = (len + this.state.errorIndex - 1) % len;
    this.setErrorIndex(prev);
  }

  setErrorIndex(errorIndex) {
    this.onLeaveError();

    if (errorIndex >= this.state.errors.length) {
      errorIndex = 0;
    }

    this.setState({
      errorIndex
    }, () => this.selectCurrent());
  }

  selectCurrent() {
    (0, _indicate.clearIndicators)();
    const errorNode = this.errorNode();

    if (errorNode) {
      this.getFormState();
      dom.select(this.props.editor, errorNode);
    } else {
      this.firstError();
    }
  }

  error() {
    return this.state.errors[this.state.errorIndex];
  }

  errorNode() {
    const error = this.error();
    return error && error.node;
  }

  errorRootNode() {
    const rule = this.errorRule();
    const rootNode = rule && rule.rootNode && rule.rootNode(this.errorNode());
    return rootNode || this.errorNode();
  }

  updateErrorNode(elem) {
    const error = this.error();

    if (error) {
      error.node = elem;
    }
  }

  errorRule() {
    const error = this.error();
    return error && error.rule;
  }

  errorMessage() {
    const rule = this.errorRule();
    return rule && rule.message();
  }

  getFormState() {
    const rule = this.errorRule();
    const node = this.errorNode();

    if (rule && node) {
      this.setState({
        formState: rule.data(node),
        formStateValid: false
      });
    }
  }

  formStateValid(formState) {
    formState = formState || this.state.formState;
    let node = this.tempNode(true);
    const rule = this.errorRule();

    if (!node || !rule) {
      return false;
    }

    node = rule.update(node, formState);

    if (this._tempNode === this._tempTestNode) {
      this._tempNode = node;
    }

    this._tempTestNode = node;
    return rule.test(node);
  }

  fixIssue() {
    const rule = this.errorRule();
    let node = this.errorNode();

    if (rule && node) {
      this.removeTempNode();
      rule.update(node, this.state.formState);
      this.updateErrorNode(node);

      if (this._closeButtonRef) {
        this._closeButtonRef.focus();
      }

      const errorIndex = this.state.errorIndex;
      this.check(() => this.setErrorIndex(errorIndex));
    }
  }

  newTempRootNode(rootNode) {
    const newTempRootNode = rootNode.cloneNode(true);
    const path = dom.pathForNode(rootNode, this.errorNode());
    this._tempTestNode = dom.nodeByPath(newTempRootNode, path);
    return newTempRootNode;
  }

  tempNode(refresh = false) {
    if (!this._tempNode || refresh) {
      const rootNode = this.errorRootNode();

      if (rootNode) {
        const newTempRtNode = this.newTempRootNode(rootNode);

        if (refresh && this._tempNode) {
          const parent = this._tempNode.parentNode;
          parent.insertBefore(newTempRtNode, this._tempNode);
          parent.removeChild(this._tempNode);
        } else {
          const parent = rootNode.parentNode;
          parent.insertBefore(newTempRtNode, rootNode);
          parent.removeChild(rootNode);
        }

        this._tempNode = newTempRtNode;
      }
    }

    return this._tempTestNode;
  }

  removeTempNode() {
    const node = this.errorRootNode();

    if (this._tempNode && node) {
      const parent = this._tempNode.parentNode;
      parent.insertBefore(node, this._tempNode);
      parent.removeChild(this._tempNode);
      this._tempNode = null;
      this._tempTestNode = null;
    }
  }

  onLeaveError() {
    this.removeTempNode();
  }

  handleClose() {
    this.onLeaveError();
    (0, _indicate.clearIndicators)();
    this.setState({
      open: false
    });
  }

  render() {
    const rule = this.errorRule();
    const issueNumberMessage = "Issue " + (this.state.errorIndex + 1) + "/" + this.state.errors.length;
    return /*#__PURE__*/_react.default.createElement(_reactAriaLive.LiveAnnouncer, null, /*#__PURE__*/_react.default.createElement(_uiTray.Tray, {
      "data-mce-component": true,
      label: "Accessibility Checker",
      open: this.state.open,
      onDismiss: () => this.handleClose(),
      placement: "end",
      contentRef: e => this.trayElement = e
    }, /*#__PURE__*/_react.default.createElement(_uiButtons.CloseButton, {
      placement: "start",
      offset: "x-small",
      onClick: () => this.handleClose(),
      buttonRef: ref => this._closeButtonRef = ref
    }, "Close Accessibility Checker"), /*#__PURE__*/_react.default.createElement(_uiView.View, {
      as: "div",
      padding: "x-large large"
    }, /*#__PURE__*/_react.default.createElement(_uiHeading.Heading, {
      level: "h3",
      as: "h2",
      margin: "medium 0"
    }, " " + "Accessibility Checker"), this.state.errors.length > 0 && /*#__PURE__*/_react.default.createElement(_uiView.View, {
      as: "div"
    }, /*#__PURE__*/_react.default.createElement(_reactAriaLive.LiveMessage, {
      "aria-live": "polite",
      message: `
                  ${issueNumberMessage}
                  ${(0, _describe.default)(this.errorNode())}
                  ${this.errorMessage()}
                `
    }), /*#__PURE__*/_react.default.createElement(_uiView.View, {
      as: "div",
      margin: "large 0 medium 0"
    }, /*#__PURE__*/_react.default.createElement(_uiGrid.Grid, {
      vAlign: "middle",
      hAlign: "space-between",
      colSpacing: "none"
    }, /*#__PURE__*/_react.default.createElement(_uiGrid.GridRow, null, /*#__PURE__*/_react.default.createElement(_uiGrid.GridCol, null, /*#__PURE__*/_react.default.createElement(_uiText.Text, {
      weight: "bold"
    }, issueNumberMessage)), /*#__PURE__*/_react.default.createElement(_uiGrid.GridCol, {
      width: "auto"
    }, /*#__PURE__*/_react.default.createElement(_uiPopover.Popover, {
      on: "click",
      show: this.state.showWhyPopover,
      shouldContainFocus: true,
      shouldReturnFocus: true
    }, /*#__PURE__*/_react.default.createElement(_uiPopover.Popover.Trigger, null, /*#__PURE__*/_react.default.createElement(_uiButtons.Button, {
      variant: "icon",
      icon: _uiIcons.IconQuestionLine,
      onDismiss: () => {
        this.setState({
          showWhyPopover: false
        });
      },
      onClick: () => this.setState({
        showWhyPopover: true
      })
    }, /*#__PURE__*/_react.default.createElement(_uiA11yContent.ScreenReaderContent, null, "Why"))), /*#__PURE__*/_react.default.createElement(_uiPopover.Popover.Content, null, /*#__PURE__*/_react.default.createElement(_uiView.View, {
      padding: "medium",
      display: "block",
      width: "16rem"
    }, /*#__PURE__*/_react.default.createElement(_uiButtons.CloseButton, {
      placement: "end",
      offset: "x-small",
      variant: "icon",
      onClick: () => this.setState({
        showWhyPopover: false
      })
    }, "Close"), /*#__PURE__*/_react.default.createElement(_uiText.Text, null, /*#__PURE__*/_react.default.createElement("p", null, rule.why()), /*#__PURE__*/_react.default.createElement("p", null, rule.link && rule.link.length && /*#__PURE__*/_react.default.createElement(_uiThemeable.ApplyTheme, {
      theme: {
        [_uiLink.Link.theme]: {
          textDecoration: "underline"
        }
      }
    }, /*#__PURE__*/_react.default.createElement(_uiLink.Link, {
      href: rule.link,
      target: "_blank"
    }, rule.linkText()))))))))))), /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: (0, _preventDefault.default)(() => this.fixIssue())
    }, /*#__PURE__*/_react.default.createElement(_uiText.Text, {
      as: "div"
    }, this.errorMessage()), rule.form().map(f => /*#__PURE__*/_react.default.createElement(_uiView.View, {
      as: "div",
      key: f.dataKey,
      margin: "medium 0 0"
    }, this.renderField(f))), /*#__PURE__*/_react.default.createElement(_uiView.View, {
      as: "div",
      margin: "medium 0"
    }, /*#__PURE__*/_react.default.createElement(_uiGrid.Grid, {
      vAlign: "middle",
      hAlign: "space-between",
      colSpacing: "none"
    }, /*#__PURE__*/_react.default.createElement(_uiGrid.GridRow, null, /*#__PURE__*/_react.default.createElement(_uiGrid.GridCol, null, /*#__PURE__*/_react.default.createElement(_uiButtons.Button, {
      onClick: () => this.prevError(),
      margin: "0 small 0 0",
      "aria-label": "Previous"
    }, "Prev"), /*#__PURE__*/_react.default.createElement(_uiButtons.Button, {
      onClick: () => this.nextError()
    }, "Next")), /*#__PURE__*/_react.default.createElement(_uiGrid.GridCol, {
      width: "auto"
    }, /*#__PURE__*/_react.default.createElement(_uiButtons.Button, {
      type: "submit",
      variant: "primary",
      disabled: !this.state.formStateValid
    }, "Apply"))))))), this.state.errors.length === 0 && !this.state.checking && /*#__PURE__*/_react.default.createElement(_uiView.View, null, /*#__PURE__*/_react.default.createElement(_uiText.Text, null, /*#__PURE__*/_react.default.createElement("p", null, "No accessibility issues were detected.")), /*#__PURE__*/_react.default.createElement(_placeholderSvg.default, null)), this.state.checking && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_reactAriaLive.LiveMessage, {
      message: "Checking for accessibility issues",
      "aria-live": "polite"
    }), /*#__PURE__*/_react.default.createElement(_uiSpinner.Spinner, {
      title: "Checking for accessibility issues",
      margin: "medium auto"
    })))));
  }

  renderField(f) {
    const disabled = !!f.disabledIf && f.disabledIf(this.state.formState);

    switch (true) {
      case !!f.options:
        return /*#__PURE__*/_react.default.createElement(_uiSimpleSelect.SimpleSelect, {
          disabled: disabled,
          onChange: (e, option) => {
            this.updateFormState({
              target: {
                name: f.dataKey,
                value: option.value
              }
            });
          },
          value: this.state.formState[f.dataKey],
          renderLabel: () => f.label
        }, f.options.map(o => /*#__PURE__*/_react.default.createElement(_uiSimpleSelect.SimpleSelect.Option, {
          key: o[0],
          id: o[0],
          value: o[0]
        }, o[1])));

      case f.checkbox:
        return /*#__PURE__*/_react.default.createElement(_uiCheckbox.Checkbox, {
          label: f.label,
          name: f.dataKey,
          checked: this.state.formState[f.dataKey],
          onChange: this.updateFormState,
          disabled: disabled
        });

      case f.color:
        return /*#__PURE__*/_react.default.createElement(_colorField.default, {
          label: f.label,
          name: f.dataKey,
          value: this.state.formState[f.dataKey],
          onChange: this.updateFormState
        });

      case f.textarea:
        return /*#__PURE__*/_react.default.createElement(_uiTextArea.TextArea, {
          label: f.label,
          name: f.dataKey,
          value: this.state.formState[f.dataKey],
          onChange: this.updateFormState,
          disabled: disabled
        });

      default:
        return /*#__PURE__*/_react.default.createElement(_uiTextInput.TextInput, {
          label: f.label,
          name: f.dataKey,
          value: this.state.formState[f.dataKey],
          onChange: this.updateFormState,
          disabled: disabled
        });
    }
  }

}

exports.default = Checker;
Checker.defaultProps = {
  additionalRules: []
};
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _smallTextContrast = _interopRequireDefault(require("../small-text-contrast"));

let el;
beforeEach(() => {
  el = document.createElement("div");
});
describe("test", () => {
  test("returns true if element does not contain any  text", () => {
    const elem = document.createElement("div");
    elem.style.fontSize = "10px";
    elem.style.backgroundColor = "#fff";
    elem.style.color = "#fff";
    expect(_smallTextContrast.default.test(elem)).toBe(true);
  });
  test("returns true if disabled by the config", () => {
    const elem = document.createElement("div");
    elem.style.fontSize = "10px";
    elem.style.backgroundColor = "#fff";
    elem.style.color = "#fff";
    elem.textContent = "disabled";
    expect(_smallTextContrast.default.test(elem, {
      disableContrastCheck: true
    })).toBe(true);
  });
  test("returns true if the only content of a text node is a link", () => {
    const elem = document.createElement("div");
    const link = document.createElement("a");
    elem.style.fontSize = "10px";
    elem.style.backgroundColor = "#fff";
    elem.style.color = "#eee";
    link.setAttribute("href", "http://example.com");
    link.textContent = "Example Site";
    elem.appendChild(link);
    expect(_smallTextContrast.default.test(elem)).toBe(true);
  });
  test("returns false if large text does not have high enough contrast", () => {
    const elem = document.createElement("div");
    elem.style.fontSize = "10px";
    elem.style.backgroundColor = "#fff";
    elem.style.color = "#eee";
    elem.textContent = "hello";
    expect(_smallTextContrast.default.test(elem)).toBe(false);
  });
});
describe("data", () => {
  test("returns the color matching the elements existing color", () => {
    el.style.color = "blue";
    expect(_smallTextContrast.default.data(el)).toEqual({
      color: "blue"
    });
  });
});
describe("form", () => {
  test("returns the proper object", () => {
    expect(_smallTextContrast.default.form()).toMatchSnapshot();
  });
});
describe("update", () => {
  test("returns same element", () => {
    expect(_smallTextContrast.default.update(el, {})).toBe(el);
  });
  test("sets the elements style color based on the color option", () => {
    _smallTextContrast.default.update(el, {
      color: "#fff"
    });

    expect(el.style.color).toBe("rgb(255, 255, 255)"); // Seems like this always comes back as rgb
  });
  test("sets the mce-style data attribute with the updated color", () => {
    _smallTextContrast.default.update(el, {
      color: "#fff"
    });

    expect(el.getAttribute("data-mce-style")).toBe("color:#fff;");
  });
  test("converts rgb to hex prior to setting it on the mce-style data attribute", () => {
    _smallTextContrast.default.update(el, {
      color: "rgb(255, 255, 255)"
    });

    expect(el.getAttribute("data-mce-style")).toBe("color:#ffffff;");
  });
  test("maintains other style properties set on the mce-style data attribute", () => {
    el.setAttribute("data-mce-style", "background-color: #000000;");

    _smallTextContrast.default.update(el, {
      color: "rgb(255, 255, 255)"
    });

    expect(el.getAttribute("data-mce-style")).toBe("background-color:#000000;color:#ffffff;");
  });
});
describe("message", () => {
  test("returns the proper message", () => {
    expect(_smallTextContrast.default.message()).toMatchSnapshot();
  });
});
describe("why", () => {
  test("returns the proper why message", () => {
    expect(_smallTextContrast.default.why()).toMatchSnapshot();
  });
});
describe("linkText", () => {
  test("returns the proper linkText message", () => {
    expect(_smallTextContrast.default.linkText()).toMatchSnapshot();
  });
});
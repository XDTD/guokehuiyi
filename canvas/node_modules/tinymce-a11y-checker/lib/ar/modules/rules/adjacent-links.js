import formatMessage from "../format-message";

const shouldMergeAnchors = (elem1, elem2) => {
  if (!elem1 || !elem2 || elem1.tagName !== "A" || elem2.tagName !== "A") {
    return false;
  }

  return elem1.getAttribute("href") === elem2.getAttribute("href");
};

const notWhitespace = node => {
  return node.nodeType !== Node.TEXT_NODE || node.textContent.match(/\S/);
};

const onlyChild = parent => {
  const child = parent.firstElementChild;

  if (!child) {
    return null;
  }

  if ([...parent.childNodes].filter(notWhitespace).length > 1) {
    return null;
  }

  return child;
};

const solitaryDescendantImage = link => {
  let parent = link;
  let child = onlyChild(parent);

  while (child) {
    if (child.tagName === "IMG") {
      return child;
    }

    parent = child;
    child = onlyChild(parent);
  }

  return null;
};

const normalizeText = text => {
  // normalize whitespace and trim leading and trailing whitespace
  return text.replace(/\s+/g, " ").trim();
};

const descendantImageWithRedundantAltText = (left, right) => {
  let leftImage = solitaryDescendantImage(left);
  let rightImage = solitaryDescendantImage(right);

  if (leftImage && !rightImage && normalizeText(leftImage.getAttribute("alt")) === normalizeText(right.textContent)) {
    return leftImage;
  } else if (rightImage && !leftImage && normalizeText(rightImage.getAttribute("alt")) === normalizeText(left.textContent)) {
    return rightImage;
  } else {
    return null;
  }
};

export default {
  id: "adjacent-links",
  test: function (elem) {
    if (elem.tagName != "A") {
      return true;
    }

    return !shouldMergeAnchors(elem, elem.nextElementSibling);
  },
  data: elem => {
    return {
      combine: false
    };
  },
  form: () => [{
    label: "\u062F\u0645\u062C \u0627\u0644\u0631\u0648\u0627\u0628\u0637",
    checkbox: true,
    dataKey: "combine"
  }],
  update: function (elem, data) {
    const rootElem = elem.parentNode;

    if (data.combine) {
      const next = elem.nextElementSibling; // https://www.w3.org/TR/WCAG20-TECHS/H2.html

      const image = descendantImageWithRedundantAltText(elem, next);

      if (image) {
        image.setAttribute("alt", "");
      }

      rootElem.removeChild(next);
      elem.innerHTML += ` ${next.innerHTML}`;
    }

    return elem;
  },
  rootNode: function (elem) {
    return elem.parentNode;
  },
  message: () => "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0627\u0644\u0631\u0648\u0627\u0628\u0637 \u0627\u0644\u0645\u062A\u062C\u0627\u0648\u0631\u0629 \u0628\u0646\u0641\u0633 \u0639\u0646\u0648\u0627\u0646 URL \u0631\u0627\u0628\u0637\u064B\u0627 \u0641\u0631\u062F\u064A\u064B\u0627.",
  why: () => "\u062A\u0646\u062A\u0642\u0644 \u0644\u0648\u062D\u0627\u062A \u0627\u0644\u0645\u0641\u0627\u062A\u064A\u062D \u0625\u0644\u0649 \u0627\u0644\u0631\u0648\u0627\u0628\u0637 \u0628\u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0645\u0641\u062A\u0627\u062D Tab. \u064A\u0645\u0643\u0646 \u0623\u0646 \u064A\u0633\u0628\u0628 \u0631\u0627\u0628\u0637\u0627\u0646 \u0645\u062A\u062C\u0627\u0648\u0631\u0627\u0646 \u064A\u0648\u062C\u0647\u0627\u0646 \u0625\u0644\u0649 \u0646\u0641\u0633 \u0627\u0644\u0648\u062C\u0647\u0629 \u0641\u064A \u0625\u0631\u0628\u0627\u0643 \u0645\u0633\u062A\u062E\u062F\u0645\u064A \u0644\u0648\u062D\u0629 \u0627\u0644\u0645\u0641\u0627\u062A\u064A\u062D.",
  link: "https://www.w3.org/TR/WCAG20-TECHS/H2.html",
  linkText: () => "\u0645\u0639\u0631\u0641\u0629 \u0627\u0644\u0645\u0632\u064A\u062F \u0639\u0646 \u0627\u0644\u0627\u0631\u062A\u0628\u0627\u0637\u0627\u062A \u0627\u0644\u0645\u062A\u062C\u0627\u0648\u0631\u0629"
};
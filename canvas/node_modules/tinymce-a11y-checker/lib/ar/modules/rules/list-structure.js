import formatMessage from "../format-message";
/**
 * Handles:
 * * list item
 * - list item
 * 1. list item
 * 1) list item
 * i. list item
 * a. list Item
 */

const orderedChars = `[A-Z]+|[a-z]+|[0-9]+`;
const bulletMarkers = ["*", "-"].map(c => "\\" + c).join("|");
const orderedMarkers = [".", ")"].map(c => "\\" + c).join("|");
const listLikeRegex = new RegExp(`^\\s*(?:(?:[${bulletMarkers}])|(?:(${orderedChars})[${orderedMarkers}]))\\s+`);

const isTextList = elem => elem.tagName === "P" && listLikeRegex.test(elem.textContent);

const cleanListItem = elem => {
  if (elem.nodeType === Node.TEXT_NODE) {
    elem.textContent = elem.textContent.replace(listLikeRegex, "");
    return true;
  }

  for (let childElement of elem.childNodes) {
    let found = cleanListItem(childElement);
    if (found) return true;
  }

  return false;
};

const moveContents = (from, to) => {
  while (from.firstChild) to.appendChild(from.firstChild);
};

const splitParagraphsByBreak = paragraph => {
  let appended = [];
  let child = paragraph.firstChild;

  while (child) {
    let currentParent = appended[appended.length - 1];

    if (child.tagName === "BR") {
      appended.push(document.createElement("p"));
      child = child.nextSibling;
      continue;
    }

    if (currentParent) currentParent.appendChild(child);
    child = child.nextSibling;
  }

  const nextNode = paragraph.nextSibling;
  appended.forEach(newParagraph => {
    paragraph.parentNode.insertBefore(newParagraph, nextNode);
  });
};

export default {
  id: "list-structure",
  test: function (elem) {
    const isList = isTextList(elem);
    const isFirst = elem.previousElementSibling ? !isTextList(elem.previousElementSibling) : true;
    return !(isList && isFirst);
  },
  data: elem => {
    const match = elem.textContent.match(listLikeRegex);
    return {
      orderedStart: match[1] ? match[1] : null,
      formatAsList: false
    };
  },
  form: () => [{
    label: "\u0627\u0644\u062A\u0646\u0633\u064A\u0642 \u0641\u064A \u0635\u0648\u0631\u0629 \u0642\u0627\u0626\u0645\u0629",
    checkbox: true,
    dataKey: "formatAsList"
  }],
  update: function (elem, data) {
    const rootElem = elem.parentNode;

    if (data.formatAsList) {
      const isOrdered = Boolean(data.orderedStart);
      const listContainer = document.createElement(isOrdered ? "ol" : "ul");

      if (isOrdered) {
        listContainer.setAttribute("type", data.orderedStart);
        listContainer.setAttribute("start", data.orderedStart);
      }

      let cursor = elem;

      while (cursor) {
        if (!isTextList(cursor)) break;
        const nextIsOrdered = Boolean(cursor.textContent.match(listLikeRegex)[1]);
        if (isOrdered !== nextIsOrdered) break;
        splitParagraphsByBreak(cursor);
        const li = document.createElement("li");
        listContainer.appendChild(li);
        moveContents(cursor, li);
        let nextSibling = cursor.nextElementSibling; // Remove the now empty siblings
        // Skip elem because elem is replaced later.

        if (cursor !== elem) cursor.parentNode.removeChild(cursor);
        cursor = nextSibling;
        cleanListItem(li);
      }

      rootElem.replaceChild(listContainer, elem);
      return listContainer;
    }

    return elem;
  },
  rootNode: function (elem) {
    return elem.parentNode;
  },
  message: () => "\u064A\u062C\u0628 \u062A\u0646\u0633\u064A\u0642 \u0627\u0644\u0642\u0648\u0627\u0626\u0645 \u0641\u064A \u0635\u0648\u0631\u0629 \u0642\u0648\u0627\u0626\u0645",
  why: () => "\u0639\u0646\u062F \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0639\u0644\u0627\u0645\u0629 \u0627\u0644\u062A\u064A \u062A\u0646\u0633\u0642 \u0627\u0644\u0639\u0646\u0627\u0635\u0631 \u0641\u064A \u0635\u0648\u0631\u0629 \u0642\u0648\u0627\u0626\u0645  \u0648\u0644\u0643\u0646\u0647\u0627 \u0644\u0627 \u062A\u0634\u064A\u0631 \u0625\u0644\u0649 \u0639\u0644\u0627\u0642\u0629 \u0627\u0644\u0642\u0648\u0627\u0626\u0645\u060C \u0641\u0642\u062F \u064A\u0648\u0627\u062C\u0647 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u0648\u0646 \u0635\u0639\u0648\u0628\u0629 \u0641\u064A \u0627\u0644\u062A\u0646\u0642\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062A.",
  link: "https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/H48",
  linkText: () => "\u0645\u0639\u0631\u0641\u0629 \u0627\u0644\u0645\u0632\u064A\u062F \u0639\u0646 \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0642\u0648\u0627\u0626\u0645"
};
import formatMessage from "../format-message";
import { changeTag } from "../utils/dom";
/* Headings Sequence rule
 * this rule is ensuring that heading tags (H1-H6) are layed out in sequential
 * order for organizing your site.
 *
 * this rule only looks at H2-H6 headings. all other tags pass.
 * this rule will walk 'up-down' the dom to find the heading tag that is
 * laid out previous to the heading tag being checked.
 * this rule will see if the heading tag number of the previous heading is
 * one more than one less than it's own heading tag and will fail if so
 * this rule will check to see if there is no previous heading tag and will
 * fail the test if so
 */

const isHtag = elem => {
  const allHTags = {
    H1: true,
    H2: true,
    H3: true,
    H4: true,
    H5: true,
    H6: true
  };
  return elem && allHTags[elem.tagName] === true;
}; // gets the H tag that is furthest down in the tree from elem(inclusive)


const getHighestOrderHForElem = elem => {
  const allHForElem = Array.prototype.slice.call(elem.querySelectorAll("H1,H2,H3,H4,H5,H6"));

  if (allHForElem.length > 0) {
    return allHForElem.reverse()[0];
  }

  if (isHtag(elem)) {
    return elem;
  }

  return void 0;
}; // gets all siblings of elem that come before the elem ordered by nearest to
// elem


const getPrevSiblings = elem => {
  let ret = [];

  if (!elem || !elem.parentElement || !elem.parentElement.children) {
    return ret;
  }

  const sibs = elem.parentElement.children;

  for (var i = 0; i < sibs.length; i++) {
    if (sibs[i] === elem) {
      break;
    }

    ret.unshift(sibs[i]);
  }

  return ret;
};

const searchPrevSiblings = elem => {
  const sibs = getPrevSiblings(elem);
  let ret;

  for (let i = 0; i < sibs.length; i++) {
    ret = getHighestOrderHForElem(sibs[i]);

    if (ret) {
      break;
    }
  }

  return ret;
};

const _walkUpTree = elem => {
  let ret;

  if (!elem || elem.tagName === "BODY") {
    return void 0;
  }

  if (isHtag(elem)) {
    return elem;
  }

  ret = searchPrevSiblings(elem);

  if (!ret) {
    ret = _walkUpTree(elem.parentElement);
  }

  return ret;
};

const walkUpTree = elem => {
  let ret = searchPrevSiblings(elem);

  if (!ret) {
    ret = _walkUpTree(elem.parentElement);
  }

  return ret;
};

const getPriorHeading = elem => {
  return walkUpTree(elem);
}; // a valid prior H tag is greater or equal to one less than current


const getValidHeadings = elem => {
  const hNum = +elem.tagName.substring(1);
  const ret = {};

  for (var i = hNum - 1; i <= 6; i++) {
    ret[`H${i}`] = true;
  }

  return ret;
};

export default {
  id: "headings-sequence",
  test: elem => {
    const testTags = {
      H2: true,
      H3: true,
      H4: true,
      H5: true,
      H6: true
    };

    if (testTags[elem.tagName] !== true) {
      return true;
    }

    const validHeadings = getValidHeadings(elem);
    const priorHeading = getPriorHeading(elem);

    if (priorHeading) {
      return validHeadings[priorHeading.tagName];
    }

    return true;
  },
  data: elem => {
    return {
      action: "nothing"
    };
  },
  form: () => [{
    label: "A\xF0ger\xF0 sem gr\xEDpa \xE1 til:",
    dataKey: "action",
    options: [["nothing", "Halda \xF3breyttu"], ["elem", "Lagf\xE6ra stigveldi hauss"], ["modify", "Fjarl\xE6gja st\xEDl fyrirsagnar"]]
  }],
  update: (elem, data) => {
    if (!data || !data.action || data.action === "nothing") {
      return elem;
    }

    switch (data.action) {
      case "elem":
        {
          const priorH = getPriorHeading(elem);
          const hIdx = priorH ? +priorH.tagName.substring(1) : 0;
          return changeTag(elem, `H${hIdx + 1}`);
        }

      case "modify":
        {
          return changeTag(elem, "p");
        }
    }
  },
  message: () => "Ekki \xE6tti a\xF0 sleppa stigi hauss.",
  why: () => "Notendur sem sj\xE1 fara hratt \xED gegnum vefs\xED\xF0ur og leita a\xF0 st\xF3rum e\xF0a feitletru\xF0um hausum. Skj\xE1lesarar n\xFDta s\xE9r hausa til a\xF0 skilja samhengi. Hausar \xE6ttu a\xF0 vera uppbygg\xF0ir \xE1 r\xE9ttan h\xE1tt.",
  link: "https://www.w3.org/TR/WCAG20-TECHS/G141.html",
  linkText: () => "F\xE1 a\xF0 vita meira um skipulag \xE1 s\xED\xF0uhausum"
};
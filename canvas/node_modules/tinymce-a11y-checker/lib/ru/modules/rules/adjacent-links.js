import formatMessage from "../format-message";

const shouldMergeAnchors = (elem1, elem2) => {
  if (!elem1 || !elem2 || elem1.tagName !== "A" || elem2.tagName !== "A") {
    return false;
  }

  return elem1.getAttribute("href") === elem2.getAttribute("href");
};

const notWhitespace = node => {
  return node.nodeType !== Node.TEXT_NODE || node.textContent.match(/\S/);
};

const onlyChild = parent => {
  const child = parent.firstElementChild;

  if (!child) {
    return null;
  }

  if ([...parent.childNodes].filter(notWhitespace).length > 1) {
    return null;
  }

  return child;
};

const solitaryDescendantImage = link => {
  let parent = link;
  let child = onlyChild(parent);

  while (child) {
    if (child.tagName === "IMG") {
      return child;
    }

    parent = child;
    child = onlyChild(parent);
  }

  return null;
};

const normalizeText = text => {
  // normalize whitespace and trim leading and trailing whitespace
  return text.replace(/\s+/g, " ").trim();
};

const descendantImageWithRedundantAltText = (left, right) => {
  let leftImage = solitaryDescendantImage(left);
  let rightImage = solitaryDescendantImage(right);

  if (leftImage && !rightImage && normalizeText(leftImage.getAttribute("alt")) === normalizeText(right.textContent)) {
    return leftImage;
  } else if (rightImage && !leftImage && normalizeText(rightImage.getAttribute("alt")) === normalizeText(left.textContent)) {
    return rightImage;
  } else {
    return null;
  }
};

export default {
  id: "adjacent-links",
  test: function (elem) {
    if (elem.tagName != "A") {
      return true;
    }

    return !shouldMergeAnchors(elem, elem.nextElementSibling);
  },
  data: elem => {
    return {
      combine: false
    };
  },
  form: () => [{
    label: "\u041E\u0431\u044A\u0435\u0434\u0438\u043D\u0438\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0438",
    checkbox: true,
    dataKey: "combine"
  }],
  update: function (elem, data) {
    const rootElem = elem.parentNode;

    if (data.combine) {
      const next = elem.nextElementSibling; // https://www.w3.org/TR/WCAG20-TECHS/H2.html

      const image = descendantImageWithRedundantAltText(elem, next);

      if (image) {
        image.setAttribute("alt", "");
      }

      rootElem.removeChild(next);
      elem.innerHTML += ` ${next.innerHTML}`;
    }

    return elem;
  },
  rootNode: function (elem) {
    return elem.parentNode;
  },
  message: () => "\u0421\u043E\u0441\u0435\u0434\u043D\u0438\u0435 \u0441\u0441\u044B\u043B\u043A\u0438 \u0441 \u043E\u0434\u043D\u0438\u043C \u0438 \u0442\u0435\u043C \u0436\u0435 URL-\u0430\u0434\u0440\u0435\u0441\u043E\u043C \u0434\u043E\u043B\u0436\u043D\u044B \u0431\u044B\u0442\u044C \u043E\u0431\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u044B \u0432 \u043E\u0434\u043D\u0443 \u0441\u0441\u044B\u043B\u043A\u0443.",
  why: () => "\u041A\u043B\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044E\u0442\u0441\u044F \u0434\u043B\u044F \u043F\u0435\u0440\u0435\u0445\u043E\u0434\u0430 \u043F\u043E \u0441\u0441\u044B\u043B\u043A\u0430\u043C \u0441 \u043F\u043E\u043C\u043E\u0449\u044C\u044E \u043A\u043B\u0430\u0432\u0438\u0448\u0438 Tab. \u0414\u0432\u0435 \u0441\u043E\u0441\u0435\u0434\u043D\u0438\u0435 \u0441\u0441\u044B\u043B\u043A\u0438, \u0432\u0435\u0434\u0443\u0449\u0438\u0435 \u0432 \u043E\u0434\u043D\u043E \u0438 \u0442\u043E \u0436\u0435 \u043C\u0435\u0441\u0442\u043E, \u043C\u043E\u0433\u0443\u0442 \u0437\u0430\u043F\u0443\u0442\u044B\u0432\u0430\u0442\u044C \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439 \u043A\u043B\u0430\u0432\u0438\u0430\u0442\u0443\u0440.",
  link: "https://www.w3.org/TR/WCAG20-TECHS/H2.html",
  linkText: () => "\u0423\u0437\u043D\u0430\u0442\u044C \u0431\u043E\u043B\u044C\u0448\u0435 \u043E \u0441\u043E\u0441\u0435\u0434\u043D\u0438\u0445 \u0441\u0441\u044B\u043B\u043A\u0430\u0445"
};
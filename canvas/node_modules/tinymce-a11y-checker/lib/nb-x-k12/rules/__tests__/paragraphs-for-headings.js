"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _paragraphsForHeadings = _interopRequireDefault(require("../paragraphs-for-headings"));

let el;
beforeEach(() => {
  el = document.createElement("h2");
});
describe("test", () => {
  test("return true on non-H? element", () => {
    expect(_paragraphsForHeadings.default.test(document.createElement("div"))).toBeTruthy();
  });
  test("return true if H? length is less than max", () => {
    const moreThanMaxString = Array(_paragraphsForHeadings.default["max-heading-length"] + 2).join("x");
    el.appendChild(document.createTextNode(moreThanMaxString));
    expect(_paragraphsForHeadings.default.test(el)).toBeFalsy();
  });
  test("return false if H? length is more than max", () => {
    const lessThanMaxString = "x";
    el.appendChild(document.createTextNode(lessThanMaxString));
    expect(_paragraphsForHeadings.default.test(el)).toBeTruthy();
  });
});
describe("data", () => {
  test("returns the proper object", () => {
    expect(_paragraphsForHeadings.default.data()).toMatchSnapshot();
  });
});
describe("form", () => {
  test("returns the appropriate object", () => {
    expect(_paragraphsForHeadings.default.form()).toMatchSnapshot();
  });
});
describe("update", () => {
  test("returns same element", () => {
    expect(_paragraphsForHeadings.default.update(el, {})).toBe(el);
  });
  test("returns P elment if 'change' is true", () => {
    document.createElement("body").appendChild(el);
    expect(_paragraphsForHeadings.default.update(el, {
      change: true
    }).tagName).toBe("P");
  });
});
describe("message", () => {
  test("returns the proper message", () => {
    expect(_paragraphsForHeadings.default.message()).toMatchSnapshot();
  });
});
describe("why", () => {
  test("returns the proper why message", () => {
    expect(_paragraphsForHeadings.default.why()).toMatchSnapshot();
  });
});
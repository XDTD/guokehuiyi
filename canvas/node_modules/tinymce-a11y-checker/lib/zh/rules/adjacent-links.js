"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formatMessage = _interopRequireDefault(require("../format-message"));

const shouldMergeAnchors = (elem1, elem2) => {
  if (!elem1 || !elem2 || elem1.tagName !== "A" || elem2.tagName !== "A") {
    return false;
  }

  return elem1.getAttribute("href") === elem2.getAttribute("href");
};

const notWhitespace = node => {
  return node.nodeType !== Node.TEXT_NODE || node.textContent.match(/\S/);
};

const onlyChild = parent => {
  const child = parent.firstElementChild;

  if (!child) {
    return null;
  }

  if ([...parent.childNodes].filter(notWhitespace).length > 1) {
    return null;
  }

  return child;
};

const solitaryDescendantImage = link => {
  let parent = link;
  let child = onlyChild(parent);

  while (child) {
    if (child.tagName === "IMG") {
      return child;
    }

    parent = child;
    child = onlyChild(parent);
  }

  return null;
};

const normalizeText = text => {
  // normalize whitespace and trim leading and trailing whitespace
  return text.replace(/\s+/g, " ").trim();
};

const descendantImageWithRedundantAltText = (left, right) => {
  let leftImage = solitaryDescendantImage(left);
  let rightImage = solitaryDescendantImage(right);

  if (leftImage && !rightImage && normalizeText(leftImage.getAttribute("alt")) === normalizeText(right.textContent)) {
    return leftImage;
  } else if (rightImage && !leftImage && normalizeText(rightImage.getAttribute("alt")) === normalizeText(left.textContent)) {
    return rightImage;
  } else {
    return null;
  }
};

var _default = {
  id: "adjacent-links",
  test: function (elem) {
    if (elem.tagName != "A") {
      return true;
    }

    return !shouldMergeAnchors(elem, elem.nextElementSibling);
  },
  data: elem => {
    return {
      combine: false
    };
  },
  form: () => [{
    label: "\u5408\u5E76\u94FE\u63A5",
    checkbox: true,
    dataKey: "combine"
  }],
  update: function (elem, data) {
    const rootElem = elem.parentNode;

    if (data.combine) {
      const next = elem.nextElementSibling; // https://www.w3.org/TR/WCAG20-TECHS/H2.html

      const image = descendantImageWithRedundantAltText(elem, next);

      if (image) {
        image.setAttribute("alt", "");
      }

      rootElem.removeChild(next);
      elem.innerHTML += ` ${next.innerHTML}`;
    }

    return elem;
  },
  rootNode: function (elem) {
    return elem.parentNode;
  },
  message: () => "\u5177\u6709\u76F8\u540C URL \u7684\u76F8\u90BB\u94FE\u63A5\u5E94\u8BE5\u4E3A\u4E00\u4E2A\u5355\u94FE\u63A5\u3002",
  why: () => "\u952E\u76D8\u4F7F\u7528 Tab \u952E\u5BFC\u822A\u81F3\u94FE\u63A5\u3002\u8F6C\u81F3\u76F8\u540C\u76EE\u7684\u5730\u7684\u4E24\u4E2A\u76F8\u90BB\u94FE\u63A5\u53EF\u4EE5\u5BF9\u952E\u76D8\u7528\u6237\u9020\u6210\u6DF7\u6DC6\u3002",
  link: "https://www.w3.org/TR/WCAG20-TECHS/H2.html",
  linkText: () => "\u8BE6\u7EC6\u4E86\u89E3\u76F8\u90BB\u94FE\u63A5"
};
exports.default = _default;
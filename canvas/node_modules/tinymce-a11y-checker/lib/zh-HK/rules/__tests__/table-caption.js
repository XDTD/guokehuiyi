"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _tableCaption = _interopRequireDefault(require("../table-caption"));

let el;
beforeEach(() => {
  el = document.createElement("table");
});
describe("test", () => {
  test("returns true if the element is not a table", () => {
    const elem = document.createElement("div");
    expect(_tableCaption.default.test(elem)).toBe(true);
  });
  test("returns true if the element has a non-empty caption", () => {
    const caption = document.createElement("caption");
    caption.textContent = "Some Caption";
    el.appendChild(caption);
    expect(_tableCaption.default.test(el)).toBe(true);
  });
  test("returns false if the element has an empty caption", () => {
    const caption = document.createElement("caption");
    el.appendChild(caption);
    expect(_tableCaption.default.test(el)).toBe(false);
  });
  test("returns false if the element has a whitespace only caption", () => {
    const caption = document.createElement("caption");
    caption.textContent = " ";
    el.appendChild(caption);
    expect(_tableCaption.default.test(el)).toBe(false);
  });
  test("returns false if the element has no caption", () => {
    expect(_tableCaption.default.test(el)).toBe(false);
  });
});
describe("data", () => {
  test("returns empty caption object", () => {
    expect(_tableCaption.default.data()).toMatchSnapshot();
  });
});
describe("form", () => {
  test("returns the appropriate object", () => {
    expect(_tableCaption.default.form()).toMatchSnapshot();
  });
});
describe("update", () => {
  test("returns same element", () => {
    expect(_tableCaption.default.update(el, {})).toBe(el);
  });
  test("updates the existing  caption if one exists", () => {
    const caption = document.createElement("caption");
    caption.textContent = " ";
    el.appendChild(caption);

    _tableCaption.default.update(el, {
      caption: "A caption"
    });

    expect(caption.textContent).toBe("A caption");
  });
});
describe("message", () => {
  test("returns the proper message", () => {
    expect(_tableCaption.default.message()).toMatchSnapshot();
  });
});
describe("why", () => {
  test("returns the proper why message", () => {
    expect(_tableCaption.default.why()).toMatchSnapshot();
  });
});
describe("linkText", () => {
  test("returns the proper linkText message", () => {
    expect(_tableCaption.default.linkText()).toMatchSnapshot();
  });
});
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _tableHeaderScope = _interopRequireDefault(require("../table-header-scope"));

let el;
beforeEach(() => {
  el = document.createElement("th");
});
describe("test", () => {
  test("returns true if the element is not a th", () => {
    const elem = document.createElement("td");
    expect(_tableHeaderScope.default.test(elem)).toBe(true);
  });
  test("returns true if the scope attribute is valid", () => {
    el.setAttribute("scope", "row");
    expect(_tableHeaderScope.default.test(el)).toBe(true);
    el.setAttribute("scope", "col");
    expect(_tableHeaderScope.default.test(el)).toBe(true);
    el.setAttribute("scope", "rowgroup");
    expect(_tableHeaderScope.default.test(el)).toBe(true);
    el.setAttribute("scope", "colgroup");
    expect(_tableHeaderScope.default.test(el)).toBe(true);
  });
  test("returns false if the scope attribute is not valid", () => {
    el.setAttribute("scope", "invalid");
    expect(_tableHeaderScope.default.test(el)).toBe(false);
  });
  test("returns false if there is no scope", () => {
    expect(_tableHeaderScope.default.test(el)).toBe(false);
  });
});
describe("data", () => {
  test("returns the existing scope if present", () => {
    el.setAttribute("scope", "colgroup");
    expect(_tableHeaderScope.default.data(el)).toEqual({
      scope: "colgroup"
    });
  });
  test("returns none if there is no existing scope", () => {
    expect(_tableHeaderScope.default.data(el)).toEqual({
      scope: "none"
    });
  });
});
describe("form", () => {
  test("returns the proper object", () => {
    expect(_tableHeaderScope.default.form()).toMatchSnapshot();
  });
});
describe("update", () => {
  test("returns same element", () => {
    expect(_tableHeaderScope.default.update(el, {})).toBe(el);
  });
  test("removes scope attribute when header === none", () => {
    el.setAttribute("scope", "colgroup");

    _tableHeaderScope.default.update(el, {
      header: "none"
    });

    expect(el.getAttribute("scope")).toBeFalsy();
  });
  test("sets the scope attribute based on the scope property", () => {
    _tableHeaderScope.default.update(el, {
      scope: "col"
    });

    expect(el.getAttribute("scope")).toBe("col");
  });
});
describe("message", () => {
  test("returns the proper message", () => {
    expect(_tableHeaderScope.default.message()).toMatchSnapshot();
  });
});
describe("why", () => {
  test("returns the proper message", () => {
    expect(_tableHeaderScope.default.why()).toMatchSnapshot();
  });
});
describe("linkText", () => {
  test("returns the proper linkText message", () => {
    expect(_tableHeaderScope.default.linkText()).toMatchSnapshot();
  });
});
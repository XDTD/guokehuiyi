"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formatMessage = _interopRequireDefault(require("../format-message"));

const shouldMergeAnchors = (elem1, elem2) => {
  if (!elem1 || !elem2 || elem1.tagName !== "A" || elem2.tagName !== "A") {
    return false;
  }

  return elem1.getAttribute("href") === elem2.getAttribute("href");
};

const notWhitespace = node => {
  return node.nodeType !== Node.TEXT_NODE || node.textContent.match(/\S/);
};

const onlyChild = parent => {
  const child = parent.firstElementChild;

  if (!child) {
    return null;
  }

  if ([...parent.childNodes].filter(notWhitespace).length > 1) {
    return null;
  }

  return child;
};

const solitaryDescendantImage = link => {
  let parent = link;
  let child = onlyChild(parent);

  while (child) {
    if (child.tagName === "IMG") {
      return child;
    }

    parent = child;
    child = onlyChild(parent);
  }

  return null;
};

const normalizeText = text => {
  // normalize whitespace and trim leading and trailing whitespace
  return text.replace(/\s+/g, " ").trim();
};

const descendantImageWithRedundantAltText = (left, right) => {
  let leftImage = solitaryDescendantImage(left);
  let rightImage = solitaryDescendantImage(right);

  if (leftImage && !rightImage && normalizeText(leftImage.getAttribute("alt")) === normalizeText(right.textContent)) {
    return leftImage;
  } else if (rightImage && !leftImage && normalizeText(rightImage.getAttribute("alt")) === normalizeText(left.textContent)) {
    return rightImage;
  } else {
    return null;
  }
};

var _default = {
  id: "adjacent-links",
  test: function (elem) {
    if (elem.tagName != "A") {
      return true;
    }

    return !shouldMergeAnchors(elem, elem.nextElementSibling);
  },
  data: elem => {
    return {
      combine: false
    };
  },
  form: () => [{
    label: "\u30EA\u30F3\u30AF\u3092\u30DE\u30FC\u30B8\u3059\u308B",
    checkbox: true,
    dataKey: "combine"
  }],
  update: function (elem, data) {
    const rootElem = elem.parentNode;

    if (data.combine) {
      const next = elem.nextElementSibling; // https://www.w3.org/TR/WCAG20-TECHS/H2.html

      const image = descendantImageWithRedundantAltText(elem, next);

      if (image) {
        image.setAttribute("alt", "");
      }

      rootElem.removeChild(next);
      elem.innerHTML += ` ${next.innerHTML}`;
    }

    return elem;
  },
  rootNode: function (elem) {
    return elem.parentNode;
  },
  message: () => "\u540C\u3058URL\u3092\u6301\u3064\u96A3\u63A5\u30EA\u30F3\u30AF\u306F1\u3064\u306E\u30EA\u30F3\u30AF\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002",
  why: () => "\u30AD\u30FC\u30DC\u30FC\u30C9\u306F Tab \u30AD\u30FC\u3092\u4F7F\u7528\u3057\u3066\u30EA\u30F3\u30AF\u306B\u30CA\u30D3\u30B2\u30FC\u30C8\u3057\u307E\u3059\u3002\u540C\u3058\u5B9B\u5148\u306B\u5411\u304B\u30462\u3064\u306E\u96A3\u63A5\u30EA\u30F3\u30AF\u304C\u3042\u308B\u3068\u3001\u30AD\u30FC\u30DC\u30FC\u30C9\u30E6\u30FC\u30B6\u30FC\u306B\u6DF7\u4E71\u3092\u62DB\u304F\u53EF\u80FD\u6027\u304C\u3042\u308A\u307E\u3059\u3002",
  link: "https://www.w3.org/TR/WCAG20-TECHS/H2.html",
  linkText: () => "\u96A3\u63A5\u30EA\u30F3\u30AF\u306E\u8A73\u7D30"
};
exports.default = _default;
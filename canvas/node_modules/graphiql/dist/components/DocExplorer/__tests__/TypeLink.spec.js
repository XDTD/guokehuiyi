"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _chai = require("chai");

var _TypeLink = _interopRequireDefault(require("../TypeLink"));

var _graphql = require("graphql");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  Copyright (c) 2019 GraphQL Contributors.
 *
 *  This source code is licensed under the MIT license found in the
 *  LICENSE file in the root directory of this source tree.
 */
var nonNullType = new _graphql.GraphQLNonNull(_graphql.GraphQLString);
var listType = new _graphql.GraphQLList(_graphql.GraphQLString);
describe('TypeLink', function () {
  it('should render a string', function () {
    var instance = (0, _enzyme.mount)(_react.default.createElement(_TypeLink.default, {
      type: _graphql.GraphQLString
    }));
    (0, _chai.expect)(instance.text()).to.equal('String');
    (0, _chai.expect)(instance.find('a').length).to.equal(1);
    (0, _chai.expect)(instance.find('a').hasClass('type-name')).to.equal(true);
  });
  it('should render a nonnull type', function () {
    var instance = (0, _enzyme.mount)(_react.default.createElement(_TypeLink.default, {
      type: nonNullType
    }));
    (0, _chai.expect)(instance.text()).to.equal('String!');
    (0, _chai.expect)(instance.find('span').length).to.equal(1);
  });
  it('should render a list type', function () {
    var instance = (0, _enzyme.mount)(_react.default.createElement(_TypeLink.default, {
      type: listType
    }));
    (0, _chai.expect)(instance.text()).to.equal('[String]');
    (0, _chai.expect)(instance.find('span').length).to.equal(1);
  });
  it('should handle a click event', function () {
    var op = jest.fn();
    var instance = (0, _enzyme.mount)(_react.default.createElement(_TypeLink.default, {
      type: listType,
      onClick: op
    }));
    instance.find('a').simulate('click');
    (0, _chai.expect)(op.mock.calls.length).to.equal(1);
    (0, _chai.expect)(op.mock.calls[0][0]).to.equal(_graphql.GraphQLString);
  });
  it('should re-render on type change', function () {
    var instance = (0, _enzyme.mount)(_react.default.createElement(_TypeLink.default, {
      type: listType
    }));
    (0, _chai.expect)(instance.text()).to.equal('[String]');
    instance.setProps({
      type: _graphql.GraphQLString
    });
    (0, _chai.expect)(instance.text()).to.equal('String');
  });
});
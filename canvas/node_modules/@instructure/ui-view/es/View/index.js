import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { error as _error } from "@instructure/console";

var _dec, _dec2, _dec3, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { themeable, getShorthandPropValue, ThemeablePropTypes, mirrorShorthandEdges, mirrorShorthandCorners } from '@instructure/ui-themeable';
import { getComputedStyle } from '@instructure/ui-dom-utils';
import { bidirectional } from '@instructure/ui-i18n';
import { cursor as cursorPropTypes } from '@instructure/ui-prop-types';
import { getElementType, omitProps, pickProps, passthroughProps, deprecated } from '@instructure/ui-react-utils';
var styles = {
  componentId: 'fOyUs',
  template: function template(theme) {
    return "\n\n.fOyUs_bGBk{box-sizing:border-box;font-family:".concat(theme.fontFamily || 'inherit', ";max-width:100%;overflow:visible}\n\n.fOyUs_bMes{display:inline}\n\n.fOyUs_UeJS{display:block}\n\n.fOyUs_cuDs{display:inline-block;vertical-align:middle}\n\n.fOyUs_desw{display:flex}\n\n.fOyUs_cKQL{display:inline-flex;vertical-align:middle}\n\n.fOyUs_EMjX{text-align:start}\n\n[dir=ltr] .fOyUs_EMjX{text-align:left}\n\n[dir=rtl] .fOyUs_EMjX{text-align:right}\n\n.fOyUs_ImeN,[dir=ltr] .fOyUs_ImeN,[dir=rtl] .fOyUs_ImeN{text-align:center}\n\n.fOyUs_dBtH{text-align:end}\n\n[dir=ltr] .fOyUs_dBtH{text-align:right}\n\n[dir=rtl] .fOyUs_dBtH{text-align:left}\n\n.fOyUs_fFew{outline:0.0625rem dashed ").concat(theme.debugOutlineColor || 'inherit', "}\n\n.fOyUs_dnJm{border-style:").concat(theme.borderStyle || 'inherit', "}\n\n.fOyUs_eiMX,.fOyUs_dzKA{border-color:").concat(theme.borderColorTransparent || 'inherit', "}\n\n.fOyUs_dsNY,.fOyUs_tIxX{border-color:").concat(theme.borderColorPrimary || 'inherit', "}\n\n.fOyUs_fuLg{border-color:").concat(theme.borderColorSecondary || 'inherit', "}\n\n.fOyUs_cLjf{border-color:").concat(theme.borderColorBrand || 'inherit', "}\n\n.fOyUs_cXDj{border-color:").concat(theme.borderColorInfo || 'inherit', "}\n\n.fOyUs_fjbA{border-color:").concat(theme.borderColorSuccess || 'inherit', "}\n\n.fOyUs_fBpf{border-color:").concat(theme.borderColorWarning || 'inherit', "}\n\n.fOyUs_bMrG{border-color:").concat(theme.borderColorAlert || 'inherit', "}\n\n.fOyUs_fdvn{border-color:").concat(theme.borderColorDanger || 'inherit', "}\n\n.fOyUs_fKyb{background:none;color:").concat(theme.color || 'inherit', "}\n\n.fOyUs_fZwI,.fOyUs_kXoP{background:").concat(theme.backgroundPrimary || 'inherit', ";color:").concat(theme.color || 'inherit', "}\n\n.fOyUs_dUgE,.fOyUs_bvKN{background:").concat(theme.backgroundSecondary || 'inherit', ";color:").concat(theme.color || 'inherit', "}\n\n.fOyUs_fzxW,.fOyUs_elGp{background:").concat(theme.backgroundPrimaryInverse || 'inherit', ";color:").concat(theme.colorPrimaryInverse || 'inherit', "}\n\n.fOyUs_NGNZ{background:").concat(theme.backgroundBrand || 'inherit', ";color:").concat(theme.colorPrimaryInverse || 'inherit', "}\n\n.fOyUs_fYBY{background:").concat(theme.backgroundInfo || 'inherit', ";color:").concat(theme.colorPrimaryInverse || 'inherit', "}\n\n.fOyUs_feZy{background:").concat(theme.backgroundAlert || 'inherit', ";color:").concat(theme.colorPrimaryInverse || 'inherit', "}\n\n.fOyUs_qidh{background:").concat(theme.backgroundSuccess || 'inherit', ";color:").concat(theme.colorPrimaryInverse || 'inherit', "}\n\n.fOyUs_fKOP{background:").concat(theme.backgroundDanger || 'inherit', ";color:").concat(theme.colorPrimaryInverse || 'inherit', "}\n\n.fOyUs_eOYc{background:").concat(theme.backgroundWarning || 'inherit', ";color:").concat(theme.colorPrimaryInverse || 'inherit', "}\n\n.fOyUs_fQrx{z-index:").concat(theme.stackingTopmost || 'inherit', "}\n\n.fOyUs_dtZX{z-index:").concat(theme.stackingAbove || 'inherit', "}\n\n.fOyUs_fCiV{z-index:").concat(theme.stackingBelow || 'inherit', "}\n\n.fOyUs_dJEE{z-index:").concat(theme.stackingDeepest || 'inherit', "}\n\n.fOyUs_fxuY{box-shadow:").concat(theme.shadowTopmost || 'inherit', "}\n\n.fOyUs_bxuL{box-shadow:").concat(theme.shadowResting || 'inherit', "}\n\n.fOyUs_bIta{box-shadow:").concat(theme.shadowAbove || 'inherit', "}\n\n.fOyUs_fhgP{overflow-x:hidden}\n\n.fOyUs_dzYG{overflow-x:auto}\n\n.fOyUs_divt{overflow-y:hidden}\n\n.fOyUs_fKlg{overflow-y:auto}\n\n.fOyUs_cBHs{position:relative}\n\n.fOyUs_cSap{position:fixed}\n\n.fOyUs_fuLp{position:absolute}\n\n.fOyUs_bZzT{position:-webkit-sticky;position:sticky}\n\n.fOyUs_eWbJ.fOyUs_cBHs:before{border-color:").concat(theme.focusOutlineColorDefault || 'inherit', ";border-style:").concat(theme.focusOutlineStyle || 'inherit', ";border-width:").concat(theme.focusOutlineWidth || 'inherit', ";content:\"\";opacity:0;pointer-events:none;position:absolute}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_cnfU:before{transform:scale(0.95);transition:all 0.2s}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_cBtr:before{bottom:calc(").concat(theme.focusOutlineOffset || 'inherit', "*-1);left:calc(").concat(theme.focusOutlineOffset || 'inherit', "*-1);right:calc(").concat(theme.focusOutlineOffset || 'inherit', "*-1);top:calc(").concat(theme.focusOutlineOffset || 'inherit', "*-1)}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_bFwB:before{bottom:").concat(theme.focusOutlineInset || 'inherit', ";left:").concat(theme.focusOutlineInset || 'inherit', ";right:").concat(theme.focusOutlineInset || 'inherit', ";top:").concat(theme.focusOutlineInset || 'inherit', "}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_beQo:before{border-radius:inherit}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_bnCe:before{border-radius:0}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_cBtr.fOyUs_cmRt:before{border-radius:calc(").concat(theme.borderRadiusSmall || 'inherit', " + ").concat(theme.focusOutlineOffset || 'inherit', " - ").concat(theme.focusOutlineWidth || 'inherit', ")}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_cBtr.fOyUs_eeJl:before{border-radius:calc(").concat(theme.borderRadiusMedium || 'inherit', " + ").concat(theme.focusOutlineOffset || 'inherit', " - ").concat(theme.focusOutlineWidth || 'inherit', ")}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_cBtr.fOyUs_TYCL:before{border-radius:calc(").concat(theme.borderRadiusLarge || 'inherit', " + ").concat(theme.focusOutlineOffset || 'inherit', " - ").concat(theme.focusOutlineWidth || 'inherit', ")}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_bFwB.fOyUs_cmRt:before{border-radius:calc(").concat(theme.borderRadiusSmall || 'inherit', " - ").concat(theme.focusOutlineInset || 'inherit', " + ").concat(theme.focusOutlineWidth || 'inherit', ")}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_bFwB.fOyUs_eeJl:before{border-radius:calc(").concat(theme.borderRadiusMedium || 'inherit', " - ").concat(theme.focusOutlineInset || 'inherit', " + ").concat(theme.focusOutlineWidth || 'inherit', ")}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_bFwB.fOyUs_TYCL:before{border-radius:calc(").concat(theme.borderRadiusLarge || 'inherit', " - ").concat(theme.focusOutlineInset || 'inherit', " + ").concat(theme.focusOutlineWidth || 'inherit', ")}\n\n.fOyUs_eWbJ.fOyUs_cBHs:focus{outline:none}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_fmDy:focus:before,.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_dvYc:before{opacity:1;transform:scale(1)}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_fuTR:before{border-color:").concat(theme.focusColorInfo || 'inherit', "}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_dwHj:before{border-color:").concat(theme.focusColorInverse || 'inherit', "}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_NhxI:before{border-color:").concat(theme.focusColorSuccess || 'inherit', "}\n\n.fOyUs_eWbJ.fOyUs_cBHs.fOyUs_fsVi:before{border-color:").concat(theme.focusColorDanger || 'inherit', "}\n\n.fOyUs_eWbJ.fOyUs_bMes{outline-style:none}\n\n.fOyUs_eWbJ.fOyUs_bMes:before{border-style:none}\n\n.fOyUs_eWbJ.fOyUs_bMes.fOyUs_bFwB.fOyUs_fmDy:focus,.fOyUs_eWbJ.fOyUs_bMes.fOyUs_bFwB.fOyUs_dvYc{outline-style:").concat(theme.focusOutlineStyle || 'inherit', ";outline-width:").concat(theme.focusOutlineWidth || 'inherit', "}\n\n.fOyUs_eWbJ.fOyUs_bMes.fOyUs_fuTR{outline-color:").concat(theme.focusColorInfo || 'inherit', "}\n\n.fOyUs_eWbJ.fOyUs_bMes.fOyUs_dwHj{outline-color:").concat(theme.focusColorInverse || 'inherit', "}\n\n.fOyUs_eWbJ.fOyUs_bMes.fOyUs_fsVi{outline-color:").concat(theme.focusColorDanger || 'inherit', "}");
  },
  'root': 'fOyUs_bGBk',
  'display--inline': 'fOyUs_bMes',
  'display--block': 'fOyUs_UeJS',
  'display--inline-block': 'fOyUs_cuDs',
  'display--flex': 'fOyUs_desw',
  'display--inline-flex': 'fOyUs_cKQL',
  'textAlign--start': 'fOyUs_EMjX',
  'textAlign--center': 'fOyUs_ImeN',
  'textAlign--end': 'fOyUs_dBtH',
  'withVisualDebug': 'fOyUs_fFew',
  'withBorder': 'fOyUs_dnJm',
  'borderColor--inverse': 'fOyUs_eiMX',
  'borderColor--transparent': 'fOyUs_dzKA',
  'borderColor--default': 'fOyUs_dsNY',
  'borderColor--primary': 'fOyUs_tIxX',
  'borderColor--secondary': 'fOyUs_fuLg',
  'borderColor--brand': 'fOyUs_cLjf',
  'borderColor--info': 'fOyUs_cXDj',
  'borderColor--success': 'fOyUs_fjbA',
  'borderColor--warning': 'fOyUs_fBpf',
  'borderColor--alert': 'fOyUs_bMrG',
  'borderColor--danger': 'fOyUs_fdvn',
  'background--transparent': 'fOyUs_fKyb',
  'background--default': 'fOyUs_fZwI',
  'background--primary': 'fOyUs_kXoP',
  'background--light': 'fOyUs_dUgE',
  'background--secondary': 'fOyUs_bvKN',
  'background--inverse': 'fOyUs_fzxW',
  'background--primary-inverse': 'fOyUs_elGp',
  'background--brand': 'fOyUs_NGNZ',
  'background--info': 'fOyUs_fYBY',
  'background--alert': 'fOyUs_feZy',
  'background--success': 'fOyUs_qidh',
  'background--danger': 'fOyUs_fKOP',
  'background--warning': 'fOyUs_eOYc',
  'stacking--topmost': 'fOyUs_fQrx',
  'stacking--above': 'fOyUs_dtZX',
  'stacking--below': 'fOyUs_fCiV',
  'stacking--deepest': 'fOyUs_dJEE',
  'shadow--topmost': 'fOyUs_fxuY',
  'shadow--resting': 'fOyUs_bxuL',
  'shadow--above': 'fOyUs_bIta',
  'overflowX--hidden': 'fOyUs_fhgP',
  'overflowX--auto': 'fOyUs_dzYG',
  'overflowY--hidden': 'fOyUs_divt',
  'overflowY--auto': 'fOyUs_fKlg',
  'position--relative': 'fOyUs_cBHs',
  'position--fixed': 'fOyUs_cSap',
  'position--absolute': 'fOyUs_fuLp',
  'position--sticky': 'fOyUs_bZzT',
  'focus': 'fOyUs_eWbJ',
  'focusAnimation': 'fOyUs_cnfU',
  'focusPosition--offset': 'fOyUs_cBtr',
  'focusPosition--inset': 'fOyUs_bFwB',
  'focusRing--radiusInherit': 'fOyUs_beQo',
  'focusRing--radiusNone': 'fOyUs_bnCe',
  'focusRing--radiusSmall': 'fOyUs_cmRt',
  'focusRing--radiusMedium': 'fOyUs_eeJl',
  'focusRing--radiusLarge': 'fOyUs_TYCL',
  'shouldUseBrowserFocus': 'fOyUs_fmDy',
  'withFocusOutline': 'fOyUs_dvYc',
  'focusColor--info': 'fOyUs_fuTR',
  'focusColor--inverse': 'fOyUs_dwHj',
  'focusColor--success': 'fOyUs_NhxI',
  'focusColor--danger': 'fOyUs_fsVi'
};
import theme from "./theme.js";
import { themeAdapter } from "./themeAdapter.js";
/**
---
category: components
---
@module View
**/

var View = (_dec = deprecated('8.0.0', {
  focused: 'withFocusOutline',
  visualDebug: 'withVisualDebug'
}), _dec2 = bidirectional(), _dec3 = themeable(theme, styles, themeAdapter), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(View, _Component);

  var _super = _createSuper(View);

  function View() {
    var _this;

    _classCallCheck(this, View);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleElementRef = function (el) {
      if (typeof _this.props.elementRef === 'function') {
        _this.props.elementRef(el);
      }

      _this._element = el;
    };

    _this.verifyUniformValues = function (initialValue, input) {
      if (typeof input !== 'string') return false;
      return input.trim().split(' ').every(function (value) {
        return initialValue === value;
      });
    };

    return _this;
  }

  _createClass(View, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Not calling getComputedStyle can save hundreds of ms in tests and production
      if (process.env.NODE_ENV === 'development') {
        /*#__PURE__*/

        /*#__PURE__*/
        _error(! /*#__PURE__*/function verifySpanMargin(element, margin) {
          if (!element) {
            return;
          }

          var marginValues = margin ? margin.split(' ') : null;
          var display = getComputedStyle(element).display;
          var verticalMargin = false; // either top or bottom margin are set

          if (margin) {
            if (marginValues[0] && marginValues[0] !== 'none' && marginValues[0] !== '0') {
              verticalMargin = true;
            }

            if (marginValues[2] && marginValues[2] !== 'none' && marginValues[2] !== '0') {
              verticalMargin = true;
            }
          }

          return verticalMargin && display === 'inline';
        }(this._element, this.props.margin), "[View] display style is set to 'inline' and will allow for horizontal margins only.");
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _ref, _objectSpread2;

      var _this$props = this.props,
          children = _this$props.children,
          textAlign = _this$props.textAlign,
          background = _this$props.background,
          display = _this$props.display,
          withVisualDebug = _this$props.withVisualDebug,
          width = _this$props.width,
          height = _this$props.height,
          minWidth = _this$props.minWidth,
          minHeight = _this$props.minHeight,
          maxWidth = _this$props.maxWidth,
          maxHeight = _this$props.maxHeight,
          overflowX = _this$props.overflowX,
          overflowY = _this$props.overflowY,
          stacking = _this$props.stacking,
          shadow = _this$props.shadow,
          position = _this$props.position,
          focusPosition = _this$props.focusPosition,
          focusColor = _this$props.focusColor,
          shouldAnimateFocus = _this$props.shouldAnimateFocus,
          borderColor = _this$props.borderColor,
          className = _this$props.className,
          props = _objectWithoutProperties(_this$props, ["children", "textAlign", "background", "display", "withVisualDebug", "width", "height", "minWidth", "minHeight", "maxWidth", "maxHeight", "overflowX", "overflowY", "stacking", "shadow", "position", "focusPosition", "focusColor", "shouldAnimateFocus", "borderColor", "className"]);

      var ElementType = getElementType(View, this.props);
      var withFocusOutline = this.withFocusOutline;
      var focusOutlineClasses = position === 'relative' || display === 'inline' && focusPosition === 'inset' ? (_ref = {}, _defineProperty(_ref, styles.focus, true), _defineProperty(_ref, styles.withFocusOutline, withFocusOutline), _defineProperty(_ref, styles.shouldUseBrowserFocus, typeof withFocusOutline === 'undefined'), _defineProperty(_ref, styles[this.focusRingRadius], true), _defineProperty(_ref, styles["focusPosition--".concat(focusPosition)], true), _defineProperty(_ref, styles["focusColor--".concat(focusColor)], true), _defineProperty(_ref, styles.focusAnimation, shouldAnimateFocus), _ref) : {};
      var classes = classnames(_objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, styles.root, true), _defineProperty(_objectSpread2, styles.withVisualDebug, withVisualDebug || this.props.visualDebug), _defineProperty(_objectSpread2, styles.withBorder, this.withBorder), _defineProperty(_objectSpread2, styles["borderColor--".concat(borderColor)], this.withBorder), _defineProperty(_objectSpread2, styles["textAlign--".concat(textAlign)], textAlign), _defineProperty(_objectSpread2, styles["background--".concat(background)], background), _defineProperty(_objectSpread2, styles["display--".concat(display)], display && display !== 'auto'), _defineProperty(_objectSpread2, styles["overflowX--".concat(overflowX)], overflowX && overflowX !== 'visible'), _defineProperty(_objectSpread2, styles["overflowY--".concat(overflowY)], overflowY && overflowY !== 'visible'), _defineProperty(_objectSpread2, styles["stacking--".concat(stacking)], stacking), _defineProperty(_objectSpread2, styles["shadow--".concat(shadow)], shadow && shadow !== 'none'), _defineProperty(_objectSpread2, styles["position--".concat(position)], position !== 'static'), _objectSpread2), focusOutlineClasses, _defineProperty({}, className, className)));
      return /*#__PURE__*/React.createElement(ElementType, Object.assign({}, passthroughProps(props), {
        className: classes,
        style: _objectSpread({}, this.spacingStyle, {}, this.borderStyle, {}, this.offsetStyle, {
          width: width,
          height: height,
          minWidth: minWidth,
          minHeight: minHeight,
          maxWidth: maxWidth,
          maxHeight: maxHeight
        }, this.styleProps),
        ref: this.handleElementRef
      }), children);
    }
  }, {
    key: "withFocusOutline",
    get: function get() {
      if (typeof this.props.withFocusOutline === 'undefined' && typeof this.props.focused === 'undefined') {
        return void 0;
      }

      var _this$props2 = this.props,
          position = _this$props2.position,
          display = _this$props2.display,
          focusPosition = _this$props2.focusPosition;
      var withFocusOutline = this.props.focused || this.props.withFocusOutline;

      if (withFocusOutline) {
        /*#__PURE__*/

        /*#__PURE__*/
        _error(display === 'inline' || position === 'relative', '[View] the focus outline will only show if the `position` prop is `relative`.');

        /*#__PURE__*/

        /*#__PURE__*/
        _error(display !== 'inline' || focusPosition === 'inset', '[View] when display is set to `inline` the focus outline will only show if `focusPosition` is set to `inset`.');
      }

      return withFocusOutline;
    }
  }, {
    key: "focusRingRadius",
    get: function get() {
      var _this$props$borderRad = this.props.borderRadius,
          borderRadius = _this$props$borderRad === void 0 ? '' : _this$props$borderRad;
      var baseRadiusStyle = 'focusRing--radius';
      var initialValue = borderRadius.trim().split(' ')[0];

      if (this.verifyUniformValues(initialValue, borderRadius)) {
        var capitalize = function capitalize(str) {
          return "".concat(str.charAt(0).toUpperCase()).concat(str.slice(1));
        };

        if (['small', 'medium', 'large'].includes(initialValue)) return "".concat(baseRadiusStyle).concat(capitalize(initialValue));
        if (['circle', 'pill'].includes(initialValue)) return "".concat(baseRadiusStyle, "Inherit");
      }

      return "".concat(baseRadiusStyle, "None");
    }
  }, {
    key: "withBorder",
    get: function get() {
      var borderWidth = this.props.borderWidth;
      return borderWidth && borderWidth !== '0' && borderWidth !== 'none';
    }
  }, {
    key: "borderStyle",
    get: function get() {
      var _this$props3 = this.props,
          borderRadius = _this$props3.borderRadius,
          borderWidth = _this$props3.borderWidth;

      if (this.dir === bidirectional.DIRECTION.rtl) {
        borderRadius = mirrorShorthandCorners(borderRadius);
        borderWidth = mirrorShorthandEdges(borderWidth);
      }

      return {
        borderRadius: getShorthandPropValue('View', this.theme, borderRadius, 'borderRadius'),
        borderWidth: getShorthandPropValue('View', this.theme, borderWidth, 'borderWidth')
      };
    }
  }, {
    key: "spacingStyle",
    get: function get() {
      var _this$props4 = this.props,
          margin = _this$props4.margin,
          padding = _this$props4.padding;

      if (this.dir === 'rtl') {
        margin = mirrorShorthandEdges(margin);
        padding = mirrorShorthandEdges(padding);
      }

      return {
        margin: getShorthandPropValue('View', this.theme, margin, 'margin'),
        padding: getShorthandPropValue('View', this.theme, padding, 'padding')
      };
    }
  }, {
    key: "offsetStyle",
    get: function get() {
      var _this$props5 = this.props,
          insetBlockStart = _this$props5.insetBlockStart,
          insetBlockEnd = _this$props5.insetBlockEnd,
          insetInlineStart = _this$props5.insetInlineStart,
          insetInlineEnd = _this$props5.insetInlineEnd;
      var rtl = this.dir === 'rtl';
      var blockStart = {
        top: insetBlockStart,
        insetBlockStart: insetBlockStart
      };
      var blockEnd = {
        bottom: insetBlockEnd,
        insetBlockEnd: insetBlockEnd
      };
      var horizontalOffsets = {
        left: rtl ? insetInlineEnd : insetInlineStart,
        right: rtl ? insetInlineStart : insetInlineEnd,
        insetInlineStart: insetInlineStart,
        insetInlineEnd: insetInlineEnd
      };
      return _objectSpread({}, blockStart, {}, blockEnd, {}, horizontalOffsets);
    }
  }, {
    key: "styleProps",
    get: function get() {
      var _this$props6 = this.props,
          cursor = _this$props6.cursor,
          style = _this$props6.style; // eslint-disable-line react/prop-types

      var whitelisted = pickProps(style || {}, {}, [// Position/calculateElementPosition:
      'top', 'left', 'position', 'display', 'transform', 'overflow', 'minWidth', 'minHeight', // Img:
      'filter', // Flex.Item:
      'flexBasis', // Avatar:
      'backgroundImage', // Popover:
      'pointerEvents']);

      if (cursor) {
        whitelisted.cursor = cursor;
      }

      return whitelisted;
    }
  }]);

  View.displayName = "View";
  return View;
}(Component), _class2.propTypes = {
  /**
   * The element to render as the component root, `span` by default
   */
  as: PropTypes.elementType,

  /**
   * provides a reference to the underlying html element
   */
  elementRef: PropTypes.func,

  /**
   * By default the display prop is 'auto', meaning it takes on the
   * display rules of the html element it's rendered as (see `as` prop).
   */
  display: PropTypes.oneOf(['auto', 'inline', 'block', 'inline-block', 'flex', 'inline-flex']),
  overflowX: PropTypes.oneOf(['auto', 'hidden', 'visible']),
  overflowY: PropTypes.oneOf(['auto', 'hidden', 'visible']),

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: ThemeablePropTypes.spacing,

  /**
   * Valid values are `0`, `none`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `padding="small x-large large"`.
   */
  padding: ThemeablePropTypes.spacing,
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maxHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  minHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * The children to render inside the `<View />`
   */
  children: PropTypes.node,

  /**
   * Designates the text alignment within the `<View />`
   */
  textAlign: PropTypes.oneOf(['start', 'center', 'end']),

  /**
   * Accepts the familiar CSS shorthand to designate border widths corresponding
   * to edges
   */
  borderWidth: ThemeablePropTypes.borderWidth,

  /**
   * Accepts `small`, `medium`, `large`, `circle`, and `pill`. Border radius can be
   * assigned to individual corners in CSS shorthand style (e.g., `"medium large none pill"`).
   */
  borderRadius: ThemeablePropTypes.borderRadius,

  /**
   * Sets the color of the View border
   */
  borderColor: deprecated.deprecatePropValues(PropTypes.oneOf(['transparent', 'primary', 'secondary', 'brand', 'info', 'success', 'warning', 'alert', 'danger', 'default', 'inverse']), ['default', 'inverse'], function (_ref2) {
    var propName = _ref2.propName,
        propValue = _ref2.propValue;
    return "In version 8.0.0, the value '".concat(propValue, "' for `").concat(propName, "` will be changed to ").concat(function () {
      if (propValue === 'default') return "'primary'";
      if (propValue === 'inverse') return "'transparent'";
    }(), ". Use that value instead.");
  }),

  /**
   * Designates the background style of the `<View />`
   */
  background: deprecated.deprecatePropValues(PropTypes.oneOf(['transparent', 'primary', 'secondary', 'primary-inverse', 'brand', 'info', 'alert', 'success', 'danger', 'warning', 'default', 'light', 'inverse']), ['default', 'inverse', 'light'], function (_ref3) {
    var propName = _ref3.propName,
        propValue = _ref3.propValue;
    return "In version 8.0.0, the value '".concat(propValue, "' for `").concat(propName, "` will be changed to ").concat(function () {
      if (propValue === 'default') return "'primary'";
      if (propValue === 'light') return "'secondary'";
      if (propValue === 'inverse') return "'primary-inverse'";
    }(), ". Use that value instead.");
  }),

  /**
   * Controls the shadow depth for the `<View />`
   */
  shadow: ThemeablePropTypes.shadow,

  /**
   * Controls the z-index depth for the `<View />`
   */
  stacking: ThemeablePropTypes.stacking,

  /**
   * Specify a mouse cursor to use when hovering over the `<View />`
   */
  cursor: cursorPropTypes,

  /**
   * Specify a value for the CSS position property. Use `relative` if `focusable` will be true.
   */
  position: PropTypes.oneOf(['static', 'absolute', 'relative', 'sticky', 'fixed']),

  /**
   * The `left` CSS property in left-to-right interfaces. Will not do anything if `position === "static"`.
   */
  insetInlineStart: PropTypes.string,

  /**
   * The `right` CSS property in left-to-right interfaces. Will not do anything if `position === "static"`.
   */
  insetInlineEnd: PropTypes.string,

  /**
   * The `top` CSS property. Will not do anything if `position === "static"`.
   */
  insetBlockStart: PropTypes.string,

  /**
   * The `bottom` CSS property. Will not do anything if `position === "static"`.
   */
  insetBlockEnd: PropTypes.string,

  /**
   * Manually control if the `View` should display a focus outline. When left undefined (which is the default)
   * the focus outline will display automatically if the `View` is focusable and receives focus. Note: the focus
   * outline only will display when the `position` prop is set to `relative`.
   */
  withFocusOutline: PropTypes.bool,

  /**
   * Determines whether the focus outline displays offset or inset from the focused View
   */
  focusPosition: PropTypes.oneOf(['offset', 'inset']),

  /**
   * Determines the color of the focus outline
   */
  focusColor: PropTypes.oneOf(['info', 'inverse', 'success', 'danger']),

  /**
   * Determines if the focus ring should animate when it appears
   */
  shouldAnimateFocus: PropTypes.bool,

  /**
   * Activate a dotted outline around the component to make building your
   * layout easier
   */
  withVisualDebug: PropTypes.bool,

  /* eslint-disable react/require-default-props */

  /**
   * __Deprecated - use 'withFocusOutline'__
   */
  focused: PropTypes.bool,

  /**
   * __Deprecated - use 'withVisualDebug'__
   */
  visualDebug: PropTypes.bool
  /* eslint-enable react/require-default-props */

}, _class2.defaultProps = {
  display: 'auto',
  // Note:
  // - `as` will default to type span via getElementType, so for consistency and
  // compatibility with Container we are leaving it undefined here. Otherwise
  // it modifies behavior for consuming components because of the logic around
  // default props in getElementType
  as: void 0,
  // - `textAlign` is undefined by default so that View can inherit text alignment
  // from parents
  textAlign: void 0,
  // - Any props used to set inline styles should be undefined so that they
  // don't break consuming components' CSS
  overflowX: 'visible',
  overflowY: 'visible',
  shadow: void 0,
  stacking: void 0,
  withVisualDebug: false,
  cursor: void 0,
  borderWidth: void 0,
  borderRadius: void 0,
  borderColor: 'primary',
  margin: void 0,
  padding: void 0,
  elementRef: void 0,
  background: void 0,
  children: null,
  width: void 0,
  height: void 0,
  maxWidth: void 0,
  maxHeight: void 0,
  minWidth: void 0,
  minHeight: void 0,
  position: 'static',
  withFocusOutline: void 0,
  focusPosition: 'offset',
  focusColor: 'info',
  insetInlineStart: void 0,
  insetInlineEnd: void 0,
  insetBlockStart: void 0,
  insetBlockEnd: void 0,
  shouldAnimateFocus: true
}, _temp)) || _class) || _class) || _class); // TODO: Remove this code once all components are using passthroughProps in place
// of omitProps and have removed this function
// omitViewProps needs to be called on the composed View component so that the
// View.propTypes in the method matches the View.propTypes that will be called in
// the consumers. Otherwise the discrepency could cause unexpected props being
// allowed through.

View.omitViewProps = function (props, Component) {
  if (process.env.NODE_ENV !== 'production') {
    Object.keys(pickProps(props, View.propTypes)).forEach(function (prop) {
      /*#__PURE__*/

      /*#__PURE__*/
      _error(false, "[".concat(Component.displayName, "] prop '").concat(prop, "' is not allowed."));
    });
  }

  return omitProps(props, View.propTypes);
};

export default View;
export { View };
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ModalHeader", {
  enumerable: true,
  get: function get() {
    return _index.ModalHeader;
  }
});
Object.defineProperty(exports, "ModalBody", {
  enumerable: true,
  get: function get() {
    return _index2.ModalBody;
  }
});
Object.defineProperty(exports, "ModalFooter", {
  enumerable: true,
  get: function get() {
    return _index3.ModalFooter;
  }
});
exports.Modal = exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _Dialog = require("@instructure/ui-dialog/lib/Dialog");

var _element = require("@instructure/ui-prop-types/lib/element.js");

var _Children = require("@instructure/ui-prop-types/lib/Children.js");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _safeCloneElement = require("@instructure/ui-react-utils/lib/safeCloneElement.js");

var _matchComponentTypes = require("@instructure/ui-react-utils/lib/matchComponentTypes.js");

var _createChainedFunction = require("@instructure/ui-utils/lib/createChainedFunction.js");

var _isIE = require("@instructure/ui-utils/lib/isIE11.js");

var _Transition = require("@instructure/ui-motion/lib/Transition");

var _Portal = require("@instructure/ui-portal/lib/Portal");

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _Mask = require("@instructure/ui-overlays/lib/Mask");

var _index = require("./ModalHeader/index.js");

var _index2 = require("./ModalBody/index.js");

var _index3 = require("./ModalFooter/index.js");

var _theme = _interopRequireDefault(require("./theme.js"));

var _dec, _dec2, _class, _class2, _temp;

var styles = {
  componentId: 'fdyuz',
  template: function template(theme) {
    return "\n\n.fdyuz_bGBk{background:".concat(theme.background || 'inherit', ";border:0.0625rem solid ").concat(theme.borderColor || 'inherit', ";border-radius:").concat(theme.borderRadius || 'inherit', ";box-shadow:").concat(theme.boxShadow || 'inherit', ";box-sizing:border-box;color:").concat(theme.textColor || 'inherit', ";display:flex;flex-direction:column;font-family:").concat(theme.fontFamily || 'inherit', ";min-width:1px;position:relative}\n\n.fdyuz_bGBk.fdyuz_eoSs{display:block;overflow:auto}\n\n.fdyuz_enfx{background:").concat(theme.inverseBackground || 'inherit', ";color:").concat(theme.inverseTextColor || 'inherit', "}\n\n.fdyuz_uUeq,.fdyuz_cMDj,.fdyuz_ycrn,.fdyuz_doqw{max-height:95%;max-width:95%}\n\n.fdyuz_uUeq.fdyuz_eoSs,.fdyuz_cMDj.fdyuz_eoSs,.fdyuz_ycrn.fdyuz_eoSs,.fdyuz_doqw.fdyuz_eoSs{max-height:none}\n\n.fdyuz_uUeq.fdyuz_fHQo:not(.fdyuz_eoSs),.fdyuz_cMDj.fdyuz_fHQo:not(.fdyuz_eoSs),.fdyuz_ycrn.fdyuz_fHQo:not(.fdyuz_eoSs),.fdyuz_doqw.fdyuz_fHQo:not(.fdyuz_eoSs){transform:translateY(2.5%)}\n\n.fdyuz_uUeq{flex:0 1 auto;min-width:").concat(theme.autoMinWidth || 'inherit', "}\n\n.fdyuz_doqw{flex:0 1 ").concat(theme.smallMaxWidth || 'inherit', "}\n\n.fdyuz_ycrn{flex:0 1 ").concat(theme.mediumMaxWidth || 'inherit', "}\n\n.fdyuz_cMDj{flex:0 1 ").concat(theme.largeMaxWidth || 'inherit', "}\n\n.fdyuz_cMOR{border:none;border-radius:0;box-shadow:none;flex:1;height:100%;width:100%}\n\n.fdyuz_fuFB{display:block;height:100%;position:relative;width:100%}");
  },
  'root': 'fdyuz_bGBk',
  'ie11': 'fdyuz_eoSs',
  'inverse': 'fdyuz_enfx',
  'auto': 'fdyuz_uUeq',
  'large': 'fdyuz_cMDj',
  'medium': 'fdyuz_ycrn',
  'small': 'fdyuz_doqw',
  'overflow--fit': 'fdyuz_fHQo',
  'fullscreen': 'fdyuz_cMOR',
  'constrainContext': 'fdyuz_fuFB'
};

/**
---
category: components
tags: overlay, portal, dialog
---
**/
var Modal = (_dec = (0, _testable.testable)(), _dec2 = (0, _themeable.themeable)(_theme.default, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Modal, _Component);

  var _super = (0, _createSuper2.default)(Modal);

  function Modal(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Modal);
    _this = _super.call(this, props);

    _this.handlePortalOpen = function (DOMNode) {
      _this.DOMNode = DOMNode;
      DOMNode && _this.applyTheme(DOMNode);
    };

    _this.handleTransitionExited = function () {
      _this.setState({
        transitioning: false
      });
    };

    _this.contentRef = function (el) {
      _this._content = el;

      if (typeof _this.props.contentRef === 'function') {
        _this.props.contentRef(el);
      }
    };

    _this.state = {
      transitioning: false
    };
    return _this;
  }

  (0, _createClass2.default)(Modal, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.open && !this.props.open) {
        // closing
        this.setState({
          transitioning: prevProps.transition !== null
        });
      }
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var _this$props = this.props,
          children = _this$props.children,
          variant = _this$props.variant,
          overflow = _this$props.overflow;
      return _react.Children.map(children, function (child) {
        if (!child) return; // ignore null, falsy children

        if ((0, _matchComponentTypes.matchComponentTypes)(child, [_index2.ModalBody])) {
          return (0, _safeCloneElement.safeCloneElement)(child, {
            variant: variant,
            overflow: child.props.overflow || overflow
          });
        } else {
          return (0, _safeCloneElement.safeCloneElement)(child, {
            variant: variant
          });
        }
      });
    }
  }, {
    key: "renderDialog",
    value: function renderDialog(props) {
      var _classnames;

      var _this$props2 = this.props,
          onDismiss = _this$props2.onDismiss,
          label = _this$props2.label,
          shouldCloseOnDocumentClick = _this$props2.shouldCloseOnDocumentClick,
          shouldReturnFocus = _this$props2.shouldReturnFocus,
          liveRegion = _this$props2.liveRegion,
          size = _this$props2.size,
          constrain = _this$props2.constrain,
          as = _this$props2.as;
      var isFullScreen = size === 'fullscreen';

      var dialog = /*#__PURE__*/_react.default.createElement(_Dialog.Dialog, Object.assign({}, (0, _passthroughProps.passthroughProps)(props), {
        as: as,
        open: true,
        label: label,
        defaultFocusElement: this.defaultFocusElement,
        shouldCloseOnDocumentClick: shouldCloseOnDocumentClick,
        shouldCloseOnEscape: true,
        shouldContainFocus: true,
        shouldReturnFocus: shouldReturnFocus,
        liveRegion: liveRegion,
        onDismiss: onDismiss,
        className: (0, _classnames2.default)((_classnames = {}, (0, _defineProperty2.default)(_classnames, styles.root, true), (0, _defineProperty2.default)(_classnames, styles[size], true), (0, _defineProperty2.default)(_classnames, styles.inverse, this.props.variant === 'inverse'), (0, _defineProperty2.default)(_classnames, styles['overflow--fit'], this.props.overflow === 'fit'), (0, _defineProperty2.default)(_classnames, styles.ie11, this.ie11), _classnames)),
        ref: this.contentRef // aria-modal="true" see VO bug https://bugs.webkit.org/show_bug.cgi?id=174667

      }), this.renderChildren());

      return /*#__PURE__*/_react.default.createElement(_Mask.Mask, {
        placement: this.maskPlacement,
        fullscreen: constrain === 'window',
        theme: isFullScreen ? {
          borderRadius: '0em',
          borderWidth: '0em'
        } : null
      }, dialog);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          open = _this$props3.open,
          onOpen = _this$props3.onOpen,
          onClose = _this$props3.onClose,
          mountNode = _this$props3.mountNode,
          insertAt = _this$props3.insertAt,
          transition = _this$props3.transition,
          onEnter = _this$props3.onEnter,
          onEntering = _this$props3.onEntering,
          onEntered = _this$props3.onEntered,
          onExit = _this$props3.onExit,
          onExiting = _this$props3.onExiting,
          onExited = _this$props3.onExited,
          constrain = _this$props3.constrain,
          overflow = _this$props3.overflow,
          passthroughProps = (0, _objectWithoutProperties2.default)(_this$props3, ["open", "onOpen", "onClose", "mountNode", "insertAt", "transition", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "constrain", "overflow"]);
      var portalIsOpen = open || this.state.transitioning;
      return /*#__PURE__*/_react.default.createElement(_Portal.Portal, {
        mountNode: mountNode,
        insertAt: insertAt,
        open: portalIsOpen,
        onOpen: (0, _createChainedFunction.createChainedFunction)(this.handlePortalOpen, onOpen),
        onClose: onClose
      }, portalIsOpen && /*#__PURE__*/_react.default.createElement(_Transition.Transition, {
        in: open,
        transitionOnMount: true,
        unmountOnExit: true,
        type: transition,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: onEntered,
        onExit: onExit,
        onExiting: onExiting,
        onExited: (0, _createChainedFunction.createChainedFunction)(this.handleTransitionExited, onExited),
        theme: this.ie11 ? {
          duration: '0s'
        } : null // IE11 doesn't always complete transition

      }, constrain === 'parent' ? /*#__PURE__*/_react.default.createElement("span", {
        className: styles.constrainContext
      }, this.renderDialog(passthroughProps)) : this.renderDialog(passthroughProps)));
    }
  }, {
    key: "defaultFocusElement",
    get: function get() {
      return this.props.defaultFocusElement;
    }
  }, {
    key: "DOMNode",
    get: function get() {
      return this._DOMNode;
    },
    set: function set(el) {
      this._DOMNode = el;
    }
  }, {
    key: "maskPlacement",
    get: function get() {
      if (_isIE.isIE11) {
        return 'top';
      } else if (this.props.overflow === 'fit') {
        return 'stretch';
      } else {
        return 'center';
      }
    }
  }]);
  Modal.displayName = "Modal";
  return Modal;
}(_react.Component), _class2.propTypes = {
  /**
   * An accessible label for the `<Modal />` content
   */
  label: _propTypes.default.string.isRequired,

  /**
   * The children to be rendered within the `<Modal />`
   */
  children: _Children.Children.enforceOrder([_index.ModalHeader, _index2.ModalBody, _index3.ModalFooter], [_index.ModalHeader, _index2.ModalBody], [_index2.ModalBody, _index3.ModalFooter], [_index2.ModalBody]),

  /**
   * The element to render the dialog as, `span` by default
   */
  as: _propTypes.default.elementType,

  /**
   * The size of the `<Modal />` content
   */
  size: _propTypes.default.oneOf(['auto', 'small', 'medium', 'large', 'fullscreen']),

  /**
   * Designates the background style of the `<Modal />`
   */
  variant: _propTypes.default.oneOf(['default', 'inverse']),

  /**
   * Whether or not the `<Modal />` is open
   */
  open: _propTypes.default.bool,

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),

  /**
   * Whether focus should be returned to the trigger when the `<Modal/>` is closed
   */
  shouldReturnFocus: _propTypes.default.bool,

  /**
   * Whether the `<Modal/>` should request close when the document is clicked
   */
  shouldCloseOnDocumentClick: _propTypes.default.bool,

  /**
   * Callback fired when `<Modal />` content has been mounted in the DOM
   */
  onOpen: _propTypes.default.func,

  /**
   * Callback fired when `<Modal />` has been unmounted from the DOM
   */
  onClose: _propTypes.default.func,

  /**
   * Callback fired when the `<Modal />` is requesting to be closed
   */
  onDismiss: _propTypes.default.func,

  /**
   *
   * A function that returns a reference to the content element
   */
  contentRef: _propTypes.default.func,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Modal />` (defaults to `document.body`)
   */
  mountNode: _propTypes.default.oneOfType([_element.element, _propTypes.default.func]),

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: _propTypes.default.oneOf(['bottom', 'top']),

  /**
   * An element, function returning an element, or array of elements that will not be hidden from
   * the screen reader when the `<Modal />` is open
   */
  liveRegion: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.element), _propTypes.default.element, _propTypes.default.func]),
  transition: _Transition.Transition.propTypes.type,

  /**
   * Callback fired before the <Modal /> transitions in
   */
  onEnter: _propTypes.default.func,

  /**
   * Callback fired as the <Modal /> begins to transition in
   */
  onEntering: _propTypes.default.func,

  /**
   * Callback fired after the <Modal /> finishes transitioning in
   */
  onEntered: _propTypes.default.func,

  /**
   * Callback fired right before the <Modal /> transitions out
   */
  onExit: _propTypes.default.func,

  /**
   * Callback fired as the <Modal /> begins to transition out
   */
  onExiting: _propTypes.default.func,

  /**
   * Callback fired after the <Modal /> finishes transitioning out
   */
  onExited: _propTypes.default.func,

  /**
   * Constrain the Modal to the document window or its closest positioned parent
   */
  constrain: _propTypes.default.oneOf(['window', 'parent']),

  /**
   * Should ModalBody handle overflow with scrollbars, or fit its
   * content within its own height?
   */
  overflow: _propTypes.default.oneOf(['scroll', 'fit'])
}, _class2.defaultProps = {
  open: false,
  size: 'auto',
  variant: 'default',
  transition: 'fade',
  onOpen: function onOpen(event) {},
  onClose: function onClose(event) {},
  onDismiss: function onDismiss(event) {},
  onEnter: function onEnter() {},
  onEntering: function onEntering() {},
  onEntered: function onEntered() {},
  onExit: function onExit() {},
  onExiting: function onExiting() {},
  onExited: function onExited() {},
  as: void 0,
  mountNode: null,
  insertAt: 'bottom',
  liveRegion: null,
  contentRef: function contentRef(el) {},
  shouldCloseOnDocumentClick: true,
  shouldReturnFocus: true,
  defaultFocusElement: null,
  children: null,
  constrain: 'window',
  overflow: 'scroll'
}, _class2.Header = _index.ModalHeader, _class2.Body = _index2.ModalBody, _class2.Footer = _index3.ModalFooter, _temp)) || _class) || _class);
exports.Modal = Modal;
var _default = Modal;
exports.default = _default;
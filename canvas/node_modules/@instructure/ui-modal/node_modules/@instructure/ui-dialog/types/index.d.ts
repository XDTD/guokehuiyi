import * as React from 'react';

export type DialogDisplay = "auto" | "block" | "inline-block";

export type DialogDefaultFocusElement = React.ReactElement<any> | ((...args: any[])=>any);

export type DialogContentElement = React.ReactElement<any> | ((...args: any[])=>any);

export type DialogLiveRegion = React.ReactElement<any>[] | React.ReactElement<any> | ((...args: any[])=>any);

export type DialogShouldContainFocus = boolean | "keyboard" | "screenreader";

export interface DialogProps {
    /**
     * The children to be rendered within the `<Dialog />`
     */
    children?: React.ReactNode;
    /**
     * The element to render as the component root, `span` by default
     */
    as?: any;
    display?: DialogDisplay;
    label?: string;
    /**
     * Whether or not the `<Dialog />` is open
     */
    open?: boolean;
    /**
     * Function called when tab focus leaves the `<Dialog />` focusable content. This only
     * occurs when `shouldContainFocus` is set to false.
     */
    onBlur?: (...args: any[])=>any;
    onDismiss?: (...args: any[])=>any;
    /**
     * An element or a function returning an element to focus by default
     */
    defaultFocusElement?: DialogDefaultFocusElement;
    /**
     * An element or a function returning an element that wraps the content of the `<Dialog />`
     */
    contentElement?: DialogContentElement;
    /**
     * An element, function returning an element, or array of elements that will not be hidden from
     * the screen reader when the `<Dialog />` is open
     */
    liveRegion?: DialogLiveRegion;
    shouldContainFocus?: DialogShouldContainFocus;
    shouldReturnFocus?: boolean;
    shouldCloseOnDocumentClick?: boolean;
    shouldCloseOnEscape?: boolean;
    shouldFocusOnOpen?: boolean;
}

export class Dialog extends React.Component<DialogProps, any> {
    render(): JSX.Element;

}


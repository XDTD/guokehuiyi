import * as React from 'react';

export type ModalSize = "auto" | "small" | "medium" | "large" | "fullscreen";

export type ModalVariant = "default" | "inverse";

export type ModalDefaultFocusElement = React.ReactElement<any> | ((...args: any[])=>any);

export type ModalMountNode = any | ((...args: any[])=>any);

export type ModalInsertAt = "bottom" | "top";

export type ModalLiveRegion = React.ReactElement<any>[] | React.ReactElement<any> | ((...args: any[])=>any);

export type ModalConstrain = "window" | "parent";

export type ModalOverflow = "scroll" | "fit";

export interface ModalProps {
    /**
     * An accessible label for the `<Modal />` content
     */
    label: string;
    /**
     * The children to be rendered within the `<Modal />`
     */
    children?: any;
    /**
     * The element to render the dialog as, `span` by default
     */
    as?: any;
    /**
     * The size of the `<Modal />` content
     */
    size?: ModalSize;
    /**
     * Designates the background style of the `<Modal />`
     */
    variant?: ModalVariant;
    /**
     * Whether or not the `<Modal />` is open
     */
    open?: boolean;
    /**
     * An element or a function returning an element to focus by default
     */
    defaultFocusElement?: ModalDefaultFocusElement;
    /**
     * Whether focus should be returned to the trigger when the `<Modal/>` is closed
     */
    shouldReturnFocus?: boolean;
    /**
     * Whether the `<Modal/>` should request close when the document is clicked
     */
    shouldCloseOnDocumentClick?: boolean;
    /**
     * Callback fired when `<Modal />` content has been mounted in the DOM
     */
    onOpen?: (...args: any[])=>any;
    /**
     * Callback fired when `<Modal />` has been unmounted from the DOM
     */
    onClose?: (...args: any[])=>any;
    /**
     * Callback fired when the `<Modal />` is requesting to be closed
     */
    onDismiss?: (...args: any[])=>any;
    /**
     * A function that returns a reference to the content element
     */
    contentRef?: (...args: any[])=>any;
    /**
     * An element or a function returning an element to use as the mount node
     * for the `<Modal />` (defaults to `document.body`)
     */
    mountNode?: ModalMountNode;
    /**
     * Insert the element at the 'top' of the mountNode or at the 'bottom'
     */
    insertAt?: ModalInsertAt;
    /**
     * An element, function returning an element, or array of elements that will not be hidden from
     * the screen reader when the `<Modal />` is open
     */
    liveRegion?: ModalLiveRegion;
    transition?: any;
    /**
     * Callback fired before the <Modal /> transitions in
     */
    onEnter?: (...args: any[])=>any;
    /**
     * Callback fired as the <Modal /> begins to transition in
     */
    onEntering?: (...args: any[])=>any;
    /**
     * Callback fired after the <Modal /> finishes transitioning in
     */
    onEntered?: (...args: any[])=>any;
    /**
     * Callback fired right before the <Modal /> transitions out
     */
    onExit?: (...args: any[])=>any;
    /**
     * Callback fired as the <Modal /> begins to transition out
     */
    onExiting?: (...args: any[])=>any;
    /**
     * Callback fired after the <Modal /> finishes transitioning out
     */
    onExited?: (...args: any[])=>any;
    /**
     * Constrain the Modal to the document window or its closest positioned parent
     */
    constrain?: ModalConstrain;
    /**
     * Should ModalBody handle overflow with scrollbars, or fit its
     * content within its own height?
     */
    overflow?: ModalOverflow;
}

export class Modal extends React.Component<ModalProps, any> {
    render(): JSX.Element;

}


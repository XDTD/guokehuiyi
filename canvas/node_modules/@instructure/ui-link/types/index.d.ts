import * as React from 'react';

export type LinkColor = "link" | "link-inverse";

export type LinkInteraction = "enabled" | "disabled";

export type LinkRenderIcon = ((...args: any[])=>any) | React.ReactNode;

export type LinkIconPlacement = "start" | "end";

export type LinkDisplay = "auto" | "block" | "inline-block" | "flex" | "inline-flex";

export type LinkVariant = "default" | "inverse";

export interface LinkProps {
    /**
     * The text and/or icon displayed by the link
     */
    children: React.ReactNode;
    /**
     * Sets the link's `href` attribute
     */
    href?: string;
    /**
     * Designates Link's text color to accommodate light and dark backgrounds
     */
    color?: LinkColor;
    /**
     * Provides a reference to the underlying HTML element
     */
    elementRef?: (...args: any[])=>any;
    /**
     * The element type to render as (will default to `<a>` if href is provided)
     */
    as?: any;
    /**
     * Determines if the link is enabled or disabled
     */
    interaction?: LinkInteraction;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * Add an SVG icon to the Link. Do not add icons directly as
     * children.
     */
    renderIcon?: LinkRenderIcon;
    /**
     * Place the icon before or after the text in the Link.
     */
    iconPlacement?: LinkIconPlacement;
    /**
     * Set the CSS display property of the Link element. 'auto' sets no display property.
     */
    display?: LinkDisplay;
    /**
     * Set `false` to remove default underline if Link does not appear inline with text
     */
    isWithinText?: boolean;
    /**
     * Fires when the Link is clicked
     */
    onClick?: (...args: any[])=>any;
    /**
     * Fires when the Link gains focus
     */
    onFocus?: (...args: any[])=>any;
    /**
     * Fires when the Link loses focus
     */
    onBlur?: (...args: any[])=>any;
    /**
     * eslint-disable react/require-default-props
     */
    linkRef?: (...args: any[])=>any;
    /**
     * __deprecated: use color__
     */
    variant?: LinkVariant;
}

export class Link extends React.Component<LinkProps, any> {
    render(): JSX.Element;

}


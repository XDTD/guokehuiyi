import * as React from 'react';

export type PaginationVariant = "full" | "compact";

export interface PaginationProps {
    /**
     * children of type Pagination.Page
     */
    children?: any;
    /**
     * Disables interaction with all pages
     */
    disabled?: boolean;
    /**
     * Visible label for component
     */
    label?: React.ReactNode;
    /**
     * Accessible label for next button
     */
    labelNext?: string;
    /**
     * Accessible label for previous button
     */
    labelPrev?: string;
    /**
     * The compact variant truncates the page navigation to show only the first,
     * last, and pages immediately surrounding the current page. Fewer than 5 pages,
     * no next/previous arrow buttons will be shown, and all pages will be listed
     */
    variant?: PaginationVariant;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * the element type to render as
     */
    as?: any;
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (...args: any[])=>any;
    /**
     * For accessibility, Pagination sets focus on the first or last Pagination.Pages,
     * respectively, when the Previous or Next arrow buttons are removed from the DOM.
     * Set this property to `false` to prevent this behavior.
     */
    shouldHandleFocus?: boolean;
}

export class Pagination extends React.Component<PaginationProps, any> {
    render(): JSX.Element;

}


"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Rating = exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _View = require("@instructure/ui-view/lib/View");

var _ScreenReaderContent = require("@instructure/ui-a11y-content/lib/ScreenReaderContent");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _ThemeablePropTypes = require("@instructure/ui-themeable/lib/ThemeablePropTypes.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _index = require("../RatingIcon/index.js");

var _theme = _interopRequireDefault(require("./theme.js"));

var _dec, _dec2, _class, _class2, _temp;

var styles = {
  componentId: 'fHeeD',
  template: function template(theme) {
    return "\n\n.fHeeD_bGBk{line-height:1}";
  },
  'root': 'fHeeD_bGBk'
};

/**
---
category: components
---
**/
var Rating = (_dec = (0, _testable.testable)(), _dec2 = (0, _themeable.themeable)(_theme.default, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Rating, _Component);

  var _super = (0, _createSuper2.default)(Rating);

  function Rating() {
    (0, _classCallCheck2.default)(this, Rating);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(Rating, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          iconCount = _this$props.iconCount,
          animateFill = _this$props.animateFill,
          size = _this$props.size,
          margin = _this$props.margin,
          label = _this$props.label,
          formatValueText = _this$props.formatValueText;
      var classes = (0, _defineProperty2.default)({}, styles.root, true);
      var valueText = label + ' ' + formatValueText(this.filled, iconCount);

      var passthroughProps = _View.View.omitViewProps((0, _omitProps.omitProps)(this.props, Rating.propTypes), Rating);

      return /*#__PURE__*/_react.default.createElement(_View.View, Object.assign({}, passthroughProps, {
        className: (0, _classnames.default)(classes),
        margin: margin,
        display: "inline-block"
      }), /*#__PURE__*/_react.default.createElement(_ScreenReaderContent.ScreenReaderContent, null, valueText), (0, _toConsumableArray2.default)(Array(this.filled)).map(function (x, i) {
        return /*#__PURE__*/_react.default.createElement(_index.RatingIcon, {
          key: i + 1,
          filled: true,
          animateFill: animateFill,
          animationDelay: animateFill ? (i + 1) * 200 : null,
          size: size
        });
      }), (0, _toConsumableArray2.default)(Array(this.empty)).map(function (x, i) {
        return /*#__PURE__*/_react.default.createElement(_index.RatingIcon, {
          key: i + 1,
          size: size
        });
      }));
    }
  }, {
    key: "filled",
    get: function get() {
      var _this$props2 = this.props,
          valueNow = _this$props2.valueNow,
          iconCount = _this$props2.iconCount,
          valueMax = _this$props2.valueMax; // prevent divide by zero errors

      var max = valueMax > 0 ? valueMax : iconCount;
      var filledIcons = Math.round(valueNow * iconCount / max); // Handle edge case where valueNow is greater than valueMax

      if (filledIcons > iconCount) {
        return iconCount;
      } else {
        return filledIcons;
      }
    }
  }, {
    key: "empty",
    get: function get() {
      return this.props.iconCount - this.filled;
    }
  }]);
  Rating.displayName = "Rating";
  return Rating;
}(_react.Component), _class2.propTypes = {
  /**
   * A label is required for accessibility
   */
  label: _propTypes.default.string.isRequired,

  /**
   * A function that returns the current value formatted for screen readers
   */
  formatValueText: _propTypes.default.func,

  /**
   * Choose from a 0-3 or 0-5 rating system
   */
  iconCount: _propTypes.default.oneOf([3, 5]),

  /**
   * Choose from different rating icon sizes
   */
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),

  /**
   * The maximum rating (defaults to iconCount)
   */
  valueMax: _propTypes.default.number,

  /**
   * The current rating
   */
  valueNow: _propTypes.default.number,

  /**
   * Set to make the icons animate when they become filled
   */
  animateFill: _propTypes.default.bool,

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: _ThemeablePropTypes.ThemeablePropTypes.spacing
}, _class2.defaultProps = {
  animateFill: false,
  formatValueText: function formatValueText(filled, iconCount) {
    return "".concat(filled, " / ").concat(iconCount);
  },
  iconCount: 3,
  size: 'medium',
  valueNow: 0,
  margin: void 0,
  valueMax: void 0
}, _temp)) || _class) || _class);
exports.Rating = Rating;
var _default = Rating;
exports.default = _default;
/* stylelint-disable selector-max-class, max-nesting-depth, no-descending-specificity */

.root {
  display: inline-block;
  vertical-align: middle;
  position: relative;
  overflow: hidden;

  /*
    Seems like a good idea to reset font-size because
    the SVG uses ems and might inherit a container's
    font-size
  */
  font-size: 1rem;
  font-family: var(--fontFamily);
  font-weight: var(--fontWeight);
  line-height: var(--lineHeight);
}

.circle {
  transform: rotate(-90deg);
  display: block;
  position: absolute;
  top: 0;
  left: 0; /* stylelint-disable-line property-blacklist */
}

.center {
  transition: all 0.5s;
  transition-delay: 1s;
  display: block;
  position: absolute;
  transform: translate3d(0, 0, 0);
  top: 0;
  left: 0; /* stylelint-disable-line property-blacklist */
  height: 100%;
  width: 100%;
  border-radius: 50%;
}

.value {
  box-sizing: border-box;
  word-wrap: break-word;
  text-align: center;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1.5rem;
  width: 100%;
  height: 100%;
  line-height: 1;
}

.shadow,
.track,
.meter {
  fill: none;
}

.track {
  transition: all 0.2s;
  transform: translate3d(0, 0, 0) scale(1);
  opacity: 1;
}

.meter {
  transition: stroke-dashoffset 1s;
  transform: translate3d(0, 0, 0);
  stroke: var(--meterColor);
}

.default {
  .track {
    stroke: var(--trackColor);
  }

  .value {
    color: var(--color);
  }
}

.inverse {
  .track {
    stroke: var(--inverseTrackColor);
  }
}

.default.done {
  .shadow {
    display: none;
  }
}

.inverse.done {
  .shadow {
    stroke: rgba(0, 0, 0, 0.15);
  }
}

.done {
  .meter {
    stroke: var(--doneMeterColor);
  }
}

.x-small {
  width: var(--xSmallSize);
  height: var(--xSmallSize);

  .circle {
    width: var(--xSmallSize);
    height: var(--xSmallSize);
  }

  .value {
    padding: 0.5rem;
  }

  .shadow {
    stroke-width: 0.5em;
  }

  .track {
    transform-origin: var(--xSmallTransform) var(--xSmallTransform);
  }

  .track,
  .meter {
    stroke-width: 0.185em;
  }

  .meter {
    stroke-dasharray: var(--xSmallCircumference);
  }
}

.small {
  width: var(--smallSize);
  height: var(--smallSize);

  .circle {
    width: var(--smallSize);
    height: var(--smallSize);
  }

  .shadow {
    stroke-width: 1em;
  }

  .track {
    transform-origin: var(--smallTransform) var(--smallTransform);
  }

  .track,
  .meter {
    stroke-width: 0.5em;
  }

  .meter {
    stroke-dasharray: var(--smallCircumference);
  }
}

.medium {
  width: var(--mediumSize);
  height: var(--mediumSize);

  .circle {
    width: var(--mediumSize);
    height: var(--mediumSize);
  }

  .shadow {
    stroke-width: 1.125em;
  }

  .track {
    transform-origin: var(--mediumTransform) var(--mediumTransform);
  }

  .track,
  .meter {
    stroke-width: 0.625em;
  }

  .meter {
    stroke-dasharray: var(--mediumCircumference);
  }
}

.large {
  width: var(--largeSize);
  height: var(--largeSize);

  .circle {
    width: var(--largeSize);
    height: var(--largeSize);
  }

  .shadow {
    stroke-width: 1.375em;
  }

  .track {
    transform-origin: var(--largeTransform) var(--largeTransform);
  }

  .track,
  .meter {
    stroke-width: 0.875em;
  }

  .meter {
    stroke-dasharray: var(--largeCircumference);
  }
}

/*
  The animateOnMount class is removed via a state
  change in index.js, triggering CSS transitions and animations
  that make the track, meter and output text animate in
  (only used if the animateOnMount prop is true)
*/

.animateOnMount {
  .track {
    opacity: 0.01;
    transform: translate3d(0, 0, 0) scale(0.1);
  }

  .center {
    opacity: 0;
    transform: translate3d(0, 35%, 0);
  }

  .meter {
    opacity: 0;
  }

  /* stylelint-disable declaration-no-important */

  /*
     Using !important here to guarantee that the bars will start showing
     0 if the animateOnMount prop is set
  */

  &.x-small .meter {
    stroke-dashoffset: var(--xSmallCircumference) !important;
  }

  &.small .meter {
    stroke-dashoffset: var(--smallCircumference) !important;
  }

  &.medium .meter {
    stroke-dashoffset: var(--mediumCircumference) !important;
  }

  &.large .meter {
    stroke-dashoffset: var(--largeCircumference) !important;
  }
  /* stylelint-enable declaration-no-important */
}

/* stylelint-enable selector-max-class, max-nesting-depth, no-descending-specificity */

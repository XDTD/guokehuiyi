import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { View } from '@instructure/ui-view';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { omitProps } from '@instructure/ui-react-utils';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
var styles = {
  componentId: 'eQMwa',
  template: function template(theme) {
    return "\n\n.eQMwa_bGBk{display:inline-block;font-family:".concat(theme.fontFamily || 'inherit', ";font-size:1rem;font-weight:").concat(theme.fontWeight || 'inherit', ";line-height:").concat(theme.lineHeight || 'inherit', ";overflow:hidden;position:relative;vertical-align:middle}\n\n.eQMwa_cJVF{transform:rotate(-90deg)}\n\n.eQMwa_cwzs,.eQMwa_cJVF{display:block;left:0;position:absolute;top:0}\n\n.eQMwa_cwzs{transform:translateZ(0);transition:all 0.5s;transition-delay:1s}\n\n.eQMwa_cwzs,.eQMwa_fqzO{border-radius:50%;height:100%;width:100%}\n\n.eQMwa_fqzO{align-items:center;box-sizing:border-box;display:flex;justify-content:center;line-height:1;padding:1.5rem;text-align:center;word-wrap:break-word}\n\n[dir=ltr] .eQMwa_fqzO,[dir=rtl] .eQMwa_fqzO{text-align:center}\n\n.eQMwa_cDWE,.eQMwa_fSpQ,.eQMwa_eCEP{fill:none}\n\n.eQMwa_eCEP{opacity:1;transform:translateZ(0) scale(1);transition:all 0.2s}\n\n.eQMwa_cDWE{stroke:").concat(theme.meterColor || 'inherit', ";transform:translateZ(0);transition:stroke-dashoffset 1s}\n\n.eQMwa_ddES .eQMwa_eCEP{stroke:").concat(theme.trackColor || 'inherit', "}\n\n.eQMwa_ddES .eQMwa_fqzO{color:").concat(theme.color || 'inherit', "}\n\n.eQMwa_enfx .eQMwa_eCEP{stroke:").concat(theme.inverseTrackColor || 'inherit', "}\n\n.eQMwa_ddES.eQMwa_fFDe .eQMwa_fSpQ{display:none}\n\n.eQMwa_enfx.eQMwa_fFDe .eQMwa_fSpQ{stroke:rgba(0,0,0,0.15)}\n\n.eQMwa_fFDe .eQMwa_cDWE{stroke:").concat(theme.doneMeterColor || 'inherit', "}\n\n.eQMwa_dfBC,.eQMwa_dfBC .eQMwa_cJVF{height:").concat(theme.xSmallSize || 'inherit', ";width:").concat(theme.xSmallSize || 'inherit', "}\n\n.eQMwa_dfBC .eQMwa_fqzO{padding:0.5rem}\n\n.eQMwa_dfBC .eQMwa_fSpQ{stroke-width:0.5em}\n\n.eQMwa_dfBC .eQMwa_eCEP{transform-origin:").concat(theme.xSmallTransform || 'inherit', " ").concat(theme.xSmallTransform || 'inherit', "}\n\n.eQMwa_dfBC .eQMwa_cDWE,.eQMwa_dfBC .eQMwa_eCEP{stroke-width:0.185em}\n\n.eQMwa_dfBC .eQMwa_cDWE{stroke-dasharray:").concat(theme.xSmallCircumference || 'inherit', "}\n\n.eQMwa_doqw,.eQMwa_doqw .eQMwa_cJVF{height:").concat(theme.smallSize || 'inherit', ";width:").concat(theme.smallSize || 'inherit', "}\n\n.eQMwa_doqw .eQMwa_fSpQ{stroke-width:1em}\n\n.eQMwa_doqw .eQMwa_eCEP{transform-origin:").concat(theme.smallTransform || 'inherit', " ").concat(theme.smallTransform || 'inherit', "}\n\n.eQMwa_doqw .eQMwa_cDWE,.eQMwa_doqw .eQMwa_eCEP{stroke-width:0.5em}\n\n.eQMwa_doqw .eQMwa_cDWE{stroke-dasharray:").concat(theme.smallCircumference || 'inherit', "}\n\n.eQMwa_ycrn,.eQMwa_ycrn .eQMwa_cJVF{height:").concat(theme.mediumSize || 'inherit', ";width:").concat(theme.mediumSize || 'inherit', "}\n\n.eQMwa_ycrn .eQMwa_fSpQ{stroke-width:1.125em}\n\n.eQMwa_ycrn .eQMwa_eCEP{transform-origin:").concat(theme.mediumTransform || 'inherit', " ").concat(theme.mediumTransform || 'inherit', "}\n\n.eQMwa_ycrn .eQMwa_cDWE,.eQMwa_ycrn .eQMwa_eCEP{stroke-width:0.625em}\n\n.eQMwa_ycrn .eQMwa_cDWE{stroke-dasharray:").concat(theme.mediumCircumference || 'inherit', "}\n\n.eQMwa_cMDj,.eQMwa_cMDj .eQMwa_cJVF{height:").concat(theme.largeSize || 'inherit', ";width:").concat(theme.largeSize || 'inherit', "}\n\n.eQMwa_cMDj .eQMwa_fSpQ{stroke-width:1.375em}\n\n.eQMwa_cMDj .eQMwa_eCEP{transform-origin:").concat(theme.largeTransform || 'inherit', " ").concat(theme.largeTransform || 'inherit', "}\n\n.eQMwa_cMDj .eQMwa_cDWE,.eQMwa_cMDj .eQMwa_eCEP{stroke-width:0.875em}\n\n.eQMwa_cMDj .eQMwa_cDWE{stroke-dasharray:").concat(theme.largeCircumference || 'inherit', "}\n\n.eQMwa_dArV .eQMwa_eCEP{opacity:0.01;transform:translateZ(0) scale(0.1)}\n\n.eQMwa_dArV .eQMwa_cwzs{opacity:0;transform:translate3d(0,35%,0)}\n\n.eQMwa_dArV .eQMwa_cDWE{opacity:0}\n\n.eQMwa_dArV.eQMwa_dfBC .eQMwa_cDWE{stroke-dashoffset:").concat(theme.xSmallCircumference || 'inherit', "!important}\n\n.eQMwa_dArV.eQMwa_doqw .eQMwa_cDWE{stroke-dashoffset:").concat(theme.smallCircumference || 'inherit', "!important}\n\n.eQMwa_dArV.eQMwa_ycrn .eQMwa_cDWE{stroke-dashoffset:").concat(theme.mediumCircumference || 'inherit', "!important}\n\n.eQMwa_dArV.eQMwa_cMDj .eQMwa_cDWE{stroke-dashoffset:").concat(theme.largeCircumference || 'inherit', "!important}");
  },
  'root': 'eQMwa_bGBk',
  'circle': 'eQMwa_cJVF',
  'center': 'eQMwa_cwzs',
  'value': 'eQMwa_fqzO',
  'meter': 'eQMwa_cDWE',
  'shadow': 'eQMwa_fSpQ',
  'track': 'eQMwa_eCEP',
  'default': 'eQMwa_ddES',
  'inverse': 'eQMwa_enfx',
  'done': 'eQMwa_fFDe',
  'x-small': 'eQMwa_dfBC',
  'small': 'eQMwa_doqw',
  'medium': 'eQMwa_ycrn',
  'large': 'eQMwa_cMDj',
  'animateOnMount': 'eQMwa_dArV'
};
import theme from './theme';
/**
---
parent: DeprecatedProgress
id: DeprecatedProgressCircle
---
**/

var ProgressCircle = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(ProgressCircle, _Component);

  var _super = _createSuper(ProgressCircle);

  function ProgressCircle(props) {
    var _this;

    _classCallCheck(this, ProgressCircle);

    _this = _super.call(this);
    _this._timeouts = [];
    _this.state = {
      animateOnMount: props.animateOnMount
    };
    return _this;
  }

  _createClass(ProgressCircle, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var _this2 = this;

      if (this.state.animateOnMount) {
        this._timeouts.push(setTimeout(function () {
          _this2.setState({
            animateOnMount: false
          });
        }, 500));
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._timeouts.forEach(function (timeout) {
        return clearTimeout(timeout);
      });
    }
  }, {
    key: "circumference",
    value: function circumference() {
      var camelSize = this.props.size === 'x-small' ? 'xSmall' : this.props.size; // get the circumference of the meter circle

      return parseFloat(this.theme["".concat(camelSize, "Circumference")]);
    }
  }, {
    key: "radius",
    value: function radius() {
      var camelSize = this.props.size === 'x-small' ? 'xSmall' : this.props.size;
      return this.theme["".concat(camelSize, "Radius")];
    }
  }, {
    key: "dashOffset",
    value: function dashOffset() {
      var _this$props = this.props,
          valueNow = _this$props.valueNow,
          valueMax = _this$props.valueMax; // send the stroke-dashoffset to the meter circle, checking
      // to make sure current value doesn't exceed max value

      if (valueNow < valueMax) {
        var circumference = this.circumference(); // figure out how much offset to give the stroke to show the % complete

        return circumference - valueNow / valueMax * circumference;
      } else {
        return 0;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classes;

      var classes = (_classes = {}, _defineProperty(_classes, styles.root, true), _defineProperty(_classes, styles[this.props.size], true), _defineProperty(_classes, styles[this.props.variant], true), _defineProperty(_classes, styles.animateOnMount, this.state.animateOnMount), _defineProperty(_classes, styles.done, this.props.successColor && this.props.valueNow / this.props.valueMax >= 1), _classes);
      var _this$props2 = this.props,
          formatDisplayedValue = _this$props2.formatDisplayedValue,
          formatValueText = _this$props2.formatValueText,
          valueNow = _this$props2.valueNow,
          valueMax = _this$props2.valueMax,
          label = _this$props2.label;
      var valueText = formatValueText(valueNow, valueMax); // consolidating the label and aria-valuetext to put in aria-label because
      // NVDA does not read aria-valuetext: https://github.com/nvaccess/nvda/issues/913
      // But leaving aria-valuetext because JAWS ignores aria-label

      var labelAndValueText = "".concat(label, " ").concat(valueText);
      var value = typeof formatDisplayedValue === 'function' && formatDisplayedValue(valueNow, valueMax);
      var style = this.state.animateOnMount ? null : {
        strokeDashoffset: "".concat(this.dashOffset(), "em")
      };
      var radius = this.radius();
      var passthroughProps = View.omitViewProps(omitProps(this.props, ProgressCircle.propTypes, ['animateOnMount']), ProgressCircle);
      return /*#__PURE__*/React.createElement(View, Object.assign({}, passthroughProps, {
        as: this.props.as,
        elementRef: this.props.elementRef,
        className: classnames(classes),
        margin: this.props.margin
      }), /*#__PURE__*/React.createElement(ScreenReaderContent, null, /*#__PURE__*/React.createElement("progress", {
        max: valueMax,
        value: valueNow,
        "aria-valuetext": valueText,
        "aria-valuenow": valueNow,
        "aria-valuemax": valueMax,
        "aria-label": labelAndValueText
      })), value && /*#__PURE__*/React.createElement("span", {
        className: styles.center,
        "aria-hidden": "true"
      }, /*#__PURE__*/React.createElement("span", {
        className: styles.value
      }, value)), /*#__PURE__*/React.createElement("svg", {
        className: styles.circle,
        role: "presentation",
        focusable: "false"
      }, /*#__PURE__*/React.createElement("circle", {
        className: styles.shadow,
        role: "presentation",
        cx: "50%",
        cy: "50%",
        r: radius
      }), /*#__PURE__*/React.createElement("circle", {
        className: styles.track,
        role: "presentation",
        cx: "50%",
        cy: "50%",
        r: radius
      }), /*#__PURE__*/React.createElement("circle", {
        className: styles.meter,
        role: "presentation",
        style: style,
        cx: "50%",
        cy: "50%",
        r: radius
      })));
    }
  }]);

  ProgressCircle.displayName = "ProgressCircle";
  return ProgressCircle;
}(Component), _class2.propTypes = {
  /**
  * A label is required for accessibility
  */
  label: PropTypes.string.isRequired,

  /**
  * Different-sized progress bars and circles
  */
  size: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),

  /**
  * Maximum value (defaults to 100)
  */
  valueMax: PropTypes.number,

  /**
  * Receives the progress of the event
  */
  valueNow: PropTypes.number,

  /**
  * A function that returns the current value formatted for screen readers
  */
  formatValueText: PropTypes.func,

  /**
  * A function to format the displayed value. If null the value will not display.
  */
  formatDisplayedValue: PropTypes.func,

  /**
  * Animate the progress meter to the current value when the component
  * has mounted
  */
  animateOnMount: PropTypes.bool,

  /**
  * The bar changes to your theme's success color when complete
  */
  successColor: PropTypes.bool,

  /**
  * Choose either a progress bar or circle. The `-inverse` variants are for
  * when you need the Progress component to appear on inverse backgrounds
  */
  variant: PropTypes.oneOf(['default', 'inverse']),

  /**
  * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
  * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
  * familiar CSS-like shorthand. For example: `margin="small auto large"`.
  */
  margin: ThemeablePropTypes.spacing,
  elementRef: PropTypes.func,
  as: PropTypes.elementType
}, _class2.defaultProps = {
  formatValueText: function formatValueText(valueNow, valueMax) {
    return "".concat(valueNow, " / ").concat(valueMax);
  },
  size: 'medium',
  valueMax: 100,
  valueNow: 0,
  variant: 'default',
  animateOnMount: false,
  successColor: true,
  as: 'div',
  formatDisplayedValue: void 0,
  margin: void 0,
  elementRef: void 0
}, _temp)) || _class);
export default ProgressCircle;
export { ProgressCircle };
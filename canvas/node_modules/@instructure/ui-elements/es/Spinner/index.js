import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _dec3, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Spinner as UISpinner } from '@instructure/ui-spinner';
import { deprecated } from '@instructure/ui-react-utils';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
import { testable } from '@instructure/ui-testable';
import theme from './theme';
/**
---
category: components/deprecated
id: DeprecatedSpinner
---
**/

var Spinner = (_dec = deprecated('7.0.0', null, 'Use Spinner from ui-spinner instead.'), _dec2 = testable(), _dec3 = themeable(theme), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Spinner, _Component);

  var _super = _createSuper(Spinner);

  function Spinner() {
    _classCallCheck(this, Spinner);

    return _super.apply(this, arguments);
  }

  _createClass(Spinner, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(UISpinner, this.props);
    }
  }]);

  Spinner.displayName = "Spinner";
  return Spinner;
}(Component), _class2.propTypes = {
  /**
  * Give the spinner a title to be read by screenreaders (Deprecated)
  */
  title: PropTypes.string,

  /**
  * Give the spinner a title to be read by screenreaders
  */
  renderTitle: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),

  /**
  * Different-sized spinners
  */
  size: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),

  /**
  * Different color schemes for use with light or dark backgrounds
  */
  variant: PropTypes.oneOf(['default', 'inverse']),

  /**
  * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
  * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
  * familiar CSS-like shorthand. For example: `margin="small auto large"`.
  */
  margin: ThemeablePropTypes.spacing,
  elementRef: PropTypes.func,
  as: PropTypes.elementType
}, _class2.defaultProps = {
  as: 'div',
  size: 'medium',
  variant: 'default',
  margin: void 0,
  elementRef: void 0,
  renderTitle: void 0,
  title: void 0
}, _temp)) || _class) || _class) || _class);
export default Spinner;
export { Spinner };
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { testable } from '@instructure/ui-testable';
import { themeable } from '@instructure/ui-themeable';
import { omitProps } from '@instructure/ui-react-utils';
var styles = {
  componentId: 'fNsZS',
  template: function template(theme) {
    return "\n\n.fNsZS_bGBk{box-sizing:border-box;display:flex;flex-direction:column-reverse;font-family:".concat(theme.fontFamily || 'inherit', ";padding:").concat(theme.padding || 'inherit', ";text-align:").concat(theme.textAlign || 'inherit', "}\n\n[dir=ltr] .fNsZS_bGBk,[dir=rtl] .fNsZS_bGBk{text-align:").concat(theme.textAlign || 'inherit', "}\n\n.fNsZS_bGBk.fNsZS_dxfV,[dir=ltr] .fNsZS_bGBk.fNsZS_dxfV,[dir=rtl] .fNsZS_bGBk.fNsZS_dxfV{text-align:left}\n\n.fNsZS_bGBk.fNsZS_cwzs,[dir=ltr] .fNsZS_bGBk.fNsZS_cwzs,[dir=rtl] .fNsZS_bGBk.fNsZS_cwzs{text-align:center}\n\n.fNsZS_bGBk.fNsZS_bYta,[dir=ltr] .fNsZS_bGBk.fNsZS_bYta,[dir=rtl] .fNsZS_bGBk.fNsZS_bYta{text-align:right}\n\n.fNsZS_blJt{color:").concat(theme.labelColor || 'inherit', ";font-size:").concat(theme.labelFontSize || 'inherit', "}\n\n.fNsZS_fqzO{color:").concat(theme.valueColor || 'inherit', ";font-size:").concat(theme.valueFontSize || 'inherit', ";font-weight:").concat(theme.valueFontWeight || 'inherit', "}");
  },
  'root': 'fNsZS_bGBk',
  'start': 'fNsZS_dxfV',
  'center': 'fNsZS_cwzs',
  'end': 'fNsZS_bYta',
  'label': 'fNsZS_blJt',
  'value': 'fNsZS_fqzO'
};
import theme from './theme';
/**
---
parent: DeprecatedMetricsList
id: DeprecatedMetricsList.Item
---
**/

var MetricsListItem = (_dec = testable(), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(MetricsListItem, _Component);

  var _super = _createSuper(MetricsListItem);

  function MetricsListItem() {
    _classCallCheck(this, MetricsListItem);

    return _super.apply(this, arguments);
  }

  _createClass(MetricsListItem, [{
    key: "render",
    value: function render() {
      var _classes;

      var textAlign = this.props.textAlign;
      var classes = (_classes = {}, _defineProperty(_classes, styles.root, true), _defineProperty(_classes, styles[textAlign], true), _classes);
      return /*#__PURE__*/React.createElement("div", Object.assign({}, omitProps(this.props, MetricsListItem.propTypes), {
        role: "row",
        className: classnames(classes)
      }), /*#__PURE__*/React.createElement("div", {
        role: "rowheader",
        className: styles.label
      }, this.props.label), /*#__PURE__*/React.createElement("div", {
        role: "gridcell",
        className: styles.value
      }, this.props.value));
    }
  }]);

  MetricsListItem.displayName = "MetricsListItem";
  return MetricsListItem;
}(Component), _class2.propTypes = {
  textAlign: PropTypes.oneOf(['start', 'center', 'end']),
  label: PropTypes.node.isRequired,
  value: PropTypes.node.isRequired
}, _class2.defaultProps = {
  textAlign: 'center'
}, _temp)) || _class) || _class);
export default MetricsListItem;
export { MetricsListItem };
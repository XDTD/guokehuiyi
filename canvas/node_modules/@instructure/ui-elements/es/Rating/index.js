import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _dec3, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { View } from '@instructure/ui-view';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { omitProps, deprecated } from '@instructure/ui-react-utils';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
import { testable } from '@instructure/ui-testable';
import { RatingIcon } from './RatingIcon';
var styles = {
  componentId: 'fHeeD',
  template: function template(theme) {
    return "\n\n.fHeeD_bGBk{line-height:1}";
  },
  'root': 'fHeeD_bGBk'
};
import theme from './theme';
/**
---
category: components/deprecated
id: DeprecatedRating
---
**/

var Rating = (_dec = deprecated('7.0.0', null, 'Use Rating from ui-rating instead.'), _dec2 = testable(), _dec3 = themeable(theme, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Rating, _Component);

  var _super = _createSuper(Rating);

  function Rating() {
    _classCallCheck(this, Rating);

    return _super.apply(this, arguments);
  }

  _createClass(Rating, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          iconCount = _this$props.iconCount,
          animateFill = _this$props.animateFill,
          size = _this$props.size,
          margin = _this$props.margin,
          label = _this$props.label,
          formatValueText = _this$props.formatValueText;

      var classes = _defineProperty({}, styles.root, true);

      var valueText = label + ' ' + formatValueText(this.filled, iconCount);
      var passthroughProps = View.omitViewProps(omitProps(this.props, Rating.propTypes), Rating);
      return /*#__PURE__*/React.createElement(View, Object.assign({}, passthroughProps, {
        className: classnames(classes),
        margin: margin,
        display: "inline-block"
      }), /*#__PURE__*/React.createElement(ScreenReaderContent, null, valueText), _toConsumableArray(Array(this.filled)).map(function (x, i) {
        return /*#__PURE__*/React.createElement(RatingIcon, {
          key: i + 1,
          filled: true,
          animateFill: animateFill,
          animationDelay: animateFill ? (i + 1) * 200 : null,
          size: size
        });
      }), _toConsumableArray(Array(this.empty)).map(function (x, i) {
        return /*#__PURE__*/React.createElement(RatingIcon, {
          key: i + 1,
          size: size
        });
      }));
    }
  }, {
    key: "filled",
    get: function get() {
      var _this$props2 = this.props,
          valueNow = _this$props2.valueNow,
          iconCount = _this$props2.iconCount,
          valueMax = _this$props2.valueMax; // prevent divide by zero errors

      var max = valueMax > 0 ? valueMax : iconCount;
      var filledIcons = Math.round(valueNow * iconCount / max); // Handle edge case where valueNow is greater than valueMax

      if (filledIcons > iconCount) {
        return iconCount;
      } else {
        return filledIcons;
      }
    }
  }, {
    key: "empty",
    get: function get() {
      return this.props.iconCount - this.filled;
    }
  }]);

  Rating.displayName = "Rating";
  return Rating;
}(Component), _class2.propTypes = {
  /**
  * A label is required for accessibility
  */
  label: PropTypes.string.isRequired,

  /**
  * A function that returns the current value formatted for screen readers
  */
  formatValueText: PropTypes.func,

  /**
  * Choose from a 0-3 or 0-5 rating system
  */
  iconCount: PropTypes.oneOf([3, 5]),

  /**
  * Choose from different rating icon sizes
  */
  size: PropTypes.oneOf(['small', 'medium', 'large']),

  /**
  * The maximum rating (defaults to iconCount)
  */
  valueMax: PropTypes.number,

  /**
  * The current rating
  */
  valueNow: PropTypes.number,

  /**
  * Set to make the icons animate when they become filled
  */
  animateFill: PropTypes.bool,

  /**
  * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
  * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
  * familiar CSS-like shorthand. For example: `margin="small auto large"`.
  */
  margin: ThemeablePropTypes.spacing
}, _class2.defaultProps = {
  animateFill: false,
  formatValueText: function formatValueText(filled, iconCount) {
    return "".concat(filled, " / ").concat(iconCount);
  },
  iconCount: 3,
  size: 'medium',
  valueNow: 0,
  margin: void 0,
  valueMax: void 0
}, _temp)) || _class) || _class) || _class);
export default Rating;
export { Rating };
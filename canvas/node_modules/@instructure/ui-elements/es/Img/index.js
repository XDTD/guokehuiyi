import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _dec3, _dec4, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { View } from '@instructure/ui-view';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
import { omitProps, deprecated } from '@instructure/ui-react-utils';
import { supportsObjectFit } from '@instructure/ui-dom-utils';
import { testable } from '@instructure/ui-testable';
var styles = {
  componentId: 'IIMRk',
  template: function template(theme) {
    return "\n\n.IIMRk_EtBB{bottom:auto;float:none;left:auto;line-height:normal;margin:0;max-height:none;max-width:100%;min-height:0;min-width:0;padding:0;position:static;right:auto;top:auto;transform:none}\n\n[dir=ltr] .IIMRk_EtBB,[dir=rtl] .IIMRk_EtBB{float:none}\n\n.IIMRk_fJwG{display:inline-block;vertical-align:middle}\n\n.IIMRk_cYkL{height:100%;left:0;position:absolute;top:0;transition:all ".concat(theme.overlayTransitionDuration || 'inherit', ";width:100%}\n\n.IIMRk_fqss{display:block}\n\n.IIMRk_dIXK,.IIMRk_cYkL{transition:all ").concat(theme.effectTransitionDuration || 'inherit', "}\n\n.IIMRk_fZcw,.IIMRk_dETD,.IIMRk_bPct,.IIMRk_eJVL{height:100%;width:100%}\n\n.IIMRk_eJVL{object-fit:cover}\n\n.IIMRk_fZcw{object-fit:contain}\n\n.IIMRk_fZcw.IIMRk_fqss{height:auto;max-height:100%;max-width:100%;width:auto}\n\n.IIMRk_baUy{height:inherit}\n\n.IIMRk_dETD{background-position:50%;background-repeat:no-repeat}\n\n.IIMRk_dETD.IIMRk_baUy{background-size:contain}\n\n.IIMRk_dETD.IIMRk_bPct{background-size:cover}\n\n.IIMRk_rUUn{overflow:hidden;position:relative}");
  },
  'image': 'IIMRk_EtBB',
  'overlayLayout': 'IIMRk_fJwG',
  'overlay': 'IIMRk_cYkL',
  'has-overlay': 'IIMRk_fqss',
  'has-filter': 'IIMRk_dIXK',
  'contain': 'IIMRk_fZcw',
  'container--has-background': 'IIMRk_dETD',
  'container--has-cover': 'IIMRk_bPct',
  'cover': 'IIMRk_eJVL',
  'container--has-contain': 'IIMRk_baUy',
  'container--has-overlay': 'IIMRk_rUUn'
};
import theme from './theme';
/**
---
category: components/deprecated
id: DeprecatedImg
---
**/

var Img = (_dec = testable(), _dec2 = deprecated('7.0.0', {
  cover: 'constrain'
}), _dec3 = deprecated('7.0.0', null, 'Use Img from ui-img instead.'), _dec4 = themeable(theme, styles), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Img, _Component);

  var _super = _createSuper(Img);

  function Img() {
    _classCallCheck(this, Img);

    return _super.apply(this, arguments);
  }

  _createClass(Img, [{
    key: "renderFilter",
    value: function renderFilter() {
      var blur = "blur(".concat(this.theme.imageBlurAmount, ")");
      var grayscale = 'grayscale(1)';

      if (this.props.grayscale && this.props.blur) {
        return "".concat(blur, " ").concat(grayscale);
      } else if (this.props.grayscale) {
        return grayscale;
      } else if (this.props.blur) {
        return blur;
      } else {
        return null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          src = _this$props.src,
          alt = _this$props.alt,
          margin = _this$props.margin,
          inline = _this$props.inline,
          overlay = _this$props.overlay,
          grayscale = _this$props.grayscale,
          blur = _this$props.blur,
          cover = _this$props.cover,
          constrain = _this$props.constrain,
          width = _this$props.width,
          height = _this$props.height,
          elementRef = _this$props.elementRef;
      var a11yProps = {
        alt: alt || ''
      };
      var imageProps = {
        className: classnames((_classnames = {}, _defineProperty(_classnames, styles.image, true), _defineProperty(_classnames, styles['has-overlay'], overlay), _defineProperty(_classnames, styles['has-filter'], blur || grayscale), _defineProperty(_classnames, styles.cover, this.supportsObjectFit && (cover || constrain === 'cover')), _defineProperty(_classnames, styles.contain, this.supportsObjectFit && constrain === 'contain'), _classnames)),
        style: {
          filter: blur || grayscale ? this.renderFilter() : 'none'
        },
        src: src
      };

      var passthroughProps = _objectSpread({}, View.omitViewProps(omitProps(this.props, Img.propTypes), Img), {
        width: width,
        height: height,
        margin: margin,
        display: inline ? 'inline-block' : 'block',
        elementRef: elementRef
      }); // if browser does not support ObjectFit CSS, and Img needs cover (deprecated) or constrain,
      // serve up a background-image instead


      var hasBackground = !this.supportsObjectFit && (cover || constrain);

      if (overlay || hasBackground) {
        var _classnames2;

        // if a background image is rendered we add the a11y props on the container element
        var containerProps = hasBackground ? _objectSpread({}, a11yProps, {}, passthroughProps) : passthroughProps;
        return /*#__PURE__*/React.createElement(View, Object.assign({}, containerProps, {
          as: "span",
          className: classnames((_classnames2 = {}, _defineProperty(_classnames2, styles['container--has-overlay'], overlay), _defineProperty(_classnames2, styles['container--has-cover'], cover || constrain === 'cover'), _defineProperty(_classnames2, styles['container--has-contain'], constrain === 'contain'), _defineProperty(_classnames2, styles['container--has-background'], hasBackground), _classnames2)),
          style: {
            backgroundImage: hasBackground ? "url(".concat(src, ")") : void 0
          }
        }), !hasBackground && /*#__PURE__*/React.createElement("img", Object.assign({}, imageProps, a11yProps)) // eslint-disable-line jsx-a11y/alt-text
        , overlay && /*#__PURE__*/React.createElement("span", {
          className: styles.overlay,
          style: {
            backgroundColor: overlay.color,
            opacity: overlay.opacity * 0.1,
            mixBlendMode: overlay.blend ? overlay.blend : null
          }
        }));
      } else {
        return /*#__PURE__*/React.createElement(View, Object.assign({}, passthroughProps, imageProps, a11yProps, {
          as: "img"
        }));
      }
    }
  }, {
    key: "supportsObjectFit",
    get: function get() {
      return supportsObjectFit();
    }
  }]);

  Img.displayName = "Img";
  return Img;
}(Component), _class2.propTypes = {
  src: PropTypes.string.isRequired,
  alt: PropTypes.string,
  inline: PropTypes.bool,

  /**
  * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
  * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
  * familiar CSS-like shorthand. For example: `margin="small auto large"`.
  */
  margin: ThemeablePropTypes.spacing,

  /**
  * Valid values for `opacity` are `0` - `10`. Valid values for `blend` are
  * `normal` (default), `multiply`, `screen`, `overlay`, and `color-burn`.
  */
  overlay: PropTypes.shape({
    color: PropTypes.string.isRequired,
    opacity: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).isRequired,
    blend: PropTypes.oneOf(['normal', 'multiply', 'screen', 'overlay', 'color-burn'])
  }),
  grayscale: PropTypes.bool,
  blur: PropTypes.bool,
  cover: PropTypes.bool,
  // eslint-disable-line react/require-default-props
  constrain: PropTypes.oneOf(['cover', 'contain']),
  elementRef: PropTypes.func,
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
}, _class2.defaultProps = {
  margin: void 0,
  overlay: void 0,
  constrain: void 0,
  elementRef: void 0,
  height: void 0,
  width: void 0,
  alt: '',
  inline: true,
  grayscale: false,
  blur: false
}, _temp)) || _class) || _class) || _class) || _class);
export default Img;
export { Img };
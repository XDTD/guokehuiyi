import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _dec3, _dec4, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { Dialog } from '@instructure/ui-dialog';
import { deprecated, omitProps } from '@instructure/ui-react-utils';
import { element } from '@instructure/ui-prop-types';
import { createChainedFunction } from '@instructure/ui-utils';
import { bidirectional } from '@instructure/ui-i18n';
import { themeable } from '@instructure/ui-themeable';
import { testable } from '@instructure/ui-testable';
import { Portal } from '@instructure/ui-portal';
import { mirrorHorizontalPlacement } from '@instructure/ui-position';
import { Transition } from '@instructure/ui-motion';
var styles = {
  componentId: 'fLzZc',
  template: function template(theme) {
    return "\n\n.fLzZc_bGBk{background-color:".concat(theme.background || 'inherit', ";box-sizing:border-box;max-height:100vh;max-width:100vw;overflow-x:hidden;overflow-y:auto;position:fixed;z-index:").concat(theme.zIndex || 'inherit', "}\n\n.fLzZc_dHtp{border-color:").concat(theme.borderColor || 'inherit', ";border-style:").concat(theme.borderStyle || 'inherit', ";border-width:0}\n\n.fLzZc_fSpQ{box-shadow:").concat(theme.boxShadow || 'inherit', "}\n\n.fLzZc_ehJX .fLzZc_caGd,.fLzZc_bQpq .fLzZc_caGd,.fLzZc_bxia .fLzZc_caGd{min-height:100vh}\n\n.fLzZc_bgun,.fLzZc_dLYh{inset-inline-end:0;inset-inline-start:0}\n\n[dir=ltr] .fLzZc_bgun,[dir=ltr] .fLzZc_dLYh{left:0;right:0}\n\n[dir=rtl] .fLzZc_bgun,[dir=rtl] .fLzZc_dLYh{left:0;right:0}\n\n.fLzZc_bQpq,.fLzZc_bxia{bottom:0;top:0}\n\n.fLzZc_bQpq.fLzZc_dfBC,.fLzZc_bxia.fLzZc_dfBC{width:").concat(theme.xSmallWidth || 'inherit', "}\n\n.fLzZc_bQpq.fLzZc_doqw,.fLzZc_bxia.fLzZc_doqw{width:").concat(theme.smallWidth || 'inherit', "}\n\n.fLzZc_bQpq.fLzZc_cXTs,.fLzZc_bxia.fLzZc_cXTs{width:").concat(theme.regularWidth || 'inherit', "}\n\n.fLzZc_bQpq.fLzZc_ycrn,.fLzZc_bxia.fLzZc_ycrn{width:").concat(theme.mediumWidth || 'inherit', "}\n\n.fLzZc_bQpq.fLzZc_cMDj,.fLzZc_bxia.fLzZc_cMDj{width:").concat(theme.largeWidth || 'inherit', "}\n\n.fLzZc_ehJX{bottom:0;left:0;right:0;top:0}\n\n.fLzZc_bxia{inset-inline-end:auto;inset-inline-start:0}\n\n[dir=ltr] .fLzZc_bxia{left:0;right:auto}\n\n[dir=rtl] .fLzZc_bxia{left:auto;right:0}\n\n.fLzZc_bxia.fLzZc_dHtp{border-inline-end-width:").concat(theme.borderWidth || 'inherit', "}\n\n[dir=ltr] .fLzZc_bxia.fLzZc_dHtp{border-right-width:").concat(theme.borderWidth || 'inherit', "}\n\n[dir=rtl] .fLzZc_bxia.fLzZc_dHtp{border-left-width:").concat(theme.borderWidth || 'inherit', "}\n\n.fLzZc_bQpq{inset-inline-end:0;inset-inline-start:auto}\n\n[dir=ltr] .fLzZc_bQpq{left:auto;right:0}\n\n[dir=rtl] .fLzZc_bQpq{left:0;right:auto}\n\n.fLzZc_bQpq.fLzZc_dHtp{border-inline-start-width:").concat(theme.borderWidth || 'inherit', "}\n\n[dir=ltr] .fLzZc_bQpq.fLzZc_dHtp{border-left-width:").concat(theme.borderWidth || 'inherit', "}\n\n[dir=rtl] .fLzZc_bQpq.fLzZc_dHtp{border-right-width:").concat(theme.borderWidth || 'inherit', "}\n\n.fLzZc_dLYh{top:0}\n\n.fLzZc_dLYh.fLzZc_dHtp{border-bottom-width:").concat(theme.borderWidth || 'inherit', "}\n\n.fLzZc_bgun{bottom:0}\n\n.fLzZc_bgun.fLzZc_dHtp{border-top-width:").concat(theme.borderWidth || 'inherit', "}");
  },
  'root': 'fLzZc_bGBk',
  'border': 'fLzZc_dHtp',
  'shadow': 'fLzZc_fSpQ',
  'placement--center': 'fLzZc_ehJX',
  'content': 'fLzZc_caGd',
  'placement--end': 'fLzZc_bQpq',
  'placement--start': 'fLzZc_bxia',
  'placement--bottom': 'fLzZc_bgun',
  'placement--top': 'fLzZc_dLYh',
  'x-small': 'fLzZc_dfBC',
  'small': 'fLzZc_doqw',
  'regular': 'fLzZc_cXTs',
  'medium': 'fLzZc_ycrn',
  'large': 'fLzZc_cMDj'
};
import theme from './theme';
/**
---
category: components/deprecated
id: DeprecatedTray
---
**/

var Tray = (_dec = deprecated('7.0.0', null, 'Use Tray from ui-tray instead.'), _dec2 = testable(), _dec3 = bidirectional(), _dec4 = themeable(theme, styles), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Tray, _Component);

  var _super = _createSuper(Tray);

  function Tray() {
    var _this;

    _classCallCheck(this, Tray);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      transitioning: false
    };

    _this.handleTransitionComplete = function () {
      _this.setState({
        transitioning: false
      });
    };

    _this.handlePortalOpen = function (DOMNode) {
      _this.DOMNode = DOMNode; // We apply the theme here because now we have a DOM node (provided by Portal)

      DOMNode && _this.applyTheme(DOMNode);
    };

    return _this;
  }

  _createClass(Tray, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.open !== prevProps.open) {
        this.setState({
          transitioning: true
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          label = _this$props.label,
          children = _this$props.children,
          size = _this$props.size,
          placement = _this$props.placement,
          open = _this$props.open,
          defaultFocusElement = _this$props.defaultFocusElement,
          contentRef = _this$props.contentRef,
          shouldContainFocus = _this$props.shouldContainFocus,
          shouldReturnFocus = _this$props.shouldReturnFocus,
          shouldCloseOnDocumentClick = _this$props.shouldCloseOnDocumentClick,
          onOpen = _this$props.onOpen,
          onClose = _this$props.onClose,
          onDismiss = _this$props.onDismiss,
          mountNode = _this$props.mountNode,
          insertAt = _this$props.insertAt,
          liveRegion = _this$props.liveRegion,
          onEnter = _this$props.onEnter,
          onEntering = _this$props.onEntering,
          onEntered = _this$props.onEntered,
          onExit = _this$props.onExit,
          onExiting = _this$props.onExiting,
          onExited = _this$props.onExited,
          onTransition = _this$props.onTransition,
          border = _this$props.border,
          shadow = _this$props.shadow,
          props = _objectWithoutProperties(_this$props, ["label", "children", "size", "placement", "open", "defaultFocusElement", "contentRef", "shouldContainFocus", "shouldReturnFocus", "shouldCloseOnDocumentClick", "onOpen", "onClose", "onDismiss", "mountNode", "insertAt", "liveRegion", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "onTransition", "border", "shadow"]);

      var portalIsOpen = open || this.state.transitioning;
      return /*#__PURE__*/React.createElement(Portal, {
        open: portalIsOpen,
        onOpen: this.handlePortalOpen,
        insertAt: insertAt,
        mountNode: mountNode
      }, portalIsOpen && /*#__PURE__*/React.createElement(Transition, {
        in: open,
        type: this.transition,
        onTransition: onTransition,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: createChainedFunction(this.handleTransitionComplete, onEntered, onOpen),
        onExit: onExit,
        onExiting: onExiting,
        onExited: createChainedFunction(this.handleTransitionComplete, onExited, onClose),
        transitionOnMount: true,
        transitionEnter: true,
        transitionExit: true
      }, /*#__PURE__*/React.createElement("span", Object.assign({}, omitProps(props, Tray.propTypes), {
        className: classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles.border, border), _defineProperty(_classnames, styles.shadow, shadow), _defineProperty(_classnames, styles[size], true), _defineProperty(_classnames, styles["placement--".concat(this.props.placement)], true), _classnames)),
        ref: contentRef
      }), this.state.transitioning ? children : /*#__PURE__*/React.createElement(Dialog, {
        as: "div",
        label: label,
        defaultFocusElement: this.defaultFocusElement,
        open: true,
        shouldContainFocus: shouldContainFocus,
        shouldReturnFocus: shouldReturnFocus,
        shouldCloseOnDocumentClick: shouldCloseOnDocumentClick,
        shouldCloseOnEscape: true,
        liveRegion: liveRegion,
        onDismiss: onDismiss
      }, /*#__PURE__*/React.createElement("div", {
        className: styles.content
      }, children)))));
    }
  }, {
    key: "placement",
    get: function get() {
      var placement = this.props.placement;
      return this.rtl ? mirrorHorizontalPlacement(placement, ' ') : placement;
    }
  }, {
    key: "direction",
    get: function get() {
      switch (this.placement) {
        case 'top':
          return 'up';

        case 'bottom':
          return 'down';

        case 'end':
          return 'right';

        default:
          // start
          return 'left';
      }
    }
  }, {
    key: "transition",
    get: function get() {
      return "slide-".concat(this.direction);
    }
  }, {
    key: "defaultFocusElement",
    get: function get() {
      var _this2 = this;

      return this.props.defaultFocusElement || function () {
        return _this2._closeButton;
      };
    }
  }, {
    key: "DOMNode",
    get: function get() {
      return this._DOMNode;
    },
    set: function set(el) {
      this._DOMNode = el;
    }
  }]);

  Tray.displayName = "Tray";
  return Tray;
}(Component), _class2.propTypes = {
  label: PropTypes.string.isRequired,
  children: PropTypes.node,

  /*
   * The size (width) of the `<Tray />` when placement is `start` or `end`
   */
  size: PropTypes.oneOf(['x-small', 'small', 'regular', 'medium', 'large']),

  /**
  * Placement to determine where the `<Tray />` should display in the viewport
  */
  placement: PropTypes.oneOf(['top', 'bottom', 'start', 'end']),

  /**
   * Whether or not the `<Tray />` is open
   */
  open: PropTypes.bool,

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),

  /**
   *
   * A function that returns a reference to the content element
   */
  contentRef: PropTypes.func,

  /**
   * Whether focus should be contained within the `<Tray/>` when it is open
   */
  shouldContainFocus: PropTypes.bool,

  /**
   * Whether focus should be restored when the `<Tray/>` is closed
   */
  shouldReturnFocus: PropTypes.bool,

  /**
   * Should the `<Tray />` hide when clicks occur outside the content
   */
  shouldCloseOnDocumentClick: PropTypes.bool,

  /**
   * Callback fired when `<Tray />` content has been mounted in the DOM
   */
  onOpen: PropTypes.func,

  /**
   * Callback fired when `<Tray />` has been unmounted from the DOM
   */
  onClose: PropTypes.func,

  /**
   * Callback fired when the `<Tray />` is requesting to be closed
   */
  onDismiss: PropTypes.func,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Tray />` (defaults to `document.body`)
   */
  mountNode: PropTypes.oneOfType([element, PropTypes.func]),

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: PropTypes.oneOf(['bottom', 'top']),

  /**
   * An element, function returning an element, or array of elements that will not be hidden from
   * the screen reader when the `<Tray />` is open
   */
  liveRegion: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element, PropTypes.func]),

  /**
   * Callback fired when the <Tray /> transitions in/out
   */
  onTransition: PropTypes.func,

  /**
   * Callback fired before the <Tray /> transitions in
   */
  onEnter: PropTypes.func,

  /**
   * Callback fired as the <Tray /> begins to transition in
   */
  onEntering: PropTypes.func,

  /**
   * Callback fired after the <Tray /> finishes transitioning in
   */
  onEntered: PropTypes.func,

  /**
   * Callback fired right before the <Tray /> transitions out
   */
  onExit: PropTypes.func,

  /**
   * Callback fired as the <Tray /> begins to transition out
   */
  onExiting: PropTypes.func,

  /**
   * Callback fired after the <Tray /> finishes transitioning out
   */
  onExited: PropTypes.func,

  /**
   * Should the `<Tray />` have a border
   */
  border: PropTypes.bool,

  /**
   * Should the `<Tray />` have a box shadow
   */
  shadow: PropTypes.bool
}, _class2.defaultProps = {
  open: false,
  onOpen: function onOpen(event) {},
  onClose: function onClose(event) {},
  onDismiss: function onDismiss(event) {},
  onEnter: function onEnter() {},
  onEntering: function onEntering() {},
  onEntered: function onEntered() {},
  onExit: function onExit() {},
  onExiting: function onExiting() {},
  onExited: function onExited() {},
  mountNode: null,
  insertAt: 'bottom',
  liveRegion: null,
  contentRef: function contentRef(el) {},
  shouldCloseOnDocumentClick: false,
  shouldContainFocus: true,
  shouldReturnFocus: true,
  defaultFocusElement: null,
  size: 'small',
  placement: 'start',
  shadow: true,
  border: false,
  children: null,
  onTransition: void 0
}, _temp)) || _class) || _class) || _class) || _class);
export default Tray;
export { Tray };
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _dec3, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Children, Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { Dialog } from '@instructure/ui-dialog';
import { element, Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import { omitProps, safeCloneElement, matchComponentTypes, deprecated } from '@instructure/ui-react-utils';
import { createChainedFunction, isIE11 } from '@instructure/ui-utils';
import { Transition } from '@instructure/ui-motion';
import { Portal } from '@instructure/ui-portal';
import { themeable } from '@instructure/ui-themeable';
import { testable } from '@instructure/ui-testable';
import { Mask } from '../Mask';
import { ModalHeader } from './ModalHeader';
import { ModalBody } from './ModalBody';
import { ModalFooter } from './ModalFooter';
var styles = {
  componentId: 'deUoG',
  template: function template(theme) {
    return "\n\n.deUoG_bGBk{background:".concat(theme.background || 'inherit', ";border:0.0625rem solid ").concat(theme.borderColor || 'inherit', ";border-radius:").concat(theme.borderRadius || 'inherit', ";box-shadow:").concat(theme.boxShadow || 'inherit', ";box-sizing:border-box;color:").concat(theme.textColor || 'inherit', ";display:flex;flex-direction:column;font-family:").concat(theme.fontFamily || 'inherit', ";min-width:1px;position:relative}\n\n.deUoG_bGBk.deUoG_eoSs{display:block;overflow:auto}\n\n.deUoG_enfx{background:").concat(theme.inverseBackground || 'inherit', ";color:").concat(theme.inverseTextColor || 'inherit', "}\n\n.deUoG_uUeq,.deUoG_cMDj,.deUoG_ycrn,.deUoG_doqw{max-height:95%;max-width:95%}\n\n.deUoG_uUeq.deUoG_eoSs,.deUoG_cMDj.deUoG_eoSs,.deUoG_ycrn.deUoG_eoSs,.deUoG_doqw.deUoG_eoSs{max-height:none}\n\n.deUoG_uUeq.deUoG_fHQo:not(.deUoG_eoSs),.deUoG_cMDj.deUoG_fHQo:not(.deUoG_eoSs),.deUoG_ycrn.deUoG_fHQo:not(.deUoG_eoSs),.deUoG_doqw.deUoG_fHQo:not(.deUoG_eoSs){transform:translateY(2.5%)}\n\n.deUoG_uUeq{flex:0 1 auto;min-width:").concat(theme.autoMinWidth || 'inherit', "}\n\n.deUoG_doqw{flex:0 1 ").concat(theme.smallMaxWidth || 'inherit', "}\n\n.deUoG_ycrn{flex:0 1 ").concat(theme.mediumMaxWidth || 'inherit', "}\n\n.deUoG_cMDj{flex:0 1 ").concat(theme.largeMaxWidth || 'inherit', "}\n\n.deUoG_cMOR{border:none;border-radius:0;box-shadow:none;flex:1;height:100%;width:100%}\n\n.deUoG_VVEf{align-items:flex-start;bottom:0;box-sizing:border-box;display:flex;justify-content:center;left:0;overflow:auto;right:0;top:0;z-index:").concat(theme.zIndex || 'inherit', "}\n\n.deUoG_ekLq{position:fixed}\n\n.deUoG_fMis{position:absolute}\n\n.deUoG_fuFB{display:block;height:100%;position:relative;width:100%}");
  },
  'root': 'deUoG_bGBk',
  'ie11': 'deUoG_eoSs',
  'inverse': 'deUoG_enfx',
  'auto': 'deUoG_uUeq',
  'large': 'deUoG_cMDj',
  'medium': 'deUoG_ycrn',
  'small': 'deUoG_doqw',
  'overflow--fit': 'deUoG_fHQo',
  'fullscreen': 'deUoG_cMOR',
  'fullscreenLayout': 'deUoG_VVEf',
  'fullscreenLayout--window': 'deUoG_ekLq',
  'fullscreenLayout--parent': 'deUoG_fMis',
  'constrainContext': 'deUoG_fuFB'
};
import theme from './theme';
/**
---
category: components/deprecated
id: DeprecatedModal
---
**/

var Modal = (_dec = deprecated('7.0.0', null, 'Use Modal from ui-modal instead.'), _dec2 = testable(), _dec3 = themeable(theme, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Modal, _Component);

  var _super = _createSuper(Modal);

  function Modal(props) {
    var _this;

    _classCallCheck(this, Modal);

    _this = _super.call(this, props);

    _this.handlePortalOpen = function (DOMNode) {
      _this.DOMNode = DOMNode;
      DOMNode && _this.applyTheme(DOMNode);
    };

    _this.handleTransitionExited = function () {
      _this.setState({
        transitioning: false
      });
    };

    _this.contentRef = function (el) {
      _this._content = el;

      if (typeof _this.props.contentRef === 'function') {
        _this.props.contentRef(el);
      }
    };

    _this.state = {
      transitioning: false
    };
    return _this;
  }

  _createClass(Modal, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.open && !this.props.open) {
        // closing
        this.setState({
          transitioning: prevProps.transition !== null
        });
      }
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var _this$props = this.props,
          children = _this$props.children,
          variant = _this$props.variant,
          overflow = _this$props.overflow;
      return Children.map(children, function (child) {
        if (!child) return; // ignore null, falsy children

        if (matchComponentTypes(child, [ModalBody])) {
          return safeCloneElement(child, {
            variant: variant,
            overflow: child.props.overflow || overflow
          });
        } else {
          return safeCloneElement(child, {
            variant: variant
          });
        }
      });
    }
  }, {
    key: "renderModal",
    value: function renderModal() {
      var _classnames;

      var _this$props2 = this.props,
          onDismiss = _this$props2.onDismiss,
          label = _this$props2.label,
          shouldCloseOnDocumentClick = _this$props2.shouldCloseOnDocumentClick,
          shouldReturnFocus = _this$props2.shouldReturnFocus,
          liveRegion = _this$props2.liveRegion,
          size = _this$props2.size,
          variant = _this$props2.variant,
          contentRef = _this$props2.contentRef,
          constrain = _this$props2.constrain,
          props = _objectWithoutProperties(_this$props2, ["onDismiss", "label", "shouldCloseOnDocumentClick", "shouldReturnFocus", "liveRegion", "size", "variant", "contentRef", "constrain"]);

      var dialog = /*#__PURE__*/React.createElement(Dialog, Object.assign({}, omitProps(props, Modal.propTypes), {
        onDismiss: onDismiss,
        label: label,
        defaultFocusElement: this.defaultFocusElement,
        shouldCloseOnDocumentClick: shouldCloseOnDocumentClick,
        shouldCloseOnEscape: true,
        shouldContainFocus: true,
        shouldReturnFocus: shouldReturnFocus,
        liveRegion: liveRegion,
        open: true,
        className: classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles[size], true), _defineProperty(_classnames, styles.inverse, this.props.variant === 'inverse'), _defineProperty(_classnames, styles['overflow--fit'], this.props.overflow === 'fit'), _defineProperty(_classnames, styles.ie11, this.ie11), _classnames)),
        ref: this.contentRef // aria-modal="true" see VO bug https://bugs.webkit.org/show_bug.cgi?id=174667

      }), this.renderChildren());

      if (size === 'fullscreen') {
        var _classnames2;

        return /*#__PURE__*/React.createElement("span", {
          className: classnames((_classnames2 = {}, _defineProperty(_classnames2, styles.fullscreenLayout, true), _defineProperty(_classnames2, styles["fullscreenLayout--".concat(constrain)], true), _classnames2))
        }, dialog);
      } else {
        return /*#__PURE__*/React.createElement(Mask, {
          placement: this.maskPlacement,
          fullscreen: constrain === 'window'
        }, dialog);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          open = _this$props3.open,
          onOpen = _this$props3.onOpen,
          onClose = _this$props3.onClose,
          mountNode = _this$props3.mountNode,
          insertAt = _this$props3.insertAt,
          transition = _this$props3.transition,
          onEnter = _this$props3.onEnter,
          onEntering = _this$props3.onEntering,
          onEntered = _this$props3.onEntered,
          onExit = _this$props3.onExit,
          onExiting = _this$props3.onExiting,
          onExited = _this$props3.onExited,
          constrain = _this$props3.constrain;
      var portalIsOpen = open || this.state.transitioning;
      return /*#__PURE__*/React.createElement(Portal, {
        mountNode: mountNode,
        insertAt: insertAt,
        open: portalIsOpen,
        onOpen: createChainedFunction(this.handlePortalOpen, onOpen),
        onClose: onClose
      }, portalIsOpen && /*#__PURE__*/React.createElement(Transition, {
        in: open,
        transitionOnMount: true,
        unmountOnExit: true,
        type: transition,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: onEntered,
        onExit: onExit,
        onExiting: onExiting,
        onExited: createChainedFunction(this.handleTransitionExited, onExited),
        theme: this.ie11 ? {
          duration: '0s'
        } : null // IE11 doesn't always complete transition

      }, constrain === 'parent' ? /*#__PURE__*/React.createElement("span", {
        className: styles.constrainContext
      }, this.renderModal()) : this.renderModal()));
    }
  }, {
    key: "defaultFocusElement",
    get: function get() {
      return this.props.defaultFocusElement;
    }
  }, {
    key: "DOMNode",
    get: function get() {
      return this._DOMNode;
    },
    set: function set(el) {
      this._DOMNode = el;
    }
  }, {
    key: "maskPlacement",
    get: function get() {
      if (isIE11) {
        return 'top';
      } else if (this.props.overflow === 'fit') {
        return 'stretch';
      } else {
        return 'center';
      }
    }
  }]);

  Modal.displayName = "Modal";
  return Modal;
}(Component), _class2.propTypes = {
  /**
   * An accessible label for the `<Modal />` content
   */
  label: PropTypes.string.isRequired,

  /**
   * The children to be rendered within the `<Modal />`
   */
  children: ChildrenPropTypes.enforceOrder([ModalHeader, ModalBody, ModalFooter], [ModalHeader, ModalBody], [ModalBody, ModalFooter], [ModalBody]),

  /*
   * The size of the `<Modal />` content
   */
  size: PropTypes.oneOf(['auto', 'small', 'medium', 'large', 'fullscreen']),

  /**
  * Designates the background style of the `<Modal />`
  */
  variant: PropTypes.oneOf(['default', 'inverse']),

  /**
   * Whether or not the `<Modal />` is open
   */
  open: PropTypes.bool,

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),

  /**
   * Whether focus should be returned to the trigger when the `<Modal/>` is closed
   */
  shouldReturnFocus: PropTypes.bool,

  /**
   * Whether the `<Modal/>` should request close when the document is clicked
   */
  shouldCloseOnDocumentClick: PropTypes.bool,

  /**
   * Callback fired when `<Modal />` content has been mounted in the DOM
   */
  onOpen: PropTypes.func,

  /**
   * Callback fired when `<Modal />` has been unmounted from the DOM
   */
  onClose: PropTypes.func,

  /**
   * Callback fired when the `<Modal />` is requesting to be closed
   */
  onDismiss: PropTypes.func,

  /**
   *
   * A function that returns a reference to the content element
   */
  contentRef: PropTypes.func,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Modal />` (defaults to `document.body`)
   */
  mountNode: PropTypes.oneOfType([element, PropTypes.func]),

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: PropTypes.oneOf(['bottom', 'top']),

  /**
   * An element, function returning an element, or array of elements that will not be hidden from
   * the screen reader when the `<Modal />` is open
   */
  liveRegion: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element, PropTypes.func]),
  transition: Transition.propTypes.type,

  /**
   * Callback fired before the <Modal /> transitions in
   */
  onEnter: PropTypes.func,

  /**
   * Callback fired as the <Modal /> begins to transition in
   */
  onEntering: PropTypes.func,

  /**
   * Callback fired after the <Modal /> finishes transitioning in
   */
  onEntered: PropTypes.func,

  /**
   * Callback fired right before the <Modal /> transitions out
   */
  onExit: PropTypes.func,

  /**
   * Callback fired as the <Modal /> begins to transition out
   */
  onExiting: PropTypes.func,

  /**
   * Callback fired after the <Modal /> finishes transitioning out
   */
  onExited: PropTypes.func,

  /**
   * Constrain the Modal to the document window or its closest positioned parent
   */
  constrain: PropTypes.oneOf(['window', 'parent']),

  /**
   * Should ModalBody handle overflow with scrollbars, or fit its
   * content within its own height?
   */
  overflow: PropTypes.oneOf(['scroll', 'fit'])
}, _class2.defaultProps = {
  open: false,
  size: 'auto',
  variant: 'default',
  transition: 'fade',
  onOpen: function onOpen(event) {},
  onClose: function onClose(event) {},
  onDismiss: function onDismiss(event) {},
  onEnter: function onEnter() {},
  onEntering: function onEntering() {},
  onEntered: function onEntered() {},
  onExit: function onExit() {},
  onExiting: function onExiting() {},
  onExited: function onExited() {},
  mountNode: null,
  insertAt: 'bottom',
  liveRegion: null,
  contentRef: function contentRef(el) {},
  shouldCloseOnDocumentClick: true,
  shouldReturnFocus: true,
  defaultFocusElement: null,
  children: null,
  constrain: 'window',
  overflow: 'scroll'
}, _class2.Header = ModalHeader, _class2.Body = ModalBody, _class2.Footer = ModalFooter, _temp)) || _class) || _class) || _class);
export default Modal;
export { Modal, ModalHeader, ModalBody, ModalFooter };
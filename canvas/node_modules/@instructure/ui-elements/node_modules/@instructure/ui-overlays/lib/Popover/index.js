"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PopoverContent = exports.PopoverTrigger = exports.Popover = exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _PositionPropTypes = require("@instructure/ui-position/lib/PositionPropTypes.js");

var _Popover = require("@instructure/ui-popover/lib/Popover");

var _bidirectional = require("@instructure/ui-i18n/lib/bidirectional.js");

var _Children = require("@instructure/ui-prop-types/lib/Children.js");

var _controllable = require("@instructure/ui-prop-types/lib/controllable.js");

var _element = require("@instructure/ui-prop-types/lib/element.js");

var _ComponentIdentifier3 = require("@instructure/ui-react-utils/lib/ComponentIdentifier.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _ThemeablePropTypes = require("@instructure/ui-themeable/lib/ThemeablePropTypes.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _dec, _class, _class2, _temp, _dec2, _class3, _class4, _temp2, _dec3, _dec4, _dec5, _class5, _class6, _temp3;

var PopoverTrigger = (_dec = (0, _testable.testable)(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_ComponentIdentifier) {
  (0, _inherits2.default)(PopoverTrigger, _ComponentIdentifier);

  var _super = (0, _createSuper2.default)(PopoverTrigger);

  function PopoverTrigger() {
    (0, _classCallCheck2.default)(this, PopoverTrigger);
    return _super.apply(this, arguments);
  }

  return PopoverTrigger;
}(_ComponentIdentifier3.ComponentIdentifier), _class2.displayName = 'PopoverTrigger', _temp)) || _class);
exports.PopoverTrigger = PopoverTrigger;
var PopoverContent = (_dec2 = (0, _testable.testable)(), _dec2(_class3 = (_temp2 = _class4 = /*#__PURE__*/function (_ComponentIdentifier2) {
  (0, _inherits2.default)(PopoverContent, _ComponentIdentifier2);

  var _super2 = (0, _createSuper2.default)(PopoverContent);

  function PopoverContent() {
    (0, _classCallCheck2.default)(this, PopoverContent);
    return _super2.apply(this, arguments);
  }

  return PopoverContent;
}(_ComponentIdentifier3.ComponentIdentifier), _class4.displayName = 'PopoverContent', _temp2)) || _class3);
/**
---
category: components/deprecated
id: DeprecatedPopover
---
**/

exports.PopoverContent = PopoverContent;
var Popover = (_dec3 = (0, _deprecated.deprecated)('7.0.0', null, 'Use Popover from ui-popover instead.'), _dec4 = (0, _testable.testable)(), _dec5 = (0, _bidirectional.bidirectional)(), _dec3(_class5 = _dec4(_class5 = _dec5(_class5 = (_temp3 = _class6 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Popover, _Component);

  var _super3 = (0, _createSuper2.default)(Popover);

  function Popover() {
    var _this;

    (0, _classCallCheck2.default)(this, Popover);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super3.call.apply(_super3, [this].concat(args));

    _this.show = function (e) {
      _this._popover && _this._popover.show(e);
    };

    _this.hide = function (e, documentClick) {
      _this._popover && _this._popover.hide(e, documentClick);
    };

    _this.toggle = function (e) {
      _this._popover && _this._popover.toggle(e);
    };

    return _this;
  }

  (0, _createClass2.default)(Popover, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          show = _this$props.show,
          defaultShow = _this$props.defaultShow,
          label = _this$props.label,
          variant = _this$props.variant,
          alignArrow = _this$props.alignArrow,
          trackPosition = _this$props.trackPosition,
          onShow = _this$props.onShow,
          onDismiss = _this$props.onDismiss,
          onToggle = _this$props.onToggle,
          children = _this$props.children,
          passthroughProps = (0, _objectWithoutProperties2.default)(_this$props, ["show", "defaultShow", "label", "variant", "alignArrow", "trackPosition", "onShow", "onDismiss", "onToggle", "children"]);

      var trigger = _ComponentIdentifier3.ComponentIdentifier.pick(Popover.Trigger, children);

      var content = _ComponentIdentifier3.ComponentIdentifier.pick(Popover.Content, children);

      return /*#__PURE__*/_react.default.createElement(_Popover.Popover, Object.assign({}, passthroughProps, {
        isShowingContent: show,
        defaultIsShowingContent: defaultShow,
        screenReaderLabel: label,
        color: variant === 'inverse' ? 'primary-inverse' : 'primary',
        shouldAlignArrow: alignArrow,
        shouldTrackPosition: trackPosition,
        onShowContent: function onShowContent() {
          onToggle(true);
        },
        onHideContent: function onHideContent(e, _ref) {
          var documentClick = _ref.documentClick;
          onDismiss(e, documentClick);
          onToggle(false);
        },
        onPositioned: onShow,
        ref: function ref(el) {
          return _this2._popover = el;
        },
        renderTrigger: trigger,
        __dangerouslyIgnoreExperimentalWarnings: true
      }), content);
    }
  }, {
    key: "placement",
    get: function get() {
      return this._popover && this._popover.placement;
    }
  }, {
    key: "shown",
    get: function get() {
      return this._popover && this._popover.shown;
    }
  }, {
    key: "defaultFocusElement",
    get: function get() {
      return this._popover && this._popover.defaultFocusElement;
    }
  }]);
  Popover.displayName = "Popover";
  return Popover;
}(_react.Component), _class6.Trigger = PopoverTrigger, _class6.Content = PopoverContent, _class6.propTypes = {
  /**
   * Children of the `<Popover />`
   */
  children: _Children.Children.oneOf([PopoverTrigger, PopoverContent]),

  /**
   * The placement of the content in relation to the trigger
   */
  placement: _PositionPropTypes.PositionPropTypes.placement,

  /**
   * The action that causes the Content to display (`click`, `hover`, `focus`)
   */
  on: _propTypes.default.oneOfType([_propTypes.default.oneOf(['click', 'hover', 'focus']), _propTypes.default.arrayOf(_propTypes.default.oneOf(['click', 'hover', 'focus']))]),
  variant: _propTypes.default.oneOf(['default', 'inverse']),

  /**
  * Controls the shadow depth for the `<Popover />`
  */
  shadow: _ThemeablePropTypes.ThemeablePropTypes.shadow,

  /**
  * Controls the z-index depth for the `<Popover />` content
  */
  stacking: _ThemeablePropTypes.ThemeablePropTypes.stacking,

  /**
   * Whether or not the content should be rendered on initial render.
   */
  defaultShow: _propTypes.default.bool,

  /**
  * Whether or not the `<Popover />` is shown (should be accompanied by `onToggle`)
  */
  show: (0, _controllable.controllable)(_propTypes.default.bool, 'onToggle', 'defaultShow'),

  /**
   *
   * A function that returns a reference to the content element
   */
  contentRef: _propTypes.default.func,

  /**
   * Call this function when the content visibility is toggled. When used with `show`,
   * `<Popover />` will not control its own state.
   */
  onToggle: _propTypes.default.func,

  /**
   * Callback fired when component is clicked
   */
  onClick: _propTypes.default.func,

  /**
   * Callback fired when trigger is focused
   */
  onFocus: _propTypes.default.func,

  /**
   * Callback fired when component is blurred
   */
  onBlur: _propTypes.default.func,
  onKeyDown: _propTypes.default.func,

  /**
   * Callback fired when content is rendered and positioned
   */
  onShow: _propTypes.default.func,

  /**
   * Callback fired when mouse is over trigger
   */
  onMouseOver: _propTypes.default.func,

  /**
   * Callback fired when mouse leaves trigger
   */
  onMouseOut: _propTypes.default.func,

  /**
   * Callback fired when the `<Popover />` requests to be hidden (via close button, escape key, etc.)
   */
  onDismiss: _propTypes.default.func,

  /**
  * Should the `<Popover />` display with an arrow pointing to the trigger
  */
  withArrow: _propTypes.default.bool,

  /**
   * An accessible label for the `<Popover />` content
   */
  label: _propTypes.default.string,

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),

  /**
  * Should the `<Popover />` render offscreen when visually hidden
  */
  shouldRenderOffscreen: _propTypes.default.bool,

  /**
   * Whether focus should contained within the `<Popover/>` when it is open
   */
  shouldContainFocus: _propTypes.default.bool,

  /**
   * Whether focus should be returned to the trigger when the `<Popover/>` is closed
   */
  shouldReturnFocus: _propTypes.default.bool,

  /**
   * Should the `<Popover />` hide when clicks occur outside the content
   */
  shouldCloseOnDocumentClick: _propTypes.default.bool,

  /**
   * Should the `<Popover />` hide when the escape key is pressed
   */
  shouldCloseOnEscape: _propTypes.default.bool,

  /**
   * The horizontal offset for the positioned content
   */
  offsetX: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * The vertical offset for the positioned content
   */
  offsetY: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Callback fired when the position changes
   */
  onPositionChanged: _propTypes.default.func,

  /**
   * Callback fired when content has been mounted and is initially positioned
   */
  onPositioned: _propTypes.default.func,

  /**
   * Whether or not position should be tracked or just set on initial render
   */
  trackPosition: _propTypes.default.bool,

  /**
   * The parent in which to constrain the popover.
   * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
   * or a function returning an element
   */
  constrain: _PositionPropTypes.PositionPropTypes.constrain,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Popover />` (defaults to `document.body`)
   */
  mountNode: _PositionPropTypes.PositionPropTypes.mountNode,

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: _propTypes.default.oneOf(['bottom', 'top']),

  /**
   * An element, function returning an element, or array of elements that will not be hidden from
   * the screen reader when the `<Popover />` is open
   */
  liveRegion: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.element), _propTypes.default.element, _propTypes.default.func]),

  /**
   * Target element for positioning the Popover (if it differs from the trigger)
   */
  positionTarget: _propTypes.default.oneOfType([_element.element, _propTypes.default.func]),

  /**
   * should the content offset to align by its arrow
   */
  alignArrow: _propTypes.default.bool,
  id: _propTypes.default.string,

  /**
   * should the content become focused when the trigger is blurred
   */
  shouldFocusContentOnTriggerBlur: _propTypes.default.bool
}, _class6.defaultProps = {
  children: null,
  onToggle: function onToggle(open) {},
  onClick: function onClick(event) {},
  onFocus: function onFocus(event) {},
  onBlur: function onBlur(event) {},
  onMouseOver: function onMouseOver(event) {},
  onMouseOut: function onMouseOut(event) {},
  onShow: function onShow(position) {},
  onDismiss: function onDismiss(event, documentClick) {},
  placement: 'bottom center',
  stacking: 'topmost',
  shadow: 'resting',
  offsetX: 0,
  offsetY: 0,
  variant: 'default',
  on: ['hover', 'focus'],
  contentRef: function contentRef(el) {},
  defaultShow: false,
  withArrow: true,
  trackPosition: true,
  constrain: 'window',
  onPositioned: function onPositioned(position) {},
  onPositionChanged: function onPositionChanged(position) {},
  shouldRenderOffscreen: false,
  shouldContainFocus: false,
  shouldReturnFocus: true,
  shouldCloseOnDocumentClick: true,
  shouldFocusContentOnTriggerBlur: false,
  shouldCloseOnEscape: true,
  defaultFocusElement: null,
  label: null,
  mountNode: null,
  insertAt: 'bottom',
  liveRegion: null,
  positionTarget: null,
  alignArrow: false,
  id: void 0,
  show: void 0,
  closeButtonRef: void 0,
  closeButtonLabel: void 0,
  onKeyDown: void 0
}, _temp3)) || _class5) || _class5) || _class5);
exports.Popover = Popover;
var _default = Popover;
exports.default = _default;
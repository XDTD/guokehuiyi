import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React from 'react';
import PropTypes from 'prop-types';
import { getClassList } from '@instructure/ui-dom-utils';
import { ensureSingleChild, polyfill, safeCloneElement } from '@instructure/ui-react-utils';
var STATES = {
  EXITED: -2,
  EXITING: -1,
  ENTERING: 1,
  ENTERED: 2
};
/**
---
private: true
---
  Note: this is forked from https://github.com/react-bootstrap/react-overlays/blob/master/src/Transition.js
  so that it works with css modules. The internals are pretty different now, but it has roughly the same api.
**/

var BaseTransition = /*#__PURE__*/function (_React$Component) {
  _inherits(BaseTransition, _React$Component);

  var _super = _createSuper(BaseTransition);

  function BaseTransition() {
    var _this;

    _classCallCheck(this, BaseTransition);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._timeouts = [];
    _this.state = {
      transitioning: false
    };

    _this.startTransition = function (transitionIn, transitionOnStart) {
      var _this$props = _this.props,
          transitionEnter = _this$props.transitionEnter,
          transitionExit = _this$props.transitionExit;

      if (transitionIn) {
        _this.enter(transitionEnter && transitionOnStart ? STATES.EXITED : null);
      } else {
        _this.exit(transitionExit && transitionOnStart ? STATES.ENTERED : null);
      }
    };

    _this.transition = function (toState, fromState, transitionCallback) {
      var transitionDuration = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      if (_this._unmounted) return;
      var classList = getClassList(_assertThisInitialized(_this));

      var transitionClassName = _this.getTransitionClassName(toState);

      var prevTransitionClassName = _this.getTransitionClassName(fromState);

      var baseTransitionClassName = _this.props.transitionClassName;

      if (fromState && transitionDuration && _this.transitionEnabled(toState)) {
        classList.add(baseTransitionClassName);
      } else {
        classList.remove(baseTransitionClassName);
      }

      if (prevTransitionClassName) {
        classList.remove(prevTransitionClassName);
      }

      if (transitionClassName) {
        classList.add(transitionClassName);
      }

      if (toState && fromState) {
        _this.props.onTransition(toState, fromState);
      }

      _this._timeouts.push(setTimeout(function () {
        if (_this._unmounted) return;

        if (typeof transitionCallback === 'function') {
          transitionCallback();
        }
      }, transitionDuration));
    };

    _this.enter = function (initialState) {
      if (_this.state.transitioning || _this._unmounted) return;

      var _assertThisInitialize = _assertThisInitialized(_this),
          props = _assertThisInitialize.props;

      props.onEnter();

      if (props.transitionEnter) {
        _this.setState({
          transitioning: true
        }, function () {
          var enter = function enter() {
            props.onEntering();

            _this.transition(STATES.ENTERED, STATES.ENTERING, function () {
              _this.setState({
                transitioning: false
              }, function () {
                props.onEntered();
              });
            });
          };

          if (initialState) {
            _this.transition(initialState, null, function () {
              _this.transition(STATES.ENTERING, initialState, enter, props.enterDelay);
            });
          } else {
            enter();
          }
        });
      } else {
        _this.setState({
          transitioning: false
        }, function () {
          _this.transition(STATES.ENTERED, STATES.EXITED);

          props.onEntered();
        });
      }
    };

    _this.exit = function (initialState) {
      if (_this.state.transitioning) return;

      var _assertThisInitialize2 = _assertThisInitialized(_this),
          props = _assertThisInitialize2.props;

      props.onExit();

      if (props.transitionExit) {
        _this.setState({
          transitioning: true
        }, function () {
          var exit = function exit() {
            props.onExiting();

            _this.transition(STATES.EXITED, STATES.EXITING, function () {
              _this.setState({
                transitioning: false
              }, function () {
                props.onExited();
              });
            });
          };

          if (initialState) {
            _this.transition(initialState, null, function () {
              _this.transition(STATES.EXITING, initialState, exit, props.exitDelay);
            });
          } else {
            exit();
          }
        });
      } else {
        _this.setState({
          transitioning: false
        }, function () {
          _this.transition(STATES.EXITED, STATES.ENTERED);

          props.onExited();
        });
      }
    };

    return _this;
  }

  _createClass(BaseTransition, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.startTransition(this.props.in, this.props.transitionOnMount);
    }
  }, {
    key: "getSnapshotBeforeUpdate",
    value: function getSnapshotBeforeUpdate(prevProps, prevState) {
      if (this.props.in !== prevProps.in && prevState.transitioning) {
        // direction changed before previous transition finished
        return true;
      }

      return null;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, cancelPrematurely) {
      if (cancelPrematurely) {
        this.clearTransition(prevProps.transitionClassName);
      }

      if (this.props.transitionClassName !== prevProps.transitionClassName) {
        this.clearTransition(prevProps.transitionClassName);
      }

      if (prevProps.in !== this.props.in) {
        this.startTransition(this.props.in, true);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._timeouts.forEach(function (timeout) {
        clearTimeout(timeout);
      });

      this._unmounted = true;
    }
  }, {
    key: "clearTransition",
    value: function clearTransition(transitionClassName) {
      var _this2 = this;

      if (this._unmounted) return;
      this.setState({
        transitioning: false
      }, function () {
        if (_this2._unmounted) return;
        var classList = getClassList(_this2);
        Object.keys(STATES).forEach(function (state) {
          classList.remove(_this2.getTransitionClassName(state));
        });
        classList.remove(transitionClassName);
      });
    }
  }, {
    key: "transitionEnabled",
    value: function transitionEnabled(toState) {
      var props = this.props;

      switch (toState) {
        case STATES.EXITED:
        case STATES.EXITING:
          return props.transitionExit;

        case STATES.ENTERED:
        case STATES.ENTERING:
          return props.transitionEnter;

        default:
          return false;
      }
    }
  }, {
    key: "getTransitionClassName",
    value: function getTransitionClassName(transitionState) {
      var props = this.props;

      switch (transitionState) {
        case STATES.EXITED:
          return props.exitedClassName;

        case STATES.ENTERING:
          return props.enteringClassName;

        case STATES.ENTERED:
          return props.enteredClassName;

        case STATES.EXITING:
          return props.exitingClassName;

        default:
          return null;
      }
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      return safeCloneElement(ensureSingleChild(this.props.children), {
        'aria-hidden': !this.props.in ? true : null
      });
    }
  }, {
    key: "render",
    value: function render() {
      if (!this.props.in && this.props.unmountOnExit && !this.state.transitioning) {
        return null;
      } else {
        return this.renderChildren();
      }
    }
  }]);

  BaseTransition.displayName = "BaseTransition";
  return BaseTransition;
}(React.Component);

BaseTransition.propTypes = {
  /**
   * Show the component? Triggers the enter or exit animation.
   */
  in: PropTypes.bool,

  /**
   * Unmount the component (remove it from the DOM) when it is not shown.
   */
  unmountOnExit: PropTypes.bool,

  /**
   * Run the enter animation when the component mounts, if it is initially
   * shown
   */
  transitionOnMount: PropTypes.bool,

  /**
   * Run the enter animation
   */
  transitionEnter: PropTypes.bool,

  /**
   * Run the exit animation
   */
  transitionExit: PropTypes.bool,

  /**
   * A Timeout for the animation, in milliseconds, to ensure that a node doesn't
   * transition indefinately if the browser transitionEnd events are
   * canceled or interrupted.
   *
   * By default this is set to a high number (5 seconds) as a failsafe. You should consider
   * setting this to the duration of your animation (or a bit above it).
   */
  enterDelay: PropTypes.number,

  /**
   * A Timeout for the animation, in milliseconds, to ensure that a node doesn't
   * transition indefinately if the browser transitionEnd events are
   * canceled or interrupted.
   *
   * By default this is set to a high number (5 seconds) as a failsafe. You should consider
   * setting this to the duration of your animation (or a bit above it).
   */
  exitDelay: PropTypes.number,

  /**
   * the base CSS class for the transition (transitions go here)
   */
  transitionClassName: PropTypes.string,

  /**
   * CSS class or classes applied when the component is exited
   */
  exitedClassName: PropTypes.string,

  /**
   * CSS class or classes applied while the component is exiting
   */
  exitingClassName: PropTypes.string,

  /**
   * CSS class or classes applied when the component is entered
   */
  enteredClassName: PropTypes.string,

  /**
   * CSS class or classes applied while the component is entering
   */
  enteringClassName: PropTypes.string,

  /**
   * Callback fired when transitioning to the next state
   */
  onTransition: PropTypes.func,

  /**
   * Callback fired before the "entering" classes are applied
   */
  onEnter: PropTypes.func,

  /**
   * Callback fired after the "entering" classes are applied
   */
  onEntering: PropTypes.func,

  /**
   * Callback fired after the "enter" classes are applied
   */
  onEntered: PropTypes.func,

  /**
   * Callback fired before the "exiting" classes are applied
   */
  onExit: PropTypes.func,

  /**
   * Callback fired after the "exiting" classes are applied
   */
  onExiting: PropTypes.func,

  /**
   * Callback fired after the "exited" classes are applied
   */
  onExited: PropTypes.func,
  children: PropTypes.node,
  className: PropTypes.string
};
BaseTransition.defaultProps = {
  in: false,
  component: 'div',
  unmountOnExit: false,
  transitionOnMount: false,
  transitionEnter: true,
  transitionExit: true,
  enterDelay: 300,
  exitDelay: 300,
  onEnter: function onEnter() {},
  onEntering: function onEntering() {},
  onEntered: function onEntered() {},
  onExit: function onExit() {},
  onExiting: function onExiting() {},
  onExited: function onExited() {},
  onTransition: function onTransition(toState, fromState) {},
  className: void 0,
  children: null,
  transitionClassName: void 0,
  exitedClassName: void 0,
  exitingClassName: void 0,
  enteredClassName: void 0,
  enteringClassName: void 0
};
BaseTransition.states = STATES;
polyfill(BaseTransition);
export default BaseTransition;
export { BaseTransition };
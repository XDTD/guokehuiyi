import * as React from 'react';

export type FlexChildren = React.ReactNode | ((...args: any[])=>any);

export type FlexHeight = string | number;

export type FlexWidth = string | number;

export type FlexDisplay = "flex" | "inline-flex";

export type FlexTextAlign = "start" | "center" | "end";

export type FlexDirection = "row" | "column" | "row-reverse" | "column-reverse";

export type FlexAlignItems = "center" | "start" | "end" | "stretch";

export type FlexJustifyItems = "center" | "start" | "end" | "space-around" | "space-between";

export type FlexWrap = "wrap" | "no-wrap" | "wrap-reverse";

export interface FlexProps {
    /**
     * It's recommended that you use `Flex.Item` for children, but you can also pass any markup or a function
     * returning markup. Note that if you do not use `Flex.Item`, the `withVisualDebug` and `direction` props
     * will not automatically be set on the children.
     */
    children?: FlexChildren;
    /**
     * the element type to render as
     */
    as?: any;
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (...args: any[])=>any;
    /**
     * Sets the height of the component's container (optional)
     */
    height?: FlexHeight;
    /**
     * Sets the width of the component's container (optional)
     */
    width?: FlexWidth;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * Valid values are `0`, `none`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `padding="small x-large large"`.
     */
    padding?: any;
    /**
     * Sets the CSS display rule for the component's container
     */
    display?: FlexDisplay;
    /**
     * Designates the text alignment
     */
    textAlign?: FlexTextAlign;
    /**
     * Sets the flex-direction to row (horizontal) or column (vertical)
     */
    direction?: FlexDirection;
    /**
     * Aligns Flex.Items on the vertical axis (horizontal if direction is column)
     */
    alignItems?: FlexAlignItems;
    /**
     * Aligns Flex.Items on the horizontal axis (vertical if direction is column)
     */
    justifyItems?: FlexJustifyItems;
    /**
     * Determines if the Flex.Items should wrap when they exceed their container's width
     */
    wrap?: FlexWrap;
    /**
     * Activate a dotted outline around the component to make building your
     * layout easier
     */
    withVisualDebug?: boolean;
    /**
     * eslint-disable react/require-default-props
     */
    inline?: boolean;
    /**
     * __Deprecated - use 'wrap'__
     */
    wrapItems?: boolean;
    /**
     * __Deprecated - use 'withVisualDebug'__
     */
    visualDebug?: boolean;
}

export class Flex extends React.Component<FlexProps, any> {
    render(): JSX.Element;

}


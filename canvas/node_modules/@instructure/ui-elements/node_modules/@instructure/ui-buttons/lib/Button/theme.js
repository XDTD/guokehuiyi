"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generator;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _theme = _interopRequireWildcard(require("../BaseButton/theme"));

var _alpha = require("@instructure/ui-color-utils/lib/alpha.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
function generator() {
  return _theme.default.apply(void 0, arguments);
}
/**
 * We need to copy the theme-specific overrides from `BaseButton` before adding
 * theme-specific overrides that only apply to `Button`
 */


Object.assign(generator, _theme.default);

generator['canvas-ams'] = function (_ref) {
  var colors = _ref.colors;
  return (0, _objectSpread2.default)({}, (0, _theme.generateButtonThemeVars)({
    style: 'secondary',
    borderColor: colors.borderBrand,
    backgroundColor: 'transparent',
    textColor: colors.fullyAccessibleBrand
  }), {
    secondaryHoverBackground: (0, _alpha.alpha)(colors.fullyAccessibleBrand, 10),
    secondaryActiveBackground: 'transparent',
    secondaryActiveBoxShadow: "".concat(_theme.activeShadow, " ").concat((0, _alpha.alpha)(colors.fullyAccessibleBrand, 28)),
    // Overrides for primary ghost button
    primaryGhostColor: colors.textDarkest,
    primaryGhostBorderColor: colors.textDarkest,
    primaryGhostHoverBackground: (0, _alpha.alpha)(colors.textDarkest, 10),
    primaryGhostActiveBackground: 'transparent',
    primaryGhostActiveBoxShadow: "".concat(_theme.activeShadow, " ").concat((0, _alpha.alpha)(colors.textDarkest, 28))
  });
};
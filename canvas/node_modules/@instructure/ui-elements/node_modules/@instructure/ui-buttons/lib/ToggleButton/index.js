"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ToggleButton = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _PositionPropTypes = require("@instructure/ui-position/lib/PositionPropTypes.js");

var _callRenderProp = require("@instructure/ui-react-utils/lib/callRenderProp.js");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _Tooltip = require("@instructure/ui-tooltip/lib/Tooltip");

var _IconButton = require("../IconButton");

var _dec, _class, _class2, _temp;

/**
---
category: components
---
**/
var ToggleButton = (_dec = (0, _testable.testable)(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(ToggleButton, _Component);

  var _super = (0, _createSuper2.default)(ToggleButton);

  function ToggleButton(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ToggleButton);
    _this = _super.call(this, props);
    _this.state = {
      isShowingTooltip: props.isShowingTooltip || false
    };
    return _this;
  }

  (0, _createClass2.default)(ToggleButton, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          as = _this$props.as,
          color = _this$props.color,
          elementRef = _this$props.elementRef,
          size = _this$props.size,
          interaction = _this$props.interaction,
          mountNode = _this$props.mountNode,
          renderIcon = _this$props.renderIcon,
          renderTooltipContent = _this$props.renderTooltipContent,
          screenReaderLabel = _this$props.screenReaderLabel,
          status = _this$props.status,
          placement = _this$props.placement,
          onClick = _this$props.onClick,
          props = (0, _objectWithoutProperties2.default)(_this$props, ["as", "color", "elementRef", "size", "interaction", "mountNode", "renderIcon", "renderTooltipContent", "screenReaderLabel", "status", "placement", "onClick"]);
      return /*#__PURE__*/_react.default.createElement(_Tooltip.Tooltip, {
        renderTip: renderTooltipContent,
        on: ['hover', 'focus'],
        placement: placement,
        color: color === 'primary-inverse' ? 'primary-inverse' : 'primary',
        isShowingContent: this.isShowingTooltip,
        onShowContent: function onShowContent(event) {
          _this2.setState({
            isShowingTooltip: true
          });
        },
        onHideContent: function onHideContent(event) {
          _this2.setState({
            isShowingTooltip: false
          });
        },
        mountNode: mountNode
      }, /*#__PURE__*/_react.default.createElement(_IconButton.IconButton, Object.assign({}, (0, _passthroughProps.passthroughProps)(props), {
        screenReaderLabel: screenReaderLabel,
        withBackground: false,
        withBorder: false,
        color: color,
        size: size,
        elementRef: elementRef,
        as: as,
        onClick: onClick,
        interaction: interaction,
        "aria-pressed": status === 'pressed'
      }), (0, _callRenderProp.callRenderProp)(renderIcon)));
    }
  }, {
    key: "isShowingTooltip",
    get: function get() {
      return typeof this.props.isShowingTooltip === 'undefined' ? this.state.isShowingTooltip : this.props.isShowingTooltip;
    }
  }]);
  ToggleButton.displayName = "ToggleButton";
  return ToggleButton;
}(_react.Component), _class2.propTypes = {
  /**
   * Text to output only to screen readers
   */
  screenReaderLabel: _propTypes.default.PropTypes.string.isRequired,

  /**
   * Text to render in the tooltip shown on hover/focus
   */
  renderTooltipContent: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]).isRequired,

  /**
  * An icon or function that returns an icon
  */
  renderIcon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]).isRequired,

  /**
   * Toggles the `aria-pressed` attribute on the button (`true` if `pressed`; `false` if `unpressed`)
   */
  status: _propTypes.default.oneOf(['pressed', 'unpressed']).isRequired,

  /**
  * The element to render as the component root; `button` by default
  */
  as: _propTypes.default.elementType,

  /**
   * Specifies if interaction with `ToggleButton` is `enabled`, `disabled`, or `readonly`
   */
  interaction: _propTypes.default.oneOf(['enabled', 'disabled', 'readonly']),

  /**
   * The size of the `ToggleButton`
   */
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),

  /**
   * Provides a reference to `ToggleButton`'s underlying HTML element
   */
  elementRef: _propTypes.default.func,

  /**
   * Callback fired when the `ToggleButton` is clicked
   */
  onClick: _propTypes.default.func,

  /**
   * The color in which to display the icon
   */
  color: _propTypes.default.string,

  /**
   * By default, the tooltip will show on hover/focus. Use this prop if you need to override that behavior.
   */
  isShowingTooltip: _propTypes.default.bool,

  /**
   * An element or a function returning an element to use as the mount node
   */
  mountNode: _PositionPropTypes.PositionPropTypes.mountNode,

  /**
   * The placement of the tooltip in relation to the button
   */
  placement: _PositionPropTypes.PositionPropTypes.placement,

  /**
   * The parent in which to constrain the tooltip.
   * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
   * or a function returning an element.
   */
  constrain: _PositionPropTypes.PositionPropTypes.constrain
}, _class2.defaultProps = {
  size: 'medium',
  as: 'button',
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  elementRef: function elementRef(el) {},
  renderIcon: function renderIcon() {},
  onClick: function onClick() {},
  mountNode: null,
  color: 'secondary',
  isShowingTooltip: void 0,
  placement: 'top center',
  constrain: 'window'
}, _temp)) || _class);
exports.ToggleButton = ToggleButton;
var _default = ToggleButton;
exports.default = _default;
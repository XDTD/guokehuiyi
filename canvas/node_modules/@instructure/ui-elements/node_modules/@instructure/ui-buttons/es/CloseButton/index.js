import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { error as _error } from "@instructure/console";

var _dec, _dec2, _dec3, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { IconXSolid } from '@instructure/ui-icons';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { testable } from '@instructure/ui-testable';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
import { getInteraction, passthroughProps, deprecated } from '@instructure/ui-react-utils';
import { BaseButton } from '../BaseButton';
var styles = {
  componentId: 'ejhDx',
  template: function template(theme) {
    return "\n\n.ejhDx_bGBk{display:inline-block;z-index:".concat(theme.zIndex || 'inherit', "}\n\n.ejhDx_doBn{position:static}\n\n.ejhDx_bQpq,.ejhDx_bxia{position:absolute}\n\n.ejhDx_coHh{top:").concat(theme.offsetXSmall || 'inherit', "}\n\n.ejhDx_cDib{top:").concat(theme.offsetSmall || 'inherit', "}\n\n.ejhDx_faeR{top:").concat(theme.offsetMedium || 'inherit', "}\n\n.ejhDx_bQpq{inset-inline-end:0;inset-inline-start:auto}\n\n[dir=ltr] .ejhDx_bQpq{left:auto;right:0}\n\n[dir=rtl] .ejhDx_bQpq{left:0;right:auto}\n\n.ejhDx_bQpq.ejhDx_coHh{inset-inline-end:").concat(theme.offsetXSmall || 'inherit', ";inset-inline-start:auto}\n\n[dir=ltr] .ejhDx_bQpq.ejhDx_coHh{left:auto;right:").concat(theme.offsetXSmall || 'inherit', "}\n\n[dir=rtl] .ejhDx_bQpq.ejhDx_coHh{left:").concat(theme.offsetXSmall || 'inherit', ";right:auto}\n\n.ejhDx_bQpq.ejhDx_cDib{inset-inline-end:").concat(theme.offsetSmall || 'inherit', ";inset-inline-start:auto}\n\n[dir=ltr] .ejhDx_bQpq.ejhDx_cDib{left:auto;right:").concat(theme.offsetSmall || 'inherit', "}\n\n[dir=rtl] .ejhDx_bQpq.ejhDx_cDib{left:").concat(theme.offsetSmall || 'inherit', ";right:auto}\n\n.ejhDx_bQpq.ejhDx_faeR{inset-inline-end:").concat(theme.offsetMedium || 'inherit', ";inset-inline-start:auto}\n\n[dir=ltr] .ejhDx_bQpq.ejhDx_faeR{left:auto;right:").concat(theme.offsetMedium || 'inherit', "}\n\n[dir=rtl] .ejhDx_bQpq.ejhDx_faeR{left:").concat(theme.offsetMedium || 'inherit', ";right:auto}\n\n.ejhDx_bxia{inset-inline-end:auto;inset-inline-start:0}\n\n[dir=ltr] .ejhDx_bxia{left:0;right:auto}\n\n[dir=rtl] .ejhDx_bxia{left:auto;right:0}\n\n.ejhDx_bxia.ejhDx_coHh{inset-inline-end:auto;inset-inline-start:").concat(theme.offsetXSmall || 'inherit', "}\n\n[dir=ltr] .ejhDx_bxia.ejhDx_coHh{left:").concat(theme.offsetXSmall || 'inherit', ";right:auto}\n\n[dir=rtl] .ejhDx_bxia.ejhDx_coHh{left:auto;right:").concat(theme.offsetXSmall || 'inherit', "}\n\n.ejhDx_bxia.ejhDx_cDib{inset-inline-end:auto;inset-inline-start:").concat(theme.offsetSmall || 'inherit', "}\n\n[dir=ltr] .ejhDx_bxia.ejhDx_cDib{left:").concat(theme.offsetSmall || 'inherit', ";right:auto}\n\n[dir=rtl] .ejhDx_bxia.ejhDx_cDib{left:auto;right:").concat(theme.offsetSmall || 'inherit', "}\n\n.ejhDx_bxia.ejhDx_faeR{inset-inline-end:auto;inset-inline-start:").concat(theme.offsetMedium || 'inherit', "}\n\n[dir=ltr] .ejhDx_bxia.ejhDx_faeR{left:").concat(theme.offsetMedium || 'inherit', ";right:auto}\n\n[dir=rtl] .ejhDx_bxia.ejhDx_faeR{left:auto;right:").concat(theme.offsetMedium || 'inherit', "}");
  },
  'root': 'ejhDx_bGBk',
  'placement--static': 'ejhDx_doBn',
  'placement--end': 'ejhDx_bQpq',
  'placement--start': 'ejhDx_bxia',
  'offset--x-small': 'ejhDx_coHh',
  'offset--small': 'ejhDx_cDib',
  'offset--medium': 'ejhDx_faeR'
};
import theme from './theme';
/**
---
category: components
---
**/

var CloseButton = (_dec = deprecated('8.0.0', {
  children: 'screenReaderLabel',
  buttonRef: 'elementRef',
  variant: 'color'
}), _dec2 = testable(), _dec3 = themeable(theme, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(CloseButton, _Component);

  var _super = _createSuper(CloseButton);

  function CloseButton() {
    _classCallCheck(this, CloseButton);

    return _super.apply(this, arguments);
  }

  _createClass(CloseButton, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      /*#__PURE__*/

      /*#__PURE__*/
      _error(this.props.screenReaderLabel || this.props.children, "[CloseButton] The `screenReaderLabel` prop is required but was not provided.");
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      /*#__PURE__*/

      /*#__PURE__*/
      _error(this.props.screenReaderLabel || this.props.children, "[CloseButton] The `screenReaderLabel` prop is required but was not provided.");
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          children = _this$props.children,
          screenReaderLabel = _this$props.screenReaderLabel,
          elementRef = _this$props.elementRef,
          buttonRef = _this$props.buttonRef,
          size = _this$props.size,
          onClick = _this$props.onClick,
          margin = _this$props.margin,
          placement = _this$props.placement,
          offset = _this$props.offset,
          type = _this$props.type,
          as = _this$props.as,
          href = _this$props.href,
          cursor = _this$props.cursor,
          tabIndex = _this$props.tabIndex,
          props = _objectWithoutProperties(_this$props, ["children", "screenReaderLabel", "elementRef", "buttonRef", "size", "onClick", "margin", "placement", "offset", "type", "as", "href", "cursor", "tabIndex"]);

      return /*#__PURE__*/React.createElement("span", Object.assign({}, passthroughProps(props), {
        className: classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles["placement--".concat(placement)], placement), _defineProperty(_classnames, styles["offset--".concat(offset)], offset), _classnames))
      }), /*#__PURE__*/React.createElement(BaseButton, {
        renderIcon: IconXSolid,
        elementRef: elementRef || buttonRef,
        interaction: this.interaction,
        type: type,
        color: this.color,
        size: size,
        onClick: onClick,
        margin: margin,
        withBorder: false,
        withBackground: false,
        as: as,
        href: href,
        cursor: cursor,
        tabIndex: tabIndex,
        __dangerouslyIgnoreExperimentalWarnings: true
      }, /*#__PURE__*/React.createElement(ScreenReaderContent, null, screenReaderLabel || children)));
    }
  }, {
    key: "interaction",
    get: function get() {
      return getInteraction({
        props: this.props
      });
    }
  }, {
    key: "color",
    get: function get() {
      var _this$props2 = this.props,
          color = _this$props2.color,
          variant = _this$props2.variant;
      if (variant === 'icon-inverse' || color === 'primary-inverse') return 'primary-inverse';
      return 'secondary';
    }
  }]);

  CloseButton.displayName = "CloseButton";
  return CloseButton;
}(Component), _class2.propTypes = {
  /**
  * An accessible label for the `CloseButton` (required)
  */
  screenReaderLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  // CloseButton could previously accept node children, loosening this type for backwards compatibility

  /**
  * Specifies the color for the `CloseButton`.
  */
  color: PropTypes.oneOf(['primary', 'primary-inverse']),

  /**
  * Specifies if interaction with the `CloseButton` is enabled, disabled, or readonly.
  */
  interaction: PropTypes.oneOf(['enabled', 'disabled', 'readonly']),

  /**
  * Provides a reference to the `CloseButton`'s underlying html element.
  */
  elementRef: PropTypes.func,

  /**
  * The size of the `CloseButton`
  */
  size: PropTypes.oneOf(['small', 'medium', 'large']),

  /**
  * Callback fired when the `CloseButton` is clicked.
  */
  onClick: PropTypes.func,

  /**
  * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
  * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
  * familiar CSS-like shorthand. For example: `margin="small auto large"`.
  */
  margin: ThemeablePropTypes.spacing,

  /**
  * Specifies the placement of the `CloseButton`
  */
  placement: PropTypes.oneOf(['start', 'end', 'static']),

  /**
  * Specifies the offset distance for the `CloseButton` with respect to both the top and start/end of the container.
  * Note that for this property to have an effect, the `placement` prop must be set to either `start` or `end`. The
  * offset will also be created with respect to a positioned parent. If it does not appear to be working, try setting
  * the `position` of the parent container to `relative`.
  */
  offset: PropTypes.oneOf(['none', 'x-small', 'small', 'medium']),

  /**
  * Specifies the type of the `Button`'s underlying html element.
  */
  type: PropTypes.oneOf(['button', 'submit', 'reset']),

  /**
  * The element to render as the component root, `CloseButton` by default.
  */
  as: PropTypes.elementType,

  /**
  * Specifies an href attribute for the `CloseButton`'s underlying html element.
  */
  href: PropTypes.string,

  /**
   * Specify a mouse cursor to use when hovering over the `CloseButton`.
   */
  cursor: PropTypes.string,

  /**
  * Specifies the tabindex of the `CloseButton`.
  */
  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
  * __Deprecated - use `screenReaderLabel` instead__
  */
  children: PropTypes.node,

  /**
  * __Deprecated - use `elementRef` instead__
  */
  buttonRef: PropTypes.func,

  /**
  * __Deprecated - use `color` instead__
  */
  variant: PropTypes.oneOf(['icon', 'icon-inverse'])
}, _class2.defaultProps = {
  screenReaderLabel: void 0,
  children: void 0,
  onClick: function onClick(event) {},
  elementRef: void 0,
  buttonRef: void 0,
  variant: void 0,
  color: void 0,
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  disabled: void 0,
  readOnly: void 0,
  type: 'button',
  placement: 'static',
  offset: 'x-small',
  size: 'small',
  margin: '0',
  as: 'button',
  href: void 0,
  cursor: 'pointer',
  tabIndex: void 0
}, _temp)) || _class) || _class) || _class);
export default CloseButton;
export { CloseButton };
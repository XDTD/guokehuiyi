"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generator;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var radius = {
  xSmall: 1,
  small: 1.8,
  medium: 2.75,
  large: 3.5
};
var size = {
  xSmall: 3,
  small: 5,
  medium: 7,
  large: 9
};

var circumference = function circumference(r) {
  return (2 * Math.PI * r).toFixed(3);
};

var transform = function transform(s) {
  return s / 2;
};

function generator(_ref) {
  var colors = _ref.colors,
      typography = _ref.typography;
  return {
    fontFamily: typography.fontFamily,
    fontWeight: typography.fontWeightNormal,
    lineHeight: typography.lineHeightCondensed,
    xSmallSize: "".concat(size.xSmall, "em"),
    xSmallRadius: "".concat(radius.xSmall, "em"),
    xSmallCircumference: "".concat(circumference(radius.xSmall), "em"),
    xSmallTransform: "".concat(transform(size.xSmall), "em"),
    smallSize: "".concat(size.small, "em"),
    smallRadius: "".concat(radius.small, "em"),
    smallCircumference: "".concat(circumference(radius.small), "em"),
    smallTransform: "".concat(transform(size.small), "em"),
    mediumSize: "".concat(size.medium, "em"),
    mediumRadius: "".concat(radius.medium, "em"),
    mediumCircumference: "".concat(circumference(radius.medium), "em"),
    mediumTransform: "".concat(transform(size.medium), "em"),
    largeSize: "".concat(size.large, "em"),
    largeRadius: "".concat(radius.large, "em"),
    largeCircumference: "".concat(circumference(radius.large), "em"),
    largeTransform: "".concat(transform(size.large), "em"),
    color: colors.textDarkest,
    meterColor: colors.backgroundBrand,
    doneMeterColor: colors.backgroundSuccess,
    trackColor: colors.textLight,
    inverseColor: colors.textLightest,
    inverseTrackColor: 'rgba(0, 0, 0, 0.25)'
  };
}

generator.canvas = function (variables) {
  return {
    color: variables['ic-brand-font-color-dark'],
    meterColor: variables['ic-brand-primary']
  };
};
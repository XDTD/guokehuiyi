import * as React from 'react';

export type FormFieldLayout = "stacked" | "inline";

export type FormFieldLabelAlign = "start" | "end";

export type FormFieldVAlign = "top" | "middle" | "bottom";

export interface FormFieldProps {
    label: React.ReactNode;
    /**
     * the id of the input (to link it to its label for a11y)
     */
    id: string;
    /**
     * object with shape: `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
    messagesId?: string;
    children?: React.ReactNode;
    inline?: boolean;
    layout?: FormFieldLayout;
    labelAlign?: FormFieldLabelAlign;
    vAlign?: FormFieldVAlign;
    width?: string;
    inputContainerRef?: (...args: any[])=>any;
}

export class FormField extends React.Component<FormFieldProps, any> {
    render(): JSX.Element;

}




export type FormFieldGroupLayout = "stacked" | "columns" | "inline";

export type FormFieldGroupRowSpacing = "none" | "small" | "medium" | "large";

export type FormFieldGroupColSpacing = "none" | "small" | "medium" | "large";

export type FormFieldGroupVAlign = "top" | "middle" | "bottom";

export type FormFieldGroupStartAt = "small" | "medium" | "large" | "x-large" | any;

export interface FormFieldGroupProps {
    description: React.ReactNode;
    /**
     * the element type to render as
     */
    as?: any;
    /**
     * object with shape: `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
    /**
     * id for the form field messages
     */
    messagesId?: string;
    disabled?: boolean;
    children?: React.ReactNode;
    layout?: FormFieldGroupLayout;
    rowSpacing?: FormFieldGroupRowSpacing;
    colSpacing?: FormFieldGroupColSpacing;
    vAlign?: FormFieldGroupVAlign;
    startAt?: FormFieldGroupStartAt;
}

export class FormFieldGroup extends React.Component<FormFieldGroupProps, any> {
    render(): JSX.Element;

}




export interface FormFieldLabelProps {
    as?: any;
    children: React.ReactNode;
}

export class FormFieldLabel extends React.Component<FormFieldLabelProps, any> {
    render(): JSX.Element;

}




export type FormFieldLayoutLayout = "stacked" | "inline";

export type FormFieldLayoutLabelAlign = "start" | "end";

export interface FormFieldLayoutProps {
    label: React.ReactNode;
    /**
     * the id of the input (to link it to its label for a11y)
     */
    id?: string;
    /**
     * the element type to render as
     */
    as?: any;
    /**
     * object with shape: `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
    /**
     * id for the form field messages
     */
    messagesId?: string;
    children?: React.ReactNode;
    inline?: boolean;
    layout?: FormFieldLayoutLayout;
    labelAlign?: FormFieldLayoutLabelAlign;
    width?: string;
    inputContainerRef?: (...args: any[])=>any;
}

export class FormFieldLayout extends React.Component<FormFieldLayoutProps, any> {
    render(): JSX.Element;

}




export type FormFieldMessageVariant = "error" | "hint" | "success" | "screenreader-only";

export interface FormFieldMessageProps {
    variant?: FormFieldMessageVariant;
    children?: React.ReactNode;
}

export class FormFieldMessage extends React.Component<FormFieldMessageProps, any> {
    render(): JSX.Element;

}




export interface FormFieldMessagesProps {
    /**
     * object with shape: `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
}

export class FormFieldMessages extends React.Component<FormFieldMessagesProps, any> {
    render(): JSX.Element;

}


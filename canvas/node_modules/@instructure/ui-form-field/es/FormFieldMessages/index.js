import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { themeable } from '@instructure/ui-themeable';
import { omitProps } from '@instructure/ui-react-utils';
var styles = {
  componentId: 'fAfJj',
  template: function template(theme) {
    return "\n\n.fAfJj_bGBk{margin:calc(-1*".concat(theme.topMargin || 'inherit', ") 0 0 0;padding:0}\n\n.fAfJj_elxg,.fAfJj_bGBk{display:block}");
  },
  'root': 'fAfJj_bGBk',
  'message': 'fAfJj_elxg'
};
import theme from "./theme.js";
import { FormPropTypes } from "../FormPropTypes.js";
import { FormFieldMessage } from "../FormFieldMessage/index.js";
/**
---
parent: FormField
---

A FormFieldMessages component

```js
---
example: true
---
<FormFieldMessages messages={[
  { text: 'Invalid name', type: 'error' },
  { text: 'Good job!', type: 'success' },
  { text: 'Full name, first and last', type: 'hint' },
]} />
```
**/

var FormFieldMessages = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(FormFieldMessages, _Component);

  var _super = _createSuper(FormFieldMessages);

  function FormFieldMessages() {
    _classCallCheck(this, FormFieldMessages);

    return _super.apply(this, arguments);
  }

  _createClass(FormFieldMessages, [{
    key: "render",
    value: function render() {
      var messages = this.props.messages;
      return messages && messages.length > 0 ? /*#__PURE__*/React.createElement("span", Object.assign({
        className: styles.root
      }, omitProps(this.props, FormFieldMessages.propTypes)), messages.map(function (msg, i) {
        return /*#__PURE__*/React.createElement("span", {
          key: "error".concat(i),
          className: styles.message
        }, /*#__PURE__*/React.createElement(FormFieldMessage, {
          variant: msg.type
        }, msg.text));
      })) : null;
    }
  }]);

  FormFieldMessages.displayName = "FormFieldMessages";
  return FormFieldMessages;
}(Component), _class2.propTypes = {
  /**
   * object with shape: `{
   * text: PropTypes.string,
   * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
   *   }`
   */
  messages: PropTypes.arrayOf(FormPropTypes.message)
}, _class2.defaultProps = {
  messages: void 0
}, _temp)) || _class);
export default FormFieldMessages;
export { FormFieldMessages };
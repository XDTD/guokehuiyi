"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormFieldLayout = exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _console = require("@instructure/console");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _hasVisibleChildren = require("@instructure/ui-a11y-utils/lib/hasVisibleChildren.js");

var _ScreenReaderContent = require("@instructure/ui-a11y-content/lib/ScreenReaderContent");

var _Grid = require("@instructure/ui-grid/lib/Grid");

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _pickProps = require("@instructure/ui-react-utils/lib/pickProps.js");

var _getElementType = require("@instructure/ui-react-utils/lib/getElementType.js");

var _uid = require("@instructure/uid");

var _index = require("../FormFieldLabel/index.js");

var _index2 = require("../FormFieldMessages/index.js");

var _FormPropTypes = require("../FormPropTypes.js");

var _theme = _interopRequireDefault(require("./theme.js"));

var _dec, _class, _class2, _temp;

var styles = {
  componentId: 'cWmNi',
  template: function template(theme) {
    return "\n\n.cWmNi_bGBk{all:initial;animation:none 0s ease 0s 1 normal none running;backface-visibility:visible;background:transparent none repeat 0 0/auto auto padding-box border-box scroll;border:medium none currentColor;border:0;border-collapse:separate;border-image:none;border-radius:0;border-spacing:0;bottom:auto;box-shadow:none;box-sizing:content-box;caption-side:top;clear:none;clip:auto;color:#000;column-count:auto;column-fill:balance;column-gap:normal;column-rule:medium none currentColor;column-span:1;column-width:auto;columns:auto;content:normal;counter-increment:none;counter-reset:none;cursor:auto;direction:ltr;direction:inherit;display:inline;display:block;empty-cells:show;float:none;font-family:serif;font-size:medium;font-stretch:normal;font-style:normal;font-variant:normal;font-weight:400;height:auto;hyphens:none;left:auto;letter-spacing:normal;line-height:normal;list-style:disc outside none;margin:0;max-height:none;max-width:none;min-height:0;min-width:0;opacity:1;opacity:inherit;orphans:2;outline:medium none invert;overflow:visible;overflow-x:visible;overflow-y:visible;padding:0;page-break-after:auto;page-break-before:auto;page-break-inside:auto;perspective:none;perspective-origin:50% 50%;position:static;right:auto;tab-size:8;table-layout:auto;text-align:left;text-align:start;text-align-last:auto;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;top:auto;transform:none;transform-origin:50% 50% 0;transform-style:flat;transition:none 0s ease 0s;unicode-bidi:normal;vertical-align:baseline;visibility:visible;white-space:normal;widows:2;width:auto;width:100%;word-spacing:normal;z-index:auto}\n\n[dir=ltr] .cWmNi_bGBk{text-align:left}\n\n[dir=rtl] .cWmNi_bGBk{text-align:right}\n\n.cWmNi_eXrk{display:inline-block;vertical-align:middle;width:auto}";
  },
  'root': 'cWmNi_bGBk',
  'inline': 'cWmNi_eXrk'
};

/**
---
parent: FormField
---
**/
var FormFieldLayout = (_dec = (0, _themeable.themeable)(_theme.default, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(FormFieldLayout, _Component);

  var _super = (0, _createSuper2.default)(FormFieldLayout);

  function FormFieldLayout(props) {
    var _this;

    (0, _classCallCheck2.default)(this, FormFieldLayout);
    _this = _super.call(this);

    _this.handleInputContainerRef = function (node) {
      if (_this.props.inputContainerRef) {
        _this.props.inputContainerRef(node);
      }
    };

    _this._messagesId = props.messagesId || (0, _uid.uid)('FormFieldLayout-messages');

    /*#__PURE__*/
    ( /*#__PURE__*/0, _console.error)(typeof props.width !== 'undefined' || !props.inline || props.layout !== 'inline', "[FormFieldLayout] The 'inline' prop is true, and the 'layout' is set to 'inline'.\n      This will cause a layout issue in Internet Explorer 11 unless you also add a value for the 'width' prop.");
    return _this;
  }

  (0, _createClass2.default)(FormFieldLayout, [{
    key: "renderLabel",
    value: function renderLabel() {
      if (this.hasVisibleLabel) {
        return /*#__PURE__*/_react.default.createElement(_Grid.Grid.Col, {
          textAlign: this.props.labelAlign,
          width: this.inlineContainerAndLabel ? 'auto' : 3
        }, /*#__PURE__*/_react.default.createElement(_index.FormFieldLabel, {
          "aria-hidden": this.elementType === 'fieldset' ? 'true' : null
        }, this.props.label));
      } else if (this.elementType !== 'fieldset') {
        // to avoid duplicate label/legend content
        return this.props.label;
      } else {
        return null;
      }
    }
  }, {
    key: "renderLegend",
    value: function renderLegend() {
      // note: the legend element must be the first child of a fieldset element for SR
      // so we render it twice in that case (once for SR-only and one that is visible)
      return /*#__PURE__*/_react.default.createElement(_ScreenReaderContent.ScreenReaderContent, {
        as: "legend"
      }, this.props.label, this.hasMessages && /*#__PURE__*/_react.default.createElement(_index2.FormFieldMessages, {
        messages: this.props.messages
      }));
    }
  }, {
    key: "renderMessages",
    value: function renderMessages() {
      return /*#__PURE__*/_react.default.createElement(_index2.FormFieldMessages, {
        id: this._messagesId,
        messages: this.props.messages
      });
    }
  }, {
    key: "renderVisibleMessages",
    value: function renderVisibleMessages() {
      return this.hasMessages ? /*#__PURE__*/_react.default.createElement(_Grid.Grid.Row, null, /*#__PURE__*/_react.default.createElement(_Grid.Grid.Col, {
        offset: this.inlineContainerAndLabel ? null : 3,
        textAlign: this.inlineContainerAndLabel ? 'end' : null
      }, /*#__PURE__*/_react.default.createElement(_index2.FormFieldMessages, {
        id: this._messagesId,
        messages: this.props.messages
      }))) : null;
    }
  }, {
    key: "render",
    value: function render() {
      var _classes;

      var ElementType = this.elementType;
      var classes = (_classes = {}, (0, _defineProperty2.default)(_classes, styles.root, true), (0, _defineProperty2.default)(_classes, styles.inline, this.props.inline), _classes);
      return /*#__PURE__*/_react.default.createElement(ElementType, Object.assign({}, (0, _omitProps.omitProps)(this.props, (0, _objectSpread2.default)({}, FormFieldLayout.propTypes, {}, _Grid.Grid.propTypes)), {
        className: (0, _classnames.default)(classes),
        style: {
          width: this.props.width
        },
        "aria-describedby": this.hasMessages ? this._messagesId : null
      }), this.elementType === 'fieldset' && this.renderLegend(), /*#__PURE__*/_react.default.createElement(_Grid.Grid, Object.assign({
        rowSpacing: "small",
        colSpacing: "small",
        startAt: this.props.layout === 'inline' && this.hasVisibleLabel ? 'medium' : null
      }, (0, _pickProps.pickProps)(this.props, _Grid.Grid.propTypes)), /*#__PURE__*/_react.default.createElement(_Grid.Grid.Row, null, this.renderLabel(), /*#__PURE__*/_react.default.createElement(_Grid.Grid.Col, {
        width: this.inlineContainerAndLabel ? 'auto' : null,
        elementRef: this.handleInputContainerRef
      }, this.props.children)), this.renderVisibleMessages()));
    }
  }, {
    key: "hasVisibleLabel",
    get: function get() {
      return this.props.label && (0, _hasVisibleChildren.hasVisibleChildren)(this.props.label);
    }
  }, {
    key: "hasMessages",
    get: function get() {
      return this.props.messages && this.props.messages.length > 0;
    }
  }, {
    key: "elementType",
    get: function get() {
      return (0, _getElementType.getElementType)(FormFieldLayout, this.props);
    }
  }, {
    key: "inlineContainerAndLabel",
    get: function get() {
      // Return if both the component container and label will display inline
      return this.props.inline && this.props.layout === 'inline';
    }
  }]);
  FormFieldLayout.displayName = "FormFieldLayout";
  return FormFieldLayout;
}(_react.Component), _class2.propTypes = {
  label: _propTypes.default.node.isRequired,

  /**
   * the id of the input (to link it to its label for a11y)
   */
  id: _propTypes.default.string,

  /**
   * the element type to render as
   */
  as: _propTypes.default.elementType,

  /**
   * object with shape: `{
   * text: PropTypes.string,
   * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
   *   }`
   */
  messages: _propTypes.default.arrayOf(_FormPropTypes.FormPropTypes.message),

  /**
   * id for the form field messages
   */
  messagesId: _propTypes.default.string,
  children: _propTypes.default.node,
  inline: _propTypes.default.bool,
  layout: _propTypes.default.oneOf(['stacked', 'inline']),
  labelAlign: _propTypes.default.oneOf(['start', 'end']),
  width: _propTypes.default.string,
  inputContainerRef: _propTypes.default.func
}, _class2.defaultProps = {
  id: void 0,
  width: void 0,
  messages: void 0,
  messagesId: void 0,
  children: null,
  inline: false,
  layout: 'stacked',
  as: 'label',
  labelAlign: 'end',
  inputContainerRef: void 0
}, _temp)) || _class);
exports.FormFieldLayout = FormFieldLayout;
var _default = FormFieldLayout;
exports.default = _default;
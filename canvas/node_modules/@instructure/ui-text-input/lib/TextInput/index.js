"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextInput = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _controllable = require("@instructure/ui-prop-types/lib/controllable.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _callRenderProp = require("@instructure/ui-react-utils/lib/callRenderProp.js");

var _getInteraction = require("@instructure/ui-react-utils/lib/getInteraction.js");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _isActiveElement = require("@instructure/ui-dom-utils/lib/isActiveElement.js");

var _FormField = require("@instructure/ui-form-field/lib/FormField");

var _FormPropTypes = require("@instructure/ui-form-field/lib/FormPropTypes.js");

var _Flex = require("@instructure/ui-flex/lib/Flex");

var _uid = require("@instructure/uid");

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _theme = _interopRequireDefault(require("./theme.js"));

var _dec, _dec2, _class, _class2, _temp;

var styles = {
  componentId: 'qBMHb',
  template: function template(theme) {
    return "\n\n.qBMHb_cSXm{background:".concat(theme.background || 'inherit', ";border:").concat(theme.borderWidth || 'inherit', " ").concat(theme.borderStyle || 'inherit', " ").concat(theme.borderColor || 'inherit', ";border-radius:").concat(theme.borderRadius || 'inherit', ";position:relative}\n\n.qBMHb_cSXm,.qBMHb_cSXm:before{box-sizing:border-box;display:block}\n\n.qBMHb_cSXm:before{border:").concat(theme.focusOutlineWidth || 'inherit', " ").concat(theme.focusOutlineStyle || 'inherit', " ").concat(theme.focusOutlineColor || 'inherit', ";border-radius:calc(").concat(theme.borderRadius || 'inherit', "*1.5);bottom:-0.25rem;content:\"\";left:-0.25rem;opacity:0;pointer-events:none;position:absolute;right:-0.25rem;top:-0.25rem;transform:scale(0.95);transition:all 0.2s}\n\n.qBMHb_cSXm.qBMHb_cVYB:before{opacity:1;transform:scale(1)}\n\n.qBMHb_cSXm.qBMHb_ywdX{cursor:not-allowed;opacity:0.5;pointer-events:none}\n\n.qBMHb_cSXm.qBMHb_fszt,.qBMHb_cSXm.qBMHb_fszt.qBMHb_cVYB:before{border-color:").concat(theme.errorBorderColor || 'inherit', "}\n\n.qBMHb_cwos,input[type].qBMHb_cwos{-moz-appearance:none;-moz-osx-font-smoothing:grayscale;-webkit-appearance:none;-webkit-font-smoothing:antialiased;all:initial;animation:none 0s ease 0s 1 normal none running;appearance:none;backface-visibility:visible;background:transparent none repeat 0 0/auto auto padding-box border-box scroll;background:transparent;border:medium none currentColor;border:none;border-collapse:separate;border-image:none;border-radius:0;border-spacing:0;bottom:auto;box-shadow:none;box-sizing:content-box;box-sizing:border-box;caption-side:top;clear:none;clip:auto;color:#000;color:").concat(theme.color || 'inherit', ";column-count:auto;column-fill:balance;column-gap:normal;column-rule:medium none currentColor;column-span:1;column-width:auto;columns:auto;content:normal;counter-increment:none;counter-reset:none;cursor:auto;direction:ltr;display:inline;display:block;empty-cells:show;float:none;font-family:serif;font-family:").concat(theme.fontFamily || 'inherit', ";font-size:medium;font-stretch:normal;font-style:normal;font-variant:normal;font-weight:400;font-weight:").concat(theme.fontWeight || 'inherit', ";height:auto;hyphens:none;left:auto;letter-spacing:normal;line-height:normal;list-style:disc outside none;margin:0;max-height:none;max-width:none;min-height:0;min-width:0;opacity:1;orphans:2;outline:medium none invert;outline:none;overflow:visible;overflow-x:visible;overflow-y:visible;padding:0;padding:0 ").concat(theme.padding || 'inherit', ";page-break-after:auto;page-break-before:auto;page-break-inside:auto;perspective:none;perspective-origin:50% 50%;position:static;right:auto;tab-size:8;table-layout:auto;text-align:left;text-align-last:auto;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;top:auto;transform:none;transform-origin:50% 50% 0;transform-style:flat;transition:none 0s ease 0s;unicode-bidi:normal;vertical-align:baseline;visibility:visible;white-space:normal;widows:2;width:auto;width:100%;word-spacing:normal;z-index:auto}\n\n.qBMHb_cwos::-ms-clear,input[type].qBMHb_cwos::-ms-clear{display:none}\n\n.qBMHb_cwos[autocomplete=off]::-webkit-contacts-auto-fill-button,input[type].qBMHb_cwos[autocomplete=off]::-webkit-contacts-auto-fill-button{display:none!important}\n\n.qBMHb_cwos:focus,input[type].qBMHb_cwos:focus{box-shadow:none}\n\n.qBMHb_cwos:-ms-input-placeholder,input[type].qBMHb_cwos:-ms-input-placeholder{color:").concat(theme.placeholderColor || 'inherit', "}\n\n.qBMHb_cwos::placeholder,input[type].qBMHb_cwos::placeholder{color:").concat(theme.placeholderColor || 'inherit', "}\n\n.qBMHb_cwos.qBMHb_doqw,input[type].qBMHb_cwos.qBMHb_doqw{font-size:").concat(theme.smallFontSize || 'inherit', ";height:calc(").concat(theme.smallHeight || 'inherit', " - 2*").concat(theme.borderWidth || 'inherit', ");line-height:calc(").concat(theme.smallHeight || 'inherit', " - 2*").concat(theme.borderWidth || 'inherit', ")}\n\n.qBMHb_cwos.qBMHb_ycrn,input[type].qBMHb_cwos.qBMHb_ycrn{font-size:").concat(theme.mediumFontSize || 'inherit', ";height:calc(").concat(theme.mediumHeight || 'inherit', " - 2*").concat(theme.borderWidth || 'inherit', ");line-height:calc(").concat(theme.mediumHeight || 'inherit', " - 2*").concat(theme.borderWidth || 'inherit', ")}\n\n.qBMHb_cwos.qBMHb_cMDj,input[type].qBMHb_cwos.qBMHb_cMDj{font-size:").concat(theme.largeFontSize || 'inherit', ";height:calc(").concat(theme.largeHeight || 'inherit', " - 2*").concat(theme.borderWidth || 'inherit', ");line-height:calc(").concat(theme.largeHeight || 'inherit', " - 2*").concat(theme.borderWidth || 'inherit', ")}\n\n.qBMHb_cwos.qBMHb_EMjX,input[type].qBMHb_cwos.qBMHb_EMjX{text-align:start}\n\n[dir=ltr] .qBMHb_cwos.qBMHb_EMjX,[dir=ltr] input[type].qBMHb_cwos.qBMHb_EMjX{text-align:left}\n\n[dir=rtl] .qBMHb_cwos.qBMHb_EMjX,[dir=rtl] input[type].qBMHb_cwos.qBMHb_EMjX{text-align:right}\n\n.qBMHb_cwos.qBMHb_ImeN,[dir=ltr] .qBMHb_cwos.qBMHb_ImeN,[dir=ltr] input[type].qBMHb_cwos.qBMHb_ImeN,[dir=rtl] .qBMHb_cwos.qBMHb_ImeN,[dir=rtl] input[type].qBMHb_cwos.qBMHb_ImeN,input[type].qBMHb_cwos.qBMHb_ImeN{text-align:center}");
  },
  'facade': 'qBMHb_cSXm',
  'focused': 'qBMHb_cVYB',
  'disabled': 'qBMHb_ywdX',
  'invalid': 'qBMHb_fszt',
  'input': 'qBMHb_cwos',
  'small': 'qBMHb_doqw',
  'medium': 'qBMHb_ycrn',
  'large': 'qBMHb_cMDj',
  'textAlign--start': 'qBMHb_EMjX',
  'textAlign--center': 'qBMHb_ImeN'
};

/**
---
category: components
tags: form, field
---
**/
var TextInput = (_dec = (0, _deprecated.deprecated)('8.0.0', {
  label: 'renderLabel',
  required: 'isRequired',
  inline: 'display'
}), _dec2 = (0, _themeable.themeable)(_theme.default, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(TextInput, _Component);

  var _super = (0, _createSuper2.default)(TextInput);

  function TextInput(props) {
    var _this;

    (0, _classCallCheck2.default)(this, TextInput);
    _this = _super.call(this);

    _this.handleInputRef = function (node) {
      _this._input = node;

      _this.props.inputRef(node);
    };

    _this.handleChange = function (event) {
      _this.props.onChange(event, event.target.value);
    };

    _this.handleBlur = function (event) {
      _this.props.onBlur(event);

      _this.setState({
        hasFocus: false
      });
    };

    _this.handleFocus = function (event) {
      _this.props.onFocus(event);

      _this.setState({
        hasFocus: true
      });
    };

    _this.state = {
      hasFocus: false
    };
    _this._defaultId = (0, _uid.uid)('TextInput');
    _this._messagesId = (0, _uid.uid)('TextInput-messages');
    return _this;
  }

  (0, _createClass2.default)(TextInput, [{
    key: "focus",
    value: function focus() {
      this._input.focus();
    }
  }, {
    key: "renderInput",
    value: function renderInput() {
      var _inputClasses;

      var _this$props = this.props,
          type = _this$props.type,
          size = _this$props.size,
          htmlSize = _this$props.htmlSize,
          display = _this$props.display,
          textAlign = _this$props.textAlign,
          placeholder = _this$props.placeholder,
          value = _this$props.value,
          defaultValue = _this$props.defaultValue,
          required = _this$props.required,
          isRequired = _this$props.isRequired,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["type", "size", "htmlSize", "display", "textAlign", "placeholder", "value", "defaultValue", "required", "isRequired"]);
      var props = (0, _passthroughProps.passthroughProps)(rest);
      var interaction = this.interaction;
      var inputClasses = (_inputClasses = {}, (0, _defineProperty2.default)(_inputClasses, styles.input, true), (0, _defineProperty2.default)(_inputClasses, styles[size], size), (0, _defineProperty2.default)(_inputClasses, styles["textAlign--".concat(textAlign)], textAlign), _inputClasses);
      var descriptionIds = '';

      if (props['aria-describedby']) {
        descriptionIds = "".concat(props['aria-describedby']);
      }

      if (this.hasMessages) {
        descriptionIds = descriptionIds !== '' ? "".concat(descriptionIds, " ").concat(this._messagesId) : this._messagesId;
      }

      return /*#__PURE__*/_react.default.createElement("input", Object.assign({}, props, {
        className: (0, _classnames.default)(inputClasses),
        defaultValue: defaultValue,
        value: value,
        placeholder: placeholder,
        ref: this.handleInputRef,
        type: type,
        id: this.id,
        required: isRequired || required,
        "aria-invalid": this.invalid ? 'true' : null,
        disabled: interaction === 'disabled',
        readOnly: interaction === 'readonly',
        "aria-describedby": descriptionIds !== '' ? descriptionIds : null,
        size: htmlSize,
        onChange: this.handleChange,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _facadeClasses;

      var _this$props2 = this.props,
          width = _this$props2.width,
          inline = _this$props2.inline,
          display = _this$props2.display,
          label = _this$props2.label,
          renderLabel = _this$props2.renderLabel,
          renderBeforeInput = _this$props2.renderBeforeInput,
          renderAfterInput = _this$props2.renderAfterInput,
          messages = _this$props2.messages,
          inputContainerRef = _this$props2.inputContainerRef,
          icon = _this$props2.icon,
          shouldNotWrap = _this$props2.shouldNotWrap;
      var interaction = this.interaction;
      var renderBeforeOrAfter = renderBeforeInput || renderAfterInput || icon;
      var facadeClasses = (_facadeClasses = {}, (0, _defineProperty2.default)(_facadeClasses, styles.facade, true), (0, _defineProperty2.default)(_facadeClasses, styles.disabled, interaction === 'disabled'), (0, _defineProperty2.default)(_facadeClasses, styles.invalid, this.invalid), (0, _defineProperty2.default)(_facadeClasses, styles.focused, this.state.hasFocus), _facadeClasses);
      return /*#__PURE__*/_react.default.createElement(_FormField.FormField, {
        id: this.id,
        label: (0, _callRenderProp.callRenderProp)(renderLabel || label),
        messagesId: this._messagesId,
        messages: messages,
        inline: display === 'inline-block' || inline,
        width: width,
        inputContainerRef: inputContainerRef,
        layout: this.props.layout // eslint-disable-line react/prop-types

      }, /*#__PURE__*/_react.default.createElement("span", {
        className: (0, _classnames.default)(facadeClasses)
      }, renderBeforeOrAfter ? /*#__PURE__*/_react.default.createElement(_Flex.Flex, {
        wrap: shouldNotWrap ? 'no-wrap' : 'wrap'
      }, renderBeforeInput && /*#__PURE__*/_react.default.createElement(_Flex.Flex.Item, {
        padding: "0 0 0 small"
      }, (0, _callRenderProp.callRenderProp)(renderBeforeInput)), /*#__PURE__*/_react.default.createElement(_Flex.Flex.Item, {
        shouldGrow: true,
        shouldShrink: true
      }, /*#__PURE__*/_react.default.createElement(_Flex.Flex, null, /*#__PURE__*/_react.default.createElement(_Flex.Flex.Item, {
        shouldGrow: true,
        shouldShrink: true
      }, this.renderInput()), (renderAfterInput || icon) && /*#__PURE__*/_react.default.createElement(_Flex.Flex.Item, {
        padding: "0 small 0 0"
      }, renderAfterInput ? (0, _callRenderProp.callRenderProp)(renderAfterInput) : (0, _callRenderProp.callRenderProp)(icon))))) :
      /* If no prepended or appended content, don't render Flex layout */
      this.renderInput()));
    }
  }, {
    key: "interaction",
    get: function get() {
      return (0, _getInteraction.getInteraction)({
        props: this.props
      });
    }
  }, {
    key: "hasMessages",
    get: function get() {
      return this.props.messages && this.props.messages.length > 0;
    }
  }, {
    key: "invalid",
    get: function get() {
      return this.props.messages && this.props.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }, {
    key: "focused",
    get: function get() {
      return (0, _isActiveElement.isActiveElement)(this._input);
    }
  }, {
    key: "value",
    get: function get() {
      return this._input.value;
    }
  }, {
    key: "id",
    get: function get() {
      return this.props.id || this._defaultId;
    }
  }]);
  TextInput.displayName = "TextInput";
  return TextInput;
}(_react.Component), _class2.propTypes = {
  /**
   * The form field label.
   */
  renderLabel: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * The type of input.
   */
  type: _propTypes.default.oneOf(['text', 'email', 'url', 'tel', 'search', 'password']),

  /**
   * The id of the text input. One is generated if not supplied.
   */
  id: _propTypes.default.string,

  /**
   * the selected value (must be accompanied by an `onChange` prop)
   */
  value: (0, _controllable.controllable)(_propTypes.default.string),

  /**
   * value to set on initial render
   */
  defaultValue: _propTypes.default.string,

  /**
   * Specifies if interaction with the input is enabled, disabled, or readonly.
   * When "disabled", the input changes visibly to indicate that it cannot
   * receive user interactions. When "readonly" the input still cannot receive
   * user interactions but it keeps the same styles as if it were enabled.
   */
  interaction: _propTypes.default.oneOf(['enabled', 'disabled', 'readonly']),

  /**
   * object with shape: `{
   * text: PropTypes.string,
   * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
   *   }`
   */
  messages: _propTypes.default.arrayOf(_FormPropTypes.FormPropTypes.message),

  /**
   * The size of the text input.
   */
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),

  /**
   * The text alignment of the input.
   */
  textAlign: _propTypes.default.oneOf(['start', 'center']),

  /**
   * The width of the input.
   */
  width: _propTypes.default.string,

  /**
   * The width of the input, in characters, if a width is not explicitly
   * provided via the `width` prop. Only applicable if `isInline={true}`.
   */
  htmlSize: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * The display of the root element.
   */
  display: _propTypes.default.oneOf(['inline-block', 'block']),

  /**
   * Prevents the default behavior of wrapping the input and rendered content
   * when available space is exceeded.
   */
  shouldNotWrap: _propTypes.default.bool,

  /**
   * Html placeholder text to display when the input has no value. This should be hint text, not a label
   * replacement.
   */
  placeholder: _propTypes.default.string,

  /**
   * Whether or not the text input is required.
   */
  isRequired: _propTypes.default.bool,

  /**
   * a function that provides a reference to the actual input element
   */
  inputRef: _propTypes.default.func,

  /**
   * a function that provides a reference a parent of the input element
   */
  inputContainerRef: _propTypes.default.func,

  /**
   * Content to display before the input text, such as an icon
   */
  renderBeforeInput: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * Content to display after the input text, such as an icon
   */
  renderAfterInput: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * Callback executed when the input fires a change event.
   * @param {Object} event - the event object
   * @param {Object} value - the string value of the input
   */
  onChange: _propTypes.default.func,

  /**
   * Callback fired when input loses focus.
   */
  onBlur: _propTypes.default.func,

  /**
   * Callback fired when input receives focus.
   */
  onFocus: _propTypes.default.func,

  /* eslint-disable react/require-default-props */

  /**
   * __Deprecated - use `renderAfterInput`__
   */
  icon: _propTypes.default.func,

  /**
   * __Deprecated - use `renderLabel`__
   */
  label: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * __Deprecated - use `isRequired`__
   */
  required: _propTypes.default.bool,

  /**
   * __Deprecated - use `display`__
   */
  inline: _propTypes.default.bool
  /* eslint-enable react/require-default-props */

}, _class2.defaultProps = {
  renderLabel: void 0,
  type: 'text',
  id: void 0,
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  isRequired: false,
  value: void 0,
  defaultValue: void 0,
  display: 'block',
  shouldNotWrap: false,
  placeholder: void 0,
  width: void 0,
  size: 'medium',
  htmlSize: void 0,
  textAlign: 'start',
  messages: [],
  inputRef: function inputRef(input) {},
  inputContainerRef: function inputContainerRef(container) {},
  onChange: function onChange(event, value) {},
  onBlur: function onBlur(event) {},
  onFocus: function onFocus(event) {},
  renderBeforeInput: void 0,
  renderAfterInput: void 0
}, _temp)) || _class) || _class);
exports.TextInput = TextInput;
var _default = TextInput;
exports.default = _default;
import * as React from 'react';

export type AlertVariant = "info" | "success" | "warning" | "error";

export type AlertLiveRegionPoliteness = "polite" | "assertive";

export type AlertRenderCloseButtonLabel = ((...args: any[])=>any) | React.ReactNode;

export type AlertTransition = "none" | "fade";

export interface AlertProps {
    /**
     * content to be rendered within Alert
     */
    children?: React.ReactNode;
    /**
     * Determines color and icon
     */
    variant?: AlertVariant;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * Function that returns the DIV where screenreader alerts will be placed.
     */
    liveRegion?: (...args: any[])=>any;
    /**
     * Choose the politeness level of screenreader alerts.
     */
    liveRegionPoliteness?: AlertLiveRegionPoliteness;
    /**
     * If the screenreader alert should be atomic
     */
    isLiveRegionAtomic?: boolean;
    /**
     * If the alert should only be visible to screen readers
     */
    screenReaderOnly?: boolean;
    /**
     * Milliseconds until the Alert is dismissed automatically
     */
    timeout?: number;
    /**
     * Close button label. Can be a React component
     */
    renderCloseButtonLabel?: AlertRenderCloseButtonLabel;
    /**
     * __Deprecated - use `renderCloseButtonLabel` instead__
     */
    closeButtonLabel?: string;
    /**
     * Callback after the alert is closed
     */
    onDismiss?: (...args: any[])=>any;
    /**
     * Transition used to make the alert appear and disappear
     */
    transition?: AlertTransition;
    /**
     * if open transitions from truthy to falsey, it's a signal to close and unmount the alert.
     * This is necessary to close the alert from the outside and still run the transition.
     */
    open?: boolean;
    /**
     * If the alert should have a shadow.
     */
    hasShadow?: boolean;
}

export class Alert extends React.Component<AlertProps, any> {
    render(): JSX.Element;

}


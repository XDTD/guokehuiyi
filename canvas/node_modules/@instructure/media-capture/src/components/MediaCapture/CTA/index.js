/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { Button } from '@instructure/ui-buttons'
import { Responsive } from '@instructure/ui-responsive'
import { View } from '@instructure/ui-view'

import {
  READY,
  RECORDING
} from '../../../constants/CaptureStates'

import { translate } from '../../../constants/translated/translations'

/**
---
private: true
---
**/
class CTA extends Component {
  static propTypes = {
    actions: PropTypes.shape({
      startClicked: PropTypes.func.isRequired,
      finishClicked: PropTypes.func.isRequired
    }).isRequired,
    captureState: PropTypes.string.isRequired,
    fluidWidth: PropTypes.bool,
    hasStarted: PropTypes.bool.isRequired
  }

  static defaultProps = {
    fluidWidth: false
  }

  componentDidMount () {
    this.props.hasStarted && this.el && this.el.focus()
  }

  componentDidUpdate () {
    this.props.hasStarted && this.el && this.el.focus()
  }

  captureRef = (e) => {
    this.el = e
  }

  createButton = (action, string) => {
    const { fluidWidth } = this.props
    return (
      <Responsive match="media" query={{
        medium: { maxWidth: 767 }
      }}>
        {(props, matches) => (
          <Button
            fluidWidth={fluidWidth}
            onClick={action}
            color="primary"
            size={matches.includes('medium') ? 'medium' : 'large'}
            ref={this.captureRef}
          >
            <View display="block" textAlign="center">
              { string }
            </View>
          </Button>
        )}
      </Responsive>
    )
  }

  render () {
    const { captureState, actions } = this.props

    switch(captureState) {
      case READY:
        return this.createButton(actions.startClicked, translate('START'))
      case RECORDING:
        return this.createButton(actions.finishClicked, translate('FINISH'))
      default:
        return null
    }
  }
}

export default CTA

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react'
import themeable from '@instructure/ui-themeable'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'
import * as CaptureActions from '../../../actions'
import CountdownTimer from '../../MediaCapture/CountdownTimer'
import Loading from '../../MediaCapture/Loading'
import Message from '../../MediaCapture/Message'
import {
  STARTING,
  LOADING,
  ERROR
} from '../../../constants/CaptureStates'

import theme from './theme'

/**
---
private: true
---
**/
@themeable(theme)
class MediaOverlay extends Component {
  render () {
    switch (this.props.captureState) {
      case LOADING:
        return <Loading />
      case ERROR:
        return <Message msg={this.props.msg} />
      case STARTING:
        return <CountdownTimer actions={this.props.actions} />
      default:
        return null
    }
  }
}

const mapStateToProps = state => ({ captureState: state.captureState, msg: state.msg })

const mapDispatchToProps = dispatch => ({
  actions: bindActionCreators(CaptureActions, dispatch)
})

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(MediaOverlay)

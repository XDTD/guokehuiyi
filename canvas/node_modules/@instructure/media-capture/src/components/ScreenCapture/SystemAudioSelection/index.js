/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { SimpleSelect } from '@instructure/ui-simple-select'
import { IconAudioLine, IconAudioOffLine } from '@instructure/ui-icons'
import themeable from '@instructure/ui-themeable'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'
import * as CaptureActions from '../../../actions'
import { translate } from '../../../constants/translated/translations'

/**
---
private: true
---
**/
/* eslint-disable react/prop-types */
@themeable({})
class SystemAudioSelection extends Component {
  static propTypes = {
    isDisabled: PropTypes.bool,
  }

  static defaultProps = {
    isDisabled: false
  }

  icon = <IconAudioLine inline={false} />
  disabledIcon = <IconAudioOffLine inline={false} />

  onChange = (_, { value }) => {
    this.props.actions.systemAudioAllowedChanged(value === "true")
  }

  getSelectedIcon () {
    return this.props.systemAudioAllowed ? this.icon : this.disabledIcon
  }

  getInteractionType () {
    return this.props.isDisabled ? 'disabled' : 'enabled'
  }

  render () {
    return (
      <SimpleSelect
        renderLabel={() => ``}
        value={this.props.systemAudioAllowed.toString()}
        onChange={this.onChange}
        renderBeforeInput={this.getSelectedIcon()}
        interaction={this.getInteractionType()}
        data-test="SystemAudioSelection"
      >
        <SimpleSelect.Option
          value="true"
          id="on"
          renderBeforeLabel={this.icon}
        >
          {translate('SYSTEM_AUDIO_ALLOWED')}
        </SimpleSelect.Option>
        <SimpleSelect.Option
          value="false"
          id="off"
          renderBeforeLabel={this.disabledIcon}
        >
          {translate('SYSTEM_AUDIO_DISABLED')}
        </SimpleSelect.Option>
      </SimpleSelect>
    )
  }
}

const mapStateToProps = state => ({ systemAudioAllowed: state.systemAudioAllowed })

const mapDispatchToProps = dispatch => ({
  actions: bindActionCreators(CaptureActions, dispatch)
})

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(SystemAudioSelection)

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { SimpleSelect } from '@instructure/ui-simple-select'
import React from 'react'

const DeviceSelection = {
  formatLabel (device) {
    if (device.label && device.label.length > 0) {
      return device.label
    } else {
      return device.deviceId
    }
  },

  // eslint-disable-next-line react/display-name
  optionsMapper: icon => device => {
    return device.deviceId ?
    (
      <SimpleSelect.Option
        key={`${device.deviceId}`}
        value={`${device.deviceId}`}
        id={device.deviceId}
        renderBeforeLabel={icon}
      >
        {DeviceSelection.formatLabel(device)}
      </SimpleSelect.Option>
    ) : null
  },

  getDisabledOption ({ value, text, icon }) {
    return (
      <SimpleSelect.Option
        key={value}
        value={value}
        id={value}
        renderBeforeLabel={icon}
      >
        {text}
      </SimpleSelect.Option>
    )
  },

  renderOptions (devices, icon, disabledValue, disabledText, disabledIcon) {
    const options = devices.map(DeviceSelection.optionsMapper(icon))
    options.push(
      DeviceSelection.getDisabledOption(
        {
          value: disabledValue,
          text: disabledText,
          icon: disabledIcon
        }
      )
    )

    return options
  }
}

export default DeviceSelection

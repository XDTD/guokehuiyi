/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { createStore, applyMiddleware } from 'redux'
import thunk from 'redux-thunk'
import ScreenCaptureProvider from './ScreenCaptureProvider'
import CapturePresentation from '../../core/components/CapturePresentation'
import MediaContainer from '../../core/components/MediaContainer'
import MediaOverlay from './MediaOverlay'
import CapturedStream from './CapturedStream'
import { reducer, getInitialState } from '../../reducers'
import { applyTranslations, TranslationPropTypes} from '../../constants/translated/translations'
import Controller from './Controller'
import { closeClicked, finishClicked } from '../../actions'

const TranslationsPropType = PropTypes.shape(TranslationPropTypes)

export default class ScreenCapture extends Component {
  constructor (props) {
    super(props)

    const initialState = getInitialState(this.props.onCompleted, this.props.onCancel)

    this.state = {
      store: createStore(reducer, initialState, applyMiddleware(thunk))
    }

    applyTranslations(this.props.translations)
  }

  static propTypes = {
    /**
     * Callback fired when a file has been generated.
     */
    onCompleted: PropTypes.func.isRequired,
    /**
     * Callback fired when the component is closed for a reason
     * other than generating a file. Includes the last
     * emitted state when the action was taken.
     */
    onCancel: PropTypes.func,
    /**
     * Callback fired when the component state is changed
     */
    onChange: PropTypes.func,
    /**
     * Label overrides for i18n. Defaults to english
     * See src/constants/translated/translations.js for default values
     */
    translations: TranslationsPropType,
    /**
     * Flag if this component is called from Storybook or not.
     * Used for rendering a Finish button which is not need normally,
     * since the embedder renders its own.
     */
    inStorybook: PropTypes.bool,
    /**
     * Callback for setting action handlers.
     * Used for dispatching actions from outside ScreenCapture.
     */
    actionSetterCallback: PropTypes.func,
  }

  static defaultProps = {
    onCancel: () => {},
    onChange: () => {},
    translations: {},
    inStorybook: false,
    actionSetterCallback: () => {},
  }

  componentDidMount() {
    this.props.actionSetterCallback({
      closeClicked: () => this.state.store.dispatch(closeClicked()),
      finishClicked: () => this.state.store.dispatch(finishClicked()),
    })
  }

  render () {
    return (
      <ScreenCaptureProvider
        onCancel={this.props.onCancel}
        onChange={this.props.onChange}
        store={this.state.store}
        render={() => (
          <CapturePresentation>
            <MediaContainer>
              <MediaOverlay />
              <CapturedStream />
            </MediaContainer>
            <Controller inStorybook={this.props.inStorybook} />
          </CapturePresentation>
        )}
      />
    )
  }
}

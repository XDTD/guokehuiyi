// /*
//  * The MIT License (MIT)
//  *
//  * Copyright (c) 2015 - present Instructure, Inc.
//  *
//  * Permission is hereby granted, free of charge, to any person obtaining a copy
//  * of this software and associated documentation files (the "Software"), to deal
//  * in the Software without restriction, including without limitation the rights
//  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  * copies of the Software, and to permit persons to whom the Software is
//  * furnished to do so, subject to the following conditions:
//  *
//  * The above copyright notice and this permission notice shall be included in all
//  * copies or substantial portions of the Software.
//  *
//  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  * SOFTWARE.
//  */
import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { SimpleSelect } from '@instructure/ui-simple-select'
import { IconVideoCameraLine, IconVideoCameraOffLine } from '@instructure/ui-icons'
import themeable from '@instructure/ui-themeable'
import DeviceSelection from '../DeviceSelection'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'
import * as CaptureActions from '../../../actions'

import { translate } from '../../../constants/translated/translations'

const WEBCAM_DISABLED = 'webcam_disabled'

/**
---
private: true
---
**/
/* eslint-disable react/prop-types */
@themeable({})
class VideoDeviceSelection extends Component {
  static propTypes = {
    isDisabled: PropTypes.bool,
  }

  static defaultProps = {
    isDisabled: false
  }

  formatLabel = DeviceSelection.formatLabel
  renderOptions = DeviceSelection.renderOptions
  icon = <IconVideoCameraLine inline={false} />
  disabledIcon = <IconVideoCameraOffLine inline={false} />

  onDeviceSelect = (_, { id }) => {
    if (!id) return

    if (this.isDeviceDisabled(id)) {
      this.props.actions.videoDeviceDisabled()
      return
    }

    this.props.actions.videoDeviceChanged(id)
  }

  isDeviceDisabled (id = this.getSelectedDeviceId()) {
    return id === WEBCAM_DISABLED
  }

  getSelectedDeviceId () {
    if (this.props.videoDeviceId === '') {
      return WEBCAM_DISABLED
    }

    return this.props.videoDeviceId
  }

  getSelectedIcon () {
    return this.isDeviceDisabled() ? this.disabledIcon : this.icon
  }

  getInteractionType () {
    return this.props.isDisabled || this.props.devices.videoinput.every(videoDevice => videoDevice.deviceId === '') ? 'disabled' : 'enabled'
  }

  render () {
    return (
      <SimpleSelect
        renderLabel={() => ``}
        value={this.getSelectedDeviceId()}
        onChange={this.onDeviceSelect}
        renderBeforeInput={this.getSelectedIcon()}
        interaction={this.getInteractionType()}
        data-test="VideoDeviceSelection"
      >
        {this.renderOptions(this.props.devices.videoinput, this.icon, WEBCAM_DISABLED, translate('WEBCAM_DISABLED'), this.disabledIcon)}
      </SimpleSelect>
    )
  }
}

const mapStateToProps = state => ({ videoDeviceId: state.videoDeviceId, devices: state.devices })

const mapDispatchToProps = dispatch => ({
  actions: bindActionCreators(CaptureActions, dispatch)
})

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(VideoDeviceSelection)

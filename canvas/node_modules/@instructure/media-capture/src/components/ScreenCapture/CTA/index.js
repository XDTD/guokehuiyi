/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { Button } from '@instructure/ui-buttons'
import { IconRecordSolid } from '../IconRecordSolid'
import { View } from '@instructure/ui-view'
import themeable from '@instructure/ui-themeable'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'
import * as CaptureActions from '../../../actions'

import {
  RECORDING,
  READY,
  STARTING,
  LOADING
} from '../../../constants/CaptureStates'

import { translate } from '../../../constants/translated/translations'

import styles from './styles.css'

/**
---
private: true
---
**/
/* eslint-disable react/prop-types */
@themeable(() => {}, styles)
class CTA extends Component {
  static propTypes = {
    isDisabled: PropTypes.bool
  }

  static defaultProps = {
    isDisabled: false
  }

  componentDidMount () {
    this.focus()
  }

  componentDidUpdate () {
    this.focus()
  }

  focus () {
    if (!this.props.hasStarted || !this.el) return
    this.el.focus()
  }

  captureRef = (e) => {
    this.el = e
  }

  onFinish = () => {
    this.props.actions.finishClicked()
  }

  onStart = () => {
    this.props.actions.startClicked()
  }

  getInteractionType () {
    return this.props.isDisabled ? 'disabled' : 'enabled'
  }

  render () {
    switch (this.props.captureState) {
      case RECORDING:
        if (this.props.inStorybook) {
          return this.renderButton({ text: translate('FINISH'), action: this.onFinish })
        }
        return null
      case READY:
      case STARTING:
      case LOADING:
        return this.renderButton({ text: translate('START'), action: this.onStart, icon: IconRecordSolid })
      default:
        return null
    }
  }

  renderButton ({ text, action, icon }) {
    return (
      <Button
        display="block"
        textAlign="center"
        onClick={action}
        color="primary"
        size="medium"
        ref={this.captureRef}
        interaction={this.getInteractionType()}
      >
        <View display="inline-flex" width="10%" textAlign="start">
          {this.renderIcon(icon)}
        </View>
        <View display="inline-flex" width="80%" className={styles.justifyCenter}>
          {text}
        </View>
        <View display="inline-flex" width="10%"></View>
      </Button>
    )
  }

  renderIcon (icon) {
    if (icon) return React.createElement(icon, {})
  }
}

const mapStateToProps = state => ({ captureState: state.captureState, hasStarted: state.hasStarted })

const mapDispatchToProps = dispatch => ({
  actions: bindActionCreators(CaptureActions, dispatch)
})

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(CTA)

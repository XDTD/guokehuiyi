/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react'
import themeable from '@instructure/ui-themeable'
import { View } from '@instructure/ui-view'
import { Responsive } from '@instructure/ui-responsive'
import VideoDeviceSelection from '../VideoDeviceSelection'
import AudioDeviceSelection from '../AudioDeviceSelection'
import SystemAudioSelection from '../SystemAudioSelection'
import CTA from '../CTA'
import FileSave from '../../../core/components/FileSave'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'
import * as CaptureActions from '../../../actions'
import Message from '../../MediaCapture/Message'
import { translate } from '../../../constants/translated/translations'

import { STARTING, RECORDING, PREVIEWSAVE, SAVING } from '../../../constants/CaptureStates'

import styles from './styles.css'
import theme from './theme'

/**
---
private: true
---
**/
@themeable(theme, styles)
class Controller extends Component {
  isDisabled () {
    return this.props.captureState === STARTING
  }

  isAllDeviceBlocked (devices) {
    return devices.every(device => device.deviceId === '')
  }

  renderSettings () {
    if (this.props.captureState === RECORDING) return null

    let warningMessage = ''
    const micBlocked = this.isAllDeviceBlocked(this.props.devices.audioinput)
    const webcamBlocked = this.isAllDeviceBlocked(this.props.devices.videoinput)
    const numberOfMic = this.props.devices.audioinput.length
    const numberOfWebcam = this.props.devices.videoinput.length
    if (micBlocked && webcamBlocked) {
      if (numberOfMic === 0 && numberOfWebcam === 0) {
        warningMessage = translate('NO_MIC_AND_WEBCAM_EXIST')
      } else {
        warningMessage = translate('MIC_AND_WEBCAM_BLOCKED')
      }
    } else if (micBlocked) {
      if (numberOfMic === 0) {
        warningMessage = translate('NO_MIC_EXIST')
      } else {
        warningMessage = translate('MIC_BLOCKED')
      }
    } else if (webcamBlocked) {
      if (numberOfWebcam === 0) {
        warningMessage = translate('NO_WEBCAM_EXIST')
      } else {
        warningMessage = translate('WEBCAM_BLOCKED')
      }
    }

    return (
      <React.Fragment>
        {warningMessage ? <Message msg={warningMessage} margin='0' />: null}
        <div className={styles.my3}>
          <VideoDeviceSelection isDisabled={this.isDisabled()} />
        </div>
        <div className={styles.my3}>
          <AudioDeviceSelection isDisabled={this.isDisabled()} />
        </div>
        <div className={styles.my3}>
          <SystemAudioSelection isDisabled={this.isDisabled()} />
        </div>
      </React.Fragment>
    )
  }

  renderStart () {
    return (
      <div className={styles.container}>
        <Responsive match="media" query={{ small: { maxWidth: 480 } }}>{(_, match) =>
          (
            <View
              display="block"
              margin="auto"
              maxWidth="35rem"
              padding={match.includes('small') ? "none" : "small xx-large none"}>
              {this.renderSettings()}
              <CTA
                isDisabled={this.isDisabled()}
                inStorybook={this.props.inStorybook}
              />
            </View>
          )}
        </Responsive>
      </div>
    )
  }

  renderPreview () {
    return (
      <div className={styles.container}>
        <FileSave
          captureState={this.props.captureState}
          fileName={this.props.fileName}
          actions={{ ...this.props.actions }}
        />
      </div>
    )
  }

  render() {
    switch(this.props.captureState) {
      case PREVIEWSAVE:
      case SAVING:
        return this.renderPreview()
      case RECORDING:
        if (this.props.inStorybook) {
          return this.renderStart()
        }
        return null
      default:
        return this.renderStart()
    }
  }
}

const mapStateToProps = state => ({
  captureState: state.captureState,
  devices: state.devices,
  fileName: state.fileName
})

const mapDispatchToProps = dispatch => ({
  actions: bindActionCreators(CaptureActions, dispatch)
})

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(Controller)

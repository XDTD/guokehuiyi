/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import ScreenCaptureMultiplexer from './ScreenCaptureMultiplexer'

export default class StreamMerger {
  constructor(canvas, frameRate) {
    this.screenCaptureMultiplexer = new ScreenCaptureMultiplexer(canvas)
    this.canvas = canvas
    this.frameRate = frameRate
  }

  stop() {
    if (this.screenCaptureMultiplexer) this.screenCaptureMultiplexer.stop()
  }

  mergeStreams (streams) {
    const mergedVideoStreams = this.mergeVideoStreams(streams)
    const mergedAudioStreams = this.mergeAudioStreams(streams)
    // eslint-disable-next-line compat/compat
    const tracks = new MediaStream([...mergedVideoStreams, ...mergedAudioStreams])

    return tracks
  }

  mergeVideoStreams (streams) {
    this.screenCaptureMultiplexer.stop()

    let videoStreams = streams.map(stream => ({
      stream: this.createVideoElement(stream.stream),
      config: stream.videoConfig
    }))

    if (videoStreams.length === 0) return []

    this.screenCaptureMultiplexer.start(videoStreams, this.frameRate)
    return this.canvas.captureStream(this.frameRate).getVideoTracks()
  }

  mergeAudioStreams (streams) {
    // eslint-disable-next-line compat/compat
    const context = new AudioContext()
    const destination = context.createMediaStreamDestination()

    let hasAudioStream = false
    streams.forEach(stream => {
      if (!stream.audioConfig.muted && stream.stream.getAudioTracks().length > 0) {
        hasAudioStream = true
        const source = context.createMediaStreamSource(stream.stream)
        const gain = context.createGain()
        gain.gain.value = stream.audioConfig.gain
        source.connect(gain).connect(destination)
      }}
    )

    return hasAudioStream ? destination.stream.getAudioTracks(): []
  }

  createVideoElement (srcObject) {
    // we create video elements but we don't attach them to the document
    const el = document.createElement('video')
    el.srcObject = srcObject
    el.muted = true
    el.play()
    return el
  }
}

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiButtons = require("@instructure/ui-buttons");

var _IconRecordSolid = require("../IconRecordSolid");

var _uiView = require("@instructure/ui-view");

var _uiThemeable = _interopRequireDefault(require("@instructure/ui-themeable"));

var _redux = require("redux");

var _reactRedux = require("react-redux");

var CaptureActions = _interopRequireWildcard(require("../../../actions"));

var _CaptureStates = require("../../../constants/CaptureStates");

var _translations = require("../../../constants/translated/translations");

var _dec, _class, _class2, _temp;

var styles = {
  componentId: 'dEXSo',
  template: function template(theme) {
    return "\n\n.dEXSo_FPCi{justify-content:center}";
  },
  'justifyCenter': 'dEXSo_FPCi'
};
/**
---
private: true
---
**/

/* eslint-disable react/prop-types */

var _ref2 = /*#__PURE__*/_react.default.createElement(_uiView.View, {
  display: "inline-flex",
  width: "10%"
});

var CTA = (_dec = (0, _uiThemeable.default)(function () {}, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(CTA, _Component);

  var _super = (0, _createSuper2.default)(CTA);

  function CTA() {
    var _this;

    (0, _classCallCheck2.default)(this, CTA);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.captureRef = function (e) {
      _this.el = e;
    };

    _this.onFinish = function () {
      _this.props.actions.finishClicked();
    };

    _this.onStart = function () {
      _this.props.actions.startClicked();
    };

    return _this;
  }

  (0, _createClass2.default)(CTA, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.focus();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.focus();
    }
  }, {
    key: "focus",
    value: function focus() {
      if (!this.props.hasStarted || !this.el) return;
      this.el.focus();
    }
  }, {
    key: "getInteractionType",
    value: function getInteractionType() {
      return this.props.isDisabled ? 'disabled' : 'enabled';
    }
  }, {
    key: "render",
    value: function render() {
      switch (this.props.captureState) {
        case _CaptureStates.RECORDING:
          if (this.props.inStorybook) {
            return this.renderButton({
              text: (0, _translations.translate)('FINISH'),
              action: this.onFinish
            });
          }

          return null;

        case _CaptureStates.READY:
        case _CaptureStates.STARTING:
        case _CaptureStates.LOADING:
          return this.renderButton({
            text: (0, _translations.translate)('START'),
            action: this.onStart,
            icon: _IconRecordSolid.IconRecordSolid
          });

        default:
          return null;
      }
    }
  }, {
    key: "renderButton",
    value: function renderButton(_ref) {
      var text = _ref.text,
          action = _ref.action,
          icon = _ref.icon;
      return /*#__PURE__*/_react.default.createElement(_uiButtons.Button, {
        display: "block",
        textAlign: "center",
        onClick: action,
        color: "primary",
        size: "medium",
        ref: this.captureRef,
        interaction: this.getInteractionType()
      }, /*#__PURE__*/_react.default.createElement(_uiView.View, {
        display: "inline-flex",
        width: "10%",
        textAlign: "start"
      }, this.renderIcon(icon)), /*#__PURE__*/_react.default.createElement(_uiView.View, {
        display: "inline-flex",
        width: "80%",
        className: styles.justifyCenter
      }, text), _ref2);
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(icon) {
      if (icon) return /*#__PURE__*/_react.default.createElement(icon, {});
    }
  }]);
  CTA.displayName = "CTA";
  return CTA;
}(_react.Component), _class2.propTypes = {
  isDisabled: _propTypes.default.bool
}, _class2.defaultProps = {
  isDisabled: false
}, _temp)) || _class);

var mapStateToProps = function mapStateToProps(state) {
  return {
    captureState: state.captureState,
    hasStarted: state.hasStarted
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    actions: (0, _redux.bindActionCreators)(CaptureActions, dispatch)
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(CTA);

exports.default = _default;
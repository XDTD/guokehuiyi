"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiSimpleSelect = require("@instructure/ui-simple-select");

var _uiIcons = require("@instructure/ui-icons");

var _uiThemeable = _interopRequireDefault(require("@instructure/ui-themeable"));

var _DeviceSelection = _interopRequireDefault(require("../DeviceSelection"));

var _redux = require("redux");

var _reactRedux = require("react-redux");

var CaptureActions = _interopRequireWildcard(require("../../../actions"));

var _translations = require("../../../constants/translated/translations");

var _dec, _class, _class2, _temp;

var WEBCAM_DISABLED = 'webcam_disabled';
/**
---
private: true
---
**/

/* eslint-disable react/prop-types */

var _ref = /*#__PURE__*/_react.default.createElement(_uiIcons.IconVideoCameraLine, {
  inline: false
});

var _ref2 = /*#__PURE__*/_react.default.createElement(_uiIcons.IconVideoCameraOffLine, {
  inline: false
});

var VideoDeviceSelection = (_dec = (0, _uiThemeable.default)({}), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(VideoDeviceSelection, _Component);

  var _super = (0, _createSuper2.default)(VideoDeviceSelection);

  function VideoDeviceSelection() {
    var _this;

    (0, _classCallCheck2.default)(this, VideoDeviceSelection);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.formatLabel = _DeviceSelection.default.formatLabel;
    _this.renderOptions = _DeviceSelection.default.renderOptions;
    _this.icon = _ref;
    _this.disabledIcon = _ref2;

    _this.onDeviceSelect = function (_, _ref3) {
      var id = _ref3.id;
      if (!id) return;

      if (_this.isDeviceDisabled(id)) {
        _this.props.actions.videoDeviceDisabled();

        return;
      }

      _this.props.actions.videoDeviceChanged(id);
    };

    return _this;
  }

  (0, _createClass2.default)(VideoDeviceSelection, [{
    key: "isDeviceDisabled",
    value: function isDeviceDisabled() {
      var id = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getSelectedDeviceId();
      return id === WEBCAM_DISABLED;
    }
  }, {
    key: "getSelectedDeviceId",
    value: function getSelectedDeviceId() {
      if (this.props.videoDeviceId === '') {
        return WEBCAM_DISABLED;
      }

      return this.props.videoDeviceId;
    }
  }, {
    key: "getSelectedIcon",
    value: function getSelectedIcon() {
      return this.isDeviceDisabled() ? this.disabledIcon : this.icon;
    }
  }, {
    key: "getInteractionType",
    value: function getInteractionType() {
      return this.props.isDisabled || this.props.devices.videoinput.every(function (videoDevice) {
        return videoDevice.deviceId === '';
      }) ? 'disabled' : 'enabled';
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react.default.createElement(_uiSimpleSelect.SimpleSelect, {
        renderLabel: function renderLabel() {
          return "";
        },
        value: this.getSelectedDeviceId(),
        onChange: this.onDeviceSelect,
        renderBeforeInput: this.getSelectedIcon(),
        interaction: this.getInteractionType(),
        "data-test": "VideoDeviceSelection"
      }, this.renderOptions(this.props.devices.videoinput, this.icon, WEBCAM_DISABLED, (0, _translations.translate)('WEBCAM_DISABLED'), this.disabledIcon));
    }
  }]);
  VideoDeviceSelection.displayName = "VideoDeviceSelection";
  return VideoDeviceSelection;
}(_react.Component), _class2.propTypes = {
  isDisabled: _propTypes.default.bool
}, _class2.defaultProps = {
  isDisabled: false
}, _temp)) || _class);

var mapStateToProps = function mapStateToProps(state) {
  return {
    videoDeviceId: state.videoDeviceId,
    devices: state.devices
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    actions: (0, _redux.bindActionCreators)(CaptureActions, dispatch)
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(VideoDeviceSelection);

exports.default = _default;
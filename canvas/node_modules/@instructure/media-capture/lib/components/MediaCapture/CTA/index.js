"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiButtons = require("@instructure/ui-buttons");

var _uiResponsive = require("@instructure/ui-responsive");

var _uiView = require("@instructure/ui-view");

var _CaptureStates = require("../../../constants/CaptureStates");

var _translations = require("../../../constants/translated/translations");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
---
private: true
---
**/
var CTA = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(CTA, _Component);

  var _super = (0, _createSuper2.default)(CTA);

  function CTA() {
    var _this;

    (0, _classCallCheck2.default)(this, CTA);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.captureRef = function (e) {
      _this.el = e;
    };

    _this.createButton = function (action, string) {
      var _ref = /*#__PURE__*/_react.default.createElement(_uiView.View, {
        display: "block",
        textAlign: "center"
      }, string);

      var fluidWidth = _this.props.fluidWidth;
      return /*#__PURE__*/_react.default.createElement(_uiResponsive.Responsive, {
        match: "media",
        query: {
          medium: {
            maxWidth: 767
          }
        }
      }, function (props, matches) {
        return /*#__PURE__*/_react.default.createElement(_uiButtons.Button, {
          fluidWidth: fluidWidth,
          onClick: action,
          color: "primary",
          size: matches.includes('medium') ? 'medium' : 'large',
          ref: _this.captureRef
        }, _ref);
      });
    };

    return _this;
  }

  (0, _createClass2.default)(CTA, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.hasStarted && this.el && this.el.focus();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.props.hasStarted && this.el && this.el.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          captureState = _this$props.captureState,
          actions = _this$props.actions;

      switch (captureState) {
        case _CaptureStates.READY:
          return this.createButton(actions.startClicked, (0, _translations.translate)('START'));

        case _CaptureStates.RECORDING:
          return this.createButton(actions.finishClicked, (0, _translations.translate)('FINISH'));

        default:
          return null;
      }
    }
  }]);
  CTA.displayName = "CTA";
  return CTA;
}(_react.Component);

CTA.propTypes = {
  actions: _propTypes.default.shape({
    startClicked: _propTypes.default.func.isRequired,
    finishClicked: _propTypes.default.func.isRequired
  }).isRequired,
  captureState: _propTypes.default.string.isRequired,
  fluidWidth: _propTypes.default.bool,
  hasStarted: _propTypes.default.bool.isRequired
};
CTA.defaultProps = {
  fluidWidth: false
};
var _default = CTA;
exports.default = _default;
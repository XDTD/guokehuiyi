"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiThemeable = _interopRequireDefault(require("@instructure/ui-themeable"));

var _mediaDevices = require("../../../core/mediaDevices");

var _mediaRecorder = require("../../../core/mediaRecorder");

var _CaptureStates = require("../../../constants/CaptureStates");

var _translations = require("../../../constants/translated/translations");

var _dec, _class, _class2, _temp;

var styles = {
  componentId: 'fcJRp',
  template: function template(theme) {
    return "\n\n.fcJRp_fvys{display:block;width:100%}";
  },
  'video': 'fcJRp_fvys'
};
var ERRORS = {
  NotAllowedError: 'NOT_ALLOWED_ERROR',
  NotReadableError: 'NOT_READABLE_ERROR',
  TrackStartError: 'NOT_READABLE_ERROR',
  default: 'DEFAULT_ERROR'
};
/**
---
private: true
---
**/

var MediaStream = (_dec = (0, _uiThemeable.default)({}, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(MediaStream, _Component);

  var _super = (0, _createSuper2.default)(MediaStream);

  function MediaStream() {
    var _this;

    (0, _classCallCheck2.default)(this, MediaStream);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.deviceChanged = function (audioId, videoId) {
      return _this.props.audioDeviceId !== audioId || _this.props.videoDeviceId !== videoId;
    };

    _this.onMediaRecorderInit = function (mediaRecorder) {
      _this.props.actions.mediaRecorderInitialized(mediaRecorder);
    };

    _this.streamLoaded = function () {
      _this.props.captureState === _CaptureStates.LOADING && _this.props.actions.deviceRequestAccepted();
    };

    _this.streamSuccess = function (stream) {
      _this.stream = stream;

      if (_this.video) {
        (0, _mediaDevices.getAudioContext)(_this.stream, _this.soundMeterEmitted, _this.error);

        if (_this.props.audioDeviceId.length === 0) {
          (0, _mediaDevices.enumerateDevices)(_this.deviceSuccess, _this.error);
        }

        _this.video.srcObject = _this.stream;
      }
    };

    _this.soundMeterEmitted = function (sm) {
      _this.props.actions.soundMeterInitialized(sm);
    };

    _this.deviceSuccess = function (types) {
      var _this$stream$getVideo = _this.stream.getVideoTracks(),
          _this$stream$getVideo2 = (0, _slicedToArray2.default)(_this$stream$getVideo, 1),
          videoTrack = _this$stream$getVideo2[0];

      _this.props.actions.devicesFound(types, videoTrack);
    };

    _this.blobSuccess = function (blob) {
      // eslint-disable-next-line compat/compat
      var src = window.URL.createObjectURL(blob);

      _this.props.actions.videoObjectGenerated(src, blob);
    };

    _this.error = function (err) {
      if (err) {
        console.error(err);
        var key = ERRORS[err.name] ? err.name : 'default';

        if (typeof _this.props.actions.errorOccurred === 'function') {
          _this.props.actions.errorOccurred((0, _translations.translate)(ERRORS[key]));
        }
      }
    };

    return _this;
  }

  (0, _createClass2.default)(MediaStream, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return this.props.captureState !== nextProps.captureState || this.deviceChanged(nextProps.audioDeviceId, nextProps.videoDeviceId);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.requestAudioOnly) {
        (0, _mediaDevices.getUserAudioOnly)(this.props.audioDeviceId, this.streamSuccess, this.error);
      } else {
        (0, _mediaDevices.getUserMedia)(this.props.audioDeviceId, this.props.videoDeviceId, this.streamSuccess, this.error);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!this.stream) {
        return;
      }

      if (this.props.captureState === _CaptureStates.READY) {
        if (this.deviceChanged(prevProps.audioDeviceId, prevProps.videoDeviceId)) {
          this.cleanUp();
          this.stopTracks();

          if (this.props.requestAudioOnly) {
            (0, _mediaDevices.getUserAudioOnly)(this.props.audioDeviceId, this.streamSuccess, this.error);
          } else {
            (0, _mediaDevices.getUserMedia)(this.props.audioDeviceId, this.props.videoDeviceId, this.streamSuccess, this.error);
          }
        }
      }

      if (this.props.captureState === _CaptureStates.RECORDING) {
        (0, _mediaRecorder.startMediaRecorder)(this.stream, this.onMediaRecorderInit, this.blobSuccess, this.error, this.props.requestAudioOnly);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.cleanUp();
      this.stopTracks();
    }
  }, {
    key: "cleanUp",
    value: function cleanUp() {
      if (typeof this.props.actions.cleanUp === 'function') {
        this.props.actions.cleanUp();
      }
    }
  }, {
    key: "stopTracks",
    value: function stopTracks() {
      if (this.stream && typeof this.stream.getTracks === 'function') {
        this.stream.getTracks().forEach(function (t) {
          return t.stop();
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("video", {
        className: styles.video,
        controls: false,
        autoPlay: true,
        muted: true,
        tabIndex: "-1",
        onCanPlay: this.streamLoaded,
        ref: function ref(el) {
          _this2.video = el;
        }
      }));
    }
  }]);
  MediaStream.displayName = "MediaStream";
  return MediaStream;
}(_react.Component), _class2.propTypes = {
  captureState: _propTypes.default.string.isRequired,
  videoDeviceId: _propTypes.default.string.isRequired,
  audioDeviceId: _propTypes.default.string.isRequired,
  requestAudioOnly: _propTypes.default.bool,
  actions: _propTypes.default.shape({
    deviceRequestAccepted: _propTypes.default.func,
    mediaRecorderInitialized: _propTypes.default.func,
    videoObjectGenerated: _propTypes.default.func,
    devicesFound: _propTypes.default.func,
    soundMeterInitialized: _propTypes.default.func,
    errorOccurred: _propTypes.default.func,
    cleanUp: _propTypes.default.func
  })
}, _class2.defaultProps = {
  requestAudioOnly: false,
  actions: {
    deviceRequestAccepted: function deviceRequestAccepted() {},
    devicesFound: function devicesFound() {},
    mediaRecorderInitialized: function mediaRecorderInitialized() {},
    soundMeterInitialized: function soundMeterInitialized() {},
    videoObjectGenerated: function videoObjectGenerated() {},
    errorOccurred: function errorOccurred() {}
  }
}, _temp)) || _class);
var _default = MediaStream;
exports.default = _default;
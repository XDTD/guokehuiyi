"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _redux = require("redux");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _MediaCaptureProvider = _interopRequireDefault(require("./MediaCaptureProvider"));

var _CapturePresentation = _interopRequireDefault(require("../../core/components/CapturePresentation"));

var _MediaContainer = _interopRequireDefault(require("../../core/components/MediaContainer"));

var _MediaOverlay = _interopRequireDefault(require("./MediaOverlay"));

var _CapturedMedia = _interopRequireDefault(require("./CapturedMedia"));

var _Controller = _interopRequireDefault(require("./Controller"));

var _CTA = _interopRequireDefault(require("./CTA"));

var _reducers = require("../../reducers");

var _translations = require("../../constants/translated/translations");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var TranslationsPropType = _propTypes.default.shape(_translations.TranslationPropTypes);

var MediaCapture = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(MediaCapture, _Component);

  var _super = (0, _createSuper2.default)(MediaCapture);

  function MediaCapture(props) {
    var _this;

    (0, _classCallCheck2.default)(this, MediaCapture);
    _this = _super.call(this, props);
    var initialState = (0, _reducers.getInitialState)(_this.props.onCompleted, _this.props.onCancel);
    _this.state = {
      store: (0, _redux.createStore)(_reducers.reducer, initialState, (0, _redux.applyMiddleware)(_reduxThunk.default))
    };
    (0, _translations.applyTranslations)(_this.props.translations);
    return _this;
  }

  (0, _createClass2.default)(MediaCapture, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react.default.createElement(_MediaCaptureProvider.default, {
        onClose: this.props.onClose,
        store: this.state.store,
        render: function render(_ref) {
          var _ref$state = _ref.state,
              captureState = _ref$state.captureState,
              msg = _ref$state.msg,
              videoSrc = _ref$state.videoSrc,
              videoDeviceId = _ref$state.videoDeviceId,
              audioDeviceId = _ref$state.audioDeviceId,
              soundMeter = _ref$state.soundMeter,
              devices = _ref$state.devices,
              fileName = _ref$state.fileName,
              hasStarted = _ref$state.hasStarted,
              requestAudioOnly = _ref$state.requestAudioOnly,
              actions = _ref.actions;
          return /*#__PURE__*/_react.default.createElement(_CapturePresentation.default, null, /*#__PURE__*/_react.default.createElement(_MediaContainer.default, null, /*#__PURE__*/_react.default.createElement(_MediaOverlay.default, {
            captureState: captureState,
            soundMeter: soundMeter,
            msg: msg,
            actions: actions
          }), /*#__PURE__*/_react.default.createElement(_CapturedMedia.default, {
            captureState: captureState,
            videoSrc: videoSrc,
            fileName: fileName,
            devices: devices,
            audioDeviceId: audioDeviceId,
            videoDeviceId: videoDeviceId,
            requestAudioOnly: requestAudioOnly,
            actions: actions
          })), /*#__PURE__*/_react.default.createElement(_Controller.default, {
            captureState: captureState,
            fileName: fileName,
            devices: devices,
            audioDeviceId: audioDeviceId,
            videoDeviceId: videoDeviceId,
            actions: actions
          }, /*#__PURE__*/_react.default.createElement(_CTA.default, {
            captureState: captureState,
            hasStarted: hasStarted,
            actions: actions
          })));
        }
      });
    }
  }]);
  MediaCapture.displayName = "MediaCapture";
  return MediaCapture;
}(_react.Component);

MediaCapture.propTypes = {
  /**
   * Callback fired when a file has been generated.
   */
  onCompleted: _propTypes.default.func.isRequired,

  /**
   * Callback fired when the component is closed for a reason
   * other than generating a file. Includes the last
   * emitted state when the action was taken.
   */
  onCancel: _propTypes.default.func,

  /**
   * Callback fired when the component is closed. Includes
   * the last emitted state when the action was taken.
   */
  onClose: _propTypes.default.func,

  /**
   * Label overrides for i18n. Defaults to english
   * See src/constants/translated/translations.js for default values
   */
  translations: TranslationsPropType
};
MediaCapture.defaultProps = {
  onCancel: function onCancel() {},
  onClose: function onClose() {},
  translations: {}
};
var _default = MediaCapture;
exports.default = _default;
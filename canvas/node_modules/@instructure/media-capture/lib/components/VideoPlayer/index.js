"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "VideoPlayerControls", {
  enumerable: true,
  get: function get() {
    return _VideoPlayerControls.default;
  }
});
exports.default = exports.MEDIA_ELEMENT_PROPS = exports.JUMP_INTERVAL_SECONDS = exports.SEEK_INTERVAL_SECONDS = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiThemeable = _interopRequireDefault(require("@instructure/ui-themeable"));

var _uid = _interopRequireDefault(require("@instructure/uid"));

var _VideoPlayerControls = _interopRequireDefault(require("./VideoPlayerControls"));

var _Loading = _interopRequireDefault(require("../MediaCapture/Loading"));

var _translations = require("../../constants/translated/translations");

var _theme = _interopRequireDefault(require("./theme"));

var _videoStates = require("./videoStates");

var _dec, _class, _class2, _temp;

var styles = {
  componentId: 'sfDYg',
  template: function template(theme) {
    return "\n\n.sfDYg_crZr{position:relative;transition:height 0.1s ease-in-out;width:100%}\n\n.sfDYg_crZr:focus{box-shadow:0 0 0 ".concat(theme.focusOutlineWeight || 'inherit', " ").concat(theme.focusOutlineColor || 'inherit', ";outline:none}\n\n.sfDYg_fvys{display:block;width:100%}");
  },
  'container': 'sfDYg_crZr',
  'video': 'sfDYg_fvys'
};
var SEEK_INTERVAL_SECONDS = 5;
exports.SEEK_INTERVAL_SECONDS = SEEK_INTERVAL_SECONDS;
var JUMP_INTERVAL_SECONDS = 30;
exports.JUMP_INTERVAL_SECONDS = JUMP_INTERVAL_SECONDS;
var MEDIA_ELEMENT_PROPS = ['onLoadedMetadata', 'onProgress', 'onTimeUpdate', 'onSeeked', 'onEnded'];
/**
---
category: components
experimental: true
---
**/

exports.MEDIA_ELEMENT_PROPS = MEDIA_ELEMENT_PROPS;

var _ref = /*#__PURE__*/_react.default.createElement(_Loading.default, null);

var VideoPlayer = (_dec = (0, _uiThemeable.default)(_theme.default, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(VideoPlayer, _Component);

  var _super = (0, _createSuper2.default)(VideoPlayer);

  function VideoPlayer(props) {
    var _this;

    (0, _classCallCheck2.default)(this, VideoPlayer);
    _this = _super.call(this, props);

    _this.handleKeyPress = function (e) {
      var currentTime = _this.state.currentTime;
      var keyHandlers = {
        ArrowLeft: function ArrowLeft() {
          _this.seek(currentTime - SEEK_INTERVAL_SECONDS);
        },
        ArrowRight: function ArrowRight() {
          _this.seek(currentTime + SEEK_INTERVAL_SECONDS);
        },
        PageUp: function PageUp() {
          _this.seek(currentTime + JUMP_INTERVAL_SECONDS);
        },
        PageDown: function PageDown() {
          _this.seek(currentTime - JUMP_INTERVAL_SECONDS);
        },
        ' ': function _() {
          _this.togglePlay();
        }
      };

      if (e.key in keyHandlers) {
        e.preventDefault();

        _this.showControls();

        keyHandlers[e.key]();
      }
    };

    _this.showControls = function () {
      var hideControlsTimeout = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 2500;

      if (_this.props.alwaysShowControls) {
        return;
      }

      if (_this._hideControlsTimeoutId) {
        clearTimeout(_this._hideControlsTimeoutId);
      }

      _this.setState({
        showControls: true
      }, function () {
        _this._hideControlsTimeoutId = setTimeout(function () {
          if (_this.state.state === _videoStates.PLAYING) {
            _this.setState({
              showControls: false
            });
          }
        }, hideControlsTimeout);
      });
    };

    _this.play = function () {
      _this.video.play();
    };

    _this.pause = function () {
      _this.video.pause();
    };

    _this.togglePlay = function () {
      if (_this.state.state === _videoStates.PLAYING) {
        _this.pause();
      } else {
        _this.play();
      }
    };

    _this.seek = function (time) {
      var duration = _this.state.duration;
      _this.video.currentTime = Math.min(Math.max(0, time), duration);
    };

    _this.getDerivedStateFromVideoProps = function () {
      if (!_this.video) {
        return;
      }

      var buffered = _this.video.buffered;
      var state = _this.video.paused ? _videoStates.PAUSED : _videoStates.PLAYING;

      if (_this.video.ended) {
        state = _videoStates.ENDED;
      }

      _this.setState({
        state: state,
        currentTime: _this.video.currentTime,
        duration: _this.video.duration,
        buffered: buffered.length > 0 ? buffered.end(buffered.length - 1) : 0
      }, function () {
        if (_this.state.state === _videoStates.ENDED) {
          _this.seek(0);

          _this.showControls();
        }
      });
    };

    _this.setVideoRef = function (el) {
      if (_this.video === null) {
        _this.video = el;
      }
    };

    _this.hideSpinner = function () {
      _this.setState({
        loadingSrc: false
      });
    };

    _this.video = null;
    _this.state = {
      state: _videoStates.PAUSED,
      loadingSrc: true,
      showControls: true,
      videoId: (0, _uid.default)('VideoPlayer')
    };
    return _this;
  }

  (0, _createClass2.default)(VideoPlayer, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // remove the video ref and stop applying video props
      this.video = null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          src = _this$props.src,
          controls = _this$props.controls;
      var actions = {
        play: this.play,
        pause: this.pause,
        seek: this.seek,
        showControls: this.showControls,
        togglePlay: this.togglePlay
      };
      var wrapperProps = {
        className: styles.container,
        onKeyDown: this.handleKeyPress,
        onFocus: function onFocus() {
          return _this2.showControls();
        },
        onMouseMove: function onMouseMove() {
          return _this2.showControls();
        },
        onClick: this.togglePlay,
        tabIndex: 0,
        role: 'presentation',
        'aria-label': (0, _translations.translate)('ARIA_VIDEO_LABEL')
      };
      var updateMediaStateProps = MEDIA_ELEMENT_PROPS.reduce(function (obj, name) {
        return (0, _objectSpread3.default)((0, _objectSpread3.default)({}, obj), {}, (0, _defineProperty2.default)({}, name, _this2.getDerivedStateFromVideoProps));
      }, {});
      /* eslint-disable jsx-a11y/media-has-caption, jsx-a11y/no-noninteractive-tabindex */

      return /*#__PURE__*/_react.default.createElement("div", wrapperProps, this.state.loadingSrc && _ref, /*#__PURE__*/_react.default.createElement("video", Object.assign({
        ref: this.setVideoRef,
        src: src,
        id: this.state.videoId,
        className: styles.video,
        tabIndex: "-1",
        onCanPlay: this.hideSpinner
      }, updateMediaStateProps)), controls(this.state, actions));
      /* eslint-enable jsx-a11y/media-has-caption, jsx-a11y/no-noninteractive-tabindex */
    }
  }]);
  VideoPlayer.displayName = "VideoPlayer";
  return VideoPlayer;
}(_react.Component), _class2.propTypes = {
  /**
   * URL of video to play
   */
  src: _propTypes.default.string.isRequired,

  /**
   * Function invoked on every render with state and actions.
   * Use this to provide a custom set of video controls.
   * Default player controls will be provided if undefined.
   */
  controls: _propTypes.default.func,

  /**
   * If set to true, the controls will never dismiss.
   */
  alwaysShowControls: _propTypes.default.bool
}, _class2.defaultProps = {
  controls: function controls(state, actions) {
    return /*#__PURE__*/_react.default.createElement(_VideoPlayerControls.default, Object.assign({}, state, {
      actions: actions
    }));
  },
  alwaysShowControls: false
}, _temp)) || _class);
var _default = VideoPlayer;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* Compat/compant linting is disabled due to only supporting modern browsers.
 * See the function canUseMediaCapture in /packages/media-capture/src/utils/index.js
 * for more information.
 */

/* eslint-disable compat/compat */
var ScreenCaptureMultiplexer = /*#__PURE__*/function () {
  function ScreenCaptureMultiplexer(canvas) {
    (0, _classCallCheck2.default)(this, ScreenCaptureMultiplexer);
    this.canvas = canvas;
    this.aspectRatio = this.canvas.width / this.canvas.height;
    this.canvasContext = this.canvas.getContext("2d");
    this.started = false;
  }

  (0, _createClass2.default)(ScreenCaptureMultiplexer, [{
    key: "start",
    value: function start(videoStreams, frameRate) {
      this.started = true;

      this._draw(videoStreams, frameRate);
    }
  }, {
    key: "stop",
    value: function stop() {
      this.started = false;
      this.canvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
      clearTimeout(this._timeoutId);
    }
  }, {
    key: "_draw",
    value: function _draw(videoStreams, frameRate) {
      var _this = this;

      if (!this.started) return;
      this.canvasContext.fillRect(0, 0, this.canvas.width, this.canvas.height);
      videoStreams.forEach(function (stream) {
        var videoTracks = stream.stream.captureStream().getVideoTracks();
        if (videoTracks.length === 0) return;
        var dimensions = {
          width: stream.config.width,
          height: stream.config.height
        };

        if (!stream.config.width && !stream.config.height) {
          dimensions = _this._getScaledDimensions(videoTracks[0]);
        }

        var positionX = 0;
        var positionY = 0;

        if (stream.config.position) {
          positionX = stream.config.position.x;
          positionY = stream.config.position.y;
        } else {
          positionX = (_this.canvas.width - dimensions.width) / 2;
          positionY = (_this.canvas.height - dimensions.height) / 2;
        }

        _this.canvasContext.drawImage(stream.stream, positionX, positionY, dimensions.width, dimensions.height);
      });
      this._timeoutId = setTimeout(function () {
        return _this._draw(videoStreams, frameRate);
      }, 1000 / frameRate);
    }
  }, {
    key: "_getScaledDimensions",
    value: function _getScaledDimensions(stream) {
      var videoTrackSettings = stream.getSettings();
      var streamAspectRatio = videoTrackSettings.width / videoTrackSettings.height;
      var dimensions = {
        width: this.canvas.width,
        height: this.canvas.height
      };

      if (streamAspectRatio < this.aspectRatio) {
        dimensions.width = this.canvas.height * streamAspectRatio;
      } else {
        dimensions.height = this.canvas.width / streamAspectRatio;
      }

      return dimensions;
    }
  }]);
  return ScreenCaptureMultiplexer;
}();

exports.default = ScreenCaptureMultiplexer;
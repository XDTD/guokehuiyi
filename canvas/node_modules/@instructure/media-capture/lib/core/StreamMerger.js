"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ScreenCaptureMultiplexer = _interopRequireDefault(require("./ScreenCaptureMultiplexer"));

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var StreamMerger = /*#__PURE__*/function () {
  function StreamMerger(canvas, frameRate) {
    (0, _classCallCheck2.default)(this, StreamMerger);
    this.screenCaptureMultiplexer = new _ScreenCaptureMultiplexer.default(canvas);
    this.canvas = canvas;
    this.frameRate = frameRate;
  }

  (0, _createClass2.default)(StreamMerger, [{
    key: "stop",
    value: function stop() {
      if (this.screenCaptureMultiplexer) this.screenCaptureMultiplexer.stop();
    }
  }, {
    key: "mergeStreams",
    value: function mergeStreams(streams) {
      var mergedVideoStreams = this.mergeVideoStreams(streams);
      var mergedAudioStreams = this.mergeAudioStreams(streams); // eslint-disable-next-line compat/compat

      var tracks = new MediaStream([].concat((0, _toConsumableArray2.default)(mergedVideoStreams), (0, _toConsumableArray2.default)(mergedAudioStreams)));
      return tracks;
    }
  }, {
    key: "mergeVideoStreams",
    value: function mergeVideoStreams(streams) {
      var _this = this;

      this.screenCaptureMultiplexer.stop();
      var videoStreams = streams.map(function (stream) {
        return {
          stream: _this.createVideoElement(stream.stream),
          config: stream.videoConfig
        };
      });
      if (videoStreams.length === 0) return [];
      this.screenCaptureMultiplexer.start(videoStreams, this.frameRate);
      return this.canvas.captureStream(this.frameRate).getVideoTracks();
    }
  }, {
    key: "mergeAudioStreams",
    value: function mergeAudioStreams(streams) {
      // eslint-disable-next-line compat/compat
      var context = new AudioContext();
      var destination = context.createMediaStreamDestination();
      var hasAudioStream = false;
      streams.forEach(function (stream) {
        if (!stream.audioConfig.muted && stream.stream.getAudioTracks().length > 0) {
          hasAudioStream = true;
          var source = context.createMediaStreamSource(stream.stream);
          var gain = context.createGain();
          gain.gain.value = stream.audioConfig.gain;
          source.connect(gain).connect(destination);
        }
      });
      return hasAudioStream ? destination.stream.getAudioTracks() : [];
    }
  }, {
    key: "createVideoElement",
    value: function createVideoElement(srcObject) {
      // we create video elements but we don't attach them to the document
      var el = document.createElement('video');
      el.srcObject = srcObject;
      el.muted = true;
      el.play();
      return el;
    }
  }]);
  return StreamMerger;
}();

exports.default = StreamMerger;
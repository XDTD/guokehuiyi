import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* Compat/compant linting is disabled due to only supporting modern browsers.
 * See the function canUseMediaCapture in /packages/media-capture/src/utils/index.js
 * for more information.
 */

/* eslint-disable compat/compat */
import SoundMeter from './soundMeter';
var defaultConstraints = {
  audio: {
    channelCount: 2,
    volume: 1.0
  },
  video: {
    width: 1280,
    height: 720,
    frameRate: 30
  }
};
export function getUserMedia(audioId, videoId, success, error) {
  var constraints = {
    audio: _objectSpread(_objectSpread({}, defaultConstraints.audio), {}, {
      deviceId: audioId
    }),
    video: _objectSpread(_objectSpread({}, defaultConstraints.video), {}, {
      deviceId: videoId
    })
  };
  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
    return typeof success === 'function' && success(stream);
  }).catch(function (err) {
    return getUserAudioOnly(audioId, success, error);
  });
}
export function getUserAudioOnly(audioId, success, error) {
  var constraints = {
    audio: _objectSpread(_objectSpread({}, defaultConstraints.audio), {}, {
      deviceId: audioId
    })
  };
  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
    return typeof success === 'function' && success(stream);
  }).catch(function (err) {
    return typeof error === 'function' && error(err);
  });
}
export function enumerateDevices(success, error) {
  navigator.mediaDevices.enumerateDevices().then(function (devices) {
    var deviceTypes = devices.reduce(function (d, curr) {
      switch (curr.kind) {
        case 'audioinput':
          return {
            audioinput: [].concat(_toConsumableArray(d.audioinput), [curr]),
            videoinput: _toConsumableArray(d.videoinput)
          };

        case 'videoinput':
          return {
            videoinput: [].concat(_toConsumableArray(d.videoinput), [curr]),
            audioinput: _toConsumableArray(d.audioinput)
          };

        default:
          return {
            videoinput: _toConsumableArray(d.videoinput),
            audioinput: _toConsumableArray(d.audioinput)
          };
      }
    }, {
      audioinput: [],
      videoinput: []
    });
    success(deviceTypes);
  }).catch(function (e) {
    return error(e);
  });
}

function createAudioContext() {
  if (typeof AudioContext === "function") {
    return new window.AudioContext();
  } else {
    return new window.webkitAudioContext();
  }
}

export function getAudioContext(stream, success, error) {
  var audioContext = createAudioContext();
  var soundMeter = new SoundMeter(audioContext);
  soundMeter.connectToSource(stream, function (e) {
    if (e) {
      error(e);
    }

    success(soundMeter);
  });
}
export function getScreenMediaStreams(_x) {
  return _getScreenMediaStreams.apply(this, arguments);
}

function _getScreenMediaStreams() {
  _getScreenMediaStreams = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
    var audioDeviceId, videoDeviceId, webcamVideoConfig, desktopVideoConfig, webcamStream, desktopStream;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            audioDeviceId = _ref.audioDeviceId, videoDeviceId = _ref.videoDeviceId, webcamVideoConfig = _ref.webcamVideoConfig, desktopVideoConfig = _ref.desktopVideoConfig;
            _context.next = 3;
            return getWebcamStream({
              audioDeviceId: audioDeviceId,
              videoDeviceId: videoDeviceId,
              webcamVideoConfig: webcamVideoConfig
            });

          case 3:
            webcamStream = _context.sent;
            _context.next = 6;
            return getDesktopStream(desktopVideoConfig);

          case 6:
            desktopStream = _context.sent;
            return _context.abrupt("return", {
              webcamStream: webcamStream,
              desktopStream: desktopStream
            });

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getScreenMediaStreams.apply(this, arguments);
}

export function getWebcamStream(_ref2) {
  var audioDeviceId = _ref2.audioDeviceId,
      videoDeviceId = _ref2.videoDeviceId,
      webcamVideoConfig = _ref2.webcamVideoConfig;
  if (!audioDeviceId && !videoDeviceId) return null;
  var webcamVideoOpts = videoDeviceId ? _objectSpread(_objectSpread({}, webcamVideoConfig), {}, {
    deviceId: videoDeviceId
  }) : false;
  return navigator.mediaDevices.getUserMedia({
    video: webcamVideoOpts,
    audio: audioDeviceId ? {
      deviceId: audioDeviceId
    } : false
  });
}
export function getDesktopStream(desktopVideoConfig) {
  return navigator.mediaDevices.getDisplayMedia({
    video: _objectSpread({}, desktopVideoConfig),
    audio: true
  }).catch(function (error) {
    if (error.name === 'NotAllowedError' && error.message === 'Permission denied') return null;
    throw error;
  });
}
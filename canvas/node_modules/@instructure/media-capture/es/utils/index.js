/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
--
category: packages/media-capture
--
**/

/**
 * Function to be called to check if the clients browser
 * can support the getUserMedia/Stream, MediaRecorder and AudioContext api's.
 * https://caniuse.com/#search=getusermedia
 * https://caniuse.com/#search=mediarecorder
 * https://caniuse.com/#search=audiocontext
 */
export function canUseMediaCapture() {
  var win = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window;
  return canUseUserMedia(win) && canUseMediaRecorder(win) && canUseAudioContext(win);
}
/**
 * Function to be called to check if the clients browser
 * can support the getDisplayMedia/Stream, MediaRecorder and AudioContext api's.
 * https://caniuse.com/#search=getdisplaymedia
 * https://caniuse.com/#search=mediarecorder
 * https://caniuse.com/#search=audiocontext
 */

export function canUseScreenCapture() {
  var win = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window;
  return canUseDisplayMedia(win) && canUseMediaRecorder(win);
}
/**
 * Object representing the various media-capture states.
 */

export var mediaCaptureStates = {
  FINISHED: true,
  PREVIEWSAVE: true,
  READY: true,
  RECORDING: true,
  SAVING: true,
  STARTING: true
};

function canUseUserMedia() {
  var win = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window;
  return !!win.navigator.mediaDevices && typeof win.navigator.mediaDevices.getUserMedia === "function";
}

function canUseDisplayMedia() {
  var win = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window;
  return !!win.navigator.mediaDevices && typeof win.navigator.mediaDevices.getDisplayMedia === 'function';
}

function canUseMediaRecorder() {
  var win = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window;
  return typeof win.MediaRecorder === 'function';
}

function canUseAudioContext() {
  var win = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window;
  return typeof win.AudioContext === 'function' || typeof win.webkitAudioContext === 'function';
}
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { SimpleSelect } from '@instructure/ui-simple-select';
import { IconAudioLine, IconAudioOffLine } from '@instructure/ui-icons';
import themeable from '@instructure/ui-themeable';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import * as CaptureActions from '../../../actions';
import { translate } from '../../../constants/translated/translations';
/**
---
private: true
---
**/

/* eslint-disable react/prop-types */

var _ref = /*#__PURE__*/React.createElement(IconAudioLine, {
  inline: false
});

var _ref2 = /*#__PURE__*/React.createElement(IconAudioOffLine, {
  inline: false
});

var SystemAudioSelection = (_dec = themeable({}), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(SystemAudioSelection, _Component);

  var _super = _createSuper(SystemAudioSelection);

  function SystemAudioSelection() {
    var _this;

    _classCallCheck(this, SystemAudioSelection);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.icon = _ref;
    _this.disabledIcon = _ref2;

    _this.onChange = function (_, _ref3) {
      var value = _ref3.value;

      _this.props.actions.systemAudioAllowedChanged(value === "true");
    };

    return _this;
  }

  _createClass(SystemAudioSelection, [{
    key: "getSelectedIcon",
    value: function getSelectedIcon() {
      return this.props.systemAudioAllowed ? this.icon : this.disabledIcon;
    }
  }, {
    key: "getInteractionType",
    value: function getInteractionType() {
      return this.props.isDisabled ? 'disabled' : 'enabled';
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(SimpleSelect, {
        renderLabel: function renderLabel() {
          return "";
        },
        value: this.props.systemAudioAllowed.toString(),
        onChange: this.onChange,
        renderBeforeInput: this.getSelectedIcon(),
        interaction: this.getInteractionType(),
        "data-test": "SystemAudioSelection"
      }, /*#__PURE__*/React.createElement(SimpleSelect.Option, {
        value: "true",
        id: "on",
        renderBeforeLabel: this.icon
      }, translate('SYSTEM_AUDIO_ALLOWED')), /*#__PURE__*/React.createElement(SimpleSelect.Option, {
        value: "false",
        id: "off",
        renderBeforeLabel: this.disabledIcon
      }, translate('SYSTEM_AUDIO_DISABLED')));
    }
  }]);

  SystemAudioSelection.displayName = "SystemAudioSelection";
  return SystemAudioSelection;
}(Component), _class2.propTypes = {
  isDisabled: PropTypes.bool
}, _class2.defaultProps = {
  isDisabled: false
}, _temp)) || _class);

var mapStateToProps = function mapStateToProps(state) {
  return {
    systemAudioAllowed: state.systemAudioAllowed
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(CaptureActions, dispatch)
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(SystemAudioSelection);
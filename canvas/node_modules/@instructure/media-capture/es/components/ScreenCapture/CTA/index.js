import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Button } from '@instructure/ui-buttons';
import { IconRecordSolid } from '../IconRecordSolid';
import { View } from '@instructure/ui-view';
import themeable from '@instructure/ui-themeable';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import * as CaptureActions from '../../../actions';
import { RECORDING, READY, STARTING, LOADING } from '../../../constants/CaptureStates';
import { translate } from '../../../constants/translated/translations';
var styles = {
  componentId: 'dEXSo',
  template: function template(theme) {
    return "\n\n.dEXSo_FPCi{justify-content:center}";
  },
  'justifyCenter': 'dEXSo_FPCi'
};
/**
---
private: true
---
**/

/* eslint-disable react/prop-types */

var _ref2 = /*#__PURE__*/React.createElement(View, {
  display: "inline-flex",
  width: "10%"
});

var CTA = (_dec = themeable(function () {}, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(CTA, _Component);

  var _super = _createSuper(CTA);

  function CTA() {
    var _this;

    _classCallCheck(this, CTA);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.captureRef = function (e) {
      _this.el = e;
    };

    _this.onFinish = function () {
      _this.props.actions.finishClicked();
    };

    _this.onStart = function () {
      _this.props.actions.startClicked();
    };

    return _this;
  }

  _createClass(CTA, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.focus();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.focus();
    }
  }, {
    key: "focus",
    value: function focus() {
      if (!this.props.hasStarted || !this.el) return;
      this.el.focus();
    }
  }, {
    key: "getInteractionType",
    value: function getInteractionType() {
      return this.props.isDisabled ? 'disabled' : 'enabled';
    }
  }, {
    key: "render",
    value: function render() {
      switch (this.props.captureState) {
        case RECORDING:
          if (this.props.inStorybook) {
            return this.renderButton({
              text: translate('FINISH'),
              action: this.onFinish
            });
          }

          return null;

        case READY:
        case STARTING:
        case LOADING:
          return this.renderButton({
            text: translate('START'),
            action: this.onStart,
            icon: IconRecordSolid
          });

        default:
          return null;
      }
    }
  }, {
    key: "renderButton",
    value: function renderButton(_ref) {
      var text = _ref.text,
          action = _ref.action,
          icon = _ref.icon;
      return /*#__PURE__*/React.createElement(Button, {
        display: "block",
        textAlign: "center",
        onClick: action,
        color: "primary",
        size: "medium",
        ref: this.captureRef,
        interaction: this.getInteractionType()
      }, /*#__PURE__*/React.createElement(View, {
        display: "inline-flex",
        width: "10%",
        textAlign: "start"
      }, this.renderIcon(icon)), /*#__PURE__*/React.createElement(View, {
        display: "inline-flex",
        width: "80%",
        className: styles.justifyCenter
      }, text), _ref2);
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(icon) {
      if (icon) return /*#__PURE__*/React.createElement(icon, {});
    }
  }]);

  CTA.displayName = "CTA";
  return CTA;
}(Component), _class2.propTypes = {
  isDisabled: PropTypes.bool
}, _class2.defaultProps = {
  isDisabled: false
}, _temp)) || _class);

var mapStateToProps = function mapStateToProps(state) {
  return {
    captureState: state.captureState,
    hasStarted: state.hasStarted
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(CaptureActions, dispatch)
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(CTA);
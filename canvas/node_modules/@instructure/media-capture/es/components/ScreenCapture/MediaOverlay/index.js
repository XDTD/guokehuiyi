import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import themeable from '@instructure/ui-themeable';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import * as CaptureActions from '../../../actions';
import CountdownTimer from '../../MediaCapture/CountdownTimer';
import Loading from '../../MediaCapture/Loading';
import Message from '../../MediaCapture/Message';
import { STARTING, LOADING, ERROR } from '../../../constants/CaptureStates';
import theme from './theme';
/**
---
private: true
---
**/

var _ref = /*#__PURE__*/React.createElement(Loading, null);

var MediaOverlay = (_dec = themeable(theme), _dec(_class = /*#__PURE__*/function (_Component) {
  _inherits(MediaOverlay, _Component);

  var _super = _createSuper(MediaOverlay);

  function MediaOverlay() {
    _classCallCheck(this, MediaOverlay);

    return _super.apply(this, arguments);
  }

  _createClass(MediaOverlay, [{
    key: "render",
    value: function render() {
      switch (this.props.captureState) {
        case LOADING:
          return _ref;

        case ERROR:
          return /*#__PURE__*/React.createElement(Message, {
            msg: this.props.msg
          });

        case STARTING:
          return /*#__PURE__*/React.createElement(CountdownTimer, {
            actions: this.props.actions
          });

        default:
          return null;
      }
    }
  }]);

  MediaOverlay.displayName = "MediaOverlay";
  return MediaOverlay;
}(Component)) || _class);

var mapStateToProps = function mapStateToProps(state) {
  return {
    captureState: state.captureState,
    msg: state.msg
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(CaptureActions, dispatch)
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(MediaOverlay);
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import themeable from '@instructure/ui-themeable';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import * as CaptureActions from '../../../actions';
import { getScreenMediaStreams, getWebcamStream, enumerateDevices, getUserMedia } from '../../../core/mediaDevices';
import StreamMerger from '../../../core/StreamMerger';
import { startMediaRecorder } from '../../../core/mediaRecorder';
import { LOADING, RECORDING } from '../../../constants/CaptureStates';
import { translate } from '../../../constants/translated/translations';
var styles = {
  componentId: 'dWhpI',
  template: function template(theme) {
    return "\n\n.dWhpI_cjLo{display:block;width:100%}";
  },
  'canvas': 'dWhpI_cjLo'
};
var FRAME_RATE = 25;
var CONFIG = {
  desktop: {
    video: {
      frameRate: FRAME_RATE,
      resizeMode: 'none'
    },
    audio: {
      gain: 0.5
    }
  },
  webcam: {
    video: {
      width: 200,
      height: 200,
      position: {
        x: 1280 - 200 - 24,
        y: 720 - 200 - 24
      },
      frameRate: FRAME_RATE,
      resizeMode: 'none'
    },
    audio: {
      muted: false,
      gain: 1.0
    }
  }
};
/**
---
private: true
---
**/

var ScreenStream = (_dec = themeable({}, styles), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
  _inherits(ScreenStream, _Component);

  var _super = _createSuper(ScreenStream);

  function ScreenStream(props) {
    var _this;

    _classCallCheck(this, ScreenStream);

    _this = _super.call(this, props);

    _this.handleError = function (err) {
      if (!err || typeof _this.props.actions.errorOccurred !== 'function') {
        return;
      }

      _this.props.actions.errorOccurred(translate('SCREEN_DEFAULT_ERROR'));
    };

    _this.streamSuccess = function () {
      enumerateDevices(_this.deviceSuccess, _this.handleError);

      _this.streamLoaded();
    };

    _this.deviceSuccess = function (types) {
      var _this$rawStreams$desk = _this.rawStreams.desktopStream.getVideoTracks(),
          _this$rawStreams$desk2 = _slicedToArray(_this$rawStreams$desk, 1),
          videoTrack = _this$rawStreams$desk2[0];

      _this.props.actions.devicesFound(types, videoTrack);
    };

    _this.streamLoaded = function () {
      _this.props.captureState === LOADING && _this.props.actions.deviceRequestAccepted();
    };

    _this.isDeviceChanged = function (audioId, videoId) {
      return _this.isAudioDeviceChanged(audioId) || _this.isVideoDeviceChanged(videoId);
    };

    _this.isAudioDeviceChanged = function (audioId) {
      return _this.props.audioDeviceId !== audioId;
    };

    _this.isVideoDeviceChanged = function (videoId) {
      return _this.props.videoDeviceId !== videoId;
    };

    _this.isSystemAudioAllowedChanged = function (newValue) {
      return _this.props.systemAudioAllowed !== newValue;
    };

    _this.onMediaRecorderInit = function (mediaRecorder) {
      _this.props.actions.mediaRecorderInitialized(mediaRecorder);
    };

    _this.blobSuccess = function (blob) {
      // eslint-disable-next-line compat/compat
      var src = window.URL.createObjectURL(blob);

      _this.props.actions.videoObjectGenerated(src, blob);
    };

    _this.state = {
      recording: false,
      cancelled: false
    };
    return _this;
  }

  _createClass(ScreenStream, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.rawStreams = {};
      this.startStream();
      this.captureStreamMerger = new StreamMerger(this.canvas, FRAME_RATE);
    }
  }, {
    key: "startStream",
    value: function () {
      var _startStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var streams;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                getUserMedia(); // we ask for cam and mic permissions

                _context.next = 4;
                return getScreenMediaStreams({
                  audioDeviceId: this.props.audioDeviceId,
                  videoDeviceId: this.props.videoDeviceId,
                  webcamVideoConfig: CONFIG.webcam.video,
                  desktopVideoConfig: CONFIG.desktop.video
                });

              case 4:
                streams = _context.sent;

                if (streams.desktopStream) {
                  _context.next = 8;
                  break;
                }

                this.setState({
                  cancelled: true
                });
                return _context.abrupt("return");

              case 8:
                streams.desktopStream.getVideoTracks()[0].onended = this.props.actions.trackEnded;
                this.rawStreams = {
                  desktopStream: streams.desktopStream,
                  webcamStream: streams.webcamStream
                };
                this.updateStreams();
                this.streamSuccess();
                _context.next = 17;
                break;

              case 14:
                _context.prev = 14;
                _context.t0 = _context["catch"](0);
                this.handleError(_context.t0);

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 14]]);
      }));

      function startStream() {
        return _startStream.apply(this, arguments);
      }

      return startStream;
    }()
  }, {
    key: "updateStreams",
    value: function updateStreams() {
      var inputStreams = [];

      if (this.rawStreams.desktopStream) {
        inputStreams.push({
          stream: this.rawStreams.desktopStream,
          videoConfig: CONFIG.desktop.video,
          audioConfig: {
            gain: CONFIG.desktop.audio.gain,
            muted: !this.props.systemAudioAllowed
          }
        });
      }

      if (this.rawStreams.webcamStream) {
        inputStreams.push({
          stream: this.rawStreams.webcamStream,
          videoConfig: CONFIG.webcam.video,
          audioConfig: {
            gain: CONFIG.webcam.audio.gain,
            muted: !this.props.audioDeviceId
          }
        });
      }

      this.recordStream = this.captureStreamMerger.mergeStreams(inputStreams);
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return this.state.cancelled !== nextState.cancelled || this.props.captureState !== nextProps.captureState || this.isDeviceChanged(nextProps.audioDeviceId, nextProps.videoDeviceId) || this.isSystemAudioAllowedChanged(nextProps.systemAudioAllowed);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.state.cancelled) {
        this.props.actions.trackEnded();
        return;
      }

      if (this.isVideoDeviceChanged(prevProps.videoDeviceId)) {
        this.handleVideoChange();
      }

      if (this.isAudioDeviceChanged(prevProps.audioDeviceId)) {
        this.handleAudioChange();
      }

      if (this.isSystemAudioAllowedChanged(prevProps.systemAudioAllowed)) {
        this.handleSystemAudioAllowedChange();
      }

      if (!this.shouldStartRecorder()) return;
      startMediaRecorder(this.recordStream, this.onMediaRecorderInit, this.blobSuccess, this.handleError);
      this.setState({
        recording: true
      });
    }
  }, {
    key: "handleVideoChange",
    value: function () {
      var _handleVideoChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.updateWebcamStream();

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function handleVideoChange() {
        return _handleVideoChange.apply(this, arguments);
      }

      return handleVideoChange;
    }()
  }, {
    key: "handleAudioChange",
    value: function () {
      var _handleAudioChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.updateWebcamStream();

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function handleAudioChange() {
        return _handleAudioChange.apply(this, arguments);
      }

      return handleAudioChange;
    }()
  }, {
    key: "updateWebcamStream",
    value: function () {
      var _updateWebcamStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var newWebcamStream;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return getWebcamStream({
                  audioDeviceId: this.props.audioDeviceId,
                  videoDeviceId: this.props.videoDeviceId,
                  webcamVideoConfig: CONFIG.webcam.video
                });

              case 2:
                newWebcamStream = _context4.sent;
                this.stopStreamTracks(this.rawStreams.webcamStream);

                if (!newWebcamStream) {
                  delete this.rawStreams.webcamStream;
                } else {
                  this.rawStreams.webcamStream = newWebcamStream;
                }

                this.updateStreams();

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function updateWebcamStream() {
        return _updateWebcamStream.apply(this, arguments);
      }

      return updateWebcamStream;
    }()
  }, {
    key: "handleSystemAudioAllowedChange",
    value: function () {
      var _handleSystemAudioAllowedChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.updateStreams();

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function handleSystemAudioAllowedChange() {
        return _handleSystemAudioAllowedChange.apply(this, arguments);
      }

      return handleSystemAudioAllowedChange;
    }()
  }, {
    key: "shouldStartRecorder",
    value: function shouldStartRecorder() {
      return !this.state.recording && this.recordStream && this.props.captureState === RECORDING;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.setState({
        recording: false
      });
      if (this.captureStreamMerger) this.captureStreamMerger.stop();
      this.stopStreamTracks(this.recordStream);
      this.stopRawStreamTracks();
    }
  }, {
    key: "stopRawStreamTracks",
    value: function stopRawStreamTracks() {
      Object.values(this.rawStreams).forEach(this.stopStreamTracks);
    }
  }, {
    key: "stopStreamTracks",
    value: function stopStreamTracks(stream) {
      if (!stream || typeof stream.getTracks !== 'function') return;
      stream.getTracks().forEach(function (track) {
        return track.stop();
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("canvas", {
        className: styles.canvas,
        tabIndex: "-1",
        width: "1280",
        height: "720",
        ref: function ref(el) {
          _this2.canvas = el;
        }
      }));
    }
  }]);

  ScreenStream.displayName = "ScreenStream";
  return ScreenStream;
}(Component), _temp)) || _class);

var mapStateToProps = function mapStateToProps(state) {
  return {
    captureState: state.captureState,
    audioDeviceId: state.audioDeviceId,
    videoDeviceId: state.videoDeviceId,
    systemAudioAllowed: state.systemAudioAllowed,
    fileName: state.fileName
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(CaptureActions, dispatch)
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(ScreenStream);
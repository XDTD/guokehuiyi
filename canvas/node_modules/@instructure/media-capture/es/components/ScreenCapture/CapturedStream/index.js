import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import { connect } from 'react-redux';
import ScreenStream from '../ScreenStream';
import MediaPlayback from '../../../core/components/MediaPlayback';
import { READY, RECORDING, STARTING, LOADING, PREVIEWSAVE, SAVING } from '../../../constants/CaptureStates';
/**
---
private: true
---
**/

var _ref = /*#__PURE__*/React.createElement(ScreenStream, null);

var CapturedStream = /*#__PURE__*/function (_Component) {
  _inherits(CapturedStream, _Component);

  var _super = _createSuper(CapturedStream);

  function CapturedStream() {
    _classCallCheck(this, CapturedStream);

    return _super.apply(this, arguments);
  }

  _createClass(CapturedStream, [{
    key: "render",
    value: function render() {
      switch (this.props.captureState) {
        case PREVIEWSAVE:
        case SAVING:
          return /*#__PURE__*/React.createElement("span", {
            "data-test": "MediaPlayback"
          }, /*#__PURE__*/React.createElement(MediaPlayback, {
            videoSrc: this.props.videoSrc
          }));

        case LOADING:
        case READY:
        case STARTING:
        case RECORDING:
          return _ref;

        default:
          return null;
      }
    }
  }]);

  CapturedStream.displayName = "CapturedStream";
  return CapturedStream;
}(Component);

var mapStateToProps = function mapStateToProps(state) {
  return {
    captureState: state.captureState,
    videoSrc: state.videoSrc
  };
};

export default connect(mapStateToProps)(CapturedStream);
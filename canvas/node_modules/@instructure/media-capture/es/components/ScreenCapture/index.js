import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import ScreenCaptureProvider from './ScreenCaptureProvider';
import CapturePresentation from '../../core/components/CapturePresentation';
import MediaContainer from '../../core/components/MediaContainer';
import MediaOverlay from './MediaOverlay';
import CapturedStream from './CapturedStream';
import { reducer, getInitialState } from '../../reducers';
import { applyTranslations, TranslationPropTypes } from '../../constants/translated/translations';
import Controller from './Controller';
import { closeClicked as _closeClicked, finishClicked as _finishClicked } from '../../actions';
var TranslationsPropType = PropTypes.shape(TranslationPropTypes);

var _ref = /*#__PURE__*/React.createElement(MediaContainer, null, /*#__PURE__*/React.createElement(MediaOverlay, null), /*#__PURE__*/React.createElement(CapturedStream, null));

var ScreenCapture = /*#__PURE__*/function (_Component) {
  _inherits(ScreenCapture, _Component);

  var _super = _createSuper(ScreenCapture);

  function ScreenCapture(props) {
    var _this;

    _classCallCheck(this, ScreenCapture);

    _this = _super.call(this, props);
    var initialState = getInitialState(_this.props.onCompleted, _this.props.onCancel);
    _this.state = {
      store: createStore(reducer, initialState, applyMiddleware(thunk))
    };
    applyTranslations(_this.props.translations);
    return _this;
  }

  _createClass(ScreenCapture, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.props.actionSetterCallback({
        closeClicked: function closeClicked() {
          return _this2.state.store.dispatch(_closeClicked());
        },
        finishClicked: function finishClicked() {
          return _this2.state.store.dispatch(_finishClicked());
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      return /*#__PURE__*/React.createElement(ScreenCaptureProvider, {
        onCancel: this.props.onCancel,
        onChange: this.props.onChange,
        store: this.state.store,
        render: function render() {
          return /*#__PURE__*/React.createElement(CapturePresentation, null, _ref, /*#__PURE__*/React.createElement(Controller, {
            inStorybook: _this3.props.inStorybook
          }));
        }
      });
    }
  }]);

  ScreenCapture.displayName = "ScreenCapture";
  return ScreenCapture;
}(Component);

ScreenCapture.propTypes = {
  /**
   * Callback fired when a file has been generated.
   */
  onCompleted: PropTypes.func.isRequired,

  /**
   * Callback fired when the component is closed for a reason
   * other than generating a file. Includes the last
   * emitted state when the action was taken.
   */
  onCancel: PropTypes.func,

  /**
   * Callback fired when the component state is changed
   */
  onChange: PropTypes.func,

  /**
   * Label overrides for i18n. Defaults to english
   * See src/constants/translated/translations.js for default values
   */
  translations: TranslationsPropType,

  /**
   * Flag if this component is called from Storybook or not.
   * Used for rendering a Finish button which is not need normally,
   * since the embedder renders its own.
   */
  inStorybook: PropTypes.bool,

  /**
   * Callback for setting action handlers.
   * Used for dispatching actions from outside ScreenCapture.
   */
  actionSetterCallback: PropTypes.func
};
ScreenCapture.defaultProps = {
  onCancel: function onCancel() {},
  onChange: function onChange() {},
  translations: {},
  inStorybook: false,
  actionSetterCallback: function actionSetterCallback() {}
};
export { ScreenCapture as default };
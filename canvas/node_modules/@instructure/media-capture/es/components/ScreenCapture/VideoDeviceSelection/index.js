import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

// /*
//  * The MIT License (MIT)
//  *
//  * Copyright (c) 2015 - present Instructure, Inc.
//  *
//  * Permission is hereby granted, free of charge, to any person obtaining a copy
//  * of this software and associated documentation files (the "Software"), to deal
//  * in the Software without restriction, including without limitation the rights
//  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  * copies of the Software, and to permit persons to whom the Software is
//  * furnished to do so, subject to the following conditions:
//  *
//  * The above copyright notice and this permission notice shall be included in all
//  * copies or substantial portions of the Software.
//  *
//  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  * SOFTWARE.
//  */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { SimpleSelect } from '@instructure/ui-simple-select';
import { IconVideoCameraLine, IconVideoCameraOffLine } from '@instructure/ui-icons';
import themeable from '@instructure/ui-themeable';
import DeviceSelection from '../DeviceSelection';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import * as CaptureActions from '../../../actions';
import { translate } from '../../../constants/translated/translations';
var WEBCAM_DISABLED = 'webcam_disabled';
/**
---
private: true
---
**/

/* eslint-disable react/prop-types */

var _ref = /*#__PURE__*/React.createElement(IconVideoCameraLine, {
  inline: false
});

var _ref2 = /*#__PURE__*/React.createElement(IconVideoCameraOffLine, {
  inline: false
});

var VideoDeviceSelection = (_dec = themeable({}), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(VideoDeviceSelection, _Component);

  var _super = _createSuper(VideoDeviceSelection);

  function VideoDeviceSelection() {
    var _this;

    _classCallCheck(this, VideoDeviceSelection);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.formatLabel = DeviceSelection.formatLabel;
    _this.renderOptions = DeviceSelection.renderOptions;
    _this.icon = _ref;
    _this.disabledIcon = _ref2;

    _this.onDeviceSelect = function (_, _ref3) {
      var id = _ref3.id;
      if (!id) return;

      if (_this.isDeviceDisabled(id)) {
        _this.props.actions.videoDeviceDisabled();

        return;
      }

      _this.props.actions.videoDeviceChanged(id);
    };

    return _this;
  }

  _createClass(VideoDeviceSelection, [{
    key: "isDeviceDisabled",
    value: function isDeviceDisabled() {
      var id = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getSelectedDeviceId();
      return id === WEBCAM_DISABLED;
    }
  }, {
    key: "getSelectedDeviceId",
    value: function getSelectedDeviceId() {
      if (this.props.videoDeviceId === '') {
        return WEBCAM_DISABLED;
      }

      return this.props.videoDeviceId;
    }
  }, {
    key: "getSelectedIcon",
    value: function getSelectedIcon() {
      return this.isDeviceDisabled() ? this.disabledIcon : this.icon;
    }
  }, {
    key: "getInteractionType",
    value: function getInteractionType() {
      return this.props.isDisabled || this.props.devices.videoinput.every(function (videoDevice) {
        return videoDevice.deviceId === '';
      }) ? 'disabled' : 'enabled';
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(SimpleSelect, {
        renderLabel: function renderLabel() {
          return "";
        },
        value: this.getSelectedDeviceId(),
        onChange: this.onDeviceSelect,
        renderBeforeInput: this.getSelectedIcon(),
        interaction: this.getInteractionType(),
        "data-test": "VideoDeviceSelection"
      }, this.renderOptions(this.props.devices.videoinput, this.icon, WEBCAM_DISABLED, translate('WEBCAM_DISABLED'), this.disabledIcon));
    }
  }]);

  VideoDeviceSelection.displayName = "VideoDeviceSelection";
  return VideoDeviceSelection;
}(Component), _class2.propTypes = {
  isDisabled: PropTypes.bool
}, _class2.defaultProps = {
  isDisabled: false
}, _temp)) || _class);

var mapStateToProps = function mapStateToProps(state) {
  return {
    videoDeviceId: state.videoDeviceId,
    devices: state.devices
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(CaptureActions, dispatch)
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(VideoDeviceSelection);
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import themeable from '@instructure/ui-themeable';
import { View } from '@instructure/ui-view';
import { Responsive } from '@instructure/ui-responsive';
import VideoDeviceSelection from '../VideoDeviceSelection';
import AudioDeviceSelection from '../AudioDeviceSelection';
import SystemAudioSelection from '../SystemAudioSelection';
import CTA from '../CTA';
import FileSave from '../../../core/components/FileSave';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import * as CaptureActions from '../../../actions';
import Message from '../../MediaCapture/Message';
import { translate } from '../../../constants/translated/translations';
import { STARTING, RECORDING, PREVIEWSAVE, SAVING } from '../../../constants/CaptureStates';
var styles = {
  componentId: 'cSEeR',
  template: function template(theme) {
    return "\n\n.cSEeR_crZr{box-sizing:border-box;margin-top:1em;padding-left:12px;padding-right:12px;width:100%}\n\n.cSEeR_cBdJ{margin-bottom:0.75em;margin-top:0.75em}\n\n@media (min-width:768px){.cSEeR_crZr{margin-left:auto;margin-right:auto;padding-left:0;padding-right:0}}";
  },
  'container': 'cSEeR_crZr',
  'my3': 'cSEeR_cBdJ'
};
import theme from './theme';
/**
---
private: true
---
**/

var Controller = (_dec = themeable(theme, styles), _dec(_class = /*#__PURE__*/function (_Component) {
  _inherits(Controller, _Component);

  var _super = _createSuper(Controller);

  function Controller() {
    _classCallCheck(this, Controller);

    return _super.apply(this, arguments);
  }

  _createClass(Controller, [{
    key: "isDisabled",
    value: function isDisabled() {
      return this.props.captureState === STARTING;
    }
  }, {
    key: "isAllDeviceBlocked",
    value: function isAllDeviceBlocked(devices) {
      return devices.every(function (device) {
        return device.deviceId === '';
      });
    }
  }, {
    key: "renderSettings",
    value: function renderSettings() {
      if (this.props.captureState === RECORDING) return null;
      var warningMessage = '';
      var micBlocked = this.isAllDeviceBlocked(this.props.devices.audioinput);
      var webcamBlocked = this.isAllDeviceBlocked(this.props.devices.videoinput);
      var numberOfMic = this.props.devices.audioinput.length;
      var numberOfWebcam = this.props.devices.videoinput.length;

      if (micBlocked && webcamBlocked) {
        if (numberOfMic === 0 && numberOfWebcam === 0) {
          warningMessage = translate('NO_MIC_AND_WEBCAM_EXIST');
        } else {
          warningMessage = translate('MIC_AND_WEBCAM_BLOCKED');
        }
      } else if (micBlocked) {
        if (numberOfMic === 0) {
          warningMessage = translate('NO_MIC_EXIST');
        } else {
          warningMessage = translate('MIC_BLOCKED');
        }
      } else if (webcamBlocked) {
        if (numberOfWebcam === 0) {
          warningMessage = translate('NO_WEBCAM_EXIST');
        } else {
          warningMessage = translate('WEBCAM_BLOCKED');
        }
      }

      return /*#__PURE__*/React.createElement(React.Fragment, null, warningMessage ? /*#__PURE__*/React.createElement(Message, {
        msg: warningMessage,
        margin: "0"
      }) : null, /*#__PURE__*/React.createElement("div", {
        className: styles.my3
      }, /*#__PURE__*/React.createElement(VideoDeviceSelection, {
        isDisabled: this.isDisabled()
      })), /*#__PURE__*/React.createElement("div", {
        className: styles.my3
      }, /*#__PURE__*/React.createElement(AudioDeviceSelection, {
        isDisabled: this.isDisabled()
      })), /*#__PURE__*/React.createElement("div", {
        className: styles.my3
      }, /*#__PURE__*/React.createElement(SystemAudioSelection, {
        isDisabled: this.isDisabled()
      })));
    }
  }, {
    key: "renderStart",
    value: function renderStart() {
      var _this = this;

      return /*#__PURE__*/React.createElement("div", {
        className: styles.container
      }, /*#__PURE__*/React.createElement(Responsive, {
        match: "media",
        query: {
          small: {
            maxWidth: 480
          }
        }
      }, function (_, match) {
        return /*#__PURE__*/React.createElement(View, {
          display: "block",
          margin: "auto",
          maxWidth: "35rem",
          padding: match.includes('small') ? "none" : "small xx-large none"
        }, _this.renderSettings(), /*#__PURE__*/React.createElement(CTA, {
          isDisabled: _this.isDisabled(),
          inStorybook: _this.props.inStorybook
        }));
      }));
    }
  }, {
    key: "renderPreview",
    value: function renderPreview() {
      return /*#__PURE__*/React.createElement("div", {
        className: styles.container
      }, /*#__PURE__*/React.createElement(FileSave, {
        captureState: this.props.captureState,
        fileName: this.props.fileName,
        actions: _objectSpread({}, this.props.actions)
      }));
    }
  }, {
    key: "render",
    value: function render() {
      switch (this.props.captureState) {
        case PREVIEWSAVE:
        case SAVING:
          return this.renderPreview();

        case RECORDING:
          if (this.props.inStorybook) {
            return this.renderStart();
          }

          return null;

        default:
          return this.renderStart();
      }
    }
  }]);

  Controller.displayName = "Controller";
  return Controller;
}(Component)) || _class);

var mapStateToProps = function mapStateToProps(state) {
  return {
    captureState: state.captureState,
    devices: state.devices,
    fileName: state.fileName
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    actions: bindActionCreators(CaptureActions, dispatch)
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(Controller);
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import themeable from '@instructure/ui-themeable';
import AudioSignal from '../AudioSignal';
import CountdownTimer from '../CountdownTimer';
import Loading from '../Loading';
import Message from '../Message';
import RecordingBadge from '../RecordingBadge';
import { STARTING, RECORDING, PREVIEWSAVE, SAVING, LOADING, ERROR, READY } from '../../../constants/CaptureStates';
import { translate } from '../../../constants/translated/translations';
var styles = {
  componentId: 'cgzpK',
  template: function template(theme) {
    return "\n\n.cgzpK_ednO{background-color:".concat(theme.backgroundColor || 'inherit', ";color:").concat(theme.fontColor || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";left:0.9375rem;padding:").concat(theme.padding || 'inherit', ";position:absolute;text-align:center;top:0.9375rem}\n\n[dir=ltr] .cgzpK_ednO,[dir=rtl] .cgzpK_ednO{text-align:center}\n\n.cgzpK_bSXe{bottom:0;display:flex;height:").concat(theme.recordingBarHeight || 'inherit', ";position:absolute;width:100%}");
  },
  'previewBadge': 'cgzpK_ednO',
  'bottomBar': 'cgzpK_bSXe'
};
import theme from './theme';
/**
---
private: true
---
**/

var _ref = /*#__PURE__*/React.createElement(Loading, null);

var _ref2 = /*#__PURE__*/React.createElement(RecordingBadge, null);

var MediaOverlay = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(MediaOverlay, _Component);

  var _super = _createSuper(MediaOverlay);

  function MediaOverlay() {
    _classCallCheck(this, MediaOverlay);

    return _super.apply(this, arguments);
  }

  _createClass(MediaOverlay, [{
    key: "render",
    value: function render() {
      var _this = this;

      var LoadingGuard = function LoadingGuard(state) {
        if (state !== LOADING) return null;
        return _ref;
      };

      var ErrorGuard = function ErrorGuard(state) {
        if (state !== ERROR) return null;
        return /*#__PURE__*/React.createElement(Message, {
          msg: _this.props.msg
        });
      };

      var CountdownTimerGuard = function CountdownTimerGuard(state) {
        if (state !== STARTING) return null;
        return /*#__PURE__*/React.createElement(CountdownTimer, {
          actions: _this.props.actions
        });
      };

      var PreviewBadgeGuard = function PreviewBadgeGuard(state) {
        if (![PREVIEWSAVE, SAVING].includes(state)) return null;
        return /*#__PURE__*/React.createElement("div", {
          className: styles.previewBadge
        }, translate('PREVIEW'));
      };

      var RecordingGuard = function RecordingGuard(state) {
        if (state !== RECORDING) return null;
        return /*#__PURE__*/React.createElement("div", {
          className: styles.bottomBar
        }, /*#__PURE__*/React.createElement(AudioSignal, {
          reduced: true,
          soundMeter: _this.props.soundMeter
        }), _ref2);
      };

      var ReadyGuard = function ReadyGuard(state) {
        if (state !== READY) return null;
        return /*#__PURE__*/React.createElement("div", {
          className: styles.bottomBar
        }, /*#__PURE__*/React.createElement(AudioSignal, {
          soundMeter: _this.props.soundMeter
        }));
      };

      return LoadingGuard(this.props.captureState) || ReadyGuard(this.props.captureState) || ErrorGuard(this.props.captureState) || CountdownTimerGuard(this.props.captureState) || RecordingGuard(this.props.captureState) || PreviewBadgeGuard(this.props.captureState);
    }
  }]);

  MediaOverlay.displayName = "MediaOverlay";
  return MediaOverlay;
}(Component), _class2.propTypes = {
  captureState: PropTypes.string.isRequired,
  soundMeter: PropTypes.object,
  // eslint-disable-line react/forbid-prop-types
  msg: PropTypes.string.isRequired,
  actions: PropTypes.object.isRequired // eslint-disable-line react/forbid-prop-types

}, _class2.defaultProps = {
  soundMeter: {}
}, _temp)) || _class);
export default MediaOverlay;
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import themeable from '@instructure/ui-themeable';
var styles = {
  componentId: 'MnWdZ',
  template: function template(theme) {
    return "\n\n.MnWdZ_dAhe{color:".concat(theme.color || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', "}");
  },
  'timer': 'MnWdZ_dAhe'
};
import theme from './theme';
/**
---
private: true
---
@module Timer
**/

var Timer = (_dec = themeable(theme, styles), _dec(_class = /*#__PURE__*/function (_Component) {
  _inherits(Timer, _Component);

  var _super = _createSuper(Timer);

  function Timer(props) {
    var _this;

    _classCallCheck(this, Timer);

    _this = _super.call(this, props);
    _this.state = {
      time: 0
    };
    return _this;
  }

  _createClass(Timer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.interval = setInterval(function () {
        if (_this2._mounted) {
          _this2.setState({
            time: _this2.state.time + 1
          });
        }
      }, 1000);
      this._mounted = true;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._mounted = false;
      clearInterval(this.interval);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement("div", {
        className: styles.timer
      }, new Date(1000 * this.state.time).toISOString().substr(14, 5));
    }
  }]);

  Timer.displayName = "Timer";
  return Timer;
}(Component)) || _class);
export default Timer;
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import themeable from '@instructure/ui-themeable';
import { Grid } from '@instructure/ui-grid';
import { Responsive } from '@instructure/ui-responsive';
import DeviceSelection from '../DeviceSelection';
import FileSave from '../../../core/components/FileSave';
import StartOver from '../../../core/components/StartOver';
var styles = {
  componentId: 'bFuPv',
  template: function template(theme) {
    return "\n\n.bFuPv_crZr,.bFuPv_fyXs{box-sizing:border-box;margin-left:auto;margin-right:auto;margin-top:1em;max-width:".concat(theme.maxWidth || 'inherit', ";width:").concat(theme.width || 'inherit', "}\n\n.bFuPv_crZr{margin-top:1em}\n\n@media (max-width:25em) and (min-height:26.25em),(max-width:40.625em) and (min-height:35.9375em),(max-width:43.9375em) and (min-height:40.125em){.bFuPv_crZr{bottom:0;left:0;max-width:100%;padding:1em;position:absolute;right:0;width:100%}}\n\n.bFuPv_rFBJ{display:flex;flex:1}\n\n.bFuPv_qrQc{justify-content:flex-end}");
  },
  'container': 'bFuPv_crZr',
  'fileSaveName': 'bFuPv_fyXs',
  'flexed': 'bFuPv_rFBJ',
  'right': 'bFuPv_qrQc'
};
import theme from './theme';
import { READY, RECORDING, PREVIEWSAVE, SAVING, FINISHED } from '../../../constants/CaptureStates';
/**
---
private: true
---
**/

var _ref = /*#__PURE__*/React.createElement(Grid.Col, null);

var Controller = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Controller, _Component);

  var _super = _createSuper(Controller);

  function Controller() {
    _classCallCheck(this, Controller);

    return _super.apply(this, arguments);
  }

  _createClass(Controller, [{
    key: "render",
    value: function render() {
      var _this = this;

      var StartGuard = function StartGuard(state) {
        if (state !== READY) return null;
        var videoSelection = /*#__PURE__*/React.createElement(DeviceSelection, {
          variant: "video",
          devices: _this.props.devices.videoinput,
          selectedDeviceId: _this.props.videoDeviceId,
          actions: _objectSpread({}, _this.props.actions)
        });
        return /*#__PURE__*/React.createElement(Responsive, {
          match: "media",
          query: {
            medium: {
              maxWidth: 767
            }
          }
        }, function (props, matches) {
          return /*#__PURE__*/React.createElement("div", {
            className: styles.container
          }, /*#__PURE__*/React.createElement(Grid, {
            margin: "small",
            startAt: "medium",
            vAlign: "middle"
          }, /*#__PURE__*/React.createElement(Grid.Row, null, /*#__PURE__*/React.createElement(Grid.Col, {
            textAlign: "center"
          }, /*#__PURE__*/React.createElement(DeviceSelection, {
            fluidWidth: matches.includes('medium'),
            variant: "audio",
            devices: _this.props.devices.audioinput,
            selectedDeviceId: _this.props.audioDeviceId,
            actions: _objectSpread({}, _this.props.actions)
          })), /*#__PURE__*/React.createElement(Grid.Col, {
            textAlign: "center"
          }, matches.includes('medium') ? /*#__PURE__*/React.cloneElement(videoSelection, {
            fluidWidth: true
          }) : _this.props.children), /*#__PURE__*/React.createElement(Grid.Col, {
            textAlign: "center"
          }, matches.includes('medium') ? /*#__PURE__*/React.cloneElement(_this.props.children, {
            fluidWidth: true
          }) : videoSelection))));
        });
      };

      var FinishGuard = function FinishGuard(state) {
        if (state !== RECORDING) return null;
        var startOver = /*#__PURE__*/React.createElement(StartOver, {
          actions: _objectSpread({}, _this.props.actions)
        });
        return /*#__PURE__*/React.createElement("div", {
          className: styles.container
        }, /*#__PURE__*/React.createElement(Responsive, {
          match: "media",
          query: {
            medium: {
              maxWidth: 767
            }
          }
        }, function (props, matches) {
          return /*#__PURE__*/React.createElement(Grid, {
            startAt: "medium",
            vAlign: "middle"
          }, /*#__PURE__*/React.createElement(Grid.Row, null, _ref, /*#__PURE__*/React.createElement(Grid.Col, {
            textAlign: "center"
          }, matches.includes('medium') ? /*#__PURE__*/React.cloneElement(startOver, {
            fluidWidth: true
          }) : _this.props.children), /*#__PURE__*/React.createElement(Grid.Col, {
            textAlign: "end"
          }, matches.includes('medium') ? /*#__PURE__*/React.cloneElement(_this.props.children, {
            fluidWidth: true
          }) : startOver)));
        }));
      };

      var SaveGuard = function SaveGuard(state) {
        if (![PREVIEWSAVE, SAVING, FINISHED].includes(state)) return null;
        return /*#__PURE__*/React.createElement("div", {
          className: styles.container
        }, /*#__PURE__*/React.createElement(FileSave, {
          captureState: state,
          fileName: _this.props.fileName,
          actions: _objectSpread({}, _this.props.actions)
        }));
      };

      var DefaultGuard = function DefaultGuard() {
        return /*#__PURE__*/React.createElement("div", {
          className: styles.container
        }, _this.props.children);
      };

      var captureState = this.props.captureState;
      return StartGuard(captureState) || FinishGuard(captureState) || SaveGuard(captureState) || DefaultGuard();
    }
  }]);

  Controller.displayName = "Controller";
  return Controller;
}(Component), _class2.propTypes = {
  children: PropTypes.node,
  captureState: PropTypes.string.isRequired,
  fileName: PropTypes.string.isRequired,
  devices: PropTypes.shape({
    audioinput: PropTypes.array,
    videoinput: PropTypes.array
  }).isRequired,
  audioDeviceId: PropTypes.string.isRequired,
  videoDeviceId: PropTypes.string.isRequired,
  actions: PropTypes.object.isRequired // eslint-disable-line react/forbid-prop-types

}, _class2.defaultProps = {
  children: []
}, _temp)) || _class);
export default Controller;
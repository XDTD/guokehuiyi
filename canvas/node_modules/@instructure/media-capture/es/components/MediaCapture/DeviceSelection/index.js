import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Button } from '@instructure/ui-buttons';
import { IconMicLine, IconVideoLine } from '@instructure/ui-icons';
import { Menu, MenuItem, MenuItemGroup } from '@instructure/ui-menu';
import { View } from '@instructure/ui-view';
import themeable from '@instructure/ui-themeable';
import { translate } from '../../../constants/translated/translations';
var styles = {
  componentId: 'blHEn',
  template: function template(theme) {
    return "\n\n.blHEn_daKB{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:11.875rem}";
  },
  'truncated': 'blHEn_daKB'
};
/**
---
private: true
---
**/

var DeviceSelection = (_dec = themeable({}, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(DeviceSelection, _Component);

  var _super = _createSuper(DeviceSelection);

  function DeviceSelection(props) {
    var _this;

    _classCallCheck(this, DeviceSelection);

    _this = _super.call(this, props);

    _this.deviceSelected = function (e, _ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          newSelected = _ref2[0];

      if (!newSelected) return;

      if (newSelected === 'video_off') {
        _this.props.actions["".concat(_this.props.variant, "DeviceDisabled")]();
      } else {
        _this.props.actions["".concat(_this.props.variant, "DeviceChanged")](newSelected);
      }
    };

    _this.state = _objectSpread({
      showMenu: false
    }, _this.config(_this.props.variant));
    return _this;
  }

  _createClass(DeviceSelection, [{
    key: "config",
    value: function config(variant) {
      var VARIANTS = {
        audio: {
          label: translate('DEVICE_AUDIO'),
          icon: IconMicLine
        },
        video: {
          label: translate('DEVICE_VIDEO'),
          icon: IconVideoLine
        }
      };
      return VARIANTS[variant];
    }
  }, {
    key: "formatLabel",
    value: function formatLabel(device) {
      if (device.label && device.label.length > 0) {
        return device.label;
      } else {
        return device.deviceId;
      }
    }
  }, {
    key: "isDeviceSelected",
    value: function isDeviceSelected(id) {
      return id === this.props.selectedDeviceId;
    }
  }, {
    key: "menuItems",
    value: function menuItems() {
      var _this2 = this;

      var menuItems = this.props.devices.map(function (d) {
        return /*#__PURE__*/React.createElement(MenuItem, {
          key: "".concat(d.deviceId),
          value: "".concat(d.deviceId)
        }, /*#__PURE__*/React.createElement("div", {
          className: styles.truncated
        }, _this2.formatLabel(d)));
      });

      if (this.props.variant == "video") {
        menuItems.push( /*#__PURE__*/React.createElement(MenuItem, {
          key: 'video_off',
          value: 'video_off'
        }, /*#__PURE__*/React.createElement("div", {
          className: styles.truncated
        }, translate('NO_WEBCAM'))));
      }

      return menuItems;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      return /*#__PURE__*/React.createElement(Menu, {
        placement: "bottom",
        show: this.state.showMenu,
        onToggle: function onToggle(showMenu) {
          return _this3.setState({
            showMenu: showMenu
          });
        },
        onKeyUp: function onKeyUp(e) {
          if (e.key === 'Escape') {
            e.preventDefault(); // don't let the handler on the <Modal> cause the whole modal to close

            _this3.setState({
              showMenu: false
            });
          }
        },
        trigger: /*#__PURE__*/React.createElement(Button, {
          fluidWidth: this.props.fluidWidth,
          variant: "light",
          icon: this.state.icon
        }, /*#__PURE__*/React.createElement(View, {
          display: "block",
          textAlign: "center"
        }, this.state.label))
      }, /*#__PURE__*/React.createElement(MenuItemGroup, {
        label: "",
        selected: this.props.selectedDeviceId ? [this.props.selectedDeviceId] : ['video_off'],
        onSelect: this.deviceSelected
      }, this.menuItems()));
    }
  }]);

  DeviceSelection.displayName = "DeviceSelection";
  return DeviceSelection;
}(Component), _class2.propTypes = {
  variant: PropTypes.oneOf(['audio', 'video']).isRequired,
  selectedDeviceId: PropTypes.string.isRequired,
  devices: PropTypes.arrayOf(PropTypes.shape({
    deviceId: PropTypes.string,
    label: PropTypes.string
  })).isRequired,
  actions: PropTypes.shape({
    audioDeviceChanged: PropTypes.func.isRequired,
    videoDeviceChanged: PropTypes.func.isRequired,
    videoDeviceDisabled: PropTypes.func.isRequired
  }).isRequired,
  fluidWidth: PropTypes.bool
}, _class2.defaultProps = {
  fluidWidth: false
}, _temp)) || _class);
export default DeviceSelection;
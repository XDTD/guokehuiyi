import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Button } from '@instructure/ui-buttons';
import { Responsive } from '@instructure/ui-responsive';
import { View } from '@instructure/ui-view';
import { READY, RECORDING } from '../../../constants/CaptureStates';
import { translate } from '../../../constants/translated/translations';
/**
---
private: true
---
**/

var CTA = /*#__PURE__*/function (_Component) {
  _inherits(CTA, _Component);

  var _super = _createSuper(CTA);

  function CTA() {
    var _this;

    _classCallCheck(this, CTA);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.captureRef = function (e) {
      _this.el = e;
    };

    _this.createButton = function (action, string) {
      var _ref = /*#__PURE__*/React.createElement(View, {
        display: "block",
        textAlign: "center"
      }, string);

      var fluidWidth = _this.props.fluidWidth;
      return /*#__PURE__*/React.createElement(Responsive, {
        match: "media",
        query: {
          medium: {
            maxWidth: 767
          }
        }
      }, function (props, matches) {
        return /*#__PURE__*/React.createElement(Button, {
          fluidWidth: fluidWidth,
          onClick: action,
          color: "primary",
          size: matches.includes('medium') ? 'medium' : 'large',
          ref: _this.captureRef
        }, _ref);
      });
    };

    return _this;
  }

  _createClass(CTA, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.hasStarted && this.el && this.el.focus();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.props.hasStarted && this.el && this.el.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          captureState = _this$props.captureState,
          actions = _this$props.actions;

      switch (captureState) {
        case READY:
          return this.createButton(actions.startClicked, translate('START'));

        case RECORDING:
          return this.createButton(actions.finishClicked, translate('FINISH'));

        default:
          return null;
      }
    }
  }]);

  CTA.displayName = "CTA";
  return CTA;
}(Component);

CTA.propTypes = {
  actions: PropTypes.shape({
    startClicked: PropTypes.func.isRequired,
    finishClicked: PropTypes.func.isRequired
  }).isRequired,
  captureState: PropTypes.string.isRequired,
  fluidWidth: PropTypes.bool,
  hasStarted: PropTypes.bool.isRequired
};
CTA.defaultProps = {
  fluidWidth: false
};
export default CTA;
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import themeable from '@instructure/ui-themeable';
import { getUserMedia, getUserAudioOnly, enumerateDevices, getAudioContext } from '../../../core/mediaDevices';
import { startMediaRecorder } from '../../../core/mediaRecorder';
import { LOADING, RECORDING, READY } from '../../../constants/CaptureStates';
import { translate } from '../../../constants/translated/translations';
var styles = {
  componentId: 'fcJRp',
  template: function template(theme) {
    return "\n\n.fcJRp_fvys{display:block;width:100%}";
  },
  'video': 'fcJRp_fvys'
};
var ERRORS = {
  NotAllowedError: 'NOT_ALLOWED_ERROR',
  NotReadableError: 'NOT_READABLE_ERROR',
  TrackStartError: 'NOT_READABLE_ERROR',
  default: 'DEFAULT_ERROR'
};
/**
---
private: true
---
**/

var MediaStream = (_dec = themeable({}, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(MediaStream, _Component);

  var _super = _createSuper(MediaStream);

  function MediaStream() {
    var _this;

    _classCallCheck(this, MediaStream);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.deviceChanged = function (audioId, videoId) {
      return _this.props.audioDeviceId !== audioId || _this.props.videoDeviceId !== videoId;
    };

    _this.onMediaRecorderInit = function (mediaRecorder) {
      _this.props.actions.mediaRecorderInitialized(mediaRecorder);
    };

    _this.streamLoaded = function () {
      _this.props.captureState === LOADING && _this.props.actions.deviceRequestAccepted();
    };

    _this.streamSuccess = function (stream) {
      _this.stream = stream;

      if (_this.video) {
        getAudioContext(_this.stream, _this.soundMeterEmitted, _this.error);

        if (_this.props.audioDeviceId.length === 0) {
          enumerateDevices(_this.deviceSuccess, _this.error);
        }

        _this.video.srcObject = _this.stream;
      }
    };

    _this.soundMeterEmitted = function (sm) {
      _this.props.actions.soundMeterInitialized(sm);
    };

    _this.deviceSuccess = function (types) {
      var _this$stream$getVideo = _this.stream.getVideoTracks(),
          _this$stream$getVideo2 = _slicedToArray(_this$stream$getVideo, 1),
          videoTrack = _this$stream$getVideo2[0];

      _this.props.actions.devicesFound(types, videoTrack);
    };

    _this.blobSuccess = function (blob) {
      // eslint-disable-next-line compat/compat
      var src = window.URL.createObjectURL(blob);

      _this.props.actions.videoObjectGenerated(src, blob);
    };

    _this.error = function (err) {
      if (err) {
        console.error(err);
        var key = ERRORS[err.name] ? err.name : 'default';

        if (typeof _this.props.actions.errorOccurred === 'function') {
          _this.props.actions.errorOccurred(translate(ERRORS[key]));
        }
      }
    };

    return _this;
  }

  _createClass(MediaStream, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return this.props.captureState !== nextProps.captureState || this.deviceChanged(nextProps.audioDeviceId, nextProps.videoDeviceId);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.requestAudioOnly) {
        getUserAudioOnly(this.props.audioDeviceId, this.streamSuccess, this.error);
      } else {
        getUserMedia(this.props.audioDeviceId, this.props.videoDeviceId, this.streamSuccess, this.error);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!this.stream) {
        return;
      }

      if (this.props.captureState === READY) {
        if (this.deviceChanged(prevProps.audioDeviceId, prevProps.videoDeviceId)) {
          this.cleanUp();
          this.stopTracks();

          if (this.props.requestAudioOnly) {
            getUserAudioOnly(this.props.audioDeviceId, this.streamSuccess, this.error);
          } else {
            getUserMedia(this.props.audioDeviceId, this.props.videoDeviceId, this.streamSuccess, this.error);
          }
        }
      }

      if (this.props.captureState === RECORDING) {
        startMediaRecorder(this.stream, this.onMediaRecorderInit, this.blobSuccess, this.error, this.props.requestAudioOnly);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.cleanUp();
      this.stopTracks();
    }
  }, {
    key: "cleanUp",
    value: function cleanUp() {
      if (typeof this.props.actions.cleanUp === 'function') {
        this.props.actions.cleanUp();
      }
    }
  }, {
    key: "stopTracks",
    value: function stopTracks() {
      if (this.stream && typeof this.stream.getTracks === 'function') {
        this.stream.getTracks().forEach(function (t) {
          return t.stop();
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("video", {
        className: styles.video,
        controls: false,
        autoPlay: true,
        muted: true,
        tabIndex: "-1",
        onCanPlay: this.streamLoaded,
        ref: function ref(el) {
          _this2.video = el;
        }
      }));
    }
  }]);

  MediaStream.displayName = "MediaStream";
  return MediaStream;
}(Component), _class2.propTypes = {
  captureState: PropTypes.string.isRequired,
  videoDeviceId: PropTypes.string.isRequired,
  audioDeviceId: PropTypes.string.isRequired,
  requestAudioOnly: PropTypes.bool,
  actions: PropTypes.shape({
    deviceRequestAccepted: PropTypes.func,
    mediaRecorderInitialized: PropTypes.func,
    videoObjectGenerated: PropTypes.func,
    devicesFound: PropTypes.func,
    soundMeterInitialized: PropTypes.func,
    errorOccurred: PropTypes.func,
    cleanUp: PropTypes.func
  })
}, _class2.defaultProps = {
  requestAudioOnly: false,
  actions: {
    deviceRequestAccepted: function deviceRequestAccepted() {},
    devicesFound: function devicesFound() {},
    mediaRecorderInitialized: function mediaRecorderInitialized() {},
    soundMeterInitialized: function soundMeterInitialized() {},
    videoObjectGenerated: function videoObjectGenerated() {},
    errorOccurred: function errorOccurred() {}
  }
}, _temp)) || _class);
export default MediaStream;
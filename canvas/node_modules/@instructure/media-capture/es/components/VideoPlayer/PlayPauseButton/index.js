import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import themeable from '@instructure/ui-themeable';
import { IconPlaySolid, IconPauseSolid } from '@instructure/ui-icons';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import * as VideoStates from '../videoStates';
import { translate } from '../../../constants/translated/translations';
var styles = {
  componentId: 'zgHjQ',
  template: function template(theme) {
    return "\n\n.zgHjQ_EwaR{background-color:".concat(theme.backgroundColor || 'inherit', ";border:").concat(theme.border || 'inherit', ";color:").concat(theme.color || 'inherit', ";cursor:pointer;height:100%;margin-inline-end:").concat(theme.margin || 'inherit', ";margin-inline-start:0;padding:").concat(theme.padding || 'inherit', "}\n\n[dir=ltr] .zgHjQ_EwaR{margin-left:0;margin-right:").concat(theme.margin || 'inherit', "}\n\n[dir=rtl] .zgHjQ_EwaR{margin-left:").concat(theme.margin || 'inherit', ";margin-right:0}\n\n.zgHjQ_EwaR:focus{border:").concat(theme.focusBorderWeight || 'inherit', " solid ").concat(theme.focusBorderColor || 'inherit', ";box-shadow:0 0 0 ").concat(theme.focusOutlineWeight || 'inherit', " ").concat(theme.focusOutlineColor || 'inherit', ";outline:none}");
  },
  'button': 'zgHjQ_EwaR'
};
import theme from './theme';
/**
---
private: true
---
**/

var PlayPauseButton = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(PlayPauseButton, _Component);

  var _super = _createSuper(PlayPauseButton);

  function PlayPauseButton() {
    var _this;

    _classCallCheck(this, PlayPauseButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleKeyDown = function (e) {
      // prevent FF from emitting a keyboard event
      if (e.key === ' ') {
        e.stopPropagation();
      }
    };

    return _this;
  }

  _createClass(PlayPauseButton, [{
    key: "config",
    value: function config(variant) {
      var _VARIANTS;

      var VARIANTS = (_VARIANTS = {}, _defineProperty(_VARIANTS, VideoStates.PAUSED, {
        label: translate('PLAYBACK_PLAY'),
        Icon: IconPlaySolid
      }), _defineProperty(_VARIANTS, VideoStates.ENDED, {
        label: translate('PLAYBACK_PLAY'),
        Icon: IconPlaySolid
      }), _defineProperty(_VARIANTS, VideoStates.PLAYING, {
        label: translate('PLAYBACK_PAUSE'),
        Icon: IconPauseSolid
      }), _VARIANTS);
      return VARIANTS[variant];
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          variant = _this$props.variant,
          onClick = _this$props.onClick,
          buttonRef = _this$props.buttonRef,
          videoId = _this$props.videoId;

      var _this$config = this.config(variant),
          label = _this$config.label,
          Icon = _this$config.Icon;

      return /*#__PURE__*/React.createElement("button", {
        className: styles.button,
        onClick: onClick,
        onKeyDown: this.handleKeyDown,
        "aria-controls": videoId,
        ref: buttonRef
      }, /*#__PURE__*/React.createElement(ScreenReaderContent, null, label), /*#__PURE__*/React.createElement(Icon, {
        size: "x-small"
      }));
    }
  }]);

  PlayPauseButton.displayName = "PlayPauseButton";
  return PlayPauseButton;
}(Component), _class2.propTypes = {
  /**
   * Id of the video element. Used to ensure
   * correct aria properties are applied.
   */
  videoId: PropTypes.string.isRequired,
  variant: PropTypes.oneOf(Object.values(VideoStates)),
  onClick: PropTypes.func,
  buttonRef: PropTypes.func
}, _class2.defaultProps = {
  variant: VideoStates.PAUSED,
  onClick: function onClick(e) {},
  buttonRef: function buttonRef(ref) {}
}, _temp)) || _class);
export default PlayPauseButton;
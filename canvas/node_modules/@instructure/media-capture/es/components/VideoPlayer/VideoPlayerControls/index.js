import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import themeable from '@instructure/ui-themeable';
import PlayPauseButton from '../PlayPauseButton';
import Timebar from '../Timebar';
var styles = {
  componentId: 'ssryr',
  template: function template(theme) {
    return "\n\n.ssryr_crZr{bottom:0;cursor:pointer;display:flex;height:2.8125rem;opacity:1;position:absolute;transition:height 0.25s ease-in-out,opacity 0.25s linear;width:100%}\n\n.ssryr_duqv{height:0;opacity:0}";
  },
  'container': 'ssryr_crZr',
  'hidden': 'ssryr_duqv'
};
import * as VideoStates from '../videoStates';
/**
---
private: true
---
**/

var VideoPlayerControls = (_dec = themeable({}, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(VideoPlayerControls, _Component);

  var _super = _createSuper(VideoPlayerControls);

  function VideoPlayerControls() {
    var _this;

    _classCallCheck(this, VideoPlayerControls);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.preventBubbling = function (e) {
      e.stopPropagation();

      _this.props.actions.showControls();
    };

    _this.handleTimebarClick = function (time) {
      _this.props.actions.seek(time);
    };

    _this.buttonRef = function (el) {
      _this.playButton = el;
    };

    _this.timebarRef = function (el) {
      _this.timebar = el;
    };

    return _this;
  }

  _createClass(VideoPlayerControls, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onMount({
        playButton: this.playButton,
        timebar: this.timebar
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _classes;

      var _this$props = this.props,
          state = _this$props.state,
          duration = _this$props.duration,
          buffered = _this$props.buffered,
          currentTime = _this$props.currentTime,
          showControls = _this$props.showControls,
          actions = _this$props.actions,
          videoId = _this$props.videoId;
      var classes = (_classes = {}, _defineProperty(_classes, styles.container, true), _defineProperty(_classes, styles.hidden, !showControls), _classes);
      /* eslint-disable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */

      return /*#__PURE__*/React.createElement("div", {
        className: classnames(classes),
        onClick: this.preventBubbling
      }, /*#__PURE__*/React.createElement(PlayPauseButton, {
        variant: state,
        onClick: actions.togglePlay,
        videoId: videoId,
        buttonRef: this.buttonRef
      }), /*#__PURE__*/React.createElement(Timebar, {
        duration: duration,
        currentTime: currentTime,
        buffered: buffered,
        videoId: videoId,
        onClick: this.handleTimebarClick,
        timebarRef: this.timebarRef
      }));
      /* eslint-enable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */
    }
  }]);

  VideoPlayerControls.displayName = "VideoPlayerControls";
  return VideoPlayerControls;
}(Component), _class2.propTypes = {
  actions: PropTypes.shape({
    seek: PropTypes.func.isRequired,
    togglePlay: PropTypes.func.isRequired,
    showControls: PropTypes.func.isRequired
  }).isRequired,

  /**
   * Id of the video element. Used to ensure
   * correct aria properties are applied.
   */
  videoId: PropTypes.string.isRequired,
  state: PropTypes.oneOf(Object.values(VideoStates)).isRequired,

  /**
   * Number of seconds that have been buffered.
   */
  buffered: PropTypes.number,

  /**
   * The current playback time in seconds.
   */
  currentTime: PropTypes.number,

  /**
   * The length of the video in seconds.
   */
  duration: PropTypes.number,
  showControls: PropTypes.bool,
  onMount: PropTypes.func
}, _class2.defaultProps = {
  showControls: false,
  duration: 0,
  buffered: 0,
  currentTime: 0,
  onMount: function onMount(_ref) {
    var playButton = _ref.playButton,
        timebar = _ref.timebar;
  }
}, _temp)) || _class);
export default VideoPlayerControls;
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import themeable from '@instructure/ui-themeable';
import uid from '@instructure/uid';
import VideoPlayerControls from './VideoPlayerControls';
import Loading from '../MediaCapture/Loading';
import { translate } from '../../constants/translated/translations';
var styles = {
  componentId: 'sfDYg',
  template: function template(theme) {
    return "\n\n.sfDYg_crZr{position:relative;transition:height 0.1s ease-in-out;width:100%}\n\n.sfDYg_crZr:focus{box-shadow:0 0 0 ".concat(theme.focusOutlineWeight || 'inherit', " ").concat(theme.focusOutlineColor || 'inherit', ";outline:none}\n\n.sfDYg_fvys{display:block;width:100%}");
  },
  'container': 'sfDYg_crZr',
  'video': 'sfDYg_fvys'
};
import theme from './theme';
import { PAUSED, PLAYING, ENDED } from './videoStates';
export var SEEK_INTERVAL_SECONDS = 5;
export var JUMP_INTERVAL_SECONDS = 30;
export var MEDIA_ELEMENT_PROPS = ['onLoadedMetadata', 'onProgress', 'onTimeUpdate', 'onSeeked', 'onEnded'];
/**
---
category: components
experimental: true
---
**/

var _ref = /*#__PURE__*/React.createElement(Loading, null);

var VideoPlayer = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(VideoPlayer, _Component);

  var _super = _createSuper(VideoPlayer);

  function VideoPlayer(props) {
    var _this;

    _classCallCheck(this, VideoPlayer);

    _this = _super.call(this, props);

    _this.handleKeyPress = function (e) {
      var currentTime = _this.state.currentTime;
      var keyHandlers = {
        ArrowLeft: function ArrowLeft() {
          _this.seek(currentTime - SEEK_INTERVAL_SECONDS);
        },
        ArrowRight: function ArrowRight() {
          _this.seek(currentTime + SEEK_INTERVAL_SECONDS);
        },
        PageUp: function PageUp() {
          _this.seek(currentTime + JUMP_INTERVAL_SECONDS);
        },
        PageDown: function PageDown() {
          _this.seek(currentTime - JUMP_INTERVAL_SECONDS);
        },
        ' ': function _() {
          _this.togglePlay();
        }
      };

      if (e.key in keyHandlers) {
        e.preventDefault();

        _this.showControls();

        keyHandlers[e.key]();
      }
    };

    _this.showControls = function () {
      var hideControlsTimeout = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 2500;

      if (_this.props.alwaysShowControls) {
        return;
      }

      if (_this._hideControlsTimeoutId) {
        clearTimeout(_this._hideControlsTimeoutId);
      }

      _this.setState({
        showControls: true
      }, function () {
        _this._hideControlsTimeoutId = setTimeout(function () {
          if (_this.state.state === PLAYING) {
            _this.setState({
              showControls: false
            });
          }
        }, hideControlsTimeout);
      });
    };

    _this.play = function () {
      _this.video.play();
    };

    _this.pause = function () {
      _this.video.pause();
    };

    _this.togglePlay = function () {
      if (_this.state.state === PLAYING) {
        _this.pause();
      } else {
        _this.play();
      }
    };

    _this.seek = function (time) {
      var duration = _this.state.duration;
      _this.video.currentTime = Math.min(Math.max(0, time), duration);
    };

    _this.getDerivedStateFromVideoProps = function () {
      if (!_this.video) {
        return;
      }

      var buffered = _this.video.buffered;
      var state = _this.video.paused ? PAUSED : PLAYING;

      if (_this.video.ended) {
        state = ENDED;
      }

      _this.setState({
        state: state,
        currentTime: _this.video.currentTime,
        duration: _this.video.duration,
        buffered: buffered.length > 0 ? buffered.end(buffered.length - 1) : 0
      }, function () {
        if (_this.state.state === ENDED) {
          _this.seek(0);

          _this.showControls();
        }
      });
    };

    _this.setVideoRef = function (el) {
      if (_this.video === null) {
        _this.video = el;
      }
    };

    _this.hideSpinner = function () {
      _this.setState({
        loadingSrc: false
      });
    };

    _this.video = null;
    _this.state = {
      state: PAUSED,
      loadingSrc: true,
      showControls: true,
      videoId: uid('VideoPlayer')
    };
    return _this;
  }

  _createClass(VideoPlayer, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // remove the video ref and stop applying video props
      this.video = null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          src = _this$props.src,
          controls = _this$props.controls;
      var actions = {
        play: this.play,
        pause: this.pause,
        seek: this.seek,
        showControls: this.showControls,
        togglePlay: this.togglePlay
      };
      var wrapperProps = {
        className: styles.container,
        onKeyDown: this.handleKeyPress,
        onFocus: function onFocus() {
          return _this2.showControls();
        },
        onMouseMove: function onMouseMove() {
          return _this2.showControls();
        },
        onClick: this.togglePlay,
        tabIndex: 0,
        role: 'presentation',
        'aria-label': translate('ARIA_VIDEO_LABEL')
      };
      var updateMediaStateProps = MEDIA_ELEMENT_PROPS.reduce(function (obj, name) {
        return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, name, _this2.getDerivedStateFromVideoProps));
      }, {});
      /* eslint-disable jsx-a11y/media-has-caption, jsx-a11y/no-noninteractive-tabindex */

      return /*#__PURE__*/React.createElement("div", wrapperProps, this.state.loadingSrc && _ref, /*#__PURE__*/React.createElement("video", Object.assign({
        ref: this.setVideoRef,
        src: src,
        id: this.state.videoId,
        className: styles.video,
        tabIndex: "-1",
        onCanPlay: this.hideSpinner
      }, updateMediaStateProps)), controls(this.state, actions));
      /* eslint-enable jsx-a11y/media-has-caption, jsx-a11y/no-noninteractive-tabindex */
    }
  }]);

  VideoPlayer.displayName = "VideoPlayer";
  return VideoPlayer;
}(Component), _class2.propTypes = {
  /**
   * URL of video to play
   */
  src: PropTypes.string.isRequired,

  /**
   * Function invoked on every render with state and actions.
   * Use this to provide a custom set of video controls.
   * Default player controls will be provided if undefined.
   */
  controls: PropTypes.func,

  /**
   * If set to true, the controls will never dismiss.
   */
  alwaysShowControls: PropTypes.bool
}, _class2.defaultProps = {
  controls: function controls(state, actions) {
    return /*#__PURE__*/React.createElement(VideoPlayerControls, Object.assign({}, state, {
      actions: actions
    }));
  },
  alwaysShowControls: false
}, _temp)) || _class);
export default VideoPlayer;
export { VideoPlayerControls };
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Table = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _ThemeablePropTypes = require("@instructure/ui-themeable/lib/ThemeablePropTypes.js");

var _matchComponentTypes = require("@instructure/ui-react-utils/lib/matchComponentTypes.js");

var _safeCloneElement = require("@instructure/ui-react-utils/lib/safeCloneElement.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _Children = require("@instructure/ui-prop-types/lib/Children.js");

var _View = require("@instructure/ui-view/lib/View");

var _ScreenReaderContent = require("@instructure/ui-a11y-content/lib/ScreenReaderContent");

var _theme = _interopRequireDefault(require("./theme.js"));

var _index = require("./Head/index.js");

var _index2 = require("./Body/index.js");

var _index3 = require("./Row/index.js");

var _index4 = require("./ColHeader/index.js");

var _index5 = require("./RowHeader/index.js");

var _index6 = require("./Cell/index.js");

var _dec, _dec2, _class, _class2, _temp;

var styles = {
  componentId: 'erOvu',
  template: function template(theme) {
    return "\n\n.erOvu_bGBk{background:".concat(theme.background || 'inherit', ";border-collapse:collapse;border-spacing:0;color:").concat(theme.color || 'inherit', ";display:table;font-family:").concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', ";width:100%}\n\n.erOvu_bvTK{table-layout:fixed}\n\ncaption{text-align:start}\n\n[dir=ltr] caption{text-align:left}\n\n[dir=rtl] caption{text-align:right}");
  },
  'root': 'erOvu_bGBk',
  'fixedLayout': 'erOvu_bvTK'
};

/**
---
category: components
---
**/
var Table = (_dec = (0, _deprecated.deprecated)('7.0', {
  mode: true
}), _dec2 = (0, _themeable.themeable)(_theme.default, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Table, _Component);

  var _super = (0, _createSuper2.default)(Table);

  function Table() {
    (0, _classCallCheck2.default)(this, Table);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(Table, [{
    key: "getHeaders",
    value: function getHeaders() {
      var children = this.props.children;

      var _Children$toArray = _react.Children.toArray(children),
          _Children$toArray2 = (0, _slicedToArray2.default)(_Children$toArray, 1),
          head = _Children$toArray2[0];

      if ((0, _matchComponentTypes.matchComponentTypes)(head, [_index.Head])) {
        var _Children$toArray3 = _react.Children.toArray(head.props.children),
            _Children$toArray4 = (0, _slicedToArray2.default)(_Children$toArray3, 1),
            row = _Children$toArray4[0];

        if ((0, _matchComponentTypes.matchComponentTypes)(row, [_index3.Row])) {
          return _react.Children.map(row.props.children, function (colHeader) {
            return (0, _matchComponentTypes.matchComponentTypes)(colHeader, [_index4.ColHeader]) ? colHeader.props.children : null;
          });
        }
      }

      return null;
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          margin = _this$props.margin,
          elementRef = _this$props.elementRef,
          layout = _this$props.layout,
          caption = _this$props.caption,
          children = _this$props.children,
          hover = _this$props.hover,
          mode = _this$props.mode;
      var isStacked = layout === 'stacked' || mode === 'stacked';
      var headers = isStacked ? this.getHeaders() : null;
      return /*#__PURE__*/_react.default.createElement(_View.View, Object.assign({}, _View.View.omitViewProps((0, _omitProps.omitProps)(this.props, Table.propTypes), Table), {
        as: isStacked ? 'div' : 'table',
        margin: margin,
        elementRef: elementRef,
        className: (0, _classnames2.default)((_classnames = {}, (0, _defineProperty2.default)(_classnames, styles.root, true), (0, _defineProperty2.default)(_classnames, styles.fixedLayout, layout === 'fixed'), _classnames)),
        role: isStacked ? 'table' : null,
        "aria-label": isStacked ? caption : null
      }), !isStacked && /*#__PURE__*/_react.default.createElement("caption", null, /*#__PURE__*/_react.default.createElement(_ScreenReaderContent.ScreenReaderContent, null, caption)), _react.Children.map(children, function (child) {
        if ((0, _matchComponentTypes.matchComponentTypes)(child, [_index.Head])) {
          return (0, _safeCloneElement.safeCloneElement)(child, {
            key: child.props.name,
            isStacked: isStacked
          });
        }

        if ((0, _matchComponentTypes.matchComponentTypes)(child, [_index2.Body])) {
          return (0, _safeCloneElement.safeCloneElement)(child, {
            key: child.props.name,
            isStacked: isStacked,
            hover: hover,
            headers: headers
          });
        }

        return null;
      }));
    }
  }]);
  Table.displayName = "Table";
  return Table;
}(_react.Component), _class2.propTypes = {
  /**
   * Provide a screen reader friendly description. Anything passed to this
   * prop will be wrapped by `<ScreenReaderContent>` when it is rendered.
   */
  caption: _propTypes.default.node.isRequired,

  /**
   * Build table via `Table.Head` and `Table.Body`
   */
  children: _Children.Children.oneOf([_index.Head, _index2.Body]),

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: _ThemeablePropTypes.ThemeablePropTypes.spacing,

  /**
   * Provide a reference to the underlying html element
   */
  elementRef: _propTypes.default.func,

  /**
   * Highlight each row on hover
   */
  hover: _propTypes.default.bool,

  /**
   * `auto` lets the browser determine table column widths based on cell content,
   * while `fixed` forces columns of equal width. `stacked` renders table in one
   * column to be more readable on narrow screens
   */
  layout: _propTypes.default.oneOf(['auto', 'fixed', 'stacked'])
}, _class2.defaultProps = {
  children: null,
  hover: false,
  layout: 'auto',
  margin: void 0,
  elementRef: void 0
}, _class2.Head = _index.Head, _class2.Body = _index2.Body, _class2.Row = _index3.Row, _class2.ColHeader = _index4.ColHeader, _class2.RowHeader = _index5.RowHeader, _class2.Cell = _index6.Cell, _temp)) || _class) || _class);
exports.Table = Table;
var _default = Table;
exports.default = _default;
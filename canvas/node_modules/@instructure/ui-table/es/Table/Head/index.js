import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component, Children } from 'react';
import PropTypes from 'prop-types';
import { themeable } from '@instructure/ui-themeable';
import { omitProps, matchComponentTypes, callRenderProp } from '@instructure/ui-react-utils';
import { Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import { SimpleSelect } from '@instructure/ui-simple-select';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { IconCheckLine } from '@instructure/ui-icons';
import { warn } from '@instructure/console';
var styles = {
  componentId: 'bGgTf',
  template: function template(theme) {
    return "\n\n.bGgTf_bGBk{background:".concat(theme.background || 'inherit', ";color:").concat(theme.color || 'inherit', ";font-family:").concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', "}");
  },
  'root': 'bGgTf_bGBk'
};
import theme from "./theme.js";
import { Row } from "../Row/index.js";
import { ColHeader } from "../ColHeader/index.js";
/**
---
parent: Table
id: Table.Head
---
**/

var _ref2 = /*#__PURE__*/React.createElement(ScreenReaderContent, null);

var Head = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Head, _Component);

  var _super = _createSuper(Head);

  function Head() {
    _classCallCheck(this, Head);

    return _super.apply(this, arguments);
  }

  _createClass(Head, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.isSortable && typeof this.props.renderSortLabel === 'undefined') {
        warn(false, '[Table.Head] The `renderSortLabel` prop should be provided when Table is sortable.');
      }
    }
  }, {
    key: "renderSelect",
    value: function renderSelect() {
      var _this$props = this.props,
          children = _this$props.children,
          renderSortLabel = _this$props.renderSortLabel;

      var _Children$toArray = Children.toArray(children),
          _Children$toArray2 = _slicedToArray(_Children$toArray, 1),
          row = _Children$toArray2[0];

      if (!matchComponentTypes(row, [Row])) {
        return null;
      }

      var options = [];
      var clickHandlers = {};
      var selectedOption = null;
      var count = 0;
      Children.forEach(row.props.children, function (colHeader) {
        count += 1;

        if (matchComponentTypes(colHeader, [ColHeader])) {
          var _colHeader$props = colHeader.props,
              id = _colHeader$props.id,
              sortDirection = _colHeader$props.sortDirection,
              onRequestSort = _colHeader$props.onRequestSort;

          if (onRequestSort) {
            options.push(id);
            clickHandlers[id] = onRequestSort;

            if (sortDirection !== 'none') {
              selectedOption = id;
            }
          }
        }
      });

      if (!options.length) {
        return null;
      }

      var handleSelect = function handleSelect(event, _ref) {
        var value = _ref.value;
        clickHandlers[value](event, {
          id: value
        });
      };

      return /*#__PURE__*/React.createElement("div", {
        role: "rowgroup"
      }, /*#__PURE__*/React.createElement("div", {
        role: "row"
      }, /*#__PURE__*/React.createElement("div", {
        role: "cell",
        "aria-colspan": count
      }, /*#__PURE__*/React.createElement(SimpleSelect, {
        renderLabel: renderSortLabel ? callRenderProp(renderSortLabel) : _ref2,
        renderBeforeInput: selectedOption && IconCheckLine,
        value: selectedOption,
        onChange: handleSelect
      }, options.map(function (option) {
        return /*#__PURE__*/React.createElement(SimpleSelect.Option, {
          id: option,
          key: option,
          value: option,
          renderBeforeLabel: option === selectedOption ? IconCheckLine : function () {
            return /*#__PURE__*/React.createElement(IconCheckLine, {
              style: {
                color: 'transparent'
              }
            });
          }
        }, option);
      })))));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          isStacked = _this$props2.isStacked;
      return isStacked ? this.renderSelect() : /*#__PURE__*/React.createElement("thead", Object.assign({}, omitProps(this.props, Head.propTypes), {
        className: styles.root
      }), Children.map(children, function (child) {
        return matchComponentTypes(child, [Row]) ? child : null;
      }));
    }
  }, {
    key: "isSortable",

    /* eslint-disable react/require-default-props */

    /* eslint-enable react/require-default-props */
    get: function get() {
      var _Children$toArray3 = Children.toArray(this.props.children),
          _Children$toArray4 = _slicedToArray(_Children$toArray3, 1),
          row = _Children$toArray4[0];

      var sortable = false;
      Children.forEach(row.props.children, function (colHeader) {
        if (matchComponentTypes(colHeader, [ColHeader])) {
          if (colHeader.props.onRequestSort) sortable = true;
        }
      });
      return sortable;
    }
  }]);

  Head.displayName = "Head";
  return Head;
}(Component), _class2.propTypes = {
  /**
   * `Table.Row`
   */
  children: ChildrenPropTypes.oneOf([Row]),
  isStacked: PropTypes.bool,
  renderSortLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.func])
}, _class2.defaultProps = {
  children: null
}, _temp)) || _class);
export default Head;
export { Head };
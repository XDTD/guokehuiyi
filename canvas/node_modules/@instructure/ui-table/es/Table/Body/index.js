import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component, Children } from 'react';
import PropTypes from 'prop-types';
import { themeable } from '@instructure/ui-themeable';
import { matchComponentTypes, safeCloneElement, omitProps } from '@instructure/ui-react-utils';
import { Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import { View } from '@instructure/ui-view';
import { Row } from "../Row/index.js";
var styles = {
  componentId: 'bGgTf',
  template: function template(theme) {
    return "\n\n.bGgTf_bGBk{background:".concat(theme.background || 'inherit', ";color:").concat(theme.color || 'inherit', ";font-family:").concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', "}");
  },
  'root': 'bGgTf_bGBk'
};
import theme from "./theme.js";
/**
---
parent: Table
id: Table.Body
---
**/

var Body = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Body, _Component);

  var _super = _createSuper(Body);

  function Body() {
    _classCallCheck(this, Body);

    return _super.apply(this, arguments);
  }

  _createClass(Body, [{
    key: "render",

    /* eslint-disable react/require-default-props */

    /* eslint-enable react/require-default-props */
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          hover = _this$props.hover,
          isStacked = _this$props.isStacked,
          headers = _this$props.headers;
      return /*#__PURE__*/React.createElement(View, Object.assign({}, View.omitViewProps(omitProps(this.props, Body.propTypes), Body), {
        as: isStacked ? 'div' : 'tbody',
        className: styles.root,
        role: isStacked ? 'rowgroup' : null
      }), Children.map(children, function (child) {
        return matchComponentTypes(child, [Row]) ? safeCloneElement(child, {
          key: child.props.name,
          hover: hover,
          isStacked: isStacked,
          headers: headers
        }) : null;
      }));
    }
  }]);

  Body.displayName = "Body";
  return Body;
}(Component), _class2.propTypes = {
  /**
   * `Table.Row`
   */
  children: ChildrenPropTypes.oneOf([Row]),
  hover: PropTypes.bool,
  isStacked: PropTypes.bool,
  headers: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.node, PropTypes.func]))
}, _class2.defaultProps = {
  children: null
}, _temp)) || _class);
export default Body;
export { Body };
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component, Children } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
import { matchComponentTypes, safeCloneElement, omitProps, deprecated } from '@instructure/ui-react-utils';
import { Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import { View } from '@instructure/ui-view';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
var styles = {
  componentId: 'erOvu',
  template: function template(theme) {
    return "\n\n.erOvu_bGBk{background:".concat(theme.background || 'inherit', ";border-collapse:collapse;border-spacing:0;color:").concat(theme.color || 'inherit', ";display:table;font-family:").concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', ";width:100%}\n\n.erOvu_bvTK{table-layout:fixed}\n\ncaption{text-align:start}\n\n[dir=ltr] caption{text-align:left}\n\n[dir=rtl] caption{text-align:right}");
  },
  'root': 'erOvu_bGBk',
  'fixedLayout': 'erOvu_bvTK'
};
import theme from "./theme.js";
import { Head } from "./Head/index.js";
import { Body } from "./Body/index.js";
import { Row } from "./Row/index.js";
import { ColHeader } from "./ColHeader/index.js";
import { RowHeader } from "./RowHeader/index.js";
import { Cell } from "./Cell/index.js";
/**
---
category: components
---
**/

var Table = (_dec = deprecated('7.0', {
  mode: true
}), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Table, _Component);

  var _super = _createSuper(Table);

  function Table() {
    _classCallCheck(this, Table);

    return _super.apply(this, arguments);
  }

  _createClass(Table, [{
    key: "getHeaders",
    value: function getHeaders() {
      var children = this.props.children;

      var _Children$toArray = Children.toArray(children),
          _Children$toArray2 = _slicedToArray(_Children$toArray, 1),
          head = _Children$toArray2[0];

      if (matchComponentTypes(head, [Head])) {
        var _Children$toArray3 = Children.toArray(head.props.children),
            _Children$toArray4 = _slicedToArray(_Children$toArray3, 1),
            row = _Children$toArray4[0];

        if (matchComponentTypes(row, [Row])) {
          return Children.map(row.props.children, function (colHeader) {
            return matchComponentTypes(colHeader, [ColHeader]) ? colHeader.props.children : null;
          });
        }
      }

      return null;
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          margin = _this$props.margin,
          elementRef = _this$props.elementRef,
          layout = _this$props.layout,
          caption = _this$props.caption,
          children = _this$props.children,
          hover = _this$props.hover,
          mode = _this$props.mode;
      var isStacked = layout === 'stacked' || mode === 'stacked';
      var headers = isStacked ? this.getHeaders() : null;
      return /*#__PURE__*/React.createElement(View, Object.assign({}, View.omitViewProps(omitProps(this.props, Table.propTypes), Table), {
        as: isStacked ? 'div' : 'table',
        margin: margin,
        elementRef: elementRef,
        className: classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles.fixedLayout, layout === 'fixed'), _classnames)),
        role: isStacked ? 'table' : null,
        "aria-label": isStacked ? caption : null
      }), !isStacked && /*#__PURE__*/React.createElement("caption", null, /*#__PURE__*/React.createElement(ScreenReaderContent, null, caption)), Children.map(children, function (child) {
        if (matchComponentTypes(child, [Head])) {
          return safeCloneElement(child, {
            key: child.props.name,
            isStacked: isStacked
          });
        }

        if (matchComponentTypes(child, [Body])) {
          return safeCloneElement(child, {
            key: child.props.name,
            isStacked: isStacked,
            hover: hover,
            headers: headers
          });
        }

        return null;
      }));
    }
  }]);

  Table.displayName = "Table";
  return Table;
}(Component), _class2.propTypes = {
  /**
   * Provide a screen reader friendly description. Anything passed to this
   * prop will be wrapped by `<ScreenReaderContent>` when it is rendered.
   */
  caption: PropTypes.node.isRequired,

  /**
   * Build table via `Table.Head` and `Table.Body`
   */
  children: ChildrenPropTypes.oneOf([Head, Body]),

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: ThemeablePropTypes.spacing,

  /**
   * Provide a reference to the underlying html element
   */
  elementRef: PropTypes.func,

  /**
   * Highlight each row on hover
   */
  hover: PropTypes.bool,

  /**
   * `auto` lets the browser determine table column widths based on cell content,
   * while `fixed` forces columns of equal width. `stacked` renders table in one
   * column to be more readable on narrow screens
   */
  layout: PropTypes.oneOf(['auto', 'fixed', 'stacked'])
}, _class2.defaultProps = {
  children: null,
  hover: false,
  layout: 'auto',
  margin: void 0,
  elementRef: void 0
}, _class2.Head = Head, _class2.Body = Body, _class2.Row = Row, _class2.ColHeader = ColHeader, _class2.RowHeader = RowHeader, _class2.Cell = Cell, _temp)) || _class) || _class);
export default Table;
export { Table };
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { themeable } from '@instructure/ui-themeable';
import { omitProps, callRenderProp } from '@instructure/ui-react-utils';
import { View } from '@instructure/ui-view';
var styles = {
  componentId: 'ccWIh',
  template: function template(theme) {
    return "\n\n.ccWIh_bGBk{background:".concat(theme.background || 'inherit', ";box-sizing:border-box;color:").concat(theme.color || 'inherit', ";font-family:").concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', ";line-height:").concat(theme.lineHeight || 'inherit', ";padding:").concat(theme.padding || 'inherit', ";vertical-align:middle}\n\n.ccWIh_EMjX{text-align:start}\n\n[dir=ltr] .ccWIh_EMjX{text-align:left}\n\n[dir=rtl] .ccWIh_EMjX{text-align:right}\n\n.ccWIh_ImeN,[dir=ltr] .ccWIh_ImeN,[dir=rtl] .ccWIh_ImeN{text-align:center}\n\n.ccWIh_dBtH{text-align:end}\n\n[dir=ltr] .ccWIh_dBtH{text-align:right}\n\n[dir=rtl] .ccWIh_dBtH{text-align:left}");
  },
  'root': 'ccWIh_bGBk',
  'textAlign--start': 'ccWIh_EMjX',
  'textAlign--center': 'ccWIh_ImeN',
  'textAlign--end': 'ccWIh_dBtH'
};
import theme from "./theme.js";
/**
---
parent: Table
id: Table.Cell
---
**/

var Cell = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Cell, _Component);

  var _super = _createSuper(Cell);

  function Cell() {
    _classCallCheck(this, Cell);

    return _super.apply(this, arguments);
  }

  _createClass(Cell, [{
    key: "render",

    /* eslint-disable react/require-default-props */

    /* eslint-enable react/require-default-props */
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          children = _this$props.children,
          textAlign = _this$props.textAlign,
          isStacked = _this$props.isStacked,
          header = _this$props.header;
      return /*#__PURE__*/React.createElement(View, Object.assign({}, View.omitViewProps(omitProps(this.props, Cell.propTypes), Cell), {
        as: isStacked ? 'div' : 'td',
        className: classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles["textAlign--".concat(textAlign)], textAlign), _classnames)),
        role: isStacked ? 'cell' : null
      }), header && callRenderProp(header), header && ': ', callRenderProp(children));
    }
  }]);

  Cell.displayName = "Cell";
  return Cell;
}(Component), _class2.propTypes = {
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
  isStacked: PropTypes.bool,
  header: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
   * Control the text alignment in cell
   */
  textAlign: PropTypes.oneOf(['start', 'center', 'end'])
}, _class2.defaultProps = {
  textAlign: 'start',
  children: null
}, _temp)) || _class);
export default Cell;
export { Cell };
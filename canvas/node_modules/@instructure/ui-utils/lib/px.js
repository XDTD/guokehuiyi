"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.px = px;
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _getFontSize = require("@instructure/ui-dom-utils/lib/getFontSize.js");

var _parseUnit3 = require("./parseUnit.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * ---
 * category: utilities
 * ---
 * Converts a unit value size combination (em, rem, px) to a number representing px
 *
 * Example inputs:
 *  - '100rem'
 *  - '20em'
 *  - '40px'
 *
 * @module px
 *
 * @param {String} val
 * @param {DomNode} el - containing element, for context measure is em (defaults to document.body)
 * @returns {Number} Returns numerical representation of pixels
 */
function px(val, el) {
  var container = el || document.body;

  if (!val || typeof val === 'number') {
    return val;
  }

  var _parseUnit = (0, _parseUnit3.parseUnit)(val),
      _parseUnit2 = (0, _slicedToArray2.default)(_parseUnit, 2),
      num = _parseUnit2[0],
      unit = _parseUnit2[1];

  if (unit === 'rem') {
    return num * (0, _getFontSize.getFontSize)();
  } else if (unit === 'em') {
    return num * (0, _getFontSize.getFontSize)(container);
  } else {
    return num;
  }
}

var _default = px;
exports.default = _default;
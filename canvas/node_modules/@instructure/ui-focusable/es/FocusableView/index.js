import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { View } from '@instructure/ui-view';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
import { deprecated, omitProps } from '@instructure/ui-react-utils';
var styles = {
  componentId: 'cApWW',
  template: function template(theme) {
    return "\n\n.cApWW_bGBk,.cApWW_bGBk[type=button],.cApWW_bGBk[type=reset],.cApWW_bGBk[type=submit]{-moz-appearance:none;-webkit-appearance:none;appearance:none}\n\n.cApWW_bGBk{-ms-user-select:none;-webkit-user-select:none;background:transparent;border:none;box-sizing:border-box;direction:inherit;font-family:".concat(theme.fontFamily || 'inherit', ";margin:0;max-width:100%;outline:none;overflow:visible;position:relative;text-align:inherit;text-decoration:none;touch-action:manipulation;user-select:none}\n\n[dir=ltr] .cApWW_bGBk,[dir=rtl] .cApWW_bGBk{text-align:inherit}");
  },
  'root': 'cApWW_bGBk'
};
import theme from "./theme.js";
/**
---
parent: Focusable
---

__DEPRECATED:__ The `FocusableView` component will be removed in v8.0. Use `View` component from `@instructure/ui-view` instead.

---
 **/

var FocusableView = (_dec = deprecated('8.0.0', null, 'Use @instructure/ui-view/View instead'), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(FocusableView, _Component);

  var _super = _createSuper(FocusableView);

  function FocusableView() {
    _classCallCheck(this, FocusableView);

    return _super.apply(this, arguments);
  }

  _createClass(FocusableView, [{
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          as = _this$props.as,
          children = _this$props.children,
          cursor = _this$props.cursor,
          display = _this$props.display,
          elementRef = _this$props.elementRef,
          focused = _this$props.focused,
          href = _this$props.href,
          margin = _this$props.margin,
          onClick = _this$props.onClick,
          role = _this$props.role,
          shape = _this$props.shape,
          className = _this$props.className,
          to = _this$props.to,
          width = _this$props.width,
          tabIndex = _this$props.tabIndex,
          props = _objectWithoutProperties(_this$props, ["as", "children", "cursor", "display", "elementRef", "focused", "href", "margin", "onClick", "role", "shape", "className", "to", "width", "tabIndex"]);

      var passthroughProps = View.omitViewProps(omitProps(props, FocusableView.propTypes), FocusableView);
      return /*#__PURE__*/React.createElement(View, Object.assign({}, passthroughProps, {
        display: display,
        as: as,
        cursor: cursor,
        withFocusOutline: focused,
        position: "relative",
        focusColor: this.focusColor,
        href: href,
        to: to,
        margin: margin,
        width: width,
        elementRef: elementRef,
        className: classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, className, className), _classnames)),
        role: role || onClick ? role : null,
        tabIndex: onClick && !role ? tabIndex || '0' : tabIndex,
        onClick: onClick,
        borderRadius: shape === 'circular' ? 'circle' : 'medium'
      }), children);
    }
  }, {
    key: "focusColor",
    get: function get() {
      var color = this.props.color;

      if (color === 'error') {
        return 'danger';
      } else if (color === 'inverse') {
        return 'inverse';
      } else {
        return 'info';
      }
    }
  }]);

  FocusableView.displayName = "FocusableView";
  return FocusableView;
}(Component), _class2.propTypes = {
  children: PropTypes.node,

  /**
   * boolean value indicating focus. When true, the focus ring is visible
   */
  focused: PropTypes.bool,

  /**
   * Shape of the focus ring
   */
  shape: PropTypes.oneOf(['circular', 'rectangular']),

  /**
   * Color of the focus ring
   */
  color: PropTypes.oneOf(['primary', 'error', 'inverse']),

  /**
   * provides a reference to the underlying element
   */
  elementRef: PropTypes.func,

  /**
   * the element type to render as (will be `<a>` if href is provided)
   */
  as: PropTypes.elementType,

  /**
   * If `href` is provided, the `<FocusableView />` will render as a link
   */
  href: PropTypes.string,

  /**
   * By default the display prop is 'auto', meaning it takes on the
   * display rules of the html element it's rendered as (see `as` prop).
   */
  display: PropTypes.oneOf(['auto', 'block', 'inline-block', 'flex', 'inline-flex']),

  /**
   * Set the margin using familiar CSS shorthand
   */
  margin: ThemeablePropTypes.spacing,

  /**
   * Specify a mouse cursor to use when hovering over the `<View />`
   */
  cursor: PropTypes.string,

  /**
   * Optionally set a width for the FocusableView (either a string or number)
   */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  role: PropTypes.string,
  onClick: PropTypes.func,
  tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
}, _class2.defaultProps = {
  children: null,
  href: void 0,
  width: void 0,
  margin: void 0,
  onClick: void 0,
  focused: false,
  shape: 'rectangular',
  color: 'primary',
  display: 'inline-block',
  as: 'button',
  elementRef: function elementRef(element) {},
  cursor: 'auto',
  role: null,
  tabIndex: null
}, _temp)) || _class) || _class);
export default FocusableView;
export { FocusableView };
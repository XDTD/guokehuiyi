import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Children, Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
import { safeCloneElement, passthroughProps, deprecated, matchComponentTypes, callRenderProp } from '@instructure/ui-react-utils';
import { View } from '@instructure/ui-view';
import { Item } from "./Item/index.js";
var styles = {
  componentId: 'bDzpk',
  template: function template(theme) {
    return "\n\n.bDzpk_bGBk{box-sizing:border-box;font-family:".concat(theme.fontFamily || 'inherit', "}\n\n.bDzpk_bZNM{flex-direction:column}\n\n.bDzpk_eUXf{flex-direction:column-reverse}\n\n.bDzpk_qOas{flex-direction:row}\n\n.bDzpk_sGoV{flex-direction:row-reverse}\n\n.bDzpk_dyGy{flex-wrap:wrap}\n\n.bDzpk_cdHk{flex-wrap:wrap-reverse}\n\n.bDzpk_ePRQ{flex-wrap:wrap}\n\n.bDzpk_busO{justify-content:flex-start}\n\n.bDzpk_crdn{justify-content:flex-end}\n\n.bDzpk_eRIA{justify-content:center}\n\n.bDzpk_flTs{justify-content:space-around}\n\n.bDzpk_oDLF{justify-content:space-between}\n\n.bDzpk_fZWR{align-items:center}\n\n.bDzpk_cCxO{align-items:flex-start}\n\n.bDzpk_fncw{align-items:flex-end}\n\n.bDzpk_cQFX{align-items:stretch}");
  },
  'root': 'bDzpk_bGBk',
  'column': 'bDzpk_bZNM',
  'column-reverse': 'bDzpk_eUXf',
  'row': 'bDzpk_qOas',
  'row-reverse': 'bDzpk_sGoV',
  'wrap--wrap': 'bDzpk_dyGy',
  'wrap--wrap-reverse': 'bDzpk_cdHk',
  'wrapItems': 'bDzpk_ePRQ',
  'justifyItems--start': 'bDzpk_busO',
  'justifyItems--end': 'bDzpk_crdn',
  'justifyItems--center': 'bDzpk_eRIA',
  'justifyItems--space-around': 'bDzpk_flTs',
  'justifyItems--space-between': 'bDzpk_oDLF',
  'alignItems--center': 'bDzpk_fZWR',
  'alignItems--start': 'bDzpk_cCxO',
  'alignItems--end': 'bDzpk_fncw',
  'alignItems--stretch': 'bDzpk_cQFX'
};
import theme from "./theme.js";
/**
---
category: components
---
@module Flex
**/

var Flex = (_dec = deprecated('8.0.0', {
  inline: 'display',
  wrapItems: 'wrap',
  visualDeug: 'withVisualDebug'
}), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Flex, _Component);

  var _super = _createSuper(Flex);

  function Flex() {
    _classCallCheck(this, Flex);

    return _super.apply(this, arguments);
  }

  _createClass(Flex, [{
    key: "renderChildren",
    value: function renderChildren(children) {
      var _this = this;

      return Children.map(children, function (child) {
        if (child) {
          if (matchComponentTypes(child, ['Item'])) {
            return safeCloneElement(child, _objectSpread({
              withVisualDebug: _this.props.withVisualDebug || _this.props.visualDebug
            }, child.props, {
              /* child visualDebug prop should override parent */
              direction: _this.props.direction.replace(/-reverse/, '')
            }));
          } else {
            return child;
          }
        } else {
          return null;
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _classes;

      var _this$props = this.props,
          as = _this$props.as,
          elementRef = _this$props.elementRef,
          direction = _this$props.direction,
          height = _this$props.height,
          display = _this$props.display,
          margin = _this$props.margin,
          padding = _this$props.padding,
          justifyItems = _this$props.justifyItems,
          textAlign = _this$props.textAlign,
          withVisualDebug = _this$props.withVisualDebug,
          width = _this$props.width,
          wrap = _this$props.wrap,
          visualDebug = _this$props.visualDebug,
          wrapItems = _this$props.wrapItems,
          inline = _this$props.inline;
      var children = callRenderProp(this.props.children); // When flex direction is row, 'center' is the most useful default because it
      // vertically aligns Items. For column direction, though, we want 'stretch'.

      var alignItems = this.props.alignItems || (direction === 'column' || direction === 'column-reverse' ? 'stretch' : 'center');
      var backwardsDisplay = inline ? 'inline-flex' : null;
      var classes = (_classes = {}, _defineProperty(_classes, styles.root, true), _defineProperty(_classes, styles["justifyItems--".concat(justifyItems)], true), _defineProperty(_classes, styles["alignItems--".concat(alignItems)], true), _defineProperty(_classes, styles["wrap--".concat(wrap)], wrap !== 'no-wrap'), _defineProperty(_classes, styles.wrapItems, wrapItems), _classes);

      if (children && React.Children.count(children) > 0) {
        return /*#__PURE__*/React.createElement(View, Object.assign({}, passthroughProps(this.props), {
          className: classnames(classes, styles[direction]),
          elementRef: elementRef,
          as: as,
          display: backwardsDisplay || display,
          width: width,
          height: height,
          margin: margin,
          padding: padding,
          textAlign: textAlign,
          withVisualDebug: withVisualDebug || visualDebug
        }), this.renderChildren(children));
      } else {
        return null;
      }
    }
  }]);

  Flex.displayName = "Flex";
  return Flex;
}(Component), _class2.Item = Item, _class2.propTypes = {
  /**
   * It's recommended that you use `Flex.Item` for children, but you can also pass any markup or a function
   * returning markup. Note that if you do not use `Flex.Item`, the `withVisualDebug` and `direction` props
   * will not automatically be set on the children.
   */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
   * the element type to render as
   */
  as: PropTypes.elementType,

  /**
   * provides a reference to the underlying html root element
   */
  elementRef: PropTypes.func,

  /**
   * Sets the height of the component's container (optional)
   */
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Sets the width of the component's container (optional)
   */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: ThemeablePropTypes.spacing,

  /**
   * Valid values are `0`, `none`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `padding="small x-large large"`.
   */
  padding: ThemeablePropTypes.spacing,

  /**
   * Sets the CSS display rule for the component's container
   */
  display: PropTypes.oneOf(['flex', 'inline-flex']),

  /**
   * Designates the text alignment
   */
  textAlign: PropTypes.oneOf(['start', 'center', 'end']),

  /**
   * Sets the flex-direction to row (horizontal) or column (vertical)
   */
  direction: PropTypes.oneOf(['row', 'column', 'row-reverse', 'column-reverse']),

  /**
   * Aligns Flex.Items on the vertical axis (horizontal if direction is column)
   */
  alignItems: PropTypes.oneOf(['center', 'start', 'end', 'stretch']),

  /**
   * Aligns Flex.Items on the horizontal axis (vertical if direction is column)
   */
  justifyItems: PropTypes.oneOf(['center', 'start', 'end', 'space-around', 'space-between']),

  /**
   * Determines if the Flex.Items should wrap when they exceed their container's width
   */
  wrap: PropTypes.oneOf(['wrap', 'no-wrap', 'wrap-reverse']),

  /**
   * Activate a dotted outline around the component to make building your
   * layout easier
   */
  withVisualDebug: PropTypes.bool,

  /* eslint-disable react/require-default-props */

  /**
   * __Deprecated - use 'display'__
   */
  inline: PropTypes.bool,

  /**
   * __Deprecated - use 'wrap'__
   */
  wrapItems: PropTypes.bool,

  /**
   * __Deprecated - use 'withVisualDebug'__
   */
  visualDebug: PropTypes.bool
  /* eslint-enable react/require-default-props */

}, _class2.defaultProps = {
  children: null,
  as: 'span',
  elementRef: function elementRef(el) {},
  direction: 'row',
  justifyItems: 'start',
  display: 'flex',
  withVisualDebug: false,
  wrap: 'no-wrap',
  width: void 0,
  height: void 0,
  padding: void 0,
  margin: void 0,
  alignItems: void 0,
  textAlign: void 0
}, _temp)) || _class) || _class);
export default Flex;
export { Flex, Item as FlexItem };
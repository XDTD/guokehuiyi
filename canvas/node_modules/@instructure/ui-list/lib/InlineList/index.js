"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineList = exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _View = require("@instructure/ui-view/lib/View");

var _ThemeablePropTypes = require("@instructure/ui-themeable/lib/ThemeablePropTypes.js");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _safeCloneElement = require("@instructure/ui-react-utils/lib/safeCloneElement.js");

var _Children = require("@instructure/ui-prop-types/lib/Children.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _index = require("./InlineListItem/index.js");

var _dec, _class, _class2, _temp;

/**
---
category: components
---
**/
var InlineList = (_dec = (0, _testable.testable)(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(InlineList, _Component);

  var _super = (0, _createSuper2.default)(InlineList);

  function InlineList() {
    (0, _classCallCheck2.default)(this, InlineList);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(InlineList, [{
    key: "renderChildren",
    value: function renderChildren() {
      var _this = this;

      return _react.Children.map(this.props.children, function (child) {
        if (!child) return; // ignore null, falsy children

        return (0, _safeCloneElement.safeCloneElement)(child, {
          delimiter: _this.props.delimiter,
          size: _this.props.size,
          spacing: _this.props.itemSpacing
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          as = _this$props.as,
          margin = _this$props.margin,
          elementRef = _this$props.elementRef,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["as", "margin", "elementRef"]);
      return /*#__PURE__*/_react.default.createElement(_View.View, Object.assign({}, (0, _passthroughProps.passthroughProps)(rest), {
        as: as,
        margin: margin,
        padding: "0",
        elementRef: elementRef,
        display: "block"
      }), this.renderChildren());
    }
  }]);
  InlineList.displayName = "InlineList";
  return InlineList;
}(_react.Component), _class2.propTypes = {
  /**
   * Only accepts `<InlineList.Item>` as a child
   */
  children: _Children.Children.oneOf([_index.InlineListItem]),
  as: _propTypes.default.oneOf(['ul', 'ol']),

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: _ThemeablePropTypes.ThemeablePropTypes.spacing,
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),
  delimiter: _propTypes.default.oneOf(['none', 'pipe', 'slash', 'arrow']),

  /**
   * Sets the margin separating each ListItem.
   */
  itemSpacing: _propTypes.default.oneOf(['none', 'xxx-small', 'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large']),
  elementRef: _propTypes.default.func
}, _class2.defaultProps = {
  children: null,
  itemSpacing: 'none',
  elementRef: function elementRef(el) {},
  as: 'ul',
  margin: 'none',
  delimiter: 'none',
  size: 'medium'
}, _class2.Item = _index.InlineListItem, _temp)) || _class);
exports.InlineList = InlineList;
var _default = InlineList;
exports.default = _default;
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Children, Component } from 'react';
import PropTypes from 'prop-types';
import { View } from '@instructure/ui-view';
import { ThemeablePropTypes } from '@instructure/ui-themeable';
import { passthroughProps, safeCloneElement } from '@instructure/ui-react-utils';
import { Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import { testable } from '@instructure/ui-testable';
import { InlineListItem } from "./InlineListItem/index.js";
/**
---
category: components
---
**/

var InlineList = (_dec = testable(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(InlineList, _Component);

  var _super = _createSuper(InlineList);

  function InlineList() {
    _classCallCheck(this, InlineList);

    return _super.apply(this, arguments);
  }

  _createClass(InlineList, [{
    key: "renderChildren",
    value: function renderChildren() {
      var _this = this;

      return Children.map(this.props.children, function (child) {
        if (!child) return; // ignore null, falsy children

        return safeCloneElement(child, {
          delimiter: _this.props.delimiter,
          size: _this.props.size,
          spacing: _this.props.itemSpacing
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          as = _this$props.as,
          margin = _this$props.margin,
          elementRef = _this$props.elementRef,
          rest = _objectWithoutProperties(_this$props, ["as", "margin", "elementRef"]);

      return /*#__PURE__*/React.createElement(View, Object.assign({}, passthroughProps(rest), {
        as: as,
        margin: margin,
        padding: "0",
        elementRef: elementRef,
        display: "block"
      }), this.renderChildren());
    }
  }]);

  InlineList.displayName = "InlineList";
  return InlineList;
}(Component), _class2.propTypes = {
  /**
   * Only accepts `<InlineList.Item>` as a child
   */
  children: ChildrenPropTypes.oneOf([InlineListItem]),
  as: PropTypes.oneOf(['ul', 'ol']),

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: ThemeablePropTypes.spacing,
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  delimiter: PropTypes.oneOf(['none', 'pipe', 'slash', 'arrow']),

  /**
   * Sets the margin separating each ListItem.
   */
  itemSpacing: PropTypes.oneOf(['none', 'xxx-small', 'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large']),
  elementRef: PropTypes.func
}, _class2.defaultProps = {
  children: null,
  itemSpacing: 'none',
  elementRef: function elementRef(el) {},
  as: 'ul',
  margin: 'none',
  delimiter: 'none',
  size: 'medium'
}, _class2.Item = InlineListItem, _temp)) || _class);
export default InlineList;
export { InlineList };
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleGroup = exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _pickProps = require("@instructure/ui-react-utils/lib/pickProps.js");

var _getElementType = require("@instructure/ui-react-utils/lib/getElementType.js");

var _IconButton = require("@instructure/ui-buttons/lib/IconButton");

var _Transition = require("@instructure/ui-motion/lib/Transition");

var _Expandable = require("@instructure/ui-expandable/lib/Expandable");

var _controllable = require("@instructure/ui-prop-types/lib/controllable.js");

var _isActiveElement = require("@instructure/ui-dom-utils/lib/isActiveElement.js");

var _Flex = require("@instructure/ui-flex/lib/Flex");

var _View = require("@instructure/ui-view/lib/View");

var _IconArrowOpenEndSolid = require("@instructure/ui-icons/lib/IconArrowOpenEndSolid.js");

var _IconArrowOpenDownSolid = require("@instructure/ui-icons/lib/IconArrowOpenDownSolid.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _dec, _class, _class2, _temp;

/**
---
category: components
---
**/
var ToggleGroup = (_dec = (0, _testable.testable)(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(ToggleGroup, _Component);

  var _super = (0, _createSuper2.default)(ToggleGroup);

  function ToggleGroup() {
    var _this;

    (0, _classCallCheck2.default)(this, ToggleGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._button = null;
    _this._shouldTransition = false;
    return _this;
  }

  (0, _createClass2.default)(ToggleGroup, [{
    key: "focus",
    value: function focus() {
      this._button.focus();
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._shouldTransition = true;
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(expanded) {
      var Icon = expanded ? this.props.iconExpanded : this.props.icon;
      return /*#__PURE__*/_react.default.createElement(Icon, null);
    }
  }, {
    key: "renderToggle",
    value: function renderToggle(toggleProps, expanded) {
      var _this2 = this;

      var _this$props = this.props,
          toggleLabel = _this$props.toggleLabel,
          size = _this$props.size;
      var label;

      if (typeof toggleLabel === 'function') {
        label = toggleLabel(expanded);
      } else {
        label = toggleLabel;
      }

      return /*#__PURE__*/_react.default.createElement(_IconButton.IconButton, Object.assign({}, toggleProps, {
        withBackground: false,
        withBorder: false,
        size: size === 'large' ? 'medium' : 'small',
        elementRef: function elementRef(el) {
          _this2._button = el;
        },
        screenReaderLabel: label
      }), this.renderIcon(expanded));
    }
  }, {
    key: "renderDetails",
    value: function renderDetails(detailsProps) {
      return /*#__PURE__*/_react.default.createElement(_View.View, Object.assign({}, detailsProps, {
        display: "block",
        borderWidth: "small none none none"
      }), this.props.transition && this._shouldTransition ? /*#__PURE__*/_react.default.createElement(_Transition.Transition, {
        transitionOnMount: true,
        in: true,
        type: "fade"
      }, this.props.children) : this.props.children);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var Element = (0, _getElementType.getElementType)(ToggleGroup, this.props);
      return /*#__PURE__*/_react.default.createElement(_Expandable.Expandable, (0, _pickProps.pickProps)(this.props, _Expandable.Expandable.propTypes), function (_ref) {
        var expanded = _ref.expanded,
            getToggleProps = _ref.getToggleProps,
            getDetailsProps = _ref.getDetailsProps;
        return /*#__PURE__*/_react.default.createElement(_View.View, Object.assign({}, (0, _omitProps.omitProps)(_this3.props, ToggleGroup.propTypes), {
          borderWidth: _this3.props.border ? 'small' : 'none',
          as: Element,
          elementRef: _this3.props.elementRef,
          display: "block",
          borderRadius: "medium",
          background: "primary"
        }), /*#__PURE__*/_react.default.createElement(_Flex.Flex, {
          padding: _this3.props.size === 'small' ? 'x-small' : 'small small small x-small'
        }, /*#__PURE__*/_react.default.createElement(_Flex.Flex.Item, null, _this3.renderToggle(getToggleProps(), expanded)), /*#__PURE__*/_react.default.createElement(_Flex.Flex.Item, {
          shouldGrow: true,
          shouldShrink: true,
          padding: "0 0 0 x-small"
        }, _this3.props.summary)), expanded ? _this3.renderDetails(getDetailsProps()) : /*#__PURE__*/_react.default.createElement("span", getDetailsProps()));
      });
    }
  }, {
    key: "focused",
    get: function get() {
      return (0, _isActiveElement.isActiveElement)(this._button);
    }
  }]);
  ToggleGroup.displayName = "ToggleGroup";
  return ToggleGroup;
}(_react.Component), _class2.propTypes = {
  /**
   * the content to show and hide
   */
  children: _propTypes.default.node.isRequired,

  /**
   * the content area next to the toggle button
   */
  summary: _propTypes.default.node.isRequired,

  /**
   * provides a screenreader label for the toggle button
   * (takes `expanded` as an argument if a function)
   */
  toggleLabel: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]).isRequired,

  /**
   * the element type to render as
   */
  as: _propTypes.default.elementType,

  /**
   * provides a reference to the underlying html root element
   */
  elementRef: _propTypes.default.func,
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),

  /**
   * Whether the content is expanded or hidden
   */
  expanded: (0, _controllable.controllable)(_propTypes.default.bool, 'onToggle', 'defaultExpanded'),

  /**
   * Whether the content is initially expanded or hidden (uncontrolled)
   */
  defaultExpanded: _propTypes.default.bool,

  /**
   * Fired when the content display is toggled
   */
  onToggle: _propTypes.default.func,

  /**
   * The icon displayed in the toggle button when the content is hidden
   */
  icon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * The icon displayed in the toggle button when the content is showing
   */
  iconExpanded: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * Transition content into view
   */
  transition: _propTypes.default.bool,

  /**
   * Toggle the border around the component
   */
  border: _propTypes.default.bool
}, _class2.defaultProps = {
  expanded: void 0,
  size: 'medium',
  icon: _IconArrowOpenEndSolid.IconArrowOpenEndSolid,
  iconExpanded: _IconArrowOpenDownSolid.IconArrowOpenDownSolid,
  defaultExpanded: false,
  onToggle: function onToggle(event, expanded) {},
  transition: true,
  as: 'span',
  elementRef: function elementRef(el) {},
  border: true
}, _temp)) || _class);
exports.ToggleGroup = ToggleGroup;
var _default = ToggleGroup;
exports.default = _default;
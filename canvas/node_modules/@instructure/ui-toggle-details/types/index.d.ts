import * as React from 'react';

export type ToggleDetailsVariant = "default" | "filled";

export type ToggleDetailsIconPosition = "start" | "end";

export type ToggleDetailsSize = "small" | "medium" | "large";

export interface ToggleDetailsProps {
    variant?: ToggleDetailsVariant;
    /**
     * The summary that displays and can be interacted with
     */
    summary: React.ReactNode;
    /**
     * Whether the content is expanded or hidden
     */
    expanded?: any;
    /**
     * Whether the content is initially expanded or hidden (uncontrolled)
     */
    defaultExpanded?: boolean;
    onToggle?: (...args: any[])=>any;
    /**
     * The icon to display next to the summary text when content is hidden
     */
    icon?: (...args: any[])=>any;
    /**
     * The icon to display when content is expanded
     */
    iconExpanded?: (...args: any[])=>any;
    /**
     * Icon position at the start or end of the summary text
     */
    iconPosition?: ToggleDetailsIconPosition;
    /**
     * should the summary fill the width of its container
     */
    fluidWidth?: boolean;
    /**
     * The toggleable content passed inside the ToggleDetails component
     */
    children?: React.ReactNode;
    /**
     * Choose a size for the expand/collapse icon
     */
    size?: ToggleDetailsSize;
}

export class ToggleDetails extends React.Component<ToggleDetailsProps, any> {
    render(): JSX.Element;

}




export type ToggleGroupToggleLabel = React.ReactNode | ((...args: any[])=>any);

export type ToggleGroupSize = "small" | "medium" | "large";

export type ToggleGroupIcon = React.ReactNode | ((...args: any[])=>any);

export type ToggleGroupIconExpanded = React.ReactNode | ((...args: any[])=>any);

export interface ToggleGroupProps {
    /**
     * the content to show and hide
     */
    children: React.ReactNode;
    /**
     * the content area next to the toggle button
     */
    summary: React.ReactNode;
    /**
     * provides a screenreader label for the toggle button
     * (takes `expanded` as an argument if a function)
     */
    toggleLabel: ToggleGroupToggleLabel;
    /**
     * the element type to render as
     */
    as?: any;
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (...args: any[])=>any;
    size?: ToggleGroupSize;
    /**
     * Whether the content is expanded or hidden
     */
    expanded?: any;
    /**
     * Whether the content is initially expanded or hidden (uncontrolled)
     */
    defaultExpanded?: boolean;
    /**
     * Fired when the content display is toggled
     */
    onToggle?: (...args: any[])=>any;
    /**
     * The icon displayed in the toggle button when the content is hidden
     */
    icon?: ToggleGroupIcon;
    /**
     * The icon displayed in the toggle button when the content is showing
     */
    iconExpanded?: ToggleGroupIconExpanded;
    /**
     * Transition content into view
     */
    transition?: boolean;
    /**
     * Toggle the border around the component
     */
    border?: boolean;
}

export class ToggleGroup extends React.Component<ToggleGroupProps, any> {
    render(): JSX.Element;

}


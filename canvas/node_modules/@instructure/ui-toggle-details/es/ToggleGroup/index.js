import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { omitProps, pickProps, getElementType } from '@instructure/ui-react-utils';
import { IconButton } from '@instructure/ui-buttons';
import { Transition } from '@instructure/ui-motion';
import { Expandable } from '@instructure/ui-expandable';
import { controllable } from '@instructure/ui-prop-types';
import { isActiveElement } from '@instructure/ui-dom-utils';
import { Flex } from '@instructure/ui-flex';
import { View } from '@instructure/ui-view';
import { IconArrowOpenEndSolid, IconArrowOpenDownSolid } from '@instructure/ui-icons';
import { testable } from '@instructure/ui-testable';
/**
---
category: components
---
**/

var ToggleGroup = (_dec = testable(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(ToggleGroup, _Component);

  var _super = _createSuper(ToggleGroup);

  function ToggleGroup() {
    var _this;

    _classCallCheck(this, ToggleGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._button = null;
    _this._shouldTransition = false;
    return _this;
  }

  _createClass(ToggleGroup, [{
    key: "focus",
    value: function focus() {
      this._button.focus();
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._shouldTransition = true;
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(expanded) {
      var Icon = expanded ? this.props.iconExpanded : this.props.icon;
      return /*#__PURE__*/React.createElement(Icon, null);
    }
  }, {
    key: "renderToggle",
    value: function renderToggle(toggleProps, expanded) {
      var _this2 = this;

      var _this$props = this.props,
          toggleLabel = _this$props.toggleLabel,
          size = _this$props.size;
      var label;

      if (typeof toggleLabel === 'function') {
        label = toggleLabel(expanded);
      } else {
        label = toggleLabel;
      }

      return /*#__PURE__*/React.createElement(IconButton, Object.assign({}, toggleProps, {
        withBackground: false,
        withBorder: false,
        size: size === 'large' ? 'medium' : 'small',
        elementRef: function elementRef(el) {
          _this2._button = el;
        },
        screenReaderLabel: label
      }), this.renderIcon(expanded));
    }
  }, {
    key: "renderDetails",
    value: function renderDetails(detailsProps) {
      return /*#__PURE__*/React.createElement(View, Object.assign({}, detailsProps, {
        display: "block",
        borderWidth: "small none none none"
      }), this.props.transition && this._shouldTransition ? /*#__PURE__*/React.createElement(Transition, {
        transitionOnMount: true,
        in: true,
        type: "fade"
      }, this.props.children) : this.props.children);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var Element = getElementType(ToggleGroup, this.props);
      return /*#__PURE__*/React.createElement(Expandable, pickProps(this.props, Expandable.propTypes), function (_ref) {
        var expanded = _ref.expanded,
            getToggleProps = _ref.getToggleProps,
            getDetailsProps = _ref.getDetailsProps;
        return /*#__PURE__*/React.createElement(View, Object.assign({}, omitProps(_this3.props, ToggleGroup.propTypes), {
          borderWidth: _this3.props.border ? 'small' : 'none',
          as: Element,
          elementRef: _this3.props.elementRef,
          display: "block",
          borderRadius: "medium",
          background: "primary"
        }), /*#__PURE__*/React.createElement(Flex, {
          padding: _this3.props.size === 'small' ? 'x-small' : 'small small small x-small'
        }, /*#__PURE__*/React.createElement(Flex.Item, null, _this3.renderToggle(getToggleProps(), expanded)), /*#__PURE__*/React.createElement(Flex.Item, {
          shouldGrow: true,
          shouldShrink: true,
          padding: "0 0 0 x-small"
        }, _this3.props.summary)), expanded ? _this3.renderDetails(getDetailsProps()) : /*#__PURE__*/React.createElement("span", getDetailsProps()));
      });
    }
  }, {
    key: "focused",
    get: function get() {
      return isActiveElement(this._button);
    }
  }]);

  ToggleGroup.displayName = "ToggleGroup";
  return ToggleGroup;
}(Component), _class2.propTypes = {
  /**
   * the content to show and hide
   */
  children: PropTypes.node.isRequired,

  /**
   * the content area next to the toggle button
   */
  summary: PropTypes.node.isRequired,

  /**
   * provides a screenreader label for the toggle button
   * (takes `expanded` as an argument if a function)
   */
  toggleLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,

  /**
   * the element type to render as
   */
  as: PropTypes.elementType,

  /**
   * provides a reference to the underlying html root element
   */
  elementRef: PropTypes.func,
  size: PropTypes.oneOf(['small', 'medium', 'large']),

  /**
   * Whether the content is expanded or hidden
   */
  expanded: controllable(PropTypes.bool, 'onToggle', 'defaultExpanded'),

  /**
   * Whether the content is initially expanded or hidden (uncontrolled)
   */
  defaultExpanded: PropTypes.bool,

  /**
   * Fired when the content display is toggled
   */
  onToggle: PropTypes.func,

  /**
   * The icon displayed in the toggle button when the content is hidden
   */
  icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
   * The icon displayed in the toggle button when the content is showing
   */
  iconExpanded: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
   * Transition content into view
   */
  transition: PropTypes.bool,

  /**
   * Toggle the border around the component
   */
  border: PropTypes.bool
}, _class2.defaultProps = {
  expanded: void 0,
  size: 'medium',
  icon: IconArrowOpenEndSolid,
  iconExpanded: IconArrowOpenDownSolid,
  defaultExpanded: false,
  onToggle: function onToggle(event, expanded) {},
  transition: true,
  as: 'span',
  elementRef: function elementRef(el) {},
  border: true
}, _temp)) || _class);
export default ToggleGroup;
export { ToggleGroup };
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { locator } from '@instructure/ui-test-locator';
import { ToggleDetails } from "./index.js";
var ToggleLocator = locator('[aria-expanded][aria-controls]');
export var customMethods = {
  clickToggle: function () {
    var _clickToggle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(element) {
      var _yield$ToggleLocator$;

      var _len,
          args,
          _key,
          _args = arguments;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = _args[_key];
              }

              _context.next = 3;
              return ToggleLocator.find(element);

            case 3:
              return _context.abrupt("return", (_yield$ToggleLocator$ = _context.sent).click.apply(_yield$ToggleLocator$, args));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function clickToggle(_x) {
      return _clickToggle.apply(this, arguments);
    }

    return clickToggle;
  }(),
  findToggle: function findToggle() {
    return ToggleLocator.find.apply(ToggleLocator, arguments);
  },
  findContent: function () {
    var _findContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(element) {
      var toggle,
          _locator,
          _len2,
          args,
          _key2,
          _args2 = arguments;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return ToggleLocator.find(element);

            case 2:
              toggle = _context2.sent;

              if (!toggle) {
                _context2.next = 8;
                break;
              }

              for (_len2 = _args2.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = _args2[_key2];
              }

              return _context2.abrupt("return", (_locator = locator("#".concat(toggle.getAttribute('aria-controls')))).find.apply(_locator, args));

            case 8:
              return _context2.abrupt("return", null);

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function findContent(_x2) {
      return _findContent.apply(this, arguments);
    }

    return findContent;
  }()
};
export var ToggleDetailsLocator = locator(ToggleDetails.selector, customMethods);
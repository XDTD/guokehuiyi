"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PositionContentLocator", {
  enumerable: true,
  get: function get() {
    return _PositionContentLocator.PositionContentLocator;
  }
});
Object.defineProperty(exports, "PositionTargetLocator", {
  enumerable: true,
  get: function get() {
    return _PositionTargetLocator.PositionTargetLocator;
  }
});
exports.PositionLocator = exports.customMethods = void 0;

var _locator3 = require("@instructure/ui-test-locator/lib/utils/locator.js");

var _index = require("./index.js");

var _PositionContentLocator = require("./PositionContentLocator.js");

var _PositionTargetLocator = require("./PositionTargetLocator.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var customMethods = {
  findTarget: function findTarget(element) {
    if (element && element.getAttribute) {
      var _locator;

      var id = element.getAttribute(_index.Position.locatorAttribute);

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return (_locator = (0, _locator3.locator)("[".concat(_index.Position.targetLocatorAttribute, "=\"").concat(id, "\"]"))).find.apply(_locator, args);
    } else {
      return null;
    }
  },
  findContent: function findContent(element) {
    if (element && element.getAttribute) {
      var _locator2;

      var id = element.getAttribute(_index.Position.locatorAttribute);

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return (_locator2 = (0, _locator3.locator)("[".concat(_index.Position.contentLocatorAttribute, "=\"").concat(id, "\"]"))).find.apply(_locator2, args);
    } else {
      return null;
    }
  }
};
exports.customMethods = customMethods;
var PositionLocator = (0, _locator3.locator)(_index.Position.selector, customMethods);
exports.PositionLocator = PositionLocator;
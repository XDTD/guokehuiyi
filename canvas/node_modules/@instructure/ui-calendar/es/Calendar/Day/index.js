import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { View } from '@instructure/ui-view';
import { AccessibleContent } from '@instructure/ui-a11y-content';
import { omitProps, callRenderProp, getElementType } from '@instructure/ui-react-utils';
import { I18nPropTypes } from '@instructure/ui-i18n';
import testable from '@instructure/ui-testable';
import themeable from '@instructure/ui-themeable';
var styles = {
  componentId: 'euGrj',
  template: function template(theme) {
    return "\n\n.euGrj_bGBk{padding:0}\n\n.euGrj_eLxY{align-items:center;background:".concat(theme.background || 'inherit', ";border:none;color:").concat(theme.color || 'inherit', ";display:flex;font-size:").concat(theme.fontSize || 'inherit', ";height:").concat(theme.height || 'inherit', ";justify-content:center;line-height:1;margin:0;min-width:").concat(theme.minWidth || 'inherit', ";text-decoration:none}\n\n.euGrj_dtTm{color:").concat(theme.outsideMonthColor || 'inherit', "}\n\n.euGrj_fGhm{background:").concat(theme.selectedBackground || 'inherit', ";border-radius:").concat(theme.selectedBorderRadius || 'inherit', ";color:").concat(theme.selectedColor || 'inherit', "}\n\n.euGrj_fxYf{background:").concat(theme.todayBackground || 'inherit', ";border-radius:").concat(theme.todayBorderRadius || 'inherit', ";color:").concat(theme.todayColor || 'inherit', "}\n\n.euGrj_ywdX{opacity:0.5}");
  },
  'root': 'euGrj_bGBk',
  'day': 'euGrj_eLxY',
  'outsideMonth': 'euGrj_dtTm',
  'selected': 'euGrj_fGhm',
  'today': 'euGrj_fxYf',
  'disabled': 'euGrj_ywdX'
};
import theme from "./theme.js";
/**
---
parent: Calendar
id: Calendar.Day
---
**/

var Day = (_dec = testable(), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Day, _Component);

  var _super = _createSuper(Day);

  function Day() {
    var _this;

    _classCallCheck(this, Day);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleClick = function (event) {
      var _this$props = _this.props,
          onClick = _this$props.onClick,
          date = _this$props.date;

      if (typeof onClick === 'function') {
        onClick(event, {
          date: date
        });
      }
    };

    _this.handleKeyDown = function (event) {
      var _this$props2 = _this.props,
          onKeyDown = _this$props2.onKeyDown,
          date = _this$props2.date;

      if (typeof onKeyDown === 'function') {
        onKeyDown(event, {
          date: date
        });
      }
    };

    _this.handleElementRef = function (el) {
      var elementRef = _this.props.elementRef;
      elementRef(el);
    };

    return _this;
  }

  _createClass(Day, [{
    key: "shouldApplyAriaSelected",
    value: function shouldApplyAriaSelected() {
      var role = this.props.role; // eslint-disable-line react/prop-types

      return ['option', 'gridcell'].indexOf(role) > -1;
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props3 = this.props,
          children = _this$props3.children,
          label = _this$props3.label,
          interaction = _this$props3.interaction,
          isOutsideMonth = _this$props3.isOutsideMonth,
          isSelected = _this$props3.isSelected,
          isToday = _this$props3.isToday,
          onClick = _this$props3.onClick,
          onKeyDown = _this$props3.onKeyDown,
          as = _this$props3.as,
          props = _objectWithoutProperties(_this$props3, ["children", "label", "interaction", "isOutsideMonth", "isSelected", "isToday", "onClick", "onKeyDown", "as"]);

      var elementType = this.elementType,
          isDisabled = this.isDisabled;
      var classes = classnames((_classnames = {}, _defineProperty(_classnames, styles.day, true), _defineProperty(_classnames, styles.outsideMonth, isOutsideMonth), _defineProperty(_classnames, styles.selected, isSelected), _defineProperty(_classnames, styles.today, isToday && !isSelected), _defineProperty(_classnames, styles.disabled, isDisabled), _classnames));
      var passthroughProps = View.omitViewProps(omitProps(props, Day.propTypes), Day);
      return /*#__PURE__*/React.createElement(View, Object.assign({}, passthroughProps, {
        as: elementType,
        className: styles.root,
        display: "inline-block",
        margin: "xxx-small",
        borderWidth: "none",
        borderColor: "transparent",
        background: "transparent",
        cursor: elementType === 'button' || elementType === 'a' ? isDisabled ? 'not-allowed' : 'pointer' : 'auto',
        disabled: isDisabled,
        "aria-current": isToday ? 'date' : null,
        "aria-selected": this.shouldApplyAriaSelected() ? isSelected ? 'true' : 'false' : null,
        onClick: onClick && this.handleClick,
        onKeyDown: onKeyDown && this.handleKeyDown,
        elementRef: this.handleElementRef
      }), /*#__PURE__*/React.createElement("span", {
        className: classes
      }, /*#__PURE__*/React.createElement(AccessibleContent, {
        alt: label
      }, callRenderProp(children))));
    }
  }, {
    key: "isDisabled",
    get: function get() {
      var interaction = this.props.interaction;
      return interaction === 'disabled';
    }
  }, {
    key: "elementType",
    get: function get() {
      var as = this.props.as;
      return as || getElementType(Day, this.props);
    }
  }]);

  Day.displayName = "Day";
  return Day;
}(Component), _class2.propTypes = {
  /**
   * The rendered representation of the corresponding date.
   */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
   * An ISO 8601 formatted string representing the date corresponding to
   * this `<Calendar.Day />`
   */
  date: I18nPropTypes.iso8601.isRequired,

  /**
   * Accessible label to provide more context for the date to assistive
   * technologies. This should consist of more than just a numerical date value.
   * It should also include the month and the year. Ex. instead of just `1`,
   * provide `1 August 2019`.
   */
  label: PropTypes.string.isRequired,

  /**
   * Is the `<Calendar.Day />` disabled
   */
  interaction: PropTypes.oneOf(['enabled', 'disabled']),

  /**
   * Is the `<Calendar.Day />` selected
   */
  isSelected: PropTypes.bool,

  /**
   * Is the `<Calendar.Day />` today
   */
  isToday: PropTypes.bool,

  /**
   * Is the `<Calendar.Day />` located outside the current rendered month
   */
  isOutsideMonth: PropTypes.bool,

  /**
   * Callback fired on click.
   * @param {Object} event - the click event
   * @param {Object} data - additional data
   * @param data.date - the date of the corresponding `<Calendar.Day />`
   */
  onClick: PropTypes.func,

  /**
   * Callback fired on key down.
   * @param {Object} event - the key down event
   * @param {Object} data - additional data
   * @param data.date - the date of the corresponding `<Calendar.Day />`
   */
  onKeyDown: PropTypes.func,

  /**
   * A ref function for the underlying DOM element.
   */
  elementRef: PropTypes.func,

  /**
   * the element type to render as
   */
  as: PropTypes.elementType // eslint-disable-line react/require-default-props

}, _class2.defaultProps = {
  interaction: 'enabled',
  isSelected: false,
  isToday: false,
  isOutsideMonth: false,
  elementRef: function elementRef(el) {},
  onClick: void 0,
  onKeyDown: void 0,
  children: null
}, _temp)) || _class) || _class);
export default Day;
export { Day };
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { error as _error } from "@instructure/console";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Children, Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { View } from '@instructure/ui-view';
import { safeCloneElement, callRenderProp, omitProps } from '@instructure/ui-react-utils';
import { createChainedFunction } from '@instructure/ui-utils';
import { Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import { uid } from '@instructure/uid';
import themeable from '@instructure/ui-themeable';
import testable from '@instructure/ui-testable';
import { Day } from "./Day/index.js";
var styles = {
  componentId: 'duraC',
  template: function template(theme) {
    return "\n\n.duraC_dLrR{background:".concat(theme.background || 'inherit', ";color:").concat(theme.color || 'inherit', ";font-family:").concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', ";margin-bottom:").concat(theme.navMargin || 'inherit', ";text-align:center}\n\n[dir=ltr] .duraC_dLrR,[dir=rtl] .duraC_dLrR{text-align:center}\n\n.duraC_dLrR.duraC_esIz{align-items:center;display:flex;justify-content:space-between}\n\n.duraC_bpmH{max-width:").concat(theme.maxHeaderWidth || 'inherit', ";text-align:center}\n\n[dir=ltr] .duraC_bpmH,[dir=rtl] .duraC_bpmH{text-align:center}");
  },
  'navigation': 'duraC_dLrR',
  'withNavigationButtons': 'duraC_esIz',
  'weekdayHeader': 'duraC_bpmH'
};
import theme from "./theme.js";
/**
---
category: components
---
**/

var Calendar = (_dec = testable(), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Calendar, _Component);

  var _super = _createSuper(Calendar);

  function Calendar() {
    var _this;

    _classCallCheck(this, Calendar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._weekdayHeaderIds = _this.props.renderWeekdayLabels.reduce(function (ids, label, i) {
      return _objectSpread({}, ids, _defineProperty({}, i, uid("weekday-header-".concat(i))));
    }, {});
    return _this;
  }

  _createClass(Calendar, [{
    key: "renderHeader",
    value: function renderHeader() {
      var _classnames;

      var _this$props = this.props,
          renderNextMonthButton = _this$props.renderNextMonthButton,
          renderPrevMonthButton = _this$props.renderPrevMonthButton,
          renderNavigationLabel = _this$props.renderNavigationLabel,
          onRequestRenderNextMonth = _this$props.onRequestRenderNextMonth,
          onRequestRenderPrevMonth = _this$props.onRequestRenderPrevMonth;
      var nextButton = callRenderProp(renderNextMonthButton);
      var prevButton = callRenderProp(renderPrevMonthButton);

      var cloneButton = function cloneButton(button, onClick) {
        return safeCloneElement(button, {
          onClick: createChainedFunction(button.props.onClick, onClick)
        });
      };

      var classes = classnames((_classnames = {}, _defineProperty(_classnames, styles.navigation, true), _defineProperty(_classnames, styles.withNavigationButtons, prevButton || nextButton), _classnames));
      return /*#__PURE__*/React.createElement("div", {
        className: classes
      }, prevButton && cloneButton(prevButton, onRequestRenderPrevMonth), callRenderProp(renderNavigationLabel), nextButton && cloneButton(nextButton, onRequestRenderNextMonth));
    }
  }, {
    key: "renderBody",
    value: function renderBody() {
      return /*#__PURE__*/React.createElement("table", {
        role: this.role
      }, /*#__PURE__*/React.createElement("thead", null, this.renderWeekdayHeaders()), /*#__PURE__*/React.createElement("tbody", null, this.renderDays()));
    }
  }, {
    key: "renderWeekdayHeaders",
    value: function renderWeekdayHeaders() {
      var _this2 = this;

      var renderWeekdayLabels = this.props.renderWeekdayLabels;
      var length = renderWeekdayLabels.length;

      /*#__PURE__*/

      /*#__PURE__*/
      _error(length === 7, "[Calendar] `renderWeekdayLabels` should be an array with 7 labels (one for each weekday). ".concat(length, " provided."));

      return /*#__PURE__*/React.createElement("tr", null, renderWeekdayLabels.map(function (label, i) {
        return /*#__PURE__*/React.createElement("th", {
          key: i,
          scope: "col",
          className: styles.weekdayHeader,
          id: _this2._weekdayHeaderIds[i]
        }, callRenderProp(label));
      }));
    }
  }, {
    key: "renderDays",
    value: function renderDays() {
      var _this3 = this;

      var children = Children.toArray(this.props.children);
      var length = children.length;
      var role = this.role === 'listbox' ? 'presentation' : null;

      /*#__PURE__*/

      /*#__PURE__*/
      _error(length === Calendar.DAY_COUNT, "[Calendar] should have exactly ".concat(Calendar.DAY_COUNT, " children. ").concat(length, " provided."));

      return children.reduce(function (days, day, i) {
        var index = Math.floor(i / 7);
        if (!days[index]) days.push([]);
        days[index].push(day);
        return days;
      }, []).map(function (row) {
        return /*#__PURE__*/React.createElement("tr", {
          key: "row".concat(row[0].props.date),
          role: role
        }, row.map(function (day, i) {
          return /*#__PURE__*/React.createElement("td", {
            key: day.props.date,
            role: role
          }, role === 'presentation' ? safeCloneElement(day, {
            'aria-describedby': _this3._weekdayHeaderIds[i]
          }) : day);
        }));
      });
    }
  }, {
    key: "render",
    value: function render() {
      var passthroughProps = View.omitViewProps(omitProps(this.props, Calendar.propTypes), Calendar);
      return /*#__PURE__*/React.createElement(View, Object.assign({}, passthroughProps, {
        as: this.props.as,
        display: "inline-block",
        padding: "small",
        background: "primary"
      }), this.renderHeader(), this.renderBody());
    }
  }, {
    key: "role",
    get: function get() {
      var role = this.props.role;
      return role === 'listbox' ? role : null;
    }
  }]);

  Calendar.displayName = "Calendar";
  return Calendar;
}(Component), _class2.Day = Day, _class2.DAY_COUNT = 42, _class2.propTypes = {
  /**
   * children of type `<Calendar.Day />` There should be exactly 42 provided (6
   * weeks).
   */
  children: ChildrenPropTypes.oneOf([Day]),

  /**
   * A button to render in the navigation header. The recommendation is to
   * compose it with the [IconButton](#IconButton) component by setting the `size`
   * prop to `small`, `withBorder` and `withBackground` to `false`, and setting
   * `renderIcon` to [IconArrowOpenEnd](#iconography).
   */
  renderNextMonthButton: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
   * A button to render in the navigation header. The recommendation is to
   * compose it with the [IconButton](#Button) component by setting the `size`
   * prop to `small`, `withBorder` and `withBackground` to `false`, and setting
   * `renderIcon` to [IconArrowOpenStart](#iconography).
   */
  renderPrevMonthButton: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
   * Content to render in the navigation header. The recommendation is to include
   * the name of the current rendered month along with the year.
   */
  renderNavigationLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
   * An array of labels containing the name of each day of the week. The visible
   * portion of the label should be abbreviated (no longer than three characters).
   * Note that screen readers will read this content preceding each date as the
   * `<Calendar />` is navigated. Consider using
   * [AccessibleContent](#AccessibleContent) with the `alt` prop containing the
   * full day name for assistive technologies and the children containing the
   * abbreviation. ex. `[<AccessibleContent alt="Sunday">Sun</AccessibleContent>, ...]`
   */
  renderWeekdayLabels: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.node, PropTypes.func])).isRequired,

  /**
   * Callback fired when the next month button is clicked in the navigation
   * header, requesting to render the next month.
   */
  onRequestRenderNextMonth: PropTypes.func,

  /**
   * Callback fired when the previous month button is clicked in the navigation
   * header, requesting to render the previous month.
   */
  onRequestRenderPrevMonth: PropTypes.func,

  /**
   * The element to render as the `Calendar` root, `span` by default
   */
  as: PropTypes.elementType,

  /**
   * The role of the underlying table. This can be set to 'listbox' when
   * assistive technologies need to read the `<Calendar.Day />` children as a list.
   */
  role: PropTypes.oneOf(['table', 'listbox'])
}, _class2.defaultProps = {
  children: null,
  renderNextMonthButton: void 0,
  renderPrevMonthButton: void 0,
  renderNavigationLabel: void 0,
  onRequestRenderNextMonth: function onRequestRenderNextMonth(event) {},
  onRequestRenderPrevMonth: function onRequestRenderPrevMonth(event) {},
  as: 'span',
  role: 'table'
}, _temp)) || _class) || _class);
export default Calendar;
export { Calendar };
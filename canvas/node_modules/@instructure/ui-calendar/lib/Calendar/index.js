"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Calendar = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _console = require("@instructure/console");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _View = require("@instructure/ui-view/lib/View");

var _safeCloneElement = require("@instructure/ui-react-utils/lib/safeCloneElement.js");

var _callRenderProp = require("@instructure/ui-react-utils/lib/callRenderProp.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _createChainedFunction = require("@instructure/ui-utils/lib/createChainedFunction.js");

var _Children = require("@instructure/ui-prop-types/lib/Children.js");

var _uid = require("@instructure/uid");

var _uiThemeable = _interopRequireDefault(require("@instructure/ui-themeable"));

var _uiTestable = _interopRequireDefault(require("@instructure/ui-testable"));

var _index = require("./Day/index.js");

var _theme = _interopRequireDefault(require("./theme.js"));

var _dec, _dec2, _class, _class2, _temp;

var styles = {
  componentId: 'duraC',
  template: function template(theme) {
    return "\n\n.duraC_dLrR{background:".concat(theme.background || 'inherit', ";color:").concat(theme.color || 'inherit', ";font-family:").concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', ";margin-bottom:").concat(theme.navMargin || 'inherit', ";text-align:center}\n\n[dir=ltr] .duraC_dLrR,[dir=rtl] .duraC_dLrR{text-align:center}\n\n.duraC_dLrR.duraC_esIz{align-items:center;display:flex;justify-content:space-between}\n\n.duraC_bpmH{max-width:").concat(theme.maxHeaderWidth || 'inherit', ";text-align:center}\n\n[dir=ltr] .duraC_bpmH,[dir=rtl] .duraC_bpmH{text-align:center}");
  },
  'navigation': 'duraC_dLrR',
  'withNavigationButtons': 'duraC_esIz',
  'weekdayHeader': 'duraC_bpmH'
};

/**
---
category: components
---
**/
var Calendar = (_dec = (0, _uiTestable.default)(), _dec2 = (0, _uiThemeable.default)(_theme.default, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Calendar, _Component);

  var _super = (0, _createSuper2.default)(Calendar);

  function Calendar() {
    var _this;

    (0, _classCallCheck2.default)(this, Calendar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._weekdayHeaderIds = _this.props.renderWeekdayLabels.reduce(function (ids, label, i) {
      return (0, _objectSpread3.default)({}, ids, (0, _defineProperty2.default)({}, i, (0, _uid.uid)("weekday-header-".concat(i))));
    }, {});
    return _this;
  }

  (0, _createClass2.default)(Calendar, [{
    key: "renderHeader",
    value: function renderHeader() {
      var _classnames;

      var _this$props = this.props,
          renderNextMonthButton = _this$props.renderNextMonthButton,
          renderPrevMonthButton = _this$props.renderPrevMonthButton,
          renderNavigationLabel = _this$props.renderNavigationLabel,
          onRequestRenderNextMonth = _this$props.onRequestRenderNextMonth,
          onRequestRenderPrevMonth = _this$props.onRequestRenderPrevMonth;
      var nextButton = (0, _callRenderProp.callRenderProp)(renderNextMonthButton);
      var prevButton = (0, _callRenderProp.callRenderProp)(renderPrevMonthButton);

      var cloneButton = function cloneButton(button, onClick) {
        return (0, _safeCloneElement.safeCloneElement)(button, {
          onClick: (0, _createChainedFunction.createChainedFunction)(button.props.onClick, onClick)
        });
      };

      var classes = (0, _classnames2.default)((_classnames = {}, (0, _defineProperty2.default)(_classnames, styles.navigation, true), (0, _defineProperty2.default)(_classnames, styles.withNavigationButtons, prevButton || nextButton), _classnames));
      return /*#__PURE__*/_react.default.createElement("div", {
        className: classes
      }, prevButton && cloneButton(prevButton, onRequestRenderPrevMonth), (0, _callRenderProp.callRenderProp)(renderNavigationLabel), nextButton && cloneButton(nextButton, onRequestRenderNextMonth));
    }
  }, {
    key: "renderBody",
    value: function renderBody() {
      return /*#__PURE__*/_react.default.createElement("table", {
        role: this.role
      }, /*#__PURE__*/_react.default.createElement("thead", null, this.renderWeekdayHeaders()), /*#__PURE__*/_react.default.createElement("tbody", null, this.renderDays()));
    }
  }, {
    key: "renderWeekdayHeaders",
    value: function renderWeekdayHeaders() {
      var _this2 = this;

      var renderWeekdayLabels = this.props.renderWeekdayLabels;
      var length = renderWeekdayLabels.length;

      /*#__PURE__*/
      ( /*#__PURE__*/0, _console.error)(length === 7, "[Calendar] `renderWeekdayLabels` should be an array with 7 labels (one for each weekday). ".concat(length, " provided."));
      return /*#__PURE__*/_react.default.createElement("tr", null, renderWeekdayLabels.map(function (label, i) {
        return /*#__PURE__*/_react.default.createElement("th", {
          key: i,
          scope: "col",
          className: styles.weekdayHeader,
          id: _this2._weekdayHeaderIds[i]
        }, (0, _callRenderProp.callRenderProp)(label));
      }));
    }
  }, {
    key: "renderDays",
    value: function renderDays() {
      var _this3 = this;

      var children = _react.Children.toArray(this.props.children);

      var length = children.length;
      var role = this.role === 'listbox' ? 'presentation' : null;

      /*#__PURE__*/
      ( /*#__PURE__*/0, _console.error)(length === Calendar.DAY_COUNT, "[Calendar] should have exactly ".concat(Calendar.DAY_COUNT, " children. ").concat(length, " provided."));
      return children.reduce(function (days, day, i) {
        var index = Math.floor(i / 7);
        if (!days[index]) days.push([]);
        days[index].push(day);
        return days;
      }, []).map(function (row) {
        return /*#__PURE__*/_react.default.createElement("tr", {
          key: "row".concat(row[0].props.date),
          role: role
        }, row.map(function (day, i) {
          return /*#__PURE__*/_react.default.createElement("td", {
            key: day.props.date,
            role: role
          }, role === 'presentation' ? (0, _safeCloneElement.safeCloneElement)(day, {
            'aria-describedby': _this3._weekdayHeaderIds[i]
          }) : day);
        }));
      });
    }
  }, {
    key: "render",
    value: function render() {
      var passthroughProps = _View.View.omitViewProps((0, _omitProps.omitProps)(this.props, Calendar.propTypes), Calendar);

      return /*#__PURE__*/_react.default.createElement(_View.View, Object.assign({}, passthroughProps, {
        as: this.props.as,
        display: "inline-block",
        padding: "small",
        background: "primary"
      }), this.renderHeader(), this.renderBody());
    }
  }, {
    key: "role",
    get: function get() {
      var role = this.props.role;
      return role === 'listbox' ? role : null;
    }
  }]);
  Calendar.displayName = "Calendar";
  return Calendar;
}(_react.Component), _class2.Day = _index.Day, _class2.DAY_COUNT = 42, _class2.propTypes = {
  /**
   * children of type `<Calendar.Day />` There should be exactly 42 provided (6
   * weeks).
   */
  children: _Children.Children.oneOf([_index.Day]),

  /**
   * A button to render in the navigation header. The recommendation is to
   * compose it with the [IconButton](#IconButton) component by setting the `size`
   * prop to `small`, `withBorder` and `withBackground` to `false`, and setting
   * `renderIcon` to [IconArrowOpenEnd](#iconography).
   */
  renderNextMonthButton: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * A button to render in the navigation header. The recommendation is to
   * compose it with the [IconButton](#Button) component by setting the `size`
   * prop to `small`, `withBorder` and `withBackground` to `false`, and setting
   * `renderIcon` to [IconArrowOpenStart](#iconography).
   */
  renderPrevMonthButton: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * Content to render in the navigation header. The recommendation is to include
   * the name of the current rendered month along with the year.
   */
  renderNavigationLabel: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * An array of labels containing the name of each day of the week. The visible
   * portion of the label should be abbreviated (no longer than three characters).
   * Note that screen readers will read this content preceding each date as the
   * `<Calendar />` is navigated. Consider using
   * [AccessibleContent](#AccessibleContent) with the `alt` prop containing the
   * full day name for assistive technologies and the children containing the
   * abbreviation. ex. `[<AccessibleContent alt="Sunday">Sun</AccessibleContent>, ...]`
   */
  renderWeekdayLabels: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func])).isRequired,

  /**
   * Callback fired when the next month button is clicked in the navigation
   * header, requesting to render the next month.
   */
  onRequestRenderNextMonth: _propTypes.default.func,

  /**
   * Callback fired when the previous month button is clicked in the navigation
   * header, requesting to render the previous month.
   */
  onRequestRenderPrevMonth: _propTypes.default.func,

  /**
   * The element to render as the `Calendar` root, `span` by default
   */
  as: _propTypes.default.elementType,

  /**
   * The role of the underlying table. This can be set to 'listbox' when
   * assistive technologies need to read the `<Calendar.Day />` children as a list.
   */
  role: _propTypes.default.oneOf(['table', 'listbox'])
}, _class2.defaultProps = {
  children: null,
  renderNextMonthButton: void 0,
  renderPrevMonthButton: void 0,
  renderNavigationLabel: void 0,
  onRequestRenderNextMonth: function onRequestRenderNextMonth(event) {},
  onRequestRenderPrevMonth: function onRequestRenderPrevMonth(event) {},
  as: 'span',
  role: 'table'
}, _temp)) || _class) || _class);
exports.Calendar = Calendar;
var _default = Calendar;
exports.default = _default;
import * as React from 'react';

export type CalendarRenderNextMonthButton = React.ReactNode | ((...args: any[])=>any);

export type CalendarRenderPrevMonthButton = React.ReactNode | ((...args: any[])=>any);

export type CalendarRenderNavigationLabel = React.ReactNode | ((...args: any[])=>any);

export type CalendarRenderWeekdayLabels = React.ReactNode | ((...args: any[])=>any);

export type CalendarRole = "table" | "listbox";

export interface CalendarProps {
    /**
     * children of type `<Calendar.Day />` There should be exactly 42 provided (6
     * weeks).
     */
    children?: any;
    /**
     * A button to render in the navigation header. The recommendation is to
     * compose it with the [IconButton](#IconButton) component by setting the `size`
     * prop to `small`, `withBorder` and `withBackground` to `false`, and setting
     * `renderIcon` to [IconArrowOpenEnd](#iconography).
     */
    renderNextMonthButton?: CalendarRenderNextMonthButton;
    /**
     * A button to render in the navigation header. The recommendation is to
     * compose it with the [IconButton](#Button) component by setting the `size`
     * prop to `small`, `withBorder` and `withBackground` to `false`, and setting
     * `renderIcon` to [IconArrowOpenStart](#iconography).
     */
    renderPrevMonthButton?: CalendarRenderPrevMonthButton;
    /**
     * Content to render in the navigation header. The recommendation is to include
     * the name of the current rendered month along with the year.
     */
    renderNavigationLabel?: CalendarRenderNavigationLabel;
    /**
     * An array of labels containing the name of each day of the week. The visible
     * portion of the label should be abbreviated (no longer than three characters).
     * Note that screen readers will read this content preceding each date as the
     * `<Calendar />` is navigated. Consider using
     * [AccessibleContent](#AccessibleContent) with the `alt` prop containing the
     * full day name for assistive technologies and the children containing the
     * abbreviation. ex. `[<AccessibleContent alt="Sunday">Sun</AccessibleContent>, ...]`
     */
    renderWeekdayLabels: CalendarRenderWeekdayLabels[];
    /**
     * Callback fired when the next month button is clicked in the navigation
     * header, requesting to render the next month.
     */
    onRequestRenderNextMonth?: (...args: any[])=>any;
    /**
     * Callback fired when the previous month button is clicked in the navigation
     * header, requesting to render the previous month.
     */
    onRequestRenderPrevMonth?: (...args: any[])=>any;
    /**
     * The element to render as the `Calendar` root, `span` by default
     */
    as?: any;
    /**
     * The role of the underlying table. This can be set to 'listbox' when
     * assistive technologies need to read the `<Calendar.Day />` children as a list.
     */
    role?: CalendarRole;
}

export class Calendar extends React.Component<CalendarProps, any> {
    render(): JSX.Element;

}


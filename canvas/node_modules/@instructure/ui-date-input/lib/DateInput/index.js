"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateInput = exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Calendar = require("@instructure/ui-calendar/lib/Calendar");

var _IconCalendarMonthLine = require("@instructure/ui-icons/lib/IconCalendarMonthLine.js");

var _Popover = require("@instructure/ui-popover/lib/Popover");

var _Selectable = require("@instructure/ui-selectable/lib/Selectable");

var _TextInput = require("@instructure/ui-text-input/lib/TextInput");

var _createChainedFunction = require("@instructure/ui-utils/lib/createChainedFunction.js");

var _getInteraction = require("@instructure/ui-react-utils/lib/getInteraction.js");

var _callRenderProp = require("@instructure/ui-react-utils/lib/callRenderProp.js");

var _safeCloneElement = require("@instructure/ui-react-utils/lib/safeCloneElement.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _Children = require("@instructure/ui-prop-types/lib/Children.js");

var _controllable = require("@instructure/ui-prop-types/lib/controllable.js");

var _PositionPropTypes = require("@instructure/ui-position/lib/PositionPropTypes.js");

var _FormPropTypes = require("@instructure/ui-form-field/lib/FormPropTypes.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _dec, _dec2, _dec3, _class, _class2, _temp;

var styles = {
  componentId: 'buGWj',
  template: function template(theme) {
    return "\n\n.buGWj_bGBk{display:inline-block}\n\n.buGWj_dJgE{display:none}";
  },
  'root': 'buGWj_bGBk',
  'assistiveText': 'buGWj_dJgE'
};
/**
---
category: components
---
**/

var _ref5 = /*#__PURE__*/_react.default.createElement(_IconCalendarMonthLine.IconCalendarMonthLine, {
  inline: false
});

var DateInput = (_dec = (0, _deprecated.deprecated)('8.0.0', {
  label: 'renderLabel'
}), _dec2 = (0, _testable.testable)(), _dec3 = (0, _themeable.themeable)(null, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(DateInput, _Component);

  var _super = (0, _createSuper2.default)(DateInput);

  function DateInput() {
    var _this;

    (0, _classCallCheck2.default)(this, DateInput);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      hasInputRef: false
    };
    _this._input = null;

    _this.formatDateId = function (date) {
      // ISO8601 strings may contain a space. Remove any spaces before using the
      // date as the id.
      return date.replace(/\s/g, '');
    };

    _this.handleInputRef = function (el) {
      var inputRef = _this.props.inputRef;
      var hasInputRef = _this.state.hasInputRef; // Ensures that we position the Calendar with respect to the input correctly
      // if the Calendar is open on mount

      if (!hasInputRef) {
        _this.setState({
          hasInputRef: true
        });
      }

      _this._input = el;
      inputRef(el);
    };

    _this.handleInputChange = function (event, value) {
      var onChange = _this.props.onChange;
      onChange(event, {
        value: value
      });

      _this.handleShowCalendar(event);
    };

    _this.handleShowCalendar = function (event) {
      var onRequestShowCalendar = _this.props.onRequestShowCalendar;

      var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this),
          interaction = _assertThisInitialize.interaction;

      if (interaction === 'enabled') {
        onRequestShowCalendar(event);
      }
    };

    _this.handleHideCalendar = function (event) {
      var _this$props = _this.props,
          onRequestHideCalendar = _this$props.onRequestHideCalendar,
          onRequestValidateDate = _this$props.onRequestValidateDate;
      onRequestValidateDate(event);
      onRequestHideCalendar(event);
    };

    _this.handleHighlightOption = function (event, _ref) {
      var direction = _ref.direction;
      var _this$props2 = _this.props,
          onRequestSelectNextDay = _this$props2.onRequestSelectNextDay,
          onRequestSelectPrevDay = _this$props2.onRequestSelectPrevDay;
      if (direction === -1) onRequestSelectPrevDay(event);
      if (direction === 1) onRequestSelectNextDay(event);
    };

    return _this;
  }

  (0, _createClass2.default)(DateInput, [{
    key: "renderMonthNavigationButton",
    value: function renderMonthNavigationButton() {
      var type = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'prev';
      var _this$props3 = this.props,
          renderPrevMonthButton = _this$props3.renderPrevMonthButton,
          renderNextMonthButton = _this$props3.renderNextMonthButton;
      var button = type === 'prev' ? renderPrevMonthButton : renderNextMonthButton;
      return button && (0, _safeCloneElement.safeCloneElement)((0, _callRenderProp.callRenderProp)(button), {
        tabIndex: -1
      });
    }
  }, {
    key: "renderDays",
    value: function renderDays(_ref2) {
      var _this2 = this;

      var getOptionProps = _ref2.getOptionProps;
      var children = this.props.children;
      return _react.Children.map(children, function (day) {
        var _day$props = day.props,
            date = _day$props.date,
            isOutsideMonth = _day$props.isOutsideMonth;
        var props = {
          tabIndex: -1,
          id: _this2.formatDateId(date)
        };
        var optionProps = getOptionProps(props);
        props = isOutsideMonth ? (0, _objectSpread2.default)({}, props, {
          onClick: optionProps.onClick,
          role: 'presentation'
        }) : optionProps;
        return (0, _safeCloneElement.safeCloneElement)(day, props);
      });
    }
  }, {
    key: "renderCalendar",
    value: function renderCalendar(_ref3) {
      var getListProps = _ref3.getListProps,
          getOptionProps = _ref3.getOptionProps;
      var _this$props4 = this.props,
          onRequestRenderNextMonth = _this$props4.onRequestRenderNextMonth,
          onRequestRenderPrevMonth = _this$props4.onRequestRenderPrevMonth,
          renderNavigationLabel = _this$props4.renderNavigationLabel,
          renderWeekdayLabels = _this$props4.renderWeekdayLabels;
      return /*#__PURE__*/_react.default.createElement(_Calendar.Calendar, getListProps({
        onRequestRenderNextMonth: onRequestRenderNextMonth,
        onRequestRenderPrevMonth: onRequestRenderPrevMonth,
        renderNavigationLabel: renderNavigationLabel,
        renderWeekdayLabels: renderWeekdayLabels,
        renderNextMonthButton: this.renderMonthNavigationButton('next'),
        renderPrevMonthButton: this.renderMonthNavigationButton('prev')
      }), this.renderDays({
        getOptionProps: getOptionProps
      }));
    }
  }, {
    key: "renderInput",
    value: function renderInput(_ref4) {
      var getInputProps = _ref4.getInputProps,
          getTriggerProps = _ref4.getTriggerProps;
      var _this$props5 = this.props,
          label = _this$props5.label,
          renderLabel = _this$props5.renderLabel,
          value = _this$props5.value,
          placeholder = _this$props5.placeholder,
          onBlur = _this$props5.onBlur,
          isRequired = _this$props5.isRequired,
          size = _this$props5.size,
          isInline = _this$props5.isInline,
          layout = _this$props5.layout,
          width = _this$props5.width,
          messages = _this$props5.messages,
          onRequestValidateDate = _this$props5.onRequestValidateDate,
          onRequestShowCalendar = _this$props5.onRequestShowCalendar,
          onRequestHideCalendar = _this$props5.onRequestHideCalendar,
          onRequestSelectNextDay = _this$props5.onRequestSelectNextDay,
          onRequestSelectPrevDay = _this$props5.onRequestSelectPrevDay,
          onRequestRenderNextMonth = _this$props5.onRequestRenderNextMonth,
          onRequestRenderPrevMonth = _this$props5.onRequestRenderPrevMonth,
          rest = (0, _objectWithoutProperties2.default)(_this$props5, ["label", "renderLabel", "value", "placeholder", "onBlur", "isRequired", "size", "isInline", "layout", "width", "messages", "onRequestValidateDate", "onRequestShowCalendar", "onRequestHideCalendar", "onRequestSelectNextDay", "onRequestSelectPrevDay", "onRequestRenderNextMonth", "onRequestRenderPrevMonth"]);
      var interaction = this.interaction;

      var _getTriggerProps = getTriggerProps(),
          ref = _getTriggerProps.ref,
          triggerProps = (0, _objectWithoutProperties2.default)(_getTriggerProps, ["ref"]);

      return /*#__PURE__*/_react.default.createElement(_TextInput.TextInput, Object.assign({}, triggerProps, (0, _passthroughProps.passthroughProps)(rest), getInputProps({
        renderLabel: (0, _callRenderProp.callRenderProp)(renderLabel || label),
        value: value,
        placeholder: placeholder,
        size: size,
        layout: layout,
        width: width,
        messages: messages,
        onChange: this.handleInputChange,
        onBlur: (0, _createChainedFunction.createChainedFunction)(onBlur, this.handleHideCalendar),
        inputRef: (0, _createChainedFunction.createChainedFunction)(ref, this.handleInputRef),
        interaction: interaction,
        isRequired: isRequired,
        display: isInline ? 'inline-block' : 'block',
        renderAfterInput: _ref5
      })));
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props6 = this.props,
          placement = _this$props6.placement,
          isShowingCalendar = _this$props6.isShowingCalendar,
          assistiveText = _this$props6.assistiveText;
      var selectedDateId = this.selectedDateId;
      return /*#__PURE__*/_react.default.createElement(_Selectable.Selectable, {
        isShowingOptions: isShowingCalendar,
        onRequestShowOptions: this.handleShowCalendar,
        onRequestHideOptions: this.handleHideCalendar,
        onRequestHighlightOption: this.handleHighlightOption,
        onRequestSelectOption: this.handleHideCalendar,
        selectedOptionId: selectedDateId,
        highlightedOptionId: selectedDateId
      }, function (_ref6) {
        var getRootProps = _ref6.getRootProps,
            getInputProps = _ref6.getInputProps,
            getTriggerProps = _ref6.getTriggerProps,
            getListProps = _ref6.getListProps,
            getOptionProps = _ref6.getOptionProps,
            getDescriptionProps = _ref6.getDescriptionProps;
        return /*#__PURE__*/_react.default.createElement("span", getRootProps({
          className: styles.root
        }), _this3.renderInput({
          getInputProps: getInputProps,
          getTriggerProps: getTriggerProps
        }), /*#__PURE__*/_react.default.createElement("span", Object.assign({}, getDescriptionProps(), {
          className: styles.assistiveText
        }), assistiveText), /*#__PURE__*/_react.default.createElement(_Popover.Popover, {
          placement: placement,
          isShowingContent: isShowingCalendar,
          positionTarget: _this3._input,
          shouldReturnFocus: false,
          shouldFocusContentOnTriggerBlur: true
        }, _this3.renderCalendar({
          getListProps: getListProps,
          getOptionProps: getOptionProps
        })));
      });
    }
  }, {
    key: "selectedDateId",
    get: function get() {
      var _this4 = this;

      var selectedDateId;

      _react.Children.toArray(this.props.children).forEach(function (day) {
        var _day$props2 = day.props,
            date = _day$props2.date,
            isSelected = _day$props2.isSelected;
        if (isSelected) selectedDateId = _this4.formatDateId(date);
      });

      return selectedDateId;
    }
  }, {
    key: "interaction",
    get: function get() {
      return (0, _getInteraction.getInteraction)({
        props: this.props
      });
    }
  }]);
  DateInput.displayName = "DateInput";
  return DateInput;
}(_react.Component), _class2.Day = _Calendar.Calendar.Day, _class2.propTypes = {
  /**
   * Specifies the input label.
   */
  renderLabel: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]).isRequired,

  /**
   * __Deprecated - use `renderLabel` instead__
   */
  label: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * Specifies the input value.
   */
  value: (0, _controllable.controllable)(_propTypes.default.string),

  /**
   * Specifies the input size.
   */
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),

  /**
   * Html placeholder text to display when the input has no value. This should
   * be hint text, not a label replacement.
   */
  placeholder: _propTypes.default.string,

  /**
   * Callback executed when the input fires a change event.
   * @param {Object} event - the event object
   * @param {Object} data - additional data
   * @param data.value - the new value
   */
  onChange: _propTypes.default.func,

  /**
   * Callback executed when the input fires a blur event.
   */
  onBlur: _propTypes.default.func,

  /**
   * Specifies if interaction with the input is enabled, disabled, or readonly.
   * When "disabled", the input changes visibly to indicate that it cannot
   * receive user interactions. When "readonly" the input still cannot receive
   * user interactions but it keeps the same styles as if it were enabled.
   */
  interaction: _propTypes.default.oneOf(['enabled', 'disabled', 'readonly']),

  /**
   * Specifies if the input is required.
   */
  isRequired: _propTypes.default.bool,

  /**
   * Controls whether the input is rendered inline with other elements or if it
   * is rendered as a block level element.
   */
  isInline: _propTypes.default.bool,

  /**
   * Additional helpful text to provide to screen readers about the operation
   * of the component.
   */
  assistiveText: _propTypes.default.string,

  /**
   * Controls the layout. When set to `stacked`, the label rests on top of the
   * input. When set to `inline` the label is next to the input.
   */
  layout: _propTypes.default.oneOf(['stacked', 'inline']),

  /**
   * Specifies the width of the input.
   */
  width: _propTypes.default.string,

  /**
   * Provides a ref to the underlying input element.
   */
  inputRef: _propTypes.default.func,

  /**
   * Displays messages and validation for the input. It should be an object
   * with the following shape:
   * `{
   *   text: PropTypes.string,
   *   type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
   * }`
   */
  messages: _propTypes.default.arrayOf(_FormPropTypes.FormPropTypes.message),

  /**
   * The placement of the calendar in relation to the input.
   */
  placement: _PositionPropTypes.PositionPropTypes.placement,

  /**
   * Controls whether or not the calendar is showing.
   */
  isShowingCalendar: _propTypes.default.bool,

  /**
   * Callback fired when the input is blurred. Feedback should be provided
   * to the user when this function is called if the selected date or input
   * value is not valid.
   */
  onRequestValidateDate: _propTypes.default.func,

  /**
   * Callback fired requesting the calendar be shown.
   */
  onRequestShowCalendar: _propTypes.default.func,

  /**
   * Callback fired requesting the calendar be hidden.
   */
  onRequestHideCalendar: _propTypes.default.func,

  /**
   * Callback fired requesting the next day be selected. If no date is currently
   * selected should default to the first day of the currently rendered month.
   */
  onRequestSelectNextDay: _propTypes.default.func,

  /**
   * Callback fired requesting the previous day be selected. If no date is currently
   * selected should default to the first day of the currently rendered month.
   */
  onRequestSelectPrevDay: _propTypes.default.func,

  /**
   * Callback fired requesting the next month be rendered.
   */
  onRequestRenderNextMonth: _propTypes.default.func,

  /**
   * Callback fired requesting the previous month be rendered.
   */
  onRequestRenderPrevMonth: _propTypes.default.func,

  /**
   * Content to render in the calendar navigation header. The recommendation is
   * to include the name of the current rendered month along with the year.
   */
  renderNavigationLabel: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.node]),

  /**
   * An array of labels containing the name of each day of the week. The visible
   * portion of the label should be abbreviated (no longer than three characters).
   * Note that screen readers will read this content preceding each date as the
   * `<Calendar />` is navigated. Consider using
   * [AccessibleContent](#AccessibleContent) with the `alt` prop containing the
   * full day name for assistive technologies and the children containing the
   * abbreviation. ex. `[<AccessibleContent alt="Sunday">Sun</AccessibleContent>, ...]`
   */
  renderWeekdayLabels: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.node])).isRequired,

  /**
   * A button to render in the calendar navigation header. The recommendation is
   * to compose it with the [Button](#Button) component, setting the `variant`
   * prop to `icon`, the `size` prop to `small`, and setting the `icon` prop to
   * [IconArrowOpenEnd](#iconography).
   */
  renderNextMonthButton: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.node]),

  /**
   * A button to render in the calendar navigation header. The recommendation is
   * to compose it with the [Button](#Button) component, setting the `variant`
   * prop to `icon`, the `size` prop to `small`, and setting the `icon` prop to
   * [IconArrowOpenStart](#iconography).
   */
  renderPrevMonthButton: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.node]),

  /**
   * children of type `<DateInput.Day />` There should be exactly 42 provided (6
   * weeks).
   */
  children: _Children.Children.oneOf([_Calendar.Calendar.Day])
}, _class2.defaultProps = {
  label: void 0,
  value: '',
  size: 'medium',
  placeholder: null,
  onChange: function onChange(event) {},
  onBlur: function onBlur(event) {},
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  isRequired: false,
  isInline: false,
  assistiveText: void 0,
  layout: 'stacked',
  width: null,
  inputRef: function inputRef(el) {},
  messages: void 0,
  placement: 'bottom center',
  isShowingCalendar: false,
  onRequestValidateDate: function onRequestValidateDate(event) {},
  onRequestShowCalendar: function onRequestShowCalendar(event) {},
  onRequestHideCalendar: function onRequestHideCalendar(event) {},
  onRequestSelectNextDay: function onRequestSelectNextDay(event) {},
  onRequestSelectPrevDay: function onRequestSelectPrevDay(event) {},
  onRequestRenderNextMonth: function onRequestRenderNextMonth(event) {},
  onRequestRenderPrevMonth: function onRequestRenderPrevMonth(event) {},
  renderNavigationLabel: null,
  renderNextMonthButton: null,
  renderPrevMonthButton: null,
  children: null
}, _temp)) || _class) || _class) || _class);
exports.DateInput = DateInput;
var _default = DateInput;
exports.default = _default;
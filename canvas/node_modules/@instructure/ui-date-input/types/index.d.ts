import * as React from 'react';

export type DateInputRenderLabel = React.ReactNode | ((...args: any[])=>any);

export type DateInputLabel = React.ReactNode | ((...args: any[])=>any);

export type DateInputSize = "small" | "medium" | "large";

export type DateInputInteraction = "enabled" | "disabled" | "readonly";

export type DateInputLayout = "stacked" | "inline";

export type DateInputRenderNavigationLabel = ((...args: any[])=>any) | React.ReactNode;

export type DateInputRenderWeekdayLabels = ((...args: any[])=>any) | React.ReactNode;

export type DateInputRenderNextMonthButton = ((...args: any[])=>any) | React.ReactNode;

export type DateInputRenderPrevMonthButton = ((...args: any[])=>any) | React.ReactNode;

export interface DateInputProps {
    /**
     * Specifies the input label.
     */
    renderLabel: DateInputRenderLabel;
    /**
     * __Deprecated - use `renderLabel` instead__
     */
    label?: DateInputLabel;
    /**
     * Specifies the input value.
     */
    value?: any;
    /**
     * Specifies the input size.
     */
    size?: DateInputSize;
    /**
     * Html placeholder text to display when the input has no value. This should
     * be hint text, not a label replacement.
     */
    placeholder?: string;
    /**
     * Callback executed when the input fires a change event.
     * @param {Object} event - the event object
     * @param {Object} data - additional data
     * @param data.value - the new value
     */
    onChange?: (...args: any[])=>any;
    /**
     * Callback executed when the input fires a blur event.
     */
    onBlur?: (...args: any[])=>any;
    /**
     * Specifies if interaction with the input is enabled, disabled, or readonly.
     * When "disabled", the input changes visibly to indicate that it cannot
     * receive user interactions. When "readonly" the input still cannot receive
     * user interactions but it keeps the same styles as if it were enabled.
     */
    interaction?: DateInputInteraction;
    /**
     * Specifies if the input is required.
     */
    isRequired?: boolean;
    /**
     * Controls whether the input is rendered inline with other elements or if it
     * is rendered as a block level element.
     */
    isInline?: boolean;
    /**
     * Additional helpful text to provide to screen readers about the operation
     * of the component.
     */
    assistiveText?: string;
    /**
     * Controls the layout. When set to `stacked`, the label rests on top of the
     * input. When set to `inline` the label is next to the input.
     */
    layout?: DateInputLayout;
    /**
     * Specifies the width of the input.
     */
    width?: string;
    /**
     * Provides a ref to the underlying input element.
     */
    inputRef?: (...args: any[])=>any;
    /**
     * Displays messages and validation for the input. It should be an object
     * with the following shape:
     * `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
    /**
     * The placement of the calendar in relation to the input.
     */
    placement?: any;
    /**
     * Controls whether or not the calendar is showing.
     */
    isShowingCalendar?: boolean;
    /**
     * Callback fired when the input is blurred. Feedback should be provided
     * to the user when this function is called if the selected date or input
     * value is not valid.
     */
    onRequestValidateDate?: (...args: any[])=>any;
    /**
     * Callback fired requesting the calendar be shown.
     */
    onRequestShowCalendar?: (...args: any[])=>any;
    /**
     * Callback fired requesting the calendar be hidden.
     */
    onRequestHideCalendar?: (...args: any[])=>any;
    /**
     * Callback fired requesting the next day be selected. If no date is currently
     * selected should default to the first day of the currently rendered month.
     */
    onRequestSelectNextDay?: (...args: any[])=>any;
    /**
     * Callback fired requesting the previous day be selected. If no date is currently
     * selected should default to the first day of the currently rendered month.
     */
    onRequestSelectPrevDay?: (...args: any[])=>any;
    /**
     * Callback fired requesting the next month be rendered.
     */
    onRequestRenderNextMonth?: (...args: any[])=>any;
    /**
     * Callback fired requesting the previous month be rendered.
     */
    onRequestRenderPrevMonth?: (...args: any[])=>any;
    /**
     * Content to render in the calendar navigation header. The recommendation is
     * to include the name of the current rendered month along with the year.
     */
    renderNavigationLabel?: DateInputRenderNavigationLabel;
    /**
     * An array of labels containing the name of each day of the week. The visible
     * portion of the label should be abbreviated (no longer than three characters).
     * Note that screen readers will read this content preceding each date as the
     * `<Calendar />` is navigated. Consider using
     * [AccessibleContent](#AccessibleContent) with the `alt` prop containing the
     * full day name for assistive technologies and the children containing the
     * abbreviation. ex. `[<AccessibleContent alt="Sunday">Sun</AccessibleContent>, ...]`
     */
    renderWeekdayLabels: DateInputRenderWeekdayLabels[];
    /**
     * A button to render in the calendar navigation header. The recommendation is
     * to compose it with the [Button](#Button) component, setting the `variant`
     * prop to `icon`, the `size` prop to `small`, and setting the `icon` prop to
     * [IconArrowOpenEnd](#iconography).
     */
    renderNextMonthButton?: DateInputRenderNextMonthButton;
    /**
     * A button to render in the calendar navigation header. The recommendation is
     * to compose it with the [Button](#Button) component, setting the `variant`
     * prop to `icon`, the `size` prop to `small`, and setting the `icon` prop to
     * [IconArrowOpenStart](#iconography).
     */
    renderPrevMonthButton?: DateInputRenderPrevMonthButton;
    /**
     * children of type `<DateInput.Day />` There should be exactly 42 provided (6
     * weeks).
     */
    children?: any;
}

export class DateInput extends React.Component<DateInputProps, any> {
    render(): JSX.Element;

}


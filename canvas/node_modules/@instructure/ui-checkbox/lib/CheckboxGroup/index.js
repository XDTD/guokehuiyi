"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CheckboxGroup = exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _controllable = require("@instructure/ui-prop-types/lib/controllable.js");

var _Children = require("@instructure/ui-prop-types/lib/Children.js");

var _FormPropTypes = require("@instructure/ui-form-field/lib/FormPropTypes.js");

var _FormFieldGroup = require("@instructure/ui-form-field/lib/FormFieldGroup");

var _uid = require("@instructure/uid");

var _matchComponentTypes = require("@instructure/ui-react-utils/lib/matchComponentTypes.js");

var _safeCloneElement = require("@instructure/ui-react-utils/lib/safeCloneElement.js");

var _pickProps = require("@instructure/ui-react-utils/lib/pickProps.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _index = require("../Checkbox/index.js");

var _dec, _class, _class2, _temp;

/**
---
category: components
---
**/
var CheckboxGroup = (_dec = (0, _testable.testable)(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(CheckboxGroup, _Component);

  var _super = (0, _createSuper2.default)(CheckboxGroup);

  function CheckboxGroup(props) {
    var _this;

    (0, _classCallCheck2.default)(this, CheckboxGroup);
    _this = _super.call(this);

    _this.handleChange = function (e) {
      var newValue = _this.value || [];

      if (_this.props.disabled || _this.props.readOnly) {
        e.preventDefault();
        return;
      }

      if (e.target.checked) {
        newValue.push(e.target.value);
      } else {
        newValue.splice(newValue.indexOf(e.target.value), 1);
      }

      if (typeof _this.props.value === 'undefined') {
        _this.setState({
          value: newValue
        });
      }

      if (typeof _this.props.onChange === 'function') {
        _this.props.onChange(newValue);
      }
    };

    if (typeof props.value === 'undefined') {
      _this.state = {
        value: props.defaultValue
      };
    }

    _this._messagesId = (0, _uid.uid)('CheckboxGroup-messages');
    return _this;
  }

  (0, _createClass2.default)(CheckboxGroup, [{
    key: "renderChildren",
    value: function renderChildren() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          name = _this$props.name,
          size = _this$props.size,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly;
      return _react.Children.map(children, function (child, index) {
        if ((0, _matchComponentTypes.matchComponentTypes)(child, [_index.Checkbox])) {
          return (0, _safeCloneElement.safeCloneElement)(child, {
            key: "".concat(child.props.name),
            name: name,
            disabled: disabled || child.props.disabled,
            readOnly: readOnly || child.props.readOnly,
            size: size,
            checked: _this2.value.indexOf(child.props.value) > -1,
            onChange: _this2.handleChange,
            width: child.props.width || 'auto',
            'aria-describedby': _this2.hasMessages && _this2._messagesId
          });
        } else {
          return child;
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react.default.createElement(_FormFieldGroup.FormFieldGroup, Object.assign({}, (0, _omitProps.omitProps)(this.props, CheckboxGroup.propTypes), (0, _pickProps.pickProps)(this.props, _FormFieldGroup.FormFieldGroup.propTypes), {
        rowSpacing: "small",
        vAlign: "top",
        messagesId: this._messagesId
      }), this.renderChildren());
    }
  }, {
    key: "hasMessages",
    get: function get() {
      return this.props.messages && this.props.messages.length > 0;
    }
  }, {
    key: "value",
    get: function get() {
      if (typeof this.props.value === 'undefined' && typeof this.state.value === 'undefined') {
        return [];
      } else {
        return typeof this.props.value === 'undefined' ? (0, _toConsumableArray2.default)(this.state.value) : (0, _toConsumableArray2.default)(this.props.value);
      }
    }
  }]);
  CheckboxGroup.displayName = "CheckboxGroup";
  return CheckboxGroup;
}(_react.Component), _class2.propTypes = {
  name: _propTypes.default.string.isRequired,
  description: _propTypes.default.node.isRequired,

  /**
   * value to set on initial render
   */
  defaultValue: _propTypes.default.array,

  /**
   * the selected values (must be accompanied by an `onChange` prop)
   */
  value: (0, _controllable.controllable)(_propTypes.default.array),

  /**
   * when used with the `value` prop, the component will not control its own state
   */
  onChange: _propTypes.default.func,
  disabled: _propTypes.default.bool,
  readOnly: _propTypes.default.bool,

  /**
  * object with shape: `{
  text: PropTypes.string,
  type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
    }`
  */
  messages: _propTypes.default.arrayOf(_FormPropTypes.FormPropTypes.message),

  /**
   * children of type `Checkbox`
   */
  children: _Children.Children.oneOf([_index.Checkbox]),
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),
  layout: _propTypes.default.oneOf(['stacked', 'columns', 'inline'])
}, _class2.defaultProps = {
  disabled: false,
  readOnly: false,
  size: 'medium',
  layout: 'stacked',
  defaultValue: void 0,
  messages: void 0,
  value: void 0,
  onChange: void 0,
  children: null
}, _temp)) || _class);
exports.CheckboxGroup = CheckboxGroup;
var _default = CheckboxGroup;
exports.default = _default;
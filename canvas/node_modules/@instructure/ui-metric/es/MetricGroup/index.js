import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Children, Component } from 'react';
import { Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import { themeable } from '@instructure/ui-themeable';
import { testable } from '@instructure/ui-testable';
import { passthroughProps, safeCloneElement } from '@instructure/ui-react-utils';
import { Metric } from "../Metric/index.js";
var styles = {
  componentId: 'bjJgz',
  template: function template(theme) {
    return "\n\n.bjJgz_bGBk{align-items:flex-start;box-sizing:border-box;display:flex;flex-wrap:wrap;justify-content:space-around;line-height:".concat(theme.lineHeight || 'inherit', "}");
  },
  'root': 'bjJgz_bGBk'
};
import theme from "./theme.js";
/**
---
category: components
---
**/

var MetricGroup = (_dec = testable(), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(MetricGroup, _Component);

  var _super = _createSuper(MetricGroup);

  function MetricGroup() {
    _classCallCheck(this, MetricGroup);

    return _super.apply(this, arguments);
  }

  _createClass(MetricGroup, [{
    key: "renderChildren",
    value: function renderChildren() {
      return Children.map(this.props.children, function (child) {
        return safeCloneElement(child, {
          isGroupChild: true
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement("div", Object.assign({}, passthroughProps(this.props), {
        className: styles.root,
        role: "grid",
        "aria-readonly": "true"
      }), this.renderChildren());
    }
  }]);

  MetricGroup.displayName = "MetricGroup";
  return MetricGroup;
}(Component), _class2.propTypes = {
  /**
   * children of type `Metric`
   */
  children: ChildrenPropTypes.oneOf([Metric])
}, _class2.defaultProps = {
  children: null
}, _temp)) || _class) || _class);
export default MetricGroup;
export { MetricGroup };
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Dialog = exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _console = require("@instructure/console");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _getElementType = require("@instructure/ui-react-utils/lib/getElementType.js");

var _findDOMNode = require("@instructure/ui-dom-utils/lib/findDOMNode.js");

var _requestAnimationFrame = require("@instructure/ui-dom-utils/lib/requestAnimationFrame.js");

var _FocusRegionManager = require("@instructure/ui-a11y-utils/lib/FocusRegionManager.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
---
category: components/utilities
---
@module Dialog
**/
var Dialog = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Dialog, _Component);

  var _super = (0, _createSuper2.default)(Dialog);

  function Dialog() {
    var _this;

    (0, _classCallCheck2.default)(this, Dialog);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._raf = [];
    _this._focusRegion = null;

    _this.getRef = function (el) {
      _this._root = el;
    };

    return _this;
  }

  (0, _createClass2.default)(Dialog, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.open) {
        this.open();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var open = this.props.open;

      if (open && !prevProps.open) {
        this.open();
      } else if (!open && prevProps.open) {
        this.close();
      }

      if (this._focusRegion) {
        this._focusRegion.updateElement(this.contentElement);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.open) {
        this.close();
      }

      this._raf.forEach(function (request) {
        return request.cancel();
      });

      this._raf = [];
    }
  }, {
    key: "open",
    value: function open() {
      var _this2 = this;

      var _this$props = this.props,
          open = _this$props.open,
          contentElement = _this$props.contentElement,
          options = (0, _objectWithoutProperties2.default)(_this$props, ["open", "contentElement"]);

      this._raf.push((0, _requestAnimationFrame.requestAnimationFrame)(function () {
        // It needs to wait a heartbeat until the content is fully loaded
        // inside the dialog. If it contains a focusable element, it will
        // get focused on open, and browsers scroll to the focused element.
        // If the css is not fully applied, the element may not be in their
        // final position, making the page jump.
        setTimeout(function () {
          _this2._focusRegion = _FocusRegionManager.FocusRegionManager.activateRegion(_this2.contentElement, (0, _objectSpread2.default)({}, options));
        }, 0);
      }));
    }
  }, {
    key: "close",
    value: function close() {
      if (this._focusRegion) {
        _FocusRegionManager.FocusRegionManager.blurRegion(this.contentElement, this._focusRegion.id);
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      if (!this.props.open || !this.contentElement) {
        /*#__PURE__*/
        ( /*#__PURE__*/0, _console.error)(false, '[Dialog] Can\'t focus a Dialog that isn\'t open.');
        return;
      }

      if (this._focusRegion) {
        _FocusRegionManager.FocusRegionManager.focusRegion(this.contentElement, this._focusRegion.id);
      }
    }
  }, {
    key: "blur",
    value: function blur() {
      if (!this.props.open || !this.contentElement) {
        /*#__PURE__*/
        ( /*#__PURE__*/0, _console.error)(false, '[Dialog] Can\'t blur a Dialog that isn\'t open.');
        return;
      }

      this.close();
    }
  }, {
    key: "render",
    value: function render() {
      var ElementType = (0, _getElementType.getElementType)(Dialog, this.props);
      return this.props.open ? /*#__PURE__*/_react.default.createElement(ElementType, Object.assign({}, (0, _omitProps.omitProps)(this.props, Dialog.propTypes), {
        ref: this.getRef,
        role: this.props.label ? 'dialog' : null,
        "aria-label": this.props.label,
        className: this.props.className // eslint-disable-line react/prop-types

      }), this.props.children) : null;
    }
  }, {
    key: "contentElement",
    get: function get() {
      var contentElement = (0, _findDOMNode.findDOMNode)(this.props.contentElement);

      if (!contentElement) {
        contentElement = (0, _findDOMNode.findDOMNode)(this._root);
      }

      return contentElement;
    }
  }, {
    key: "focused",
    get: function get() {
      return this.contentElement && this._focusRegion && _FocusRegionManager.FocusRegionManager.isFocused(this.contentElement, this._focusRegion.id);
    }
  }]);
  Dialog.displayName = "Dialog";
  return Dialog;
}(_react.Component);

exports.Dialog = Dialog;
Dialog.propTypes = {
  /**
   * The children to be rendered within the `<Dialog />`
   */
  children: _propTypes.default.node,

  /**
  * The element to render as the component root, `span` by default
  */
  as: _propTypes.default.elementType,
  // eslint-disable-line react/require-default-props
  display: _propTypes.default.oneOf(['auto', 'block', 'inline-block']),
  label: _propTypes.default.string,

  /**
   * Whether or not the `<Dialog />` is open
   */
  open: _propTypes.default.bool,

  /**
   * Function called when tab focus leaves the `<Dialog />` focusable content. This only
   * occurs when `shouldContainFocus` is set to false.
   */
  onBlur: _propTypes.default.func,
  onDismiss: _propTypes.default.func,

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),

  /**
   * An element or a function returning an element that wraps the content of the `<Dialog />`
   */
  contentElement: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),

  /**
   * An element, function returning an element, or array of elements that will not be hidden from
   * the screen reader when the `<Dialog />` is open
   */
  liveRegion: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.element), _propTypes.default.element, _propTypes.default.func]),
  shouldContainFocus: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['keyboard', 'screenreader'])]),
  shouldReturnFocus: _propTypes.default.bool,
  shouldCloseOnDocumentClick: _propTypes.default.bool,
  shouldCloseOnEscape: _propTypes.default.bool,
  shouldFocusOnOpen: _propTypes.default.bool
};
Dialog.defaultProps = {
  children: null,
  display: void 0,
  label: void 0,
  open: false,
  shouldFocusOnOpen: true,
  shouldContainFocus: false,
  shouldReturnFocus: false,
  shouldCloseOnDocumentClick: true,
  shouldCloseOnEscape: true,
  defaultFocusElement: null,
  contentElement: null,
  liveRegion: null,
  onBlur: function onBlur(event) {},
  onDismiss: function onDismiss(event) {}
};
var _default = Dialog;
exports.default = _default;
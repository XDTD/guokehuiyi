import * as React from 'react';

export type MenuLiveRegion = React.ReactElement<any>[] | React.ReactElement<any> | ((...args: any[])=>any);

export type MenuType = "flyout";

export type MenuOffsetX = string | number;

export type MenuOffsetY = string | number;

export interface MenuProps {
    /**
     * Children of type `Menu.Item`, `Menu.Group`, `Menu.Separator`, or `Menu`
     */
    children?: any;
    /**
     * Description of the `<Menu />`
     */
    label?: string;
    /**
     * Is the `<Menu />` disabled
     */
    disabled?: boolean;
    /**
     * The trigger element, if the `<Menu />` is to render as a popover
     */
    trigger?: React.ReactNode;
    /**
     * If a trigger is supplied, where should the `<Menu />` be placed (relative to the trigger)
     */
    placement?: any;
    /**
     * Should the `<Menu />` be open for the initial render
     */
    defaultShow?: boolean;
    /**
     * Is the `<Menu />` open (should be accompanied by `onToggle`)
     */
    show?: any;
    /**
     * Callback fired when the `<Menu />` is toggled open/closed. When used with `show`,
     * the component will not control its own state.
     */
    onToggle?: (...args: any[])=>any;
    /**
     * Callback fired when an item within the `<Menu />` is selected
     */
    onSelect?: (...args: any[])=>any;
    /**
     * If a trigger is supplied, callback fired when the `<Menu />` is closed
     */
    onDismiss?: (...args: any[])=>any;
    /**
     * If a trigger is supplied, callback fired when the `<Menu />` trigger is blurred
     */
    onBlur?: (...args: any[])=>any;
    /**
     * If a trigger is supplied, callback fired when the `<Menu />` trigger is focused
     */
    onFocus?: (...args: any[])=>any;
    /**
     * If a trigger is supplied, callback fired onMouseOver for the `<Menu />` trigger
     */
    onMouseOver?: (...args: any[])=>any;
    /**
     * Callback fired on the onKeyDown of the `<Menu />`
     */
    onKeyDown?: (...args: any[])=>any;
    /**
     * Callback fired on the onKeyUp of the `<Menu />`
     */
    onKeyUp?: (...args: any[])=>any;
    /**
     * A function that returns a reference to the `<Menu />`
     */
    menuRef?: (...args: any[])=>any;
    /**
     * A function that returns a reference to the `<Popover />`
     */
    popoverRef?: (...args: any[])=>any;
    /**
     * If a trigger is supplied, an element or a function returning an element to use as the mount node
     * for the `<Menu />` (defaults to `document.body`)
     */
    mountNode?: any;
    /**
     * The parent in which to constrain the menu.
     * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
     * or a function returning an element
     */
    constrain?: any;
    /**
     * If a trigger is supplied, an element, function returning an element, or array of elements that will not
     * be hidden from the screen reader when the `<Menu />` is open
     */
    liveRegion?: MenuLiveRegion;
    /**
     * If a trigger is supplied, should the `<Menu />` hide when an item is selected
     */
    shouldHideOnSelect?: boolean;
    /**
     * If a trigger is supplied, should the `<Menu />` focus the trigger on after closing
     */
    shouldFocusTriggerOnClose?: boolean;
    /**
     * The type of `<Menu />`
     */
    type?: MenuType;
    id?: string;
    /**
     * Whether or not an arrow pointing to the trigger should be rendered
     */
    withArrow?: boolean;
    /**
     * The horizontal offset for the positioned content.
     * Works only if `trigger` is provided.
     */
    offsetX?: MenuOffsetX;
    /**
     * The vertical offset for the positioned content.
     * Works only if `trigger` is provided.
     */
    offsetY?: MenuOffsetY;
}

export class Menu extends React.Component<MenuProps, any> {
    render(): JSX.Element;

}


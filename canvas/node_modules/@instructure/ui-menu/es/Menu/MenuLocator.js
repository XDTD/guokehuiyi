import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { locator } from '@instructure/ui-test-locator';
import { parseQueryArguments } from '@instructure/ui-test-queries'; // eslint-disable-next-line no-restricted-imports

import { PopoverLocator } from '@instructure/ui-popover/es/Popover/PopoverLocator';
import { Menu } from "./index.js";
import { MenuItemLocator } from "./MenuItem/MenuItemLocator.js";
import { MenuItemGroupLocator } from "./MenuItemGroup/MenuItemGroupLocator.js";
var customMethods = {
  findAllItems: function findAllItems() {
    return MenuItemLocator.findAll.apply(MenuItemLocator, arguments);
  },
  findItem: function findItem() {
    return MenuItemLocator.find.apply(MenuItemLocator, arguments);
  },
  findAllGroups: function findAllGroups() {
    return MenuItemGroupLocator.findAll.apply(MenuItemGroupLocator, arguments);
  },
  findGroup: function findGroup() {
    return MenuItemGroupLocator.find.apply(MenuItemGroupLocator, arguments);
  },
  findPopoverTrigger: function findPopoverTrigger() {
    return PopoverLocator.findTrigger.apply(PopoverLocator, arguments);
  },
  findPopoverContent: function findPopoverContent() {
    var _parseQueryArguments = parseQueryArguments.apply(void 0, arguments),
        element = _parseQueryArguments.element,
        selector = _parseQueryArguments.selector,
        options = _parseQueryArguments.options;

    return PopoverLocator.findContent(element, selector, _objectSpread({}, options, {
      customMethods: _objectSpread({}, options.customMethods, {}, customMethods)
    }));
  }
};
var MenuLocator = locator(Menu.selector, customMethods);
export { MenuLocator, MenuItemLocator, MenuItemGroupLocator };
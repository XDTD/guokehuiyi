"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PopoverContent = exports.PopoverTrigger = exports.Popover = exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _console = require("@instructure/console");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _keycode = _interopRequireDefault(require("keycode"));

var _Position = require("@instructure/ui-position/lib/Position");

var _PositionPropTypes = require("@instructure/ui-position/lib/PositionPropTypes.js");

var _parsePlacement = require("@instructure/ui-position/lib/parsePlacement.js");

var _mirrorHorizontalPlacement = require("@instructure/ui-position/lib/mirrorHorizontalPlacement.js");

var _ContextView = require("@instructure/ui-view/lib/ContextView");

var _View = require("@instructure/ui-view/lib/View");

var _Dialog = require("@instructure/ui-dialog/lib/Dialog");

var _bidirectional = require("@instructure/ui-i18n/lib/bidirectional.js");

var _element = require("@instructure/ui-prop-types/lib/element.js");

var _findDOMNode = require("@instructure/ui-dom-utils/lib/findDOMNode.js");

var _containsActiveElement = require("@instructure/ui-dom-utils/lib/containsActiveElement.js");

var _requestAnimationFrame = require("@instructure/ui-dom-utils/lib/requestAnimationFrame.js");

var _handleMouseOverOut = require("@instructure/ui-dom-utils/lib/handleMouseOverOut.js");

var _ComponentIdentifier3 = require("@instructure/ui-react-utils/lib/ComponentIdentifier.js");

var _safeCloneElement = require("@instructure/ui-react-utils/lib/safeCloneElement.js");

var _callRenderProp = require("@instructure/ui-react-utils/lib/callRenderProp.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _createChainedFunction = require("@instructure/ui-utils/lib/createChainedFunction.js");

var _shallowEqual = require("@instructure/ui-utils/lib/shallowEqual.js");

var _px = require("@instructure/ui-utils/lib/px.js");

var _uid = require("@instructure/uid");

var _ThemeablePropTypes = require("@instructure/ui-themeable/lib/ThemeablePropTypes.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _FocusRegion = require("@instructure/ui-a11y-utils/lib/FocusRegion.js");

var _dec, _dec2, _class, _class2, _temp, _dec3, _dec4, _class3, _class4, _temp2, _dec5, _dec6, _dec7, _class5, _class6, _temp3;

var PopoverTrigger = (_dec = (0, _deprecated.deprecated)('8.0.0', null, "Use Popover's `renderTrigger` prop instead."), _dec2 = (0, _testable.testable)(), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_ComponentIdentifier) {
  (0, _inherits2.default)(PopoverTrigger, _ComponentIdentifier);

  var _super = (0, _createSuper2.default)(PopoverTrigger);

  function PopoverTrigger() {
    (0, _classCallCheck2.default)(this, PopoverTrigger);
    return _super.apply(this, arguments);
  }

  return PopoverTrigger;
}(_ComponentIdentifier3.ComponentIdentifier), _class2.displayName = 'PopoverTrigger', _temp)) || _class) || _class);
exports.PopoverTrigger = PopoverTrigger;
var PopoverContent = (_dec3 = (0, _deprecated.deprecated)('8.0.0', null, "Use Popover's `children` instead."), _dec4 = (0, _testable.testable)(), _dec3(_class3 = _dec4(_class3 = (_temp2 = _class4 = /*#__PURE__*/function (_ComponentIdentifier2) {
  (0, _inherits2.default)(PopoverContent, _ComponentIdentifier2);

  var _super2 = (0, _createSuper2.default)(PopoverContent);

  function PopoverContent() {
    (0, _classCallCheck2.default)(this, PopoverContent);
    return _super2.apply(this, arguments);
  }

  return PopoverContent;
}(_ComponentIdentifier3.ComponentIdentifier), _class4.displayName = 'PopoverContent', _temp2)) || _class3) || _class3);
/**
---
category: components
tags: overlay, portal, dialog
---
**/

exports.PopoverContent = PopoverContent;
var Popover = (_dec5 = (0, _deprecated.deprecated)('8.0.0', {
  show: 'isShowingContent',
  defaultShow: 'defaultIsShowingContent',
  variant: 'color',
  label: 'screenReaderLabel',
  trackPosition: 'shouldTrackPosition',
  alignArrow: 'shouldAlignArrow',
  onShow: 'onShowContent',
  onDismiss: 'onHideContent',
  onToggle: 'onShowContent/onHideContent'
}), _dec6 = (0, _testable.testable)(), _dec7 = (0, _bidirectional.bidirectional)(), _dec5(_class5 = _dec6(_class5 = _dec7(_class5 = (_temp3 = _class6 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Popover, _Component);

  var _super3 = (0, _createSuper2.default)(Popover);

  function Popover(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Popover);
    _this = _super3.call(this, props);

    _this.show = function (event) {
      if (typeof _this.props.isShowingContent === 'undefined' && typeof _this.props.show === 'undefined') {
        _this.setState({
          isShowingContent: true
        });
      }

      _this.props.onShowContent(event);

      if (typeof _this.props.onToggle === 'function') {
        _this.props.onToggle(true);
      }
    };

    _this.hide = function (event) {
      var documentClick = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var _this$props = _this.props,
          onHideContent = _this$props.onHideContent,
          isShowingContent = _this$props.isShowingContent,
          show = _this$props.show,
          onToggle = _this$props.onToggle,
          onDismiss = _this$props.onDismiss;

      if (typeof isShowingContent === 'undefined' && typeof show === 'undefined') {
        // uncontrolled, set state, fire callbacks
        _this.setState(function (_ref) {
          var isShowingContent = _ref.isShowingContent;

          if (isShowingContent) {
            onHideContent(event, {
              documentClick: documentClick
            });

            if (typeof onDismiss === 'function') {
              onDismiss(event, documentClick);
            }
          }

          return {
            isShowingContent: false
          };
        });
      } else if (isShowingContent || show) {
        // controlled, fire callback
        onHideContent(event, {
          documentClick: documentClick
        });

        if (typeof onDismiss === 'function') {
          onDismiss(event, documentClick);
        }
      }

      if (typeof onToggle === 'function') {
        onToggle(false);
      }
    };

    _this.toggle = function (event) {
      if (_this.shown) {
        _this.hide(event);
      } else {
        _this.show(event);
      }
    };

    _this.handleDialogDismiss = function () {
      var _this2;

      if (!_this.props.shouldReturnFocus && _this.props.shouldFocusContentOnTriggerBlur) {
        var trigger = (0, _findDOMNode.findDOMNode)(_this._trigger);

        if (trigger && typeof trigger.focus === 'function') {
          trigger.focus();
        }
      }

      (_this2 = _this).hide.apply(_this2, arguments);
    };

    _this.handleDialogBlur = function (event) {
      if (event.keyCode === _keycode.default.codes.tab && event.shiftKey && _this.props.shouldFocusContentOnTriggerBlur) {
        return;
      }

      _this.hide(event);
    };

    _this.handleTriggerKeyDown = function (event) {
      if (!_this.props.shouldFocusContentOnTriggerBlur) {
        return;
      }

      if (event.keyCode === _keycode.default.codes.tab && !event.shiftKey) {
        event.preventDefault();

        _this._raf.push((0, _requestAnimationFrame.requestAnimationFrame)(function () {
          _this._dialog && _this._dialog.focus();
        }));
      }
    };

    _this.handleTriggerKeyUp = function (event) {
      if (event.keyCode === _keycode.default.codes.esc && _this.shown && _this.isTooltip) {
        // if popover is tooltip, it is managing its own focus region so we need
        // to prevent esc keyup event from reaching FocusRegionManager
        event.preventDefault();

        _this.hide(event);
      }
    };

    _this.handleTriggerBlur = function (event) {
      if (_this.props.on.indexOf('focus') > -1) {
        _this._raf.push((0, _requestAnimationFrame.requestAnimationFrame)(function () {
          if (!(0, _containsActiveElement.containsActiveElement)(_this._view)) {
            _this.hide(event);
          }
        }));
      }
    };

    _this.handlePositioned = function (position) {
      var placement = position.placement;

      _this.setState((0, _objectSpread2.default)({
        placement: placement
      }, _this.computeOffsets(placement)));

      _this.props.onPositioned(position);

      if (typeof _this.props.onShow === 'function') {
        _this.props.onShow(position);
      }
    };

    _this.handlePositionChanged = function (position) {
      var placement = position.placement;

      _this.setState((0, _objectSpread2.default)({
        placement: placement
      }, _this.computeOffsets(placement)));

      _this.props.onPositionChanged(position);
    };

    _this.state = {
      placement: props.placement,
      offsetX: props.offsetX,
      offsetY: props.offsetY
    };

    if (typeof props.isShowingContent === 'undefined' && typeof props.show === 'undefined') {
      _this.state.isShowingContent = props.defaultIsShowingContent || props.defaultShow;
    }

    _this._id = _this.props.id || (0, _uid.uid)('Popover');
    _this._raf = [];
    _this._handleMouseOver = _handleMouseOverOut.handleMouseOverOut.bind(null, function (event) {
      _this.show(event);
    });
    _this._handleMouseOut = _handleMouseOverOut.handleMouseOverOut.bind(null, function (event) {
      _this.hide(event);
    });
    return _this;
  }

  (0, _createClass2.default)(Popover, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.isTooltip) {
        // if popover is being used as a tooltip with no focusable content
        // manage its FocusRegion internally rather than registering it with
        // the FocusRegionManager via Dialog
        this._focusRegion = new _FocusRegion.FocusRegion(this._contentElement, {
          shouldCloseOnEscape: false,
          shouldCloseOnDocumentClick: true,
          onDismiss: this.hide
        });

        if (this.shown) {
          this._focusRegion.activate();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._raf.forEach(function (request) {
        return request.cancel();
      });

      this._raf = [];

      if (this._focusRegion) {
        this._focusRegion.deactivate();

        this._focusRegion.blur();
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !(0, _shallowEqual.shallowEqual)(this.props, nextProps) || !(0, _shallowEqual.shallowEqual)(this.state, nextState);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this._focusRegion && this.isTooltip) {
        // if focus region exists, popover is acting as a tooltip
        // so we manually activate and deactivate the region when showing/hiding
        if (!prevProps.isShowingContent && this.props.isShowingContent || !prevState.isShowingContent && this.state.isShowingContent) {
          // changed from hiding to showing
          this._focusRegion.activate();

          this._focusRegion.focus();
        }

        if (prevProps.isShowingContent && !this.props.isShowingContent || prevState.isShowingContent && !this.state.isShowingContent) {
          // changed from showing to hiding
          this._focusRegion.deactivate();
        }
      }
    }
  }, {
    key: "computeOffsets",
    value: function computeOffsets(placement) {
      var _this$props2 = this.props,
          offsetX = _this$props2.offsetX,
          offsetY = _this$props2.offsetY;

      if ((this.props.shouldAlignArrow || this.props.alignArrow) && this._view) {
        var secondaryPlacement = (0, _parsePlacement.parsePlacement)(placement)[1];
        var _this$_view$theme = this._view.theme,
            arrowSize = _this$_view$theme.arrowSize,
            arrowBorderWidth = _this$_view$theme.arrowBorderWidth;
        var offsetAmount = ((0, _px.px)(arrowSize) + (0, _px.px)(arrowBorderWidth)) * 2;

        if (secondaryPlacement === 'start') {
          offsetX = offsetAmount;
        } else if (secondaryPlacement === 'end') {
          offsetX = -offsetAmount;
        } else if (secondaryPlacement === 'top') {
          offsetY = offsetAmount;
        } else if (secondaryPlacement === 'bottom') {
          offsetY = -offsetAmount;
        }
      }

      return {
        offsetX: offsetX,
        offsetY: offsetY
      };
    }
  }, {
    key: "renderTrigger",
    value: function renderTrigger() {
      var _this3 = this;

      var trigger = _ComponentIdentifier3.ComponentIdentifier.pick(Popover.Trigger, this.props.children);

      if (!trigger) {
        trigger = (0, _callRenderProp.callRenderProp)(this.props.renderTrigger);
      }

      if (trigger) {
        var _this$props3 = this.props,
            on = _this$props3.on,
            shouldContainFocus = _this$props3.shouldContainFocus;
        var onClick;
        var onFocus;
        var onMouseOut;
        var onMouseOver;
        var expanded;

        if (on.indexOf('click') > -1) {
          onClick = function onClick(event) {
            _this3.toggle(event);
          };
        }

        if (on.indexOf('hover') > -1) {
          /*#__PURE__*/
          ( /*#__PURE__*/0, _console.error)(!(on === 'hover'), '[Popover] Specifying only the `"hover"` trigger limits the visibilty of the Popover to just mouse users. ' + 'Consider also including the `"focus"` trigger ' + 'so that touch and keyboard only users can see the Popover content as well.');
          onMouseOver = this._handleMouseOver;
          onMouseOut = this._handleMouseOut;
        }

        if (on.indexOf('focus') > -1) {
          onFocus = function onFocus(event) {
            _this3.show(event);
          };
        }

        if (shouldContainFocus) {
          // only set aria-expanded if popover can contain focus
          expanded = this.shown ? 'true' : 'false';
        } else {
          expanded = null;
        }

        trigger = (0, _safeCloneElement.safeCloneElement)(trigger, {
          ref: function ref(el) {
            return _this3._trigger = el;
          },
          'aria-expanded': expanded,
          'data-popover-trigger': true,
          onKeyDown: (0, _createChainedFunction.createChainedFunction)(this.handleTriggerKeyDown, this.props.onKeyDown),
          onKeyUp: (0, _createChainedFunction.createChainedFunction)(this.handleTriggerKeyUp, this.props.onKeyUp),
          onClick: (0, _createChainedFunction.createChainedFunction)(onClick, this.props.onClick),
          onBlur: (0, _createChainedFunction.createChainedFunction)(this.handleTriggerBlur, this.props.onBlur),
          onFocus: (0, _createChainedFunction.createChainedFunction)(onFocus, this.props.onFocus),
          onMouseOut: (0, _createChainedFunction.createChainedFunction)(onMouseOut, this.props.onMouseOut),
          onMouseOver: (0, _createChainedFunction.createChainedFunction)(onMouseOver, this.props.onMouseOver)
        });
      }

      return trigger;
    }
  }, {
    key: "renderContent",
    value: function renderContent() {
      var _this4 = this;

      var content = _ComponentIdentifier3.ComponentIdentifier.pick(Popover.Content, this.props.children);

      if (!content) {
        content = (0, _callRenderProp.callRenderProp)(this.props.children);
      }

      if (this.shown && !this.isTooltip) {
        // if popover is NOT being used as a tooltip, create a Dialog
        // to manage the content FocusRegion, when showing
        content = /*#__PURE__*/_react.default.createElement(_Dialog.Dialog, {
          open: this.shown,
          label: this.props.screenReaderLabel || this.props.label,
          ref: function ref(el) {
            return _this4._dialog = el;
          },
          display: "block",
          onBlur: this.handleDialogBlur,
          onDismiss: this.handleDialogDismiss,
          liveRegion: this.props.liveRegion,
          defaultFocusElement: this.props.defaultFocusElement,
          shouldContainFocus: this.props.shouldContainFocus,
          shouldReturnFocus: this.props.shouldReturnFocus,
          shouldFocusOnOpen: !this.props.shouldFocusContentOnTriggerBlur,
          shouldCloseOnDocumentClick: this.props.shouldCloseOnDocumentClick,
          shouldCloseOnEscape: this.props.shouldCloseOnEscape
        }, content);
      }

      if (this.shown || this.props.shouldRenderOffscreen) {
        var ViewElement;
        var color = this.props.variant;

        if (color) {
          color = color === 'inverse' ? 'primary-inverse' : 'primary';
        } else {
          color = this.props.color;
        }

        var viewProps = {
          ref: function ref(c) {
            return _this4._view = c;
          },
          elementRef: function elementRef(el) {
            _this4._contentElement = el;

            _this4.props.contentRef(el);
          },
          background: color,
          stacking: this.props.stacking,
          shadow: this.props.shadow,
          display: 'block'
        };
        var placement = this.state.placement;

        if (this.props.withArrow) {
          ViewElement = _ContextView.ContextView;
          viewProps = (0, _objectSpread2.default)({}, viewProps, {
            // TODO: remove background override after contextview is updated
            background: color === 'primary' ? 'default' : 'inverse',
            placement: this.rtl ? (0, _mirrorHorizontalPlacement.mirrorHorizontalPlacement)(placement, ' ') : placement
          });
        } else {
          ViewElement = _View.View;
          viewProps = (0, _objectSpread2.default)({}, viewProps, {
            borderWidth: 'small',
            borderRadius: 'medium'
          }, color === 'primary-inverse' && {
            borderColor: 'transparent'
          });
        }

        if (this.isTooltip) {
          // preventing pointerEvents reduces tooltip flicker
          viewProps = (0, _objectSpread2.default)({}, viewProps, {
            style: {
              pointerEvents: 'none'
            }
          });
        }

        return /*#__PURE__*/_react.default.createElement(ViewElement, viewProps, content);
      } else {
        return null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var positionProps = this.positionProps;

      if (this.props.positionTarget) {
        return /*#__PURE__*/_react.default.createElement("span", null, this.renderTrigger(), /*#__PURE__*/_react.default.createElement(_Position.Position, positionProps, this.renderContent()));
      } else {
        return /*#__PURE__*/_react.default.createElement(_Position.Position, Object.assign({}, positionProps, {
          renderTarget: this.renderTrigger()
        }), this.renderContent());
      }
    }
  }, {
    key: "isTooltip",
    get: function get() {
      return this.props.shouldRenderOffscreen && !this.props.shouldReturnFocus && !this.props.shouldContainFocus && !this.props.shouldFocusContentOnTriggerBlur;
    }
  }, {
    key: "placement",
    get: function get() {
      var placement = this.props.placement;

      if (this.rtl) {
        placement = (0, _mirrorHorizontalPlacement.mirrorHorizontalPlacement)(placement, ' ');
      }

      return !this.shown && this.props.shouldRenderOffscreen ? 'offscreen' : placement;
    }
  }, {
    key: "positionProps",
    get: function get() {
      return {
        offsetX: this.state.offsetX,
        offsetY: this.state.offsetY,
        shouldTrackPosition: (this.props.shouldTrackPosition || this.props.trackPosition) && this.shown,
        insertAt: this.props.insertAt,
        placement: this.placement,
        constrain: this.props.constrain,
        onPositioned: this.handlePositioned,
        onPositionChanged: this.handlePositionChanged,
        target: this.props.positionTarget,
        mountNode: this.props.mountNode,
        id: this._id
      };
    }
  }, {
    key: "shown",
    get: function get() {
      return typeof this.props.isShowingContent === 'undefined' && typeof this.props.show === 'undefined' ? this.state.isShowingContent : this.props.isShowingContent || this.props.show;
    }
  }, {
    key: "defaultFocusElement",
    get: function get() {
      return this.props.defaultFocusElement;
    }
  }]);
  Popover.displayName = "Popover";
  return Popover;
}(_react.Component), _class6.Trigger = PopoverTrigger, _class6.Content = PopoverContent, _class6.propTypes = {
  /**
   * Whether or not the `<Popover />` content is shown
   */
  isShowingContent: _propTypes.default.bool,

  /**
   * Whether or not to show the content by default, when uncontrolled
   */
  defaultIsShowingContent: _propTypes.default.bool,

  /**
   * The action that causes the content to display (`click`, `hover`, `focus`)
   */
  on: _propTypes.default.oneOfType([_propTypes.default.oneOf(['click', 'hover', 'focus']), _propTypes.default.arrayOf(_propTypes.default.oneOf(['click', 'hover', 'focus']))]),

  /**
   * Whether or not an arrow pointing to the trigger should be rendered
   */
  withArrow: _propTypes.default.bool,

  /**
   * Color variant of the popover content
   */
  color: _propTypes.default.oneOf(['primary', 'primary-inverse']),

  /**
   * The placement of the content in relation to the trigger
   */
  placement: _PositionPropTypes.PositionPropTypes.placement,

  /**
   * Controls the shadow depth for the `<Popover />`
   */
  shadow: _ThemeablePropTypes.ThemeablePropTypes.shadow,

  /**
   * Controls the z-index depth for the `<Popover />` content
   */
  stacking: _ThemeablePropTypes.ThemeablePropTypes.stacking,

  /**
   * A function that returns a reference to the content element
   */
  contentRef: _propTypes.default.func,

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),

  /**
   * An accessible label for the `<Popover />` content
   */
  screenReaderLabel: _propTypes.default.string,

  /**
   * The horizontal offset for the positioned content
   */
  offsetX: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * The vertical offset for the positioned content
   */
  offsetY: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * The parent in which to constrain the popover.
   * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
   * or a function returning an element
   */
  constrain: _PositionPropTypes.PositionPropTypes.constrain,

  /**
   * Target element for positioning the Popover (if it differs from the trigger)
   */
  positionTarget: _propTypes.default.oneOfType([_element.element, _propTypes.default.func]),

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Popover />` (defaults to `document.body`)
   */
  mountNode: _PositionPropTypes.PositionPropTypes.mountNode,

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: _propTypes.default.oneOf(['bottom', 'top']),

  /**
   * An element, function returning an element, or array of elements that will
   * not be hidden from the screen reader when the `<Popover />` is open
   */
  liveRegion: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.element), _propTypes.default.element, _propTypes.default.func]),

  /**
   * An id is generated if not supplied.
   */
  id: _propTypes.default.string,

  /**
   * Whether or not the content should offset to align by its arrow
   */
  shouldAlignArrow: _propTypes.default.bool,

  /**
   * Whether or not position should be tracked or just set on initial render
   */
  shouldTrackPosition: _propTypes.default.bool,

  /**
   * Should the `<Popover />` render offscreen when visually hidden
   */
  shouldRenderOffscreen: _propTypes.default.bool,

  /**
   * Whether focus should contained within the `<Popover/>` when it is open
   */
  shouldContainFocus: _propTypes.default.bool,

  /**
   * Whether focus should be returned to the trigger when the `<Popover/>` is closed
   */
  shouldReturnFocus: _propTypes.default.bool,

  /**
   * Should the `<Popover />` hide when clicks occur outside the content
   */
  shouldCloseOnDocumentClick: _propTypes.default.bool,

  /**
   * Should the `<Popover />` hide when the escape key is pressed
   */
  shouldCloseOnEscape: _propTypes.default.bool,

  /**
   * Should the content become focused when the trigger is blurred
   */
  shouldFocusContentOnTriggerBlur: _propTypes.default.bool,

  /**
   * Callback fired when content is shown. When controlled, this callback is
   * fired when the Popover expects to be shown
   */
  onShowContent: _propTypes.default.func,

  /**
   * Callback fired when content is hidden. When controlled, this callback is
   * fired when the Popover expects to be hidden
   */
  onHideContent: _propTypes.default.func,

  /**
   * Callback fired when content has been is initially positioned.
   * If `shouldRenderOffscreen` is true, it will only fire once, the first
   * time the content is shown
   */
  onPositioned: _propTypes.default.func,

  /**
   * Callback fired when the position changes
   */
  onPositionChanged: _propTypes.default.func,

  /**
   * Callback fired when component is clicked
   */
  onClick: _propTypes.default.func,

  /**
   * Callback fired when trigger is focused
   */
  onFocus: _propTypes.default.func,

  /**
   * Callback fired when component is blurred
   */
  onBlur: _propTypes.default.func,

  /**
   * Callback fired on keydown
   */
  onKeyDown: _propTypes.default.func,

  /**
   * Callback fired on keyup
   */
  onKeyUp: _propTypes.default.func,

  /**
  /**
   * Callback fired when mouse is over trigger
   */
  onMouseOver: _propTypes.default.func,

  /**
   * Callback fired when mouse leaves trigger
   */
  onMouseOut: _propTypes.default.func,

  /**
   * The element that triggers the popover
   */
  renderTrigger: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * The content to be shown by the popover
   */
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /* eslint-disable react/require-default-props */

  /**
   * __Deprecated - use `isShowingContent` instead__
   */
  show: _propTypes.default.bool,

  /**
   * __Deprecated - use `defaultIsShowingContent` instead__
   */
  defaultShow: _propTypes.default.bool,

  /**
   * __Deprecated - use `color`__
   */
  variant: _propTypes.default.oneOf(['default', 'inverse']),

  /**
   * __Deprecated - use `shouldAlignArrow`__
   */
  alignArrow: _propTypes.default.bool,

  /**
   * __Deprecated - use `screenReaderLabel`__
   */
  label: _propTypes.default.string,

  /**
   * __Deprecated - use `shouldTrackPosition`__
   */
  trackPosition: _propTypes.default.bool,

  /**
   * __Deprecated - use `onShowContent`__
   */
  onShow: _propTypes.default.func,

  /**
   * __Deprecated - use `onHideContent`__
   */
  onDismiss: _propTypes.default.func,

  /**
   * __Deprecated - use `onShowContent` and `onHideContent`__
   */
  onToggle: _propTypes.default.func
  /* eslint-enable react/require-default-props */

}, _class6.defaultProps = {
  isShowingContent: void 0,
  defaultIsShowingContent: false,
  placement: 'bottom center',
  stacking: 'topmost',
  shadow: 'resting',
  offsetX: 0,
  offsetY: 0,
  color: 'primary',
  on: ['hover', 'focus'],
  contentRef: function contentRef(el) {},
  withArrow: true,
  constrain: 'window',
  defaultFocusElement: void 0,
  screenReaderLabel: void 0,
  mountNode: void 0,
  insertAt: 'bottom',
  liveRegion: void 0,
  positionTarget: void 0,
  id: void 0,
  shouldAlignArrow: false,
  shouldTrackPosition: true,
  shouldRenderOffscreen: false,
  shouldContainFocus: false,
  shouldReturnFocus: true,
  shouldCloseOnDocumentClick: true,
  shouldFocusContentOnTriggerBlur: false,
  shouldCloseOnEscape: true,
  onShowContent: function onShowContent(event) {},
  onHideContent: function onHideContent(event, _ref2) {
    var documentClick = _ref2.documentClick;
  },
  onClick: function onClick(event) {},
  onFocus: function onFocus(event) {},
  onBlur: function onBlur(event) {},
  onMouseOver: function onMouseOver(event) {},
  onMouseOut: function onMouseOut(event) {},
  onKeyDown: function onKeyDown(event) {},
  onKeyUp: function onKeyUp(event) {},
  onPositioned: function onPositioned(position) {},
  onPositionChanged: function onPositionChanged(position) {},
  renderTrigger: null,
  children: null
}, _temp3)) || _class5) || _class5) || _class5);
exports.Popover = Popover;
var _default = Popover;
exports.default = _default;
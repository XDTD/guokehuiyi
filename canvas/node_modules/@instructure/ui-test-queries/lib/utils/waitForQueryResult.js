"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.waitForQueryResult = waitForQueryResult;

var _elementToString = require("./elementToString.js");

var _debounce = _interopRequireDefault(require("@instructure/debounce"));

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// original source: https://github.com/kentcdodds/dom-testing-library/blob/master/src/wait-for-element.js
// this doesn't require the mutation observer shim because we don't run the tests with JSDOM
function waitForQueryResult(queryFn) {
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
      _ref$sync = _ref.sync,
      sync = _ref$sync === void 0 ? false : _ref$sync,
      element = _ref.element,
      _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === void 0 ? 1900 : _ref$timeout,
      _ref$expectEmpty = _ref.expectEmpty,
      expectEmpty = _ref$expectEmpty === void 0 ? false : _ref$expectEmpty,
      _ref$mutationObserver = _ref.mutationObserverOptions,
      mutationObserverOptions = _ref$mutationObserver === void 0 ? {
    attributes: true,
    childList: true,
    subtree: true
  } : _ref$mutationObserver;

  if (typeof element === 'undefined') {
    if (typeof document === 'undefined') {
      throw new Error('[ui-test-queries] Could not find a valid HtmlElement for query.');
    } else {
      // eslint-disable-next-line no-param-reassign
      element = document.body;
    }
  }

  return new Promise(function (resolve, reject) {
    var debouncedQuery = (0, _debounce.default)(runQuery, 10, {
      leading: false,
      trailing: true
    });
    var lastError, observer, timer, lastResult;
    lastResult = {};

    function runQuery() {
      if (typeof queryFn !== 'function') {
        lastResult = {
          results: [],
          selector: JSON.stringify(queryFn)
        };
        onDone(new Error(['[ui-test-queries] Invalid element query function.', lastResult.selector].join('\n')), lastResult);
        return;
      }

      try {
        var _queryFn = queryFn(),
            results = _queryFn.results,
            selector = _queryFn.selector;

        lastResult = {
          results: results || [],
          selector: selector || queryFn.name
        };

        if (!expectEmpty && lastResult.results.length > 0 || expectEmpty && lastResult.results.length === 0) {
          // Return the query result when we get what we expected:
          onDone(null, lastResult);
        }
      } catch (e) {
        // If `query` throws an error, wait for the next mutation or timeout.
        // Save the query error to reject the promise with it.
        lastError = e;
      }
    }

    function onDone(e, result) {
      clearTimeout(timer);
      setImmediate(function () {
        return observer.disconnect();
      });
      debouncedQuery.cancel();

      if (e) {
        reject(e);
      } else {
        resolve(result);
      }
    }

    function onMutation(mutationTarget) {
      debouncedQuery();
    }

    function onTimeout() {
      var timedoutError = new Error(["[ui-test-queries] Timed out waiting for Element query results...", expectEmpty ? "Expected to find nothing but found ".concat(lastResult.results) : '', "with selector: \"".concat(lastResult.selector, "\""), "element: ".concat((0, _elementToString.elementToString)(element, 7000, {
        highlight: false
      }))].filter(Boolean).join('\n'));
      onDone(lastError || timedoutError, lastResult);
    }

    function startQuery() {
      timer = setTimeout(onTimeout, timeout);
      observer = new MutationObserver(onMutation);
      observer.observe(element, mutationObserverOptions);
      runQuery();
    }

    if (sync) {
      startQuery();
    } else {
      setTimeout(startQuery, 0);
    }
  });
}
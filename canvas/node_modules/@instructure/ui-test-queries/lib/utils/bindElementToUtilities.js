"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindElementToUtilities = bindElementToUtilities;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _events = require("./events.js");

var helpers = _interopRequireWildcard(require("./helpers.js"));

var queries = _interopRequireWildcard(require("./queries.js"));

var _bindElementToMethods = require("./bindElementToMethods.js");

var _bindElementToEvents = require("./bindElementToEvents.js");

var _isElement = require("./isElement.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
function bindElementToUtilities(element) {
  var customMethods = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};

  if (!element) {
    return element;
  } else if (Array.isArray(element)) {
    return element.map(function (el) {
      return bindElementToUtilities(el, customMethods);
    });
  } else if (typeof element.getDOMNode === 'function') {
    // eslint-disable-next-line no-param-reassign
    element = element.getDOMNode();
  }

  if (!(0, _isElement.isElement)(element)) {
    throw new Error('[ui-test-queries] could not bind utilities to invalid DOM Element!');
  }

  return (0, _objectSpread2.default)({}, (0, _bindElementToMethods.bindElementToMethods)(element, queries), {}, (0, _bindElementToEvents.bindElementToEvents)(element, _events.fireEvent), {}, (0, _bindElementToMethods.bindElementToMethods)(element, helpers), {}, (0, _bindElementToMethods.bindElementToMethods)(element, customMethods));
}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findWithLabel = findWithLabel;
exports.findWithText = findWithText;
exports.findWithTitle = findWithTitle;
exports.findAllByQuery = findAllByQuery;
exports.findByQuery = findByQuery;
exports.findAll = findAll;
exports.find = find;
exports.findAllFrames = findAllFrames;
exports.findFrame = findFrame;
exports.findParent = findParent;
exports.findParents = findParents;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _firstOrNull = require("./firstOrNull.js");

var _queryResult = require("./queryResult.js");

var _parseQueryArguments4 = require("./parseQueryArguments.js");

var _selectors = require("./selectors.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
function findWithLabel() {
  return _findWithLabel.apply(this, arguments);
}

function _findWithLabel() {
  _findWithLabel = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
    var _parseQueryArguments,
        element,
        selector,
        options,
        _args = arguments;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _parseQueryArguments = _parseQueryArguments4.parseQueryArguments.apply(void 0, _args), element = _parseQueryArguments.element, selector = _parseQueryArguments.selector, options = _parseQueryArguments.options;
            return _context.abrupt("return", find(element, ":withLabel(\"".concat(selector, "\")"), options));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _findWithLabel.apply(this, arguments);
}

function findWithText() {
  return _findWithText.apply(this, arguments);
}

function _findWithText() {
  _findWithText = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
    var _parseQueryArguments2,
        element,
        selector,
        options,
        _args2 = arguments;

    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _parseQueryArguments2 = _parseQueryArguments4.parseQueryArguments.apply(void 0, _args2), element = _parseQueryArguments2.element, selector = _parseQueryArguments2.selector, options = _parseQueryArguments2.options;
            return _context2.abrupt("return", find(element, ":withText(\"".concat(selector, "\")"), options));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _findWithText.apply(this, arguments);
}

function findWithTitle() {
  return _findWithTitle.apply(this, arguments);
}

function _findWithTitle() {
  _findWithTitle = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
    var _parseQueryArguments3,
        element,
        selector,
        options,
        _args3 = arguments;

    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _parseQueryArguments3 = _parseQueryArguments4.parseQueryArguments.apply(void 0, _args3), element = _parseQueryArguments3.element, selector = _parseQueryArguments3.selector, options = _parseQueryArguments3.options;
            return _context3.abrupt("return", find(element, ":withTitle(\"".concat(selector, "\")"), options));

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _findWithTitle.apply(this, arguments);
}

function find() {
  return _find.apply(this, arguments);
}

function _find() {
  _find = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
    var _args4 = arguments;
    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.t0 = _firstOrNull.firstOrNull;
            _context4.next = 3;
            return findAll.apply(void 0, _args4);

          case 3:
            _context4.t1 = _context4.sent;
            return _context4.abrupt("return", (0, _context4.t0)(_context4.t1));

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _find.apply(this, arguments);
}

function findAll() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return findAllByQuery.apply(void 0, [_selectors.querySelectorAll].concat(args));
}

function findParent() {
  return _findParent.apply(this, arguments);
}

function _findParent() {
  _findParent = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {
    var _args5 = arguments;
    return _regenerator.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.t0 = _firstOrNull.firstOrNull;
            _context5.next = 3;
            return findParents.apply(void 0, _args5);

          case 3:
            _context5.t1 = _context5.sent;
            return _context5.abrupt("return", (0, _context5.t0)(_context5.t1));

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _findParent.apply(this, arguments);
}

function findParents() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return findAllByQuery.apply(void 0, [_selectors.querySelectorParents].concat(args));
}

function findFrame() {
  return _findFrame.apply(this, arguments);
}

function _findFrame() {
  _findFrame = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
    var _args6 = arguments;
    return _regenerator.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.t0 = _firstOrNull.firstOrNull;
            _context6.next = 3;
            return findAllFrames.apply(void 0, _args6);

          case 3:
            _context6.t1 = _context6.sent;
            return _context6.abrupt("return", (0, _context6.t0)(_context6.t1));

          case 5:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _findFrame.apply(this, arguments);
}

function findAllFrames() {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  return findAllByQuery.apply(void 0, [_selectors.querySelectorFrames].concat(args));
}

function findAllByQuery(queryFn) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  return _queryResult.getQueryResult.apply(void 0, [queryFn].concat(args));
}

function findByQuery() {
  return _findByQuery.apply(this, arguments);
}

function _findByQuery() {
  _findByQuery = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {
    var _args7 = arguments;
    return _regenerator.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.t0 = _firstOrNull.firstOrNull;
            _context7.next = 3;
            return findAllByQuery.apply(void 0, _args7);

          case 3:
            _context7.t1 = _context7.sent;
            return _context7.abrupt("return", (0, _context7.t0)(_context7.t1));

          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _findByQuery.apply(this, arguments);
}
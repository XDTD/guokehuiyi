"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueryResult = getQueryResult;
exports.wrapQueryResult = wrapQueryResult;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _parseQueryArguments2 = require("./parseQueryArguments.js");

var _waitForQueryResult = require("./waitForQueryResult.js");

var _elementToString = require("./elementToString.js");

var _bindElementToUtilities = require("./bindElementToUtilities.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
function _getQueryResult() {
  return _getQueryResult2.apply(this, arguments);
}

function _getQueryResult2() {
  _getQueryResult2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
    var element,
        queryFn,
        options,
        wrapFn,
        expectEmpty,
        timeout,
        customMethods,
        queryResult,
        _ref,
        results,
        selector,
        _args = arguments;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            element = _args.length > 0 && _args[0] !== void 0 ? _args[0] : document;
            queryFn = _args.length > 1 ? _args[1] : void 0;
            options = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {
              expectEmpty: false,
              timeout: 1900
            };
            wrapFn = _args.length > 3 ? _args[3] : void 0;
            expectEmpty = options.expectEmpty, timeout = options.timeout, customMethods = options.customMethods;

            if (!(typeof queryFn !== 'function')) {
              _context.next = 7;
              break;
            }

            throw new Error('[ui-test-queries] Invalid element query function.', JSON.stringify(queryFn));

          case 7:
            queryResult = function queryResult() {
              var _queryFn = queryFn(),
                  results = _queryFn.results,
                  selector = _queryFn.selector;

              return {
                results: typeof wrapFn === 'function' ? wrapFn(results, customMethods) : results,
                selector: selector
              };
            };

            if (!(timeout > 0)) {
              _context.next = 14;
              break;
            }

            _context.next = 11;
            return (0, _waitForQueryResult.waitForQueryResult)(queryResult, {
              timeout: timeout,
              expectEmpty: expectEmpty,
              element: element
            });

          case 11:
            _context.t0 = _context.sent;
            _context.next = 15;
            break;

          case 14:
            _context.t0 = queryResult();

          case 15:
            _ref = _context.t0;
            results = _ref.results;
            selector = _ref.selector;

            if (!(results && results.length > 0)) {
              _context.next = 22;
              break;
            }

            return _context.abrupt("return", results);

          case 22:
            if (expectEmpty) {
              _context.next = 26;
              break;
            }

            throw new Error(["[ui-test-queries] No matches found for Element query...", "with selector: \"".concat(selector, "\""), "element: ".concat((0, _elementToString.elementToString)(element, 7000, {
              highlight: false
            }))].join('\n'));

          case 26:
            return _context.abrupt("return", []);

          case 27:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getQueryResult2.apply(this, arguments);
}

function wrapQueryResult() {
  return _bindElementToUtilities.bindElementToUtilities.apply(void 0, arguments);
}

function getQueryResult(selectorFn) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  var _parseQueryArguments = _parseQueryArguments2.parseQueryArguments.apply(void 0, args),
      element = _parseQueryArguments.element,
      selector = _parseQueryArguments.selector,
      options = _parseQueryArguments.options;

  if (typeof selectorFn !== 'function') {
    throw new Error('[ui-test-queries] Invalid element query function.', JSON.stringify(selectorFn));
  }

  var query = function query(element, selector, options) {
    var selectorBase = selectorFn.displayName || selectorFn.name;
    return {
      results: selectorFn(element, selector, options),
      selector: selector ? "".concat(selectorBase, " ").concat(selector) : selectorBase
    };
  };

  return _getQueryResult(element, query.bind(null, element, selector, options), options, wrapQueryResult);
}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseQueryArguments = parseQueryArguments;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _isElement = require("./isElement.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
function parseQueryArguments() {
  var element = document.body;
  var selector;
  var options = {
    expectEmpty: false,
    exact: true,
    trim: true,
    collapseWhitespace: true,
    ignore: 'script,style',
    timeout: 1900
  };

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  args.forEach(function (arg) {
    if (typeof arg === 'string' || arg instanceof String) {
      selector = arg;
    } else if ((0, _isElement.isElement)(arg)) {
      element = arg;
    } else if (typeof arg === 'object' || arg instanceof Object) {
      options = arg ? (0, _objectSpread2.default)({}, options, {}, arg) : options;
    }
  });

  if (selector && (selector.includes('div') || selector.includes('span'))) {
    throw new Error("[ui-test-queries] Selectors should only include semantic elements (not 'div' or 'span'): ".concat(selector));
  }

  return {
    element: element,
    selector: selector,
    options: options
  };
}
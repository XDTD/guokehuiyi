import * as React from 'react';

export type TextAreaSize = "small" | "medium" | "large";

export type TextAreaLayout = "stacked" | "inline";

export type TextAreaResize = "none" | "both" | "horizontal" | "vertical";

export type TextAreaMaxHeight = number | string;

export interface TextAreaProps {
    label: React.ReactNode;
    id?: string;
    /**
     * sets the font-size for the textarea
     */
    size?: TextAreaSize;
    layout?: TextAreaLayout;
    /**
     * the textarea will expand vertically to fit the height of the content,
     * unless its content exceeds `maxHeight`
     */
    autoGrow?: boolean;
    /**
     * is the textarea resizable (in supported browsers)
     */
    resize?: TextAreaResize;
    /**
     * a fixed width for the textarea
     */
    width?: string;
    /**
     * a initial height for the textarea (if autoGrow is true it will grow vertically)
     */
    height?: string;
    /**
     * when autoGrow is true, the textarea will never grow beyond this value
     */
    maxHeight?: TextAreaMaxHeight;
    /**
     * object with shape: `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
    inline?: boolean;
    /**
     * Html placeholder text to display when the input has no value. This should be hint text, not a label
     * replacement.
     */
    placeholder?: string;
    /**
     * Whether or not to disable the textarea
     */
    disabled?: boolean;
    /**
     * Works just like disabled but keeps the same styles as if it were active
     */
    readOnly?: boolean;
    required?: boolean;
    /**
     * a function that provides a reference to the actual textarea element
     */
    textareaRef?: (...args: any[])=>any;
    /**
     * value to set on initial render
     */
    defaultValue?: string;
    /**
     * the selected value (must be accompanied by an `onChange` prop)
     */
    value?: any;
    /**
     * when used with the `value` prop, the component will not control its own state
     */
    onChange?: (...args: any[])=>any;
}

export class TextArea extends React.Component<TextAreaProps, any> {
    render(): JSX.Element;

}


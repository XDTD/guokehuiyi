import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { themeable } from '@instructure/ui-themeable';
import { passthroughProps, getElementType } from '@instructure/ui-react-utils';
var styles = {
  componentId: 'ergWt',
  template: function template(theme) {
    return "\n\n.ergWt_bGBk{border:0;clip:rect(0 0 0 0);height:0.0625rem;inset-inline-start:0;margin:-0.0625rem;overflow:hidden;padding:0;position:absolute;top:0;width:0.0625rem}\n\n[dir=ltr] .ergWt_bGBk{left:0}\n\n[dir=rtl] .ergWt_bGBk{right:0}";
  },
  'root': 'ergWt_bGBk'
};
/**
---
category: components/utilities
---
@module ScreenReaderContent
**/

var ScreenReaderContent = (_dec = themeable(null, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(ScreenReaderContent, _Component);

  var _super = _createSuper(ScreenReaderContent);

  function ScreenReaderContent() {
    _classCallCheck(this, ScreenReaderContent);

    return _super.apply(this, arguments);
  }

  _createClass(ScreenReaderContent, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          props = _objectWithoutProperties(_this$props, ["children"]);

      var ElementType = getElementType(ScreenReaderContent, props);
      return /*#__PURE__*/React.createElement(ElementType, Object.assign({}, passthroughProps(props), {
        className: styles.root
      }), children);
    }
  }]);

  ScreenReaderContent.displayName = "ScreenReaderContent";
  return ScreenReaderContent;
}(Component), _class2.propTypes = {
  /**
   * the element type to render as
   */
  as: PropTypes.elementType,

  /**
   * content meant for screen readers only
   */
  children: PropTypes.node
}, _class2.defaultProps = {
  as: 'span',
  children: null
}, _temp)) || _class);
export default ScreenReaderContent;
export { ScreenReaderContent };
import * as React from 'react';

export type NumberInputRenderLabel = React.ReactNode | ((...args: any[])=>any);

export type NumberInputInteraction = "enabled" | "disabled" | "readonly";

export type NumberInputSize = "medium" | "large";

export type NumberInputValue = string | number;

export type NumberInputDisplay = "inline-block" | "block";

export type NumberInputInputMode = "numeric" | "decimal" | "tel";

export interface NumberInputProps {
    /**
     * The form field label.
     */
    renderLabel: NumberInputRenderLabel;
    /**
     * The id of the input. One is generated if not supplied.
     */
    id?: string;
    /**
     * Specifies if interaction with the input is enabled, disabled, or readonly.
     * When "disabled", the input changes visibly to indicate that it cannot
     * receive user interactions. When "readonly" the input still cannot receive
     * user interactions but it keeps the same styles as if it were enabled.
     */
    interaction?: NumberInputInteraction;
    /**
     * Object with shape: `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
    /**
     * Html placeholder text to display when the input has no value. This
     * should be hint text, not a label replacement.
     */
    placeholder?: string;
    /**
     * Whether or not the text input is required.
     */
    isRequired?: boolean;
    /**
     * Whether or not to display the up/down arrow buttons.
     */
    showArrows?: boolean;
    /**
     * The size of the input.
     */
    size?: NumberInputSize;
    /**
     * The value of the input (should be accompanied by an `onChange` prop).
     */
    value?: NumberInputValue;
    /**
     * The width of the input.
     */
    width?: string;
    /**
     * The display of the root element.
     */
    display?: NumberInputDisplay;
    /**
     * A function that provides a reference to the actual input element.
     */
    inputRef?: (...args: any[])=>any;
    /**
     * Callback fired when input receives focus.
     */
    onFocus?: (...args: any[])=>any;
    /**
     * Callback fired when the input loses focus.
     */
    onBlur?: (...args: any[])=>any;
    /**
     * Callback executed when the input fires a change event.
     * @param {Object} event - the event object
     * @param {Object} value - the string value of the input
     */
    onChange?: (...args: any[])=>any;
    /**
     * Called when the down arrow button is clicked, or the down arrow key is
     * pressed.
     */
    onDecrement?: (...args: any[])=>any;
    /**
     * Called when the up arrow button is clicked, or the up arrow key is
     * pressed.
     */
    onIncrement?: (...args: any[])=>any;
    /**
     * Callback fired when a key is pressed.
     */
    onKeyDown?: (...args: any[])=>any;
    /**
     * The inputMode attribute of the underlying `input` element,
     * can be one of ['numeric', 'decimal', 'tel']
     */
    inputMode?: NumberInputInputMode;
    /**
     * __Deprecated - use `renderLabel` instead__
     */
    label?: React.ReactNode;
    /**
     * __Deprecated - use `isRequired` instead__
     */
    required?: boolean;
    /**
     * __Deprecated - use `display` instead__
     */
    inline?: boolean;
}

export class NumberInput extends React.Component<NumberInputProps, any> {
    render(): JSX.Element;

}


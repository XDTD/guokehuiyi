import * as React from 'react';

export type TreeBrowserRootId = string | number;

export type TreeBrowserDefaultExpanded = string | number;

export type TreeBrowserSelectionType = "none" | "single";

export type TreeBrowserSize = "small" | "medium" | "large";

export type TreeBrowserVariant = "folderTree" | "indent";

export type TreeBrowserCollectionIcon = React.ReactNode | ((...args: any[])=>any);

export type TreeBrowserCollectionIconExpanded = React.ReactNode | ((...args: any[])=>any);

export type TreeBrowserItemIcon = React.ReactNode | ((...args: any[])=>any);

export interface TreeBrowserProps {
    /**
     * a normalized hash of collections, keyed by id, that contain an
     * :id, :name, :items (an array of item ids), :collections (an array of
     * collection ids), optional :descriptor text, optional :containerRef function,
     * an optional :renderBeforeItems TreeNode, and an optional :renderAfterItems TreeNode.
     * Each collection must have a unique id.
     */
    collections: Object;
    /**
     * a hash of items, keyed by id, that contain an :id, :name,
     * optional :descriptor text, and optional :thumbnail url
     */
    items: Object;
    /**
     * specifies the id of the root level collection, if present.
     * if no root is specified, all collections will be rendered
     * at the top level
     */
    rootId?: TreeBrowserRootId;
    /**
     * an array of expanded collection ids, must be accompanied by an 'onCollectionToggle' prop
     */
    expanded?: any;
    /**
     * an array of collection ids to expand by default
     */
    defaultExpanded?: TreeBrowserDefaultExpanded[];
    selectionType?: TreeBrowserSelectionType;
    size?: TreeBrowserSize;
    variant?: TreeBrowserVariant;
    collectionIcon?: TreeBrowserCollectionIcon;
    collectionIconExpanded?: TreeBrowserCollectionIconExpanded;
    itemIcon?: TreeBrowserItemIcon;
    /**
     * A function called with each item's props as an argument. The return value of this function is a
     * props object which will be passed to the item when it is rendered. This is useful for situations where
     * you need to render the item differently depending on it's props. For example, if you would like to
     * display a different icon for items with a certain name.
     */
    getItemProps?: (...args: any[])=>any;
    /**
     * whether or not to show the root collection specified in rootId prop or
     * to begin with its immediate subcollections and items instead
     */
    showRootCollection?: boolean;
    onCollectionClick?: (...args: any[])=>any;
    onCollectionToggle?: (...args: any[])=>any;
    onItemClick?: (...args: any[])=>any;
    /**
     * An optional label to assist visually impaired users
     */
    treeLabel?: string;
}

export class TreeBrowser extends React.Component<TreeBrowserProps, any> {
    render(): JSX.Element;

}


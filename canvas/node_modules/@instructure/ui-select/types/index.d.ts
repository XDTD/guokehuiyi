import * as React from 'react';

export type SelectRenderLabel = React.ReactNode | ((...args: any[])=>any);

export type SelectSize = "small" | "medium" | "large";

export type SelectInteraction = "enabled" | "disabled" | "readonly";

export type SelectHtmlSize = string | number;

export type SelectRenderBeforeInput = React.ReactNode | ((...args: any[])=>any);

export type SelectRenderAfterInput = React.ReactNode | ((...args: any[])=>any);

export interface SelectProps {
    /**
     * The form field label.
     */
    renderLabel: SelectRenderLabel;
    /**
     * The value to display in the text input.
     */
    inputValue?: string;
    /**
     * Whether or not to show the options list.
     */
    isShowingOptions?: boolean;
    /**
     * The id of the text input. One is generated if not supplied.
     */
    id?: string;
    /**
     * The size of the text input.
     */
    size?: SelectSize;
    /**
     * Additional helpful text to provide to screen readers about the operation
     * of the component.
     */
    assistiveText?: string;
    /**
     * Html placeholder text to display when the input has no value. This should
     * be hint text, not a label replacement.
     */
    placeholder?: string;
    /**
     * Specifies if interaction with the input is enabled, disabled, or readonly.
     * When "disabled", the input changes visibly to indicate that it cannot
     * receive user interactions. When "readonly" the input still cannot receive
     * user interactions but it keeps the same styles as if it were enabled.
     */
    interaction?: SelectInteraction;
    /**
     * Whether or not the text input is required.
     */
    isRequired?: boolean;
    /**
     * Whether the input is rendered inline with other elements or if it
     * is rendered as a block level element.
     */
    isInline?: boolean;
    /**
     * The width of the text input.
     */
    width?: string;
    /**
     * The width of the text input, in characters, if a width is not explicitly
     * provided via the `width` prop. Only applicable if `isInline={true}`.
     */
    htmlSize?: SelectHtmlSize;
    /**
     * The max width the options list can be before option text wraps. If not
     * set, the list will only display as wide as the text input.
     */
    optionsMaxWidth?: string;
    /**
     * The number of options that should be visible before having to scroll.
     */
    visibleOptionsCount?: number;
    /**
     * Displays messages and validation for the input. It should be an object
     * with the following shape:
     * `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
    /**
     * The placement of the options list.
     */
    placement?: any;
    /**
     * The parent in which to constrain the placement.
     */
    constrain?: any;
    /**
     * An element or a function returning an element to use mount the options
     * list to in the DOM (defaults to `document.body`)
     */
    mountNode?: any;
    /**
     * Callback fired when text input receives focus.
     */
    onFocus?: (...args: any[])=>any;
    /**
     * Callback fired when text input loses focus.
     */
    onBlur?: (...args: any[])=>any;
    /**
     * Callback fired when text input value changes.
     */
    onInputChange?: (...args: any[])=>any;
    /**
     * Callback fired requesting that the options list be shown.
     */
    onRequestShowOptions?: (...args: any[])=>any;
    /**
     * Callback fired requesting that the options list be hidden.
     */
    onRequestHideOptions?: (...args: any[])=>any;
    /**
     * Callback fired requesting a particular option be highlighted.
     */
    onRequestHighlightOption?: (...args: any[])=>any;
    /**
     * Callback fired requesting a particular option be selected.
     */
    onRequestSelectOption?: (...args: any[])=>any;
    /**
     * A ref to the html `input` element.
     */
    inputRef?: (...args: any[])=>any;
    /**
     * A ref to the html `ul` element.
     */
    listRef?: (...args: any[])=>any;
    /**
     * Content to display before the text input. This will commonly be an icon or
     * tags to show multiple selections.
     */
    renderBeforeInput?: SelectRenderBeforeInput;
    /**
     * Content to display after the text input. This content will replace the
     * default arrow icons.
     */
    renderAfterInput?: SelectRenderAfterInput;
    /**
     * Children of type `<Select.Option />` or `<Select.Group />`.
     */
    children?: any;
    /**
     * Prevents the default behavior of wrapping the input and rendered content
     * when available space is exceeded.
     */
    shouldNotWrap?: boolean;
}

export class Select extends React.Component<SelectProps, any> {
    render(): JSX.Element;

}


import * as React from 'react';

export type ResponsiveMatch = "element" | "media";

export interface ResponsiveProps {
    /**
     * Specifies if the `<Responsive />` component should use element or media queries
     */
    match?: ResponsiveMatch;
    /**
     * Consists of an object where the keys define the names of breakpoints. The values are query objects
     * with keys representing the breakpoint condition and values representing a breakpoint value as a
     * string or number. Ex. `{small: { maxWidth: 400 }, large: { minWidth: '600em'}}`
     */
    query?: any;
    /**
     * Consists of an object where the keys match the breakpoint names used in the query. The values
     * are objects with keys representing prop names and values representing prop values Ex.
     * `{small: { myProp: 'fillscreen' }, large: { myProp: 'fillcontainer' }}`
     */
    props?: any;
    /**
     * Function called on render with the following form `(props, matches) => {...}` where the props
     * are the current props to be applied and matches is an array of current matches from the query
     * prop. Either this or a `children` prop function must be supplied.
     */
    render?: (...args: any[])=>any;
    /**
     * Function that takes the same form and arguments as the render prop. Either this or a `render`
     * prop function must be supplied.
     */
    children?: (...args: any[])=>any;
}

export class Responsive extends React.Component<ResponsiveProps, any> {
    render(): JSX.Element;

}


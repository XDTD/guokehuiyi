"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Responsive = exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _console = require("@instructure/console");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _deepEqual = require("@instructure/ui-utils/lib/deepEqual.js");

var _addElementQueryMatchListener = require("../addElementQueryMatchListener.js");

var _addMediaQueryMatchListener = require("../addMediaQueryMatchListener.js");

var _ResponsivePropTypes = require("../ResponsivePropTypes.js");

var _findDOMNode = require("@instructure/ui-dom-utils/lib/findDOMNode.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
---
category: components
---
**/
var Responsive = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Responsive, _Component);

  var _super = (0, _createSuper2.default)(Responsive);

  function Responsive() {
    var _this;

    (0, _classCallCheck2.default)(this, Responsive);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._matchListener = null;
    _this.state = {
      matches: [],
      hasRendered: false
    };

    _this.updateMatches = function (matches, cb) {
      _this.setState({
        matches: matches
      }, function () {
        if (typeof cb === 'function') {
          cb();
        }
      });
    };

    return _this;
  }

  (0, _createClass2.default)(Responsive, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      /*#__PURE__*/
      ( /*#__PURE__*/0, _console.error)(this.props.render || this.props.children, "[Responsive] must have either a `render` prop or `children` prop.");

      if (this.props.match === 'element') {
        // Because Responsive renders an empty div initially, it always needs to
        // re-render with the children provided. If there are no matches the match
        // listener won't trigger an update, so we handle this update explicitly.
        var initialMatches = (0, _addElementQueryMatchListener.updateElementMatches)(this.props.query, this) || [];
        this.setState({
          matches: initialMatches,
          hasRendered: true
        });
      } else {
        this.setState({
          hasRendered: true
        });
      }

      this._matchListener = this.addMatchListener(this.props.query, this.updateMatches);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeMatchListener();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props,
          match = _this$props.match,
          query = _this$props.query;

      if (match !== prevProps.match || !(0, _deepEqual.deepEqual)(query, prevProps.query)) {
        this.removeMatchListener();
        this._matchListener = this.addMatchListener(query, this.updateMatches, match);
      }
    }
  }, {
    key: "addMatchListener",
    value: function addMatchListener(query, updateMatches) {
      var _this2 = this;

      var match = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.props.match;
      var matchListener = match === 'element' ? _addElementQueryMatchListener.addElementQueryMatchListener : _addMediaQueryMatchListener.addMediaQueryMatchListener; // TODO: refactor to use a ref to root div instead of `this`

      return matchListener(query, function () {
        return (0, _findDOMNode.findDOMNode)(_this2);
      }, updateMatches);
    }
  }, {
    key: "removeMatchListener",
    value: function removeMatchListener() {
      if (this._matchListener) {
        this._matchListener.remove();
      }
    }
  }, {
    key: "mergeProps",
    value: function mergeProps(matches, props) {
      if (!props) {
        return null;
      }

      var mergedProps = {};
      matches.forEach(function (match) {
        var matchProps = props[match]; // Iterate over the props for the current match. If that the prop is
        // already in `mergedProps` that means that the prop was defined for
        // multiple breakpoints, and more than one of those breakpoints is being
        // currently applied so we log an error.

        Object.keys(matchProps).forEach(function (prop) {
          /*#__PURE__*/
          ( /*#__PURE__*/0, _console.error)(!(prop in mergedProps), ["[Responsive] The prop `".concat(prop, "` is defined at 2 or more breakpoints"), "which are currently applied at the same time. Its current value, `".concat(mergedProps[prop], "`,"), "will be overwritten as `".concat(matchProps[prop], "`.")].join(' '));
          mergedProps[prop] = matchProps[prop];
        });
      });
      return mergedProps;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          matches = _this$state.matches,
          hasRendered = _this$state.hasRendered;
      var _this$props2 = this.props,
          props = _this$props2.props,
          render = _this$props2.render,
          children = _this$props2.children;
      var renderFunc; // Responsive needs to render once to measure the dom and obtain matches.
      // Calling the render prop on this initial render can cause visual side
      // effects and is slower than rendering an empty div.

      if (hasRendered) {
        // Render via the children or render method, whichever is supplied. If
        // both are supplied, give preference to children.
        renderFunc = children || render;
      }

      return /*#__PURE__*/_react.default.createElement("div", null, renderFunc && renderFunc(this.mergeProps(matches, props), matches));
    }
  }]);
  Responsive.displayName = "Responsive";
  return Responsive;
}(_react.Component);

exports.Responsive = Responsive;
Responsive.propTypes = {
  /**
   * Specifies if the `<Responsive />` component should use element or media queries
   */
  match: _propTypes.default.oneOf(['element', 'media']),

  /**
   * Consists of an object where the keys define the names of breakpoints. The values are query objects
   * with keys representing the breakpoint condition and values representing a breakpoint value as a
   * string or number. Ex. `{small: { maxWidth: 400 }, large: { minWidth: '600em'}}`
   */
  query: _propTypes.default.objectOf(_ResponsivePropTypes.ResponsivePropTypes.validQuery).isRequired,

  /**
   * Consists of an object where the keys match the breakpoint names used in the query. The values
   * are objects with keys representing prop names and values representing prop values Ex.
   * `{small: { myProp: 'fillscreen' }, large: { myProp: 'fillcontainer' }}`
   */
  props: _propTypes.default.objectOf(_propTypes.default.object),

  /**
   * Function called on render with the following form `(props, matches) => {...}` where the props
   * are the current props to be applied and matches is an array of current matches from the query
   * prop. Either this or a `children` prop function must be supplied.
   */
  render: _propTypes.default.func,

  /**
   * Function that takes the same form and arguments as the render prop. Either this or a `render`
   * prop function must be supplied.
   */
  children: _propTypes.default.func
};
Responsive.defaultProps = {
  children: null,
  render: void 0,
  match: 'element',
  props: null
};
var _default = Responsive;
exports.default = _default;
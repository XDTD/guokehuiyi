"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KeyboardFocusRegion = exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _console = require("@instructure/console");

var _findDOMNode = require("@instructure/ui-dom-utils/lib/findDOMNode.js");

var _findTabbable = require("@instructure/ui-dom-utils/lib/findTabbable.js");

var _findFocusable = require("@instructure/ui-dom-utils/lib/findFocusable.js");

var _ownerWindow = require("@instructure/ui-dom-utils/lib/ownerWindow.js");

var _getActiveElement = require("@instructure/ui-dom-utils/lib/getActiveElement.js");

var _addEventListener = require("@instructure/ui-dom-utils/lib/addEventListener.js");

var _ownerDocument = require("@instructure/ui-dom-utils/lib/ownerDocument.js");

var _containsActiveElement = require("@instructure/ui-dom-utils/lib/containsActiveElement.js");

var _requestAnimationFrame = require("@instructure/ui-dom-utils/lib/requestAnimationFrame.js");

var _keycode = _interopRequireDefault(require("keycode"));

var _scopeTab = require("./scopeTab");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var KeyboardFocusRegion = /*#__PURE__*/function () {
  function KeyboardFocusRegion(element, options) {
    var _this = this;

    (0, _classCallCheck2.default)(this, KeyboardFocusRegion);
    this._contextElement = null;
    this._focusLaterElement = null;
    this._needToFocus = false;
    this._listeners = [];
    this._raf = [];
    this._active = false;

    this.handleDismiss = function (event) {
      _this._options.onDismiss(event);
    };

    this.handleKeyDown = function (event) {
      if (event.keyCode === _keycode.default.codes.tab) {
        (0, _scopeTab.scopeTab)(_this._contextElement, event);
      }
    };

    this.handleClick = function (event) {
      _this._wasDocumentClick = true;
    };

    this.handleWindowBlur = function (event) {
      if (_this._wasDocumentClick) {
        _this._wasDocumentClick = false;
        return;
      }

      _this._needToFocus = true;
    };

    this.handleFocus = function (event) {
      if (_this._needToFocus) {
        _this._needToFocus = false;

        if (!_this._contextElement) {
          return;
        } // need to see how jQuery shims document.on('focusin') so we don't need the
        // setTimeout, firefox doesn't support focusin, if it did, we could focus
        // the element outside of a setTimeout. Side-effect of this implementation
        // is that the document.body gets focus, and then we focus our element right
        // after, seems fine.


        _this._raf.push((0, _requestAnimationFrame.requestAnimationFrame)(function () {
          if ((0, _containsActiveElement.containsActiveElement)(_this._contextElement)) {
            return;
          }

          _this.focusDefaultElement();
        }));
      }
    };

    this.handleFirstTabbableKeyDown = function (event) {
      if (event.keyCode === _keycode.default.codes.tab && event.shiftKey) {
        _this._options.onBlur(event);
      }
    };

    this.handleLastTabbableKeyDown = function (event) {
      if (event.keyCode === _keycode.default.codes.tab && !event.shiftKey) {
        _this._options.onBlur(event);
      }
    };

    this._contextElement = (0, _findDOMNode.findDOMNode)(element);
    this._options = options || {
      shouldContainFocus: true,
      shouldReturnFocus: true,
      onBlur: function onBlur(event) {},
      onDismiss: function onDismiss(event) {},
      defaultFocusElement: null
    };

    if (this._options.shouldReturnFocus) {
      this._focusLaterElement = this.activeElement;
    }
  }

  (0, _createClass2.default)(KeyboardFocusRegion, [{
    key: "updateElement",
    value: function updateElement(element) {
      this._contextElement = (0, _findDOMNode.findDOMNode)(element);
    }
  }, {
    key: "focusDefaultElement",
    value: function focusDefaultElement() {
      var defaultFocusElement = this.defaultFocusElement,
          shouldContainFocus = this.shouldContainFocus;

      if (defaultFocusElement) {
        defaultFocusElement.focus();
      } else {
        if (shouldContainFocus) {
          // Blur the active element to place focus on the document body
          this.activeElement.blur();

          /*#__PURE__*/
          ( /*#__PURE__*/0, _console.error)(true, "\n          [KeyboardFocusRegion] No `defaultFocusElement` was provided and `shouldContainFocus`\n          was set to `true`. Focus has been moved to the document body instead.\n          ");
        }
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      var _this2 = this;

      if (this.focused) {
        return;
      }

      this._raf.push((0, _requestAnimationFrame.requestAnimationFrame)(function () {
        _this2.focusDefaultElement();
      }));
    }
  }, {
    key: "blur",
    value: function blur() {
      if (this._options.shouldReturnFocus && this._focusLaterElement) {
        try {
          this._focusLaterElement.focus();
        } catch (e) {
          /*#__PURE__*/
          ( /*#__PURE__*/0, _console.error)(false, "\n          [KeyboardFocusRegion] You tried to return focus to ".concat(this._focusLaterElement, "\n          but it is not in the DOM anymore: ").concat(e, "\n          "));
        }

        this._focusLaterElement = null;
      }
    }
  }, {
    key: "activate",
    value: function activate() {
      var defaultFocusElement = this.defaultFocusElement,
          shouldContainFocus = this.shouldContainFocus;

      if (!this._active) {
        if (defaultFocusElement || shouldContainFocus) {
          if (shouldContainFocus) {
            this._listeners.push((0, _addEventListener.addEventListener)(this.doc, 'keydown', this.handleKeyDown));
          } else {
            this._listeners.push((0, _addEventListener.addEventListener)(this.firstTabbable || defaultFocusElement, 'keydown', this.handleFirstTabbableKeyDown));

            this._listeners.push((0, _addEventListener.addEventListener)(this.lastTabbable || defaultFocusElement, 'keydown', this.handleLastTabbableKeyDown));
          }

          this._listeners.push((0, _addEventListener.addEventListener)(this.doc, 'click', this.handleClick, true));

          this._listeners.push((0, _addEventListener.addEventListener)(this.win, 'blur', this.handleWindowBlur, false));

          this._listeners.push((0, _addEventListener.addEventListener)(this.doc, 'focus', this.handleFocus, true));

          this._active = true;
        }
      }
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      if (this._active) {
        this._listeners.forEach(function (listener) {
          listener.remove();
        });

        this._listeners = [];

        this._raf.forEach(function (request) {
          return request.cancel();
        });

        this._raf = [];
        this._preventCloseOnDocumentClick = false;
        this._active = false;
      }
    }
  }, {
    key: "focused",
    get: function get() {
      return (0, _containsActiveElement.containsActiveElement)(this._contextElement);
    }
  }, {
    key: "shouldContainFocus",
    get: function get() {
      var shouldContainFocus = this._options.shouldContainFocus;
      return shouldContainFocus === true || Array.isArray(shouldContainFocus) && shouldContainFocus.includes['keyboard'];
    }
  }, {
    key: "focusable",
    get: function get() {
      return (0, _findFocusable.findFocusable)(this._contextElement, function () {
        return true;
      }, true) || [];
    }
  }, {
    key: "tabbable",
    get: function get() {
      return (0, _findTabbable.findTabbable)(this._contextElement) || [];
    }
  }, {
    key: "firstTabbable",
    get: function get() {
      return this.tabbable[0];
    }
  }, {
    key: "lastTabbable",
    get: function get() {
      return this.tabbable.pop();
    }
  }, {
    key: "firstFocusable",
    get: function get() {
      return this.focusable[0];
    }
  }, {
    key: "lastFocusable",
    get: function get() {
      return this.focusable.pop();
    }
  }, {
    key: "doc",
    get: function get() {
      return (0, _ownerDocument.ownerDocument)(this._contextElement);
    }
  }, {
    key: "win",
    get: function get() {
      return (0, _ownerWindow.ownerWindow)(this._contextElement);
    }
  }, {
    key: "activeElement",
    get: function get() {
      return (0, _getActiveElement.getActiveElement)(this.doc);
    }
  }, {
    key: "defaultFocusElement",
    get: function get() {
      var defaultFocusElement = this._options.defaultFocusElement;
      var element = (0, _findDOMNode.findDOMNode)(typeof defaultFocusElement === 'function' ? defaultFocusElement() : defaultFocusElement);

      if (element && this._contextElement && this._contextElement.contains(element)) {
        return element;
      }

      var firstTabbable = this.firstTabbable;

      if (firstTabbable) {
        return firstTabbable;
      }

      if (this.focusable.includes(this._contextElement)) {
        return this._contextElement;
      }

      return null;
    }
  }]);
  return KeyboardFocusRegion;
}();

exports.KeyboardFocusRegion = KeyboardFocusRegion;
var _default = KeyboardFocusRegion;
exports.default = _default;
import * as React from 'react';

export type TruncateTextMaxLines = string | number;

export type TruncateTextPosition = "end" | "middle";

export type TruncateTextTruncate = "character" | "word";

export interface TruncateTextProps {
    /**
     * The content to be truncated.
     */
    children: React.ReactNode;
    /**
     * Number of lines to allow before truncating. `auto` will fit to parent
     */
    maxLines?: TruncateTextMaxLines;
    /**
     * Where to place the ellipsis within the string
     */
    position?: TruncateTextPosition;
    /**
     * Add ellipsis after words or after any character
     */
    truncate?: TruncateTextTruncate;
    /**
     * A string to use as the ellipsis
     */
    ellipsis?: string;
    /**
     * Characters to ignore at truncated end of string
     */
    ignore?: string[];
    /**
     * Debounce delay in milliseconds
     */
    debounce?: number;
    /**
     * Callback when truncated text has changed
     */
    onUpdate?: (...args: any[])=>any;
    /**
     * Force truncation of invisible elements (hack; will be removed in favor
     * of a better fix)
     */
    shouldTruncateWhenInvisible?: boolean;
}

export class TruncateText extends React.Component<TruncateTextProps, any> {
    render(): JSX.Element;

}


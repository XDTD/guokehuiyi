import * as React from 'react';

export type PopoverOn = "click" | "hover" | "focus" | ("click" | "hover" | "focus")[];

export type PopoverColor = "primary" | "primary-inverse";

export type PopoverDefaultFocusElement = React.ReactElement<any> | ((...args: any[])=>any);

export type PopoverOffsetX = string | number;

export type PopoverOffsetY = string | number;

export type PopoverPositionTarget = any | ((...args: any[])=>any);

export type PopoverInsertAt = "bottom" | "top";

export type PopoverLiveRegion = React.ReactElement<any>[] | React.ReactElement<any> | ((...args: any[])=>any);

export type PopoverRenderTrigger = React.ReactNode | ((...args: any[])=>any);

export type PopoverChildren = React.ReactNode | ((...args: any[])=>any);

export type PopoverVariant = "default" | "inverse";

export interface PopoverProps {
    /**
     * Whether or not the `<Popover />` content is shown
     */
    isShowingContent?: boolean;
    /**
     * Whether or not to show the content by default, when uncontrolled
     */
    defaultIsShowingContent?: boolean;
    /**
     * The action that causes the content to display (`click`, `hover`, `focus`)
     */
    on?: PopoverOn;
    /**
     * Whether or not an arrow pointing to the trigger should be rendered
     */
    withArrow?: boolean;
    /**
     * Color variant of the popover content
     */
    color?: PopoverColor;
    /**
     * The placement of the content in relation to the trigger
     */
    placement?: any;
    /**
     * Controls the shadow depth for the `<Popover />`
     */
    shadow?: any;
    /**
     * Controls the z-index depth for the `<Popover />` content
     */
    stacking?: any;
    /**
     * A function that returns a reference to the content element
     */
    contentRef?: (...args: any[])=>any;
    /**
     * An element or a function returning an element to focus by default
     */
    defaultFocusElement?: PopoverDefaultFocusElement;
    /**
     * An accessible label for the `<Popover />` content
     */
    screenReaderLabel?: string;
    /**
     * The horizontal offset for the positioned content
     */
    offsetX?: PopoverOffsetX;
    /**
     * The vertical offset for the positioned content
     */
    offsetY?: PopoverOffsetY;
    /**
     * The parent in which to constrain the popover.
     * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
     * or a function returning an element
     */
    constrain?: any;
    /**
     * Target element for positioning the Popover (if it differs from the trigger)
     */
    positionTarget?: PopoverPositionTarget;
    /**
     * An element or a function returning an element to use as the mount node
     * for the `<Popover />` (defaults to `document.body`)
     */
    mountNode?: any;
    /**
     * Insert the element at the 'top' of the mountNode or at the 'bottom'
     */
    insertAt?: PopoverInsertAt;
    /**
     * An element, function returning an element, or array of elements that will
     * not be hidden from the screen reader when the `<Popover />` is open
     */
    liveRegion?: PopoverLiveRegion;
    /**
     * An id is generated if not supplied.
     */
    id?: string;
    /**
     * Whether or not the content should offset to align by its arrow
     */
    shouldAlignArrow?: boolean;
    /**
     * Whether or not position should be tracked or just set on initial render
     */
    shouldTrackPosition?: boolean;
    /**
     * Should the `<Popover />` render offscreen when visually hidden
     */
    shouldRenderOffscreen?: boolean;
    /**
     * Whether focus should contained within the `<Popover/>` when it is open
     */
    shouldContainFocus?: boolean;
    /**
     * Whether focus should be returned to the trigger when the `<Popover/>` is closed
     */
    shouldReturnFocus?: boolean;
    /**
     * Should the `<Popover />` hide when clicks occur outside the content
     */
    shouldCloseOnDocumentClick?: boolean;
    /**
     * Should the `<Popover />` hide when the escape key is pressed
     */
    shouldCloseOnEscape?: boolean;
    /**
     * Should the content become focused when the trigger is blurred
     */
    shouldFocusContentOnTriggerBlur?: boolean;
    /**
     * Callback fired when content is shown. When controlled, this callback is
     * fired when the Popover expects to be shown
     */
    onShowContent?: (...args: any[])=>any;
    /**
     * Callback fired when content is hidden. When controlled, this callback is
     * fired when the Popover expects to be hidden
     */
    onHideContent?: (...args: any[])=>any;
    /**
     * Callback fired when content has been is initially positioned.
     * If `shouldRenderOffscreen` is true, it will only fire once, the first
     * time the content is shown
     */
    onPositioned?: (...args: any[])=>any;
    /**
     * Callback fired when the position changes
     */
    onPositionChanged?: (...args: any[])=>any;
    /**
     * Callback fired when component is clicked
     */
    onClick?: (...args: any[])=>any;
    /**
     * Callback fired when trigger is focused
     */
    onFocus?: (...args: any[])=>any;
    /**
     * Callback fired when component is blurred
     */
    onBlur?: (...args: any[])=>any;
    /**
     * Callback fired on keydown
     */
    onKeyDown?: (...args: any[])=>any;
    /**
     * Callback fired on keyup
     */
    onKeyUp?: (...args: any[])=>any;
    /**
     * /**
     * Callback fired when mouse is over trigger
     */
    onMouseOver?: (...args: any[])=>any;
    /**
     * Callback fired when mouse leaves trigger
     */
    onMouseOut?: (...args: any[])=>any;
    /**
     * The element that triggers the popover
     */
    renderTrigger?: PopoverRenderTrigger;
    /**
     * The content to be shown by the popover
     */
    children?: PopoverChildren;
    /**
     * eslint-disable react/require-default-props
     */
    show?: boolean;
    /**
     * __Deprecated - use `defaultIsShowingContent` instead__
     */
    defaultShow?: boolean;
    /**
     * __Deprecated - use `color`__
     */
    variant?: PopoverVariant;
    /**
     * __Deprecated - use `shouldAlignArrow`__
     */
    alignArrow?: boolean;
    /**
     * __Deprecated - use `screenReaderLabel`__
     */
    label?: string;
    /**
     * __Deprecated - use `shouldTrackPosition`__
     */
    trackPosition?: boolean;
    /**
     * __Deprecated - use `onShowContent`__
     */
    onShow?: (...args: any[])=>any;
    /**
     * __Deprecated - use `onHideContent`__
     */
    onDismiss?: (...args: any[])=>any;
    /**
     * __Deprecated - use `onShowContent` and `onHideContent`__
     */
    onToggle?: (...args: any[])=>any;
}

export class Popover extends React.Component<PopoverProps, any> {
    render(): JSX.Element;

}


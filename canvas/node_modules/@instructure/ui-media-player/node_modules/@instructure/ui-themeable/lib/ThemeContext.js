"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThemeContext = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * ---
 * category: utilities/themes
 * ---
 * @module ThemeContext
 */
var CONTEXT_KEY = '@@themeable';
var ThemeContext = {
  CONTEXT_KEY: CONTEXT_KEY,

  /**
   * React context types for [themeable](#themeable) components and
   * the [ApplyTheme](#ApplyTheme) component.
   */
  types: (0, _defineProperty2.default)({}, CONTEXT_KEY, _propTypes.default.object),

  /**
   * create theme context
   * @param {Object} theme an object containing [themeable](#themeable) component themes
   * @param {Boolean} immutable prevent theme overrides?
   */
  makeThemeContext: function makeThemeContext(theme, immutable) {
    return (0, _defineProperty2.default)({}, CONTEXT_KEY, {
      theme: theme,
      immutable: immutable
    });
  },

  /**
   * get a theme context
   * @param {ReactContext} context React context object
   */
  getThemeContext: function getThemeContext(context) {
    if (context) {
      return context[CONTEXT_KEY];
    }
  }
};
exports.ThemeContext = ThemeContext;
var _default = ThemeContext;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformCss = transformCss;
exports.toRules = toRules;
exports.isKeyframesSelector = isKeyframesSelector;
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _parseCss = require("./parseCss");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
function transformCss(cssText, transform) {
  var node = (0, _parseCss.parseCss)(cssText);

  if (typeof transform === 'function') {
    node = transformNode(node, transform);
  }

  return toCssText(node);
}

function isKeyframesSelector(rule) {
  return rule.parent && rule.parent.type === _parseCss.ruleTypes.keyframes;
}

function toRules(cssText) {
  var node = (0, _parseCss.parseCss)(cssText);
  var rules = [];

  if (node.rules && node.rules.length > 0) {
    rules = node.rules.map(function (rule) {
      return toCssText(rule);
    });
  } else {
    var _cssText = toCssText(node);

    if (_cssText) {
      rules = [_cssText];
    }
  }

  return rules;
}

function transformNode(node, transform) {
  if (!node) {
    return;
  }

  if (node.type === _parseCss.ruleTypes.style) {
    return transform(node);
  }

  var rules = node.rules || [];
  var transformed = (0, _objectSpread2.default)({}, node);
  transformed.rules = rules.map(function (rule) {
    return transformNode(rule, transform);
  });
  return transformed;
}

function toCssText(node, text) {
  var cssText = '';
  var result = text || '';

  if (node.rules && node.rules.length > 0) {
    cssText = node.rules.map(function (rule) {
      return toCssText(rule, cssText);
    }).join('\n');
  } else {
    cssText = node.cssText.trim();

    if (cssText) {
      cssText = "  ".concat(cssText, "\n");
    }
  }

  if (cssText) {
    var prefix = node.selector ? "".concat(node.selector, " {\n") : '';
    var suffix = node.selector ? '}\n' : '';
    result += "".concat(prefix).concat(cssText).concat(suffix);
  }

  return result;
}

var _default = transformCss;
exports.default = _default;
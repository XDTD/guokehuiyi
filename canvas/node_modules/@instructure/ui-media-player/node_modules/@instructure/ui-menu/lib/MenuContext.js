"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuContext = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var CONTEXT_KEY = '@@menu';
/**
---
private: true
---
@module MenuContextTypes
**/

var MenuContext = {
  types: (0, _defineProperty2.default)({}, CONTEXT_KEY, _propTypes.default.shape({
    registerMenuItem: _propTypes.default.func,
    removeMenuItem: _propTypes.default.func
  })),
  makeMenuContext: function makeMenuContext(_ref) {
    var registerMenuItem = _ref.registerMenuItem,
        removeMenuItem = _ref.removeMenuItem;
    return (0, _defineProperty2.default)({}, CONTEXT_KEY, {
      registerMenuItem: registerMenuItem,
      removeMenuItem: removeMenuItem
    });
  },
  getMenuContext: function getMenuContext(context) {
    if (context) {
      return context[CONTEXT_KEY];
    }
  }
};
exports.MenuContext = MenuContext;
var _default = MenuContext;
exports.default = _default;
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * ---
 * category: utilities
 * ---
 * Deep merge N objects into a single result object.
 * Merging creates a new object, so that none of the arguments are modified.
 *
 * @param {Object} arguments objects to merge
 * @returns {Object} a new object with items from all arguments
 */
function mergeDeep() {
  var args = Array.prototype.slice.call(arguments);
  var target = {};
  args.forEach(function (arg) {
    target = mergeSourceIntoTarget(target, arg);
  });
  return target;
}

function mergeSourceIntoTarget(target, source) {
  if (isObject(source)) {
    var keys = [].concat(_toConsumableArray(Object.keys(source)), _toConsumableArray(Object.getOwnPropertySymbols(source)));

    var merged = _objectSpread({}, target);

    keys.forEach(function (key) {
      if (isObject(target[key]) && isObject(source[key])) {
        merged[key] = mergeSourceIntoTarget(target[key], source[key]);
      } else if (isArray(source[key]) && isArray(target[key])) {
        merged[key] = _toConsumableArray(new Set([].concat(_toConsumableArray(target[key]), _toConsumableArray(source[key]))));
      } else if (isArray(target[key])) {
        merged[key] = _toConsumableArray(new Set([].concat(_toConsumableArray(target[key]), [source[key]])));
      } else {
        merged[key] = source[key];
      }
    });
    return merged;
  } else {
    return _objectSpread({}, target);
  }
}

function isObject(item) {
  return item && (typeof item === 'object' || typeof item === 'function') && !Array.isArray(item);
}

function isArray(item) {
  return item && Array.isArray(item);
}

export default mergeDeep;
export { mergeDeep };
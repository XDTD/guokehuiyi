"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addResizeListener = addResizeListener;
exports.default = void 0;

var _findDOMNode = require("./findDOMNode");

var _getBoundingClientRect = require("./getBoundingClientRect");

var _requestAnimationFrame = require("./requestAnimationFrame");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// TODO: replace with https://wicg.github.io/ResizeObserver/ when it's supported

/**
 * ---
 * category: utilities/DOM
 * ---
 * @module
 * Adds a listener to an element and calls a specified handler
 * function whenever the size changes
 *
 * @param {ReactComponent|DomNode} el - component or DOM node
 * @param {function} handler - function to run when resize occurs
 * @returns {function} remove - cancel the listener and no longer execute the handler function
 */
function addResizeListener(el, handler) {
  var dimensions = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ['width'];
  var node = (0, _findDOMNode.findDOMNode)(el);
  var origSize = (0, _getBoundingClientRect.getBoundingClientRect)(node);
  var cancelled = false;
  var raf;

  var checkDimensions = function checkDimensions() {
    if (cancelled) {
      return;
    }

    var boundingRect = (0, _getBoundingClientRect.getBoundingClientRect)(node);
    var size = {
      width: boundingRect.width,
      height: boundingRect.height
    };

    if (dimensions.some(function (dim) {
      return size[dim] != origSize[dim];
    }) && typeof handler === 'function') {
      handler(size);
    }

    origSize = size;
    raf = (0, _requestAnimationFrame.requestAnimationFrame)(checkDimensions);
  };

  checkDimensions();
  return {
    remove: function remove() {
      cancelled = true;
      raf.cancel();
    }
  };
}

var _default = addResizeListener;
exports.default = _default;
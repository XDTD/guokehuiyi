import * as React from 'react';

export type ButtonType = "button" | "submit" | "reset";

export type ButtonSize = "small" | "medium" | "large";

export type ButtonInteraction = "enabled" | "disabled" | "readonly";

export type ButtonColor = "primary" | "primary-inverse" | "secondary" | "success" | "danger";

export type ButtonFocusColor = "info" | "inverse";

export type ButtonDisplay = "inline-block" | "block";

export type ButtonTextAlign = "start" | "center";

export type ButtonRenderIcon = React.ReactNode | ((...args: any[])=>any);

export type ButtonVariant = "default" | "primary" | "success" | "danger" | "light" | "ghost" | "ghost-inverse" | "link" | "link-inverse" | "circle-default" | "circle-primary" | "circle-danger" | "icon" | "icon-inverse";

export type ButtonIcon = ((...args: any[])=>any) | React.ReactElement<any>;

export interface ButtonProps {
    /**
     * Specifies the `Button` children.
     */
    children?: React.ReactNode;
    /**
     * Specifies the type of the `Button`'s underlying html element.
     */
    type?: ButtonType;
    /**
     * The size of the `Button`
     */
    size?: ButtonSize;
    /**
     * Provides a reference to the `Button`'s underlying html element.
     */
    elementRef?: (...args: any[])=>any;
    /**
     * The element to render as the component root, `Button` by default.
     */
    as?: any;
    /**
     * Specifies if interaction with the `Button` is enabled, disabled, or readonly.
     */
    interaction?: ButtonInteraction;
    /**
     * Specifies the color for the `Button`.
     */
    color?: ButtonColor;
    /**
     * Override the `Button`'s default focus outline color.
     */
    focusColor?: ButtonFocusColor;
    /**
     * The `Button` display property. When set to `inline-block`, the `Button` displays inline with other elements.
     * When set to block, the `Button` expands to fill the width of the container.
     */
    display?: ButtonDisplay;
    /**
     * Sets the alignment of the `Button` children and/or icon.
     */
    textAlign?: ButtonTextAlign;
    /**
     * Specifies if the `Button` should render with a solid background. When false, the background is transparent.
     */
    withBackground?: boolean;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * Specify a mouse cursor to use when hovering over the button.
     * The `pointer` cursor is used by default.
     */
    cursor?: string;
    /**
     * Specifies an href attribute for the `Button`'s underlying html element.
     */
    href?: string;
    /**
     * An icon, or function that returns an icon.
     */
    renderIcon?: ButtonRenderIcon;
    /**
     * __Deprecated - use `elementRef` instead (See the [upgrade guide](#button-upgrade-guide/#v8-button-upgrade-guide-props-that-need-to-be-upgraded) for more details)__
     */
    buttonRef?: (...args: any[])=>any;
    /**
     * __Deprecated - see the [upgrade guide](#button-upgrade-guide/#v8-button-upgrade-guide-upgrading-variant-default,-primary,-success,-danger,-light,-ghost,-or-ghost-inverse)__
     */
    variant?: ButtonVariant;
    /**
     * __Deprecated - set `display="block"` and `textAlign="start"` instead (See the [upgrade guide](#button-upgrade-guide/#v8-button-upgrade-guide-props-that-need-to-be-upgraded) for more details)__
     */
    fluidWidth?: boolean;
    /**
     * __Deprecated - use `renderIcon` instead (See the [upgrade guide](#button-upgrade-guide/#v8-button-upgrade-guide-props-that-need-to-be-upgraded) for more details)__
     */
    icon?: ButtonIcon;
}

export class Button extends React.Component<ButtonProps, any> {
    render(): JSX.Element;

}




export type BaseButtonType = "button" | "submit" | "reset";

export type BaseButtonSize = "small" | "medium" | "large";

export type BaseButtonInteraction = "enabled" | "disabled" | "readonly";

export type BaseButtonColor = "primary" | "primary-inverse" | "secondary" | "success" | "danger";

export type BaseButtonFocusColor = "info" | "inverse";

export type BaseButtonDisplay = "inline-block" | "block";

export type BaseButtonTextAlign = "start" | "center";

export type BaseButtonShape = "rectangle" | "circle";

export type BaseButtonRenderIcon = React.ReactNode | ((...args: any[])=>any);

export type BaseButtonTabIndex = number | string;

export interface BaseButtonProps {
    /**
     * Specifies the `Button` children.
     */
    children?: React.ReactNode;
    /**
     * Specifies the type of the `Button`'s underlying html element.
     */
    type?: BaseButtonType;
    /**
     * The size of the `Button`
     */
    size?: BaseButtonSize;
    /**
     * Provides a reference to the `Button`'s underlying html element.
     */
    elementRef?: (...args: any[])=>any;
    /**
     * The element to render as the component root, `Button` by default.
     */
    as?: any;
    /**
     * Specifies if interaction with the `Button` is enabled, disabled, or readonly.
     */
    interaction?: BaseButtonInteraction;
    /**
     * Specifies the color for the `Button`.
     */
    color?: BaseButtonColor;
    /**
     * Override the `Button`'s default focus outline color.
     */
    focusColor?: BaseButtonFocusColor;
    /**
     * The `Button` display property. When set to `inline-block`, the `Button` displays inline with other elements.
     * When set to block, the `Button` expands to fill the width of the container.
     */
    display?: BaseButtonDisplay;
    /**
     * Sets the alignment of the `Button` children and/or icon.
     */
    textAlign?: BaseButtonTextAlign;
    /**
     * Specifies if the `Button` shape should be a circle or rectangle.
     */
    shape?: BaseButtonShape;
    /**
     * Specifies if the `Button` should render with a solid background. When false, the background is transparent.
     */
    withBackground?: boolean;
    /**
     * Specifies if the `Button` should render with a border.
     */
    withBorder?: boolean;
    /**
     * Designates if the `Button` should render without padding. This option should only be set when `withBorder` and
     * `withBackground` are also set to false.
     */
    isCondensed?: boolean;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * Specify a mouse cursor to use when hovering over the button.
     * The `pointer` cursor is used by default.
     */
    cursor?: string;
    /**
     * Specifies an href attribute for the `Button`'s underlying html element.
     */
    href?: string;
    /**
     * Callback fired when the `Button` is clicked.
     */
    onClick?: (...args: any[])=>any;
    /**
     * Callback fired when the `Button` receives a keydown event.
     */
    onKeyDown?: (...args: any[])=>any;
    /**
     * An icon, or function that returns an icon.
     */
    renderIcon?: BaseButtonRenderIcon;
    /**
     * Specifies the tabindex of the `Button`.
     */
    tabIndex?: BaseButtonTabIndex;
}

export class BaseButton extends React.Component<BaseButtonProps, any> {
    render(): JSX.Element;

}




export type CloseButtonScreenReaderLabel = string | React.ReactNode;

export type CloseButtonColor = "primary" | "primary-inverse";

export type CloseButtonInteraction = "enabled" | "disabled" | "readonly";

export type CloseButtonSize = "small" | "medium" | "large";

export type CloseButtonPlacement = "start" | "end" | "static";

export type CloseButtonOffset = "none" | "x-small" | "small" | "medium";

export type CloseButtonType = "button" | "submit" | "reset";

export type CloseButtonTabIndex = number | string;

export type CloseButtonVariant = "icon" | "icon-inverse";

export interface CloseButtonProps {
    /**
     * An accessible label for the `CloseButton` (required)
     */
    screenReaderLabel?: CloseButtonScreenReaderLabel;
    color?: CloseButtonColor;
    /**
     * Specifies if interaction with the `CloseButton` is enabled, disabled, or readonly.
     */
    interaction?: CloseButtonInteraction;
    /**
     * Provides a reference to the `CloseButton`'s underlying html element.
     */
    elementRef?: (...args: any[])=>any;
    /**
     * The size of the `CloseButton`
     */
    size?: CloseButtonSize;
    /**
     * Callback fired when the `CloseButton` is clicked.
     */
    onClick?: (...args: any[])=>any;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * Specifies the placement of the `CloseButton`
     */
    placement?: CloseButtonPlacement;
    /**
     * Specifies the offset distance for the `CloseButton` with respect to both the top and start/end of the container.
     * Note that for this property to have an effect, the `placement` prop must be set to either `start` or `end`. The
     * offset will also be created with respect to a positioned parent. If it does not appear to be working, try setting
     * the `position` of the parent container to `relative`.
     */
    offset?: CloseButtonOffset;
    /**
     * Specifies the type of the `Button`'s underlying html element.
     */
    type?: CloseButtonType;
    /**
     * The element to render as the component root, `CloseButton` by default.
     */
    as?: any;
    /**
     * Specifies an href attribute for the `CloseButton`'s underlying html element.
     */
    href?: string;
    /**
     * Specify a mouse cursor to use when hovering over the `CloseButton`.
     */
    cursor?: string;
    /**
     * Specifies the tabindex of the `CloseButton`.
     */
    tabIndex?: CloseButtonTabIndex;
    /**
     * __Deprecated - use `screenReaderLabel` instead__
     */
    children?: React.ReactNode;
    /**
     * __Deprecated - use `elementRef` instead__
     */
    buttonRef?: (...args: any[])=>any;
    /**
     * __Deprecated - use `color` instead__
     */
    variant?: CloseButtonVariant;
}

export class CloseButton extends React.Component<CloseButtonProps, any> {
    render(): JSX.Element;

}




export type DeprecatedButtonType = "button" | "submit" | "reset";

export type DeprecatedButtonVariant = "default" | "primary" | "success" | "danger" | "light" | "ghost" | "ghost-inverse" | "link" | "link-inverse" | "circle-default" | "circle-primary" | "circle-danger" | "icon" | "icon-inverse";

export type DeprecatedButtonSize = "small" | "medium" | "large";

export type DeprecatedButtonIcon = ((...args: any[])=>any) | React.ReactElement<any>;

export type DeprecatedButtonTabIndex = number | string;

export interface DeprecatedButtonProps {
    children: React.ReactNode;
    type?: DeprecatedButtonType;
    variant?: DeprecatedButtonVariant;
    /**
     * provides a reference to the underlying focusable (`button` or `a`) element
     */
    buttonRef?: (...args: any[])=>any;
    /**
     * the element type to render as (will be `<a>` if href is provided)
     */
    as?: any;
    size?: DeprecatedButtonSize;
    /**
     * should the `<DeprecatedButton/>` fill the width of its container
     */
    fluidWidth?: boolean;
    disabled?: boolean;
    readOnly?: boolean;
    href?: string;
    onClick?: (...args: any[])=>any;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * Add an SVG icon to the button. Do not add icons directly as
     * children.
     */
    icon?: DeprecatedButtonIcon;
    /**
     * Specify a mouse cursor to use when hovering over the button.
     * The `pointer` cursor is used by default.
     */
    cursor?: string;
    tabIndex?: DeprecatedButtonTabIndex;
}

export class DeprecatedButton extends React.Component<DeprecatedButtonProps, any> {
    render(): JSX.Element;

}




export type CondensedButtonType = "button" | "submit" | "reset";

export type CondensedButtonSize = "small" | "medium" | "large";

export type CondensedButtonInteraction = "enabled" | "disabled" | "readonly";

export type CondensedButtonColor = "primary" | "primary-inverse";

export type CondensedButtonRenderIcon = React.ReactNode | ((...args: any[])=>any);

export interface CondensedButtonProps {
    /**
     * Specifies the `CondensedButton` children.
     */
    children?: React.ReactNode;
    /**
     * Specifies the type of the `CondensedButton`'s underlying html element.
     */
    type?: CondensedButtonType;
    /**
     * The size of the `CondensedButton`
     */
    size?: CondensedButtonSize;
    /**
     * Provides a reference to the `CondensedButton`'s underlying html element.
     */
    elementRef?: (...args: any[])=>any;
    /**
     * The element to render as the component root, `button` by default.
     */
    as?: any;
    /**
     * Specifies if interaction with the `CondensedButton` is enabled, disabled, or readonly.
     */
    interaction?: CondensedButtonInteraction;
    /**
     * Specifies the color for the `CondensedButton`.
     */
    color?: CondensedButtonColor;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * Specify a mouse cursor to use when hovering over the button.
     * The `pointer` cursor is used by default.
     */
    cursor?: string;
    /**
     * Specifies an href attribute for the `CondensedButton`'s underlying html element.
     */
    href?: string;
    /**
     * An icon, or function that returns an icon.
     */
    renderIcon?: CondensedButtonRenderIcon;
}

export class CondensedButton extends React.Component<CondensedButtonProps, any> {
    render(): JSX.Element;

}




export type IconButtonChildren = React.ReactNode | ((...args: any[])=>any);

export type IconButtonRenderIcon = React.ReactNode | ((...args: any[])=>any);

export type IconButtonType = "button" | "submit" | "reset";

export type IconButtonSize = "small" | "medium" | "large";

export type IconButtonInteraction = "enabled" | "disabled" | "readonly";

export type IconButtonColor = "primary" | "primary-inverse" | "secondary" | "success" | "danger";

export type IconButtonFocusColor = "info" | "inverse";

export type IconButtonShape = "rectangle" | "circle";

export interface IconButtonProps {
    /**
     * An icon, or function returning an icon (identical to the `renderIcon` prop).
     */
    children?: IconButtonChildren;
    /**
     * An icon, or function that returns an icon (identical to the `children` prop).
     */
    renderIcon?: IconButtonRenderIcon;
    /**
     * An accessible label for the `IconButton`.
     */
    screenReaderLabel: string;
    /**
     * Specifies the type of the `IconButton`'s underlying html element.
     */
    type?: IconButtonType;
    /**
     * The size of the `IconButton`
     */
    size?: IconButtonSize;
    /**
     * Provides a reference to the `IconButton`'s underlying html element.
     */
    elementRef?: (...args: any[])=>any;
    /**
     * The element to render as the component root, `button` by default.
     */
    as?: any;
    /**
     * Specifies if interaction with the `IconButton` is enabled, disabled, or readonly.
     */
    interaction?: IconButtonInteraction;
    /**
     * Specifies the color for the `IconButton`.
     */
    color?: IconButtonColor;
    /**
     * Override the `Button`'s default focus outline color.
     */
    focusColor?: IconButtonFocusColor;
    /**
     * Specifies if the `IconButton` shape should be a circle or rectangle.
     */
    shape?: IconButtonShape;
    /**
     * Specifies if the `IconButton` should render with a solid background. When false, the background is transparent.
     */
    withBackground?: boolean;
    /**
     * Specifies if the `IconButton` should render with a border.
     */
    withBorder?: boolean;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * Specify a mouse cursor to use when hovering over the button.
     * The `pointer` cursor is used by default.
     */
    cursor?: string;
    /**
     * Specifies an href attribute for the `IconButton`'s underlying html element.
     */
    href?: string;
}

export class IconButton extends React.Component<IconButtonProps, any> {
    render(): JSX.Element;

}




export type ToggleButtonRenderTooltipContent = React.ReactNode | ((...args: any[])=>any);

export type ToggleButtonRenderIcon = React.ReactNode | ((...args: any[])=>any);

export type ToggleButtonStatus = "pressed" | "unpressed";

export type ToggleButtonInteraction = "enabled" | "disabled" | "readonly";

export type ToggleButtonSize = "small" | "medium" | "large";

export interface ToggleButtonProps {
    /**
     * Text to output only to screen readers
     */
    screenReaderLabel?: any;
    /**
     * Text to render in the tooltip shown on hover/focus
     */
    renderTooltipContent: ToggleButtonRenderTooltipContent;
    /**
     * An icon or function that returns an icon
     */
    renderIcon: ToggleButtonRenderIcon;
    /**
     * Toggles the `aria-pressed` attribute on the button (`true` if `pressed`; `false` if `unpressed`)
     */
    status: ToggleButtonStatus;
    /**
     * The element to render as the component root; `button` by default
     */
    as?: any;
    /**
     * Specifies if interaction with `ToggleButton` is `enabled`, `disabled`, or `readonly`
     */
    interaction?: ToggleButtonInteraction;
    /**
     * The size of the `ToggleButton`
     */
    size?: ToggleButtonSize;
    /**
     * Provides a reference to `ToggleButton`'s underlying HTML element
     */
    elementRef?: (...args: any[])=>any;
    /**
     * Callback fired when the `ToggleButton` is clicked
     */
    onClick?: (...args: any[])=>any;
    /**
     * The color in which to display the icon
     */
    color?: string;
    /**
     * By default, the tooltip will show on hover/focus. Use this prop if you need to override that behavior.
     */
    isShowingTooltip?: boolean;
    /**
     * An element or a function returning an element to use as the mount node
     */
    mountNode?: any;
    /**
     * The placement of the tooltip in relation to the button
     */
    placement?: any;
    /**
     * The parent in which to constrain the tooltip.
     * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
     * or a function returning an element.
     */
    constrain?: any;
}

export class ToggleButton extends React.Component<ToggleButtonProps, any> {
    render(): JSX.Element;

}


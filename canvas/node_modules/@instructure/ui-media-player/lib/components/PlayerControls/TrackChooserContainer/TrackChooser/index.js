"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiReactUtils = require("@instructure/ui-react-utils");

var _uiTruncateText = require("@instructure/ui-truncate-text");

var _uiMenu = require("@instructure/ui-menu");

var _uiIcons = require("@instructure/ui-icons");

var _uiA11yContent = require("@instructure/ui-a11y-content");

var _PropTypes = require("../../../Player/PropTypes");

var _PlayerButton = _interopRequireDefault(require("../../../PlayerButton"));

var _translations = require("../../../../constants/translated/translations");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var OFF = 'OFF';
/**
---
private: true
---
**/

var _ref = /*#__PURE__*/_react.default.createElement(_uiIcons.IconClosedCaptioningSolid, {
  size: "x-small"
});

var TrackChooser = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(TrackChooser, _Component);

  var _super = (0, _createSuper2.default)(TrackChooser);

  function TrackChooser() {
    var _this;

    (0, _classCallCheck2.default)(this, TrackChooser);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.renderTurnOffCaptionLabel = function () {
      return /*#__PURE__*/_react.default.createElement(_uiMenu.MenuItem, {
        "data-test": "Captions-Off",
        key: OFF,
        value: null,
        onKeyDown: _this.props.handleKeyDown
      }, (0, _translations.translate)('CAPTIONS_OFF'));
    };

    _this.isActive = function (trackId, selectedTrackId) {
      if (trackId !== selectedTrackId) {
        return '';
      }

      return '-Active';
    };

    _this.renderTrackOptionsLabels = function (tracks) {
      return tracks.map(function (track) {
        return /*#__PURE__*/_react.default.createElement(_uiMenu.MenuItem, {
          "data-test": "Captions-".concat(track.label).concat(_this.isActive(track.id, _this.props.selectedTrackId)),
          key: track.id,
          value: track.id,
          onKeyDown: _this.props.handleKeyDown
        }, /*#__PURE__*/_react.default.createElement(_uiTruncateText.TruncateText, null, track.label));
      });
    };

    return _this;
  }

  (0, _createClass2.default)(TrackChooser, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          tracks = _this$props.tracks,
          selectedTrackId = _this$props.selectedTrackId,
          showPopover = _this$props.showPopover,
          togglePopover = _this$props.togglePopover,
          videoId = _this$props.videoId,
          mountNode = _this$props.mountNode,
          handleOnSelect = _this$props.handleOnSelect,
          handleOnMouseMove = _this$props.handleOnMouseMove;
      var label = (0, _translations.translate)('VIDEO_TRACK');

      var screenReaderContent = /*#__PURE__*/_react.default.createElement(_uiA11yContent.ScreenReaderContent, null, label);

      return /*#__PURE__*/_react.default.createElement(_uiMenu.Menu, {
        placement: "top",
        show: showPopover,
        onToggle: togglePopover,
        trigger: /*#__PURE__*/_react.default.createElement(_PlayerButton.default, Object.assign({}, (0, _uiReactUtils.pickProps)(this.props, _PlayerButton.default.propTypes), {
          tooltipLabel: label,
          tooltipMountNode: mountNode,
          videoId: videoId
        }), screenReaderContent, _ref),
        mountNode: mountNode(),
        label: label
      }, /*#__PURE__*/_react.default.createElement(_uiMenu.MenuItemGroup, {
        onMouseMove: handleOnMouseMove,
        label: screenReaderContent,
        selected: [selectedTrackId],
        onSelect: handleOnSelect
      }, this.renderTurnOffCaptionLabel(), this.renderTrackOptionsLabels(tracks)));
    }
  }]);
  TrackChooser.displayName = "TrackChooser";
  return TrackChooser;
}(_react.Component);

exports.default = TrackChooser;
TrackChooser.propTypes = {
  showPopover: _propTypes.default.bool.isRequired,
  togglePopover: _propTypes.default.func.isRequired,
  videoId: _propTypes.default.string.isRequired,
  mountNode: _propTypes.default.func.isRequired,
  tracks: _PropTypes.tracksType,
  handleKeyDown: _propTypes.default.func.isRequired,
  handleOnSelect: _propTypes.default.func.isRequired,
  handleOnMouseMove: _propTypes.default.func.isRequired,
  selectedTrackId: _uiMenu.MenuItem.propTypes.value
};
TrackChooser.defaultProps = {
  selectedTrackId: null,
  tracks: []
};
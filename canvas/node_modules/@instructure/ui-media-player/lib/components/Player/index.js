"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PlayerPropTypes", {
  enumerable: true,
  get: function get() {
    return _PropTypes.default;
  }
});
exports.Player = exports.default = exports.JUMP_VOLUME_INTERVAL = exports.SEEK_VOLUME_INTERVAL = exports.JUMP_INTERVAL_SECONDS = exports.SEEK_INTERVAL_SECONDS = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _screenfull = _interopRequireDefault(require("screenfull"));

var _classnames = _interopRequireDefault(require("classnames"));

var _uiPropTypes = require("@instructure/ui-prop-types");

var _uiA11yUtils = require("@instructure/ui-a11y-utils");

var _uiReactUtils = require("@instructure/ui-react-utils");

var _uiThemeable = _interopRequireDefault(require("@instructure/ui-themeable"));

var _uid = _interopRequireDefault(require("@instructure/uid"));

var _PlayerContext = _interopRequireDefault(require("./PlayerContext"));

var _PlayerControls = _interopRequireDefault(require("../PlayerControls"));

var _PlayerMarker = _interopRequireDefault(require("../PlayerMarker"));

var _PlayerOverlay = _interopRequireDefault(require("../PlayerOverlay"));

var _PlayerPlayhead = _interopRequireDefault(require("../PlayerPlayhead"));

var _Captions = require("./Captions");

var _PropTypes = _interopRequireWildcard(require("./PropTypes"));

var _translations = require("../../constants/translated/translations");

var _Inert = _interopRequireDefault(require("./Inert"));

var _MediaContext = _interopRequireDefault(require("./MediaContext"));

var _Loading = _interopRequireDefault(require("../Loading"));

var _constants = require("../../constants");

var _theme = _interopRequireDefault(require("./theme"));

var _dec, _class, _class2, _temp;

var styles = {
  componentId: 'cGOLc',
  template: function template(theme) {
    return "\n\n.cGOLc_fWpV{height:100%;width:100%}\n\n.cGOLc_fWpV:-webkit-full-screen video{height:100%}\n\n.cGOLc_fWpV:fullscreen video{height:100%}\n\n.cGOLc_fWpV:-ms-fullscreen video{height:100%}\n\n.cGOLc_eiKY{height:auto;max-height:inherit;max-width:inherit;min-height:inherit;min-width:inherit;width:auto}\n\n.cGOLc_cvfe{width:100%}\n\n.cGOLc_csZL{height:100%}\n\n.cGOLc_cORI{align-items:center;background-color:#000;display:flex;height:100%;justify-content:center;max-height:inherit;max-width:inherit;min-height:inherit;min-width:inherit;overflow:hidden;position:relative;transition:height 0.1s ease-in-out}\n\n.cGOLc_cORI:focus{box-shadow:0 0 0 ".concat(theme.focusOutlineWeight || 'inherit', " ").concat(theme.focusOutlineColor || 'inherit', ";outline:none}\n\n.cGOLc_ejHP{align-items:center;display:flex;height:100%;justify-content:center;max-height:inherit;max-width:inherit;min-height:inherit;min-width:inherit;width:100%}");
  },
  'fullScreenContainer': 'cGOLc_fWpV',
  'fullScreenContainerWindow': 'cGOLc_eiKY',
  'fluidWidth': 'cGOLc_cvfe',
  'fluidHeight': 'cGOLc_csZL',
  'mediaPlayerContainer': 'cGOLc_cORI',
  'playerRendererContainer': 'cGOLc_ejHP'
};
var SEEK_INTERVAL_SECONDS = 5;
exports.SEEK_INTERVAL_SECONDS = SEEK_INTERVAL_SECONDS;
var JUMP_INTERVAL_SECONDS = 30;
exports.JUMP_INTERVAL_SECONDS = JUMP_INTERVAL_SECONDS;
var SEEK_VOLUME_INTERVAL = 0.05;
exports.SEEK_VOLUME_INTERVAL = SEEK_VOLUME_INTERVAL;
var JUMP_VOLUME_INTERVAL = 0.1;
/**
---
category: components
experimental: true
---
**/

exports.JUMP_VOLUME_INTERVAL = JUMP_VOLUME_INTERVAL;

var WrappedPlayerOverlay = function WrappedPlayerOverlay(props) {
  return /*#__PURE__*/_react.default.createElement(_MediaContext.default.Consumer, null, function (_ref) {
    var actions = _ref.actions;
    return /*#__PURE__*/_react.default.createElement(_PlayerOverlay.default, Object.assign({
      setFocusEnabled: actions.setFocusEnabled
    }, props));
  });
};

var Player = (_dec = (0, _uiThemeable.default)(_theme.default, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Player, _Component);

  var _super = (0, _createSuper2.default)(Player);

  function Player(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Player);
    _this = _super.call(this, props);
    _this.focusRegion = null;
    _this.fullScreenContainer = null;
    _this.videoContainer = null;
    _this.video = null;
    _this.state = {
      seeking: false,
      loadingOverlay: false,
      // false | 'passthrough' | 'backdrop'
      controlActivated: null,
      controlHovered: false,
      focusEnabled: true,
      mediaState: _constants.PAUSED,
      screenState: _constants.WINDOWED_SCREEN,
      muted: false,
      volume: 1,
      playbackSpeed: 1,
      selectedSrc: _this.getSourceFromProps(),
      selectedTrackId: 0,
      // TODO: change `0` to `null` once INSTUI-2429 is resolved
      sources: _this.props.sources,
      tracks: _this.getPossiblyModifiedTracks(_this.props.tracks),
      showControls: true,
      videoId: (0, _uid.default)('Player')
    };

    _this.clearFocusRegion = function () {
      if (!_this.focusRegion) return;

      _uiA11yUtils.FocusRegionManager.blurRegion(_this.fullScreenContainer, _this.focusRegion.id);

      _this.focusRegion = null;
    };

    _this.handleSeeking = function () {
      _this.setState({
        seeking: true
      });
    };

    _this.handleSeeked = function () {
      _this.setState({
        seeking: false
      });
    };

    _this.hasBeenWarnedOnce = false;

    _this.handleContextMenu = function (e) {
      if (_this.props.disableRightClick && e.target.closest(".".concat(styles.playerRendererContainer))) {
        e.preventDefault();
      }
    };

    _this.handleKeyPress = function (actions) {
      return function (e) {
        var _this$state = _this.state,
            currentTime = _this$state.currentTime,
            duration = _this$state.duration;

        var playAction = function playAction() {
          if (_this.videoContainer === e.target) {
            actions.togglePlay();
            return true;
          }

          return false;
        };

        var seekAction = function seekAction(time) {
          if (!_this.state.controlActivated) {
            actions.seek(time);
            return true;
          }

          return false;
        };

        var keyHandlers = {
          ArrowLeft: function ArrowLeft() {
            return seekAction(currentTime - SEEK_INTERVAL_SECONDS);
          },
          ArrowRight: function ArrowRight() {
            return seekAction(currentTime + SEEK_INTERVAL_SECONDS);
          },
          ArrowUp: function ArrowUp() {
            return seekAction(currentTime + SEEK_INTERVAL_SECONDS);
          },
          ArrowDown: function ArrowDown() {
            return seekAction(currentTime - SEEK_INTERVAL_SECONDS);
          },
          PageUp: function PageUp() {
            actions.seek(currentTime + JUMP_INTERVAL_SECONDS);
            return true;
          },
          PageDown: function PageDown() {
            actions.seek(currentTime - JUMP_INTERVAL_SECONDS);
            return true;
          },
          Home: function Home() {
            actions.seek(0);
            return true;
          },
          End: function End() {
            actions.seek(duration);
            return true;
          },
          ' ': playAction,
          Enter: playAction,

          /*
            Bug specific to IE 11 for fullscreen keyboard shortcut.
            onKeyDown on neither 'f' nor 'F' work, but clicking the
            FullScreenButton works. I've also tried getting the
            FullScreenButton's ref and invoking click() (HTML API).
          */
          f: function f() {
            actions.toggleFullScreen();
            return true;
          },
          F: function F() {
            actions.toggleFullScreen();
            return true;
          },
          m: function m() {
            actions.toggleMute();
            return true;
          },
          M: function M() {
            actions.toggleMute();
            return true;
          }
        };

        if (e.key in keyHandlers && keyHandlers[e.key]()) {
          e.preventDefault();
          actions.showControls();
        }
      };
    };

    _this.setFullScreen = function (newState) {
      if (_screenfull.default && _screenfull.default.enabled) {
        if (newState && _this.state.screenState === _constants.WINDOWED_SCREEN) {
          _screenfull.default.request(_this.fullScreenContainer);
        } else if (!newState && _this.state.screenState === _constants.FULL_SCREEN) {
          _screenfull.default.exit();
        }
      }
    };

    _this.toggleFocusRegion = function () {
      if (_this.state.screenState === _constants.FULL_SCREEN) {
        _this.focusRegion = _uiA11yUtils.FocusRegionManager.activateRegion(_this.fullScreenContainer, {
          shouldCloseOnDocumentClick: false,
          shouldCloseOnEscape: true,
          shouldContainFocus: true,
          shouldReturnFocus: true,
          onBlur: function onBlur() {},
          onDismiss: function onDismiss() {}
        });
        return;
      }

      _this.clearFocusRegion();
    };

    _this.toggleFullScreen = function () {
      if (_screenfull.default && _screenfull.default.enabled) {
        _screenfull.default.toggle(_this.fullScreenContainer);
      }
    };

    _this.updateScreenState = function (e) {
      if (!_this.fullScreenContainer) {
        return;
      }

      var screenState = _screenfull.default && _screenfull.default.isFullscreen ? _constants.FULL_SCREEN : _constants.WINDOWED_SCREEN;

      _this.setState({
        screenState: screenState
      });

      if (e.target === _this.fullScreenContainer) {
        _this.toggleFocusRegion();
      }
    };

    _this.setVideoContainerRef = function (el) {
      if (_this.videoContainer === null) {
        _this.videoContainer = el;
      }
    };

    _this.setFullScreenContainerRef = function (el) {
      if (_this.fullScreenContainer === null) {
        _this.fullScreenContainer = el;
      }
    };

    _this.activateControl = function (controlId) {
      _this.setState({
        controlActivated: controlId
      });
    };

    _this.deactivateControl = function (controlId) {
      _this.setState(function (prevState) {
        if (prevState.controlActivated === controlId) {
          return {
            controlActivated: null
          };
        }

        return {};
      });
    };

    _this.setControlHovered = function (newValue) {
      _this.setState({
        controlHovered: newValue
      });
    };

    _this.setFocusEnabled = function (newValue) {
      _this.setState({
        focusEnabled: newValue
      });
    };

    _this.showControls = function () {
      var hideControlsTimeout = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 2500;

      if (_this.props.alwaysShowControls) {
        return;
      }

      if (_this._hideControlsTimeoutId) {
        clearTimeout(_this._hideControlsTimeoutId);
      }

      var _nextTimeout = function _nextTimeout() {
        _this._hideControlsTimeoutId = setTimeout(function () {
          if (_this.state.controlActivated || _this.state.controlHovered) {
            return _nextTimeout();
          }

          if (_this.state.mediaState === _constants.PLAYING) {
            _this.setState({
              showControls: false
            });

            _this.props.onControlsHidden();
          }
        }, hideControlsTimeout);
      };

      var prevValue = _this.state.showControls;

      _this.setState({
        showControls: true
      }, _nextTimeout);

      if (!prevValue) {
        _this.props.onControlsShown();
      }
    };

    _this.onRendererStateChange = function (rendererStateUpdater) {
      var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function () {};

      _this.setState(rendererStateUpdater, callback);
    };

    _this.setActions = function (actions, _ref2) {
      var setAction = _ref2.setAction;
      Object.entries(actions).forEach(function (_ref3) {
        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
            fnName = _ref4[0],
            fn = _ref4[1];

        setAction(fnName, fn);
      });
    };

    _this.onTrackChange = function (selectedTrackId) {
      _this.setState({
        selectedTrackId: selectedTrackId
      });
    };

    _this.setLoadingOverlay = function (loadingOverlay) {
      _this.setState({
        loadingOverlay: loadingOverlay
      });
    };

    (0, _translations.applyTranslations)(_this.props.translations);
    return _this;
  }

  (0, _createClass2.default)(Player, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      _screenfull.default && _screenfull.default.on('change', this.updateScreenState);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (prevState.mediaState !== this.state.mediaState && this.state.mediaState === _constants.ENDED) {
        this.showControls();
      }

      var tracks = this.props.tracks;

      if (prevProps.tracks !== tracks) {
        this.setState({
          tracks: this.getPossiblyModifiedTracks(tracks)
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _screenfull.default && _screenfull.default.off('change', this.updateScreenState); // remove the video ref and stop applying video props

      this.videoContainer = null;
      this.fullScreenContainer = null;
      this.clearFocusRegion();
    }
  }, {
    key: "getPossiblyModifiedTracks",
    value: function getPossiblyModifiedTracks(tracks) {
      var _this2 = this;

      return tracks.map(function (track) {
        var result = (0, _objectSpread2.default)({}, track);

        if (!result.id) {
          _this2.warnOnce();

          result.id = result.label;
        }

        return result;
      });
    }
  }, {
    key: "warnOnce",
    value: function warnOnce() {
      if (this.hasBeenWarnedOnce) {
        return;
      }

      console.warn('[ui-media-player] track.label will no longer be used to uniquely identify track in 8.0 in order to support duplicate caption labels. Please provide an id for each track (track.id).');
      this.hasBeenWarnedOnce = true;
    }
  }, {
    key: "getSourceFromProps",
    value: function getSourceFromProps() {
      var sources = this.props.sources;

      if (typeof sources === 'string') {
        return sources;
      }

      if (sources.length === 0) {
        return null;
      }

      if (typeof sources[0] === 'string') {
        return sources[0];
      }

      for (var i = 0; i < sources.length; i++) {
        if (sources[i].defaultSelected) {
          return sources[i].src;
        }
      }

      return sources[0].src;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          Renderer = _this$props.renderer,
          controls = _this$props.controls,
          fluidWidth = _this$props.fluidWidth,
          fluidHeight = _this$props.fluidHeight,
          actionsRef = _this$props.actionsRef;
      var _this$state2 = this.state,
          tracks = _this$state2.tracks,
          focusEnabled = _this$state2.focusEnabled,
          screenState = _this$state2.screenState,
          loadingOverlay = _this$state2.loadingOverlay;
      var constants = {
        SEEK_INTERVAL_SECONDS: SEEK_INTERVAL_SECONDS,
        JUMP_INTERVAL_SECONDS: JUMP_INTERVAL_SECONDS,
        SEEK_VOLUME_INTERVAL: SEEK_VOLUME_INTERVAL,
        JUMP_VOLUME_INTERVAL: JUMP_VOLUME_INTERVAL
      };
      return /*#__PURE__*/_react.default.createElement(_PlayerContext.default, null, function (playerContext) {
        var _classNames, _classNames2;

        var actionsSetter = function actionsSetter(actions) {
          _this3.setActions(actions, playerContext);

          actionsRef && actionsRef(playerContext.actions);
        };

        actionsSetter({
          activateControl: _this3.activateControl,
          deactivateControl: _this3.deactivateControl,
          setFullScreen: _this3.setFullScreen,
          toggleFullScreen: _this3.toggleFullScreen,
          setControlHovered: _this3.setControlHovered,
          setFocusEnabled: _this3.setFocusEnabled,
          showControls: _this3.showControls
        });
        var mediaContextValue = {
          state: _this3.state,
          fullScreenContainerRef: function fullScreenContainerRef() {
            return _this3.fullScreenContainer;
          },
          actions: playerContext.actions,
          setActions: actionsSetter,
          playbackSpeedOptions: playerContext.playbackSpeedOptions,
          constants: constants
        };
        var fullScreenContainerProps = {
          className: (0, _classnames.default)((_classNames = {}, (0, _defineProperty2.default)(_classNames, styles.fullScreenContainer, true), (0, _defineProperty2.default)(_classNames, styles.fullScreenContainerWindow, screenState === _constants.WINDOWED_SCREEN), (0, _defineProperty2.default)(_classNames, styles.fluidWidth, fluidWidth), (0, _defineProperty2.default)(_classNames, styles.fluidHeight, fluidHeight), _classNames)),
          ref: _this3.setFullScreenContainerRef
        };
        var mediaPlayerContainerProps = {
          className: (0, _classnames.default)((_classNames2 = {}, (0, _defineProperty2.default)(_classNames2, styles.mediaPlayerContainer, true), (0, _defineProperty2.default)(_classNames2, styles.fluidWidth, fluidWidth), (0, _defineProperty2.default)(_classNames2, styles.fluidHeight, fluidHeight), _classNames2)),
          onContextMenu: _this3.handleContextMenu,
          onKeyDown: _this3.handleKeyPress(playerContext.actions),
          onFocus: function onFocus() {
            return _this3.showControls();
          },
          onMouseMove: function onMouseMove() {
            return _this3.showControls();
          },
          onClick: playerContext.actions.togglePlay,
          tabIndex: focusEnabled ? 0 : -1,
          role: 'presentation',
          'aria-label': _this3.props.label || (0, _translations.translate)('ARIA_VIDEO_LABEL'),
          ref: _this3.setVideoContainerRef
        };
        var defaultProps = {
          onSeeking: _this3.handleSeeking,
          onSeeked: _this3.handleSeeked
        };
        var rendererEventsTypeSetFromProps = (0, _uiReactUtils.pickProps)(_this3.props, _PropTypes.rendererEventsTypeSet);
        var eventProps = {};
        var allEvents = [].concat((0, _toConsumableArray2.default)(Object.keys(rendererEventsTypeSetFromProps)), (0, _toConsumableArray2.default)(Object.keys(defaultProps)));
        allEvents.forEach(function (key) {
          var propFn = rendererEventsTypeSetFromProps[key];
          var defaultPropFn = defaultProps[key];

          eventProps[key] = function (event, error) {
            if (propFn) {
              propFn(event, mediaContextValue.state, error);
            }

            if (defaultPropFn) {
              defaultPropFn(event);
            }
          };
        });
        return /*#__PURE__*/_react.default.createElement("div", fullScreenContainerProps, /*#__PURE__*/_react.default.createElement("div", mediaPlayerContainerProps, /*#__PURE__*/_react.default.createElement("div", {
          className: (0, _classnames.default)(styles.playerRendererContainer)
        }, /*#__PURE__*/_react.default.createElement(Renderer, Object.assign({
          poster: _this3.props.poster,
          videoId: _this3.state.videoId,
          selectedSrc: _this3.state.selectedSrc,
          setActions: actionsSetter,
          onRendererStateChange: _this3.onRendererStateChange,
          mediaState: _this3.state.mediaState,
          setPlaybackSpeedOptions: playerContext.setPlaybackSpeedOptions,
          setLoadingOverlay: _this3.setLoadingOverlay
        }, eventProps)), /*#__PURE__*/_react.default.createElement(_Captions.Captions, {
          tracks: tracks,
          onTrackChange: _this3.onTrackChange,
          setActions: actionsSetter,
          currentTime: _this3.state.currentTime || 0,
          captionPosition: _this3.props.captionPosition,
          captionOffset: _this3.props.captionOffset,
          autoShowCaption: _this3.props.autoShowCaption,
          showControls: _this3.state.showControls
        })), /*#__PURE__*/_react.default.createElement(_MediaContext.default.Provider, {
          value: mediaContextValue
        }, /*#__PURE__*/_react.default.createElement("div", null, _this3.props.children, /*#__PURE__*/_react.default.createElement(_Inert.default, {
          active: !focusEnabled
        }, controls(_PlayerControls.default)), /*#__PURE__*/_react.default.createElement(LoadingOverlay, {
          open: loadingOverlay,
          passthrough: loadingOverlay === 'passthrough',
          backdrop: loadingOverlay === 'backdrop'
        })))));
      });
    }
  }]);
  Player.displayName = "Player";
  return Player;
}(_react.Component), _class2.propTypes = (0, _objectSpread2.default)((0, _objectSpread2.default)({
  renderer: _propTypes.default.func.isRequired,

  /**
   * URL(s) of video to play
   */
  sources: _PropTypes.default.sourcesType,

  /**
   * tracks of the video to play
   */
  tracks: _PropTypes.default.tracksType,

  /**
   * Function invoked on every render with state and actions.
   * Use this to provide a custom set of video controls.
   * Default player controls will be provided if undefined.
   */
  controls: _propTypes.default.func,

  /**
   * If set to true, the controls will never dismiss.
   */
  alwaysShowControls: _propTypes.default.bool,

  /**
   * Give the player a label to be read by screen readers.
   */
  label: _propTypes.default.string,

  /**
   * The poster image to use before the media is played.
   */
  poster: _propTypes.default.string,

  /**
   * Label overrides for i18n. Defaults to english
   * See src/constants/translated/translations.js for default values
   */
  translations: _propTypes.default.shape(_translations.TranslationPropTypes),

  /**
   * Children of the <Player />
   */
  children: _uiPropTypes.Children.oneOf([_PlayerOverlay.default, WrappedPlayerOverlay]),

  /**
   * indicates the player should fill the width of its container
   */
  fluidWidth: _propTypes.default.bool,

  /**
   * indicates the player should fill the height of its container
   */
  fluidHeight: _propTypes.default.bool,

  /**
   * Reference to actions object
   */
  actionsRef: _propTypes.default.func,

  /**
   * Disable right click on the player container
   */
  disableRightClick: _propTypes.default.bool,
  captionPosition: _Captions.Captions.propTypes.captionPosition,
  captionOffset: _Captions.Captions.propTypes.captionOffset,
  autoShowCaption: _propTypes.default.string
}, _PropTypes.playerEventsTypeSet), _PropTypes.rendererEventsTypeSet), _class2.defaultProps = {
  tracks: [],
  controls: function controls(PlayerControls) {
    return /*#__PURE__*/_react.default.createElement(PlayerControls, null, /*#__PURE__*/_react.default.createElement(PlayerControls.PlayPauseButton, {
      position: "start"
    }), /*#__PURE__*/_react.default.createElement(PlayerControls.Timebar, null), /*#__PURE__*/_react.default.createElement(PlayerControls.Volume, null), /*#__PURE__*/_react.default.createElement(PlayerControls.PlaybackSpeed, null), /*#__PURE__*/_react.default.createElement(PlayerControls.TrackChooser, null), /*#__PURE__*/_react.default.createElement(PlayerControls.SourceChooser, null), /*#__PURE__*/_react.default.createElement(PlayerControls.FullScreenButton, {
      position: "end"
    }));
  },
  actionsRef: null,
  alwaysShowControls: false,
  children: null,
  poster: null,
  label: '',
  translations: {},
  fluidWidth: true,
  fluidHeight: false,
  disableRightClick: false,
  onControlsHidden: function onControlsHidden() {},
  onControlsShown: function onControlsShown() {},
  captionPosition: _Captions.Captions.defaultProps.captionPosition,
  captionOffset: _Captions.Captions.defaultProps.captionOffset,
  autoShowCaption: null
}, _class2.Marker = _PlayerMarker.default, _class2.Overlay = WrappedPlayerOverlay, _class2.Playhead = _PlayerPlayhead.default, _class2.Control = _PlayerControls.default.Control, _temp)) || _class);
exports.Player = Player;

var _ref6 = /*#__PURE__*/_react.default.createElement(_Loading.default, null);

var LoadingOverlay = function LoadingOverlay(_ref5) {
  var open = _ref5.open,
      props = (0, _objectWithoutProperties2.default)(_ref5, ["open"]);
  return open && /*#__PURE__*/_react.default.createElement(Player.Overlay, props, function () {
    return _ref6;
  });
};

var _default = Player;
exports.default = _default;
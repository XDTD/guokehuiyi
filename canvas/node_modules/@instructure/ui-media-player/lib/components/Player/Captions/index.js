"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CaptionsPres = exports.Captions = exports.default = exports.CONTROLS_SHOWN_OFFSET = exports.START_POSITION = void 0;

var _objectSpread4 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiThemeable = _interopRequireDefault(require("@instructure/ui-themeable"));

var _caption = _interopRequireDefault(require("../../../utils/caption"));

var _PropTypes = require("../PropTypes");

var _theme = _interopRequireDefault(require("./theme"));

var _dec, _class, _class2, _temp;

var styles = {
  componentId: 'bQfsg',
  template: function template(theme) {
    return "\n\n.bQfsg_dBml{line-height:1.5;pointer-events:none;position:absolute;text-align:center}\n\n[dir=ltr] .bQfsg_dBml,[dir=rtl] .bQfsg_dBml{text-align:center}\n\n.bQfsg_fjhh{background-color:".concat(theme.captionBackgroundColor || 'inherit', ";color:").concat(theme.captionTextColor || 'inherit', ";padding:0.375rem}");
  },
  'subtitleContainer': 'bQfsg_dBml',
  'subtitle': 'bQfsg_fjhh'
};
var ENTER = /[\r\n]/g;
var START_POSITION = 1;
exports.START_POSITION = START_POSITION;
var CONTROLS_SHOWN_OFFSET = 4;
exports.CONTROLS_SHOWN_OFFSET = CONTROLS_SHOWN_OFFSET;
var CaptionsPres = (_dec = (0, _uiThemeable.default)(_theme.default, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(CaptionsPres, _Component);

  var _super = (0, _createSuper2.default)(CaptionsPres);

  function CaptionsPres() {
    var _this;

    (0, _classCallCheck2.default)(this, CaptionsPres);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      activeCues: []
    };
    _this.lookupIdx = 0;

    _this.getCaptionPosition = function (_ref) {
      var captionPosition = _ref.captionPosition,
          showControls = _ref.showControls,
          captionOffset = _ref.captionOffset;

      if (typeof captionOffset === 'string') {
        return captionOffset;
      } else if (typeof captionOffset === 'number') {
        var startingPosition = captionPosition === 'bottom' && showControls ? CONTROLS_SHOWN_OFFSET + START_POSITION : START_POSITION;
        return "".concat(startingPosition + captionOffset, "rem");
      }
    };

    return _this;
  }

  (0, _createClass2.default)(CaptionsPres, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var activeCues = _caption.default.getActiveCues(this.props, prevProps, this);

      if (_caption.default.activeCuesChanged(prevState.activeCues, activeCues)) {
        this.setState({
          activeCues: activeCues
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _ref2;

      var captions = this.props.captions;

      if (!Array.isArray(captions) || captions.length === 0) {
        return null;
      }

      var captionPosition = this.props.captionPosition;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: styles.subtitleContainer,
        style: (_ref2 = {}, (0, _defineProperty2.default)(_ref2, captionPosition, this.getCaptionPosition(this.props)), (0, _defineProperty2.default)(_ref2, "transition", "".concat(captionPosition, " 0.25s ease-in-out")), _ref2)
      }, this.state.activeCues.map(function (_ref3) {
        var text = _ref3.text;
        return text.split(ENTER).map(function (lineContent) {
          // Caption files can provide multiple entries for a single time slot.
          // Display each entry separated by a single line to emulate native behaviour.
          return /*#__PURE__*/_react.default.createElement("div", {
            key: lineContent
          }, /*#__PURE__*/_react.default.createElement("span", {
            className: styles.subtitle
          }, lineContent));
        });
      }));
    }
  }]);
  CaptionsPres.displayName = "CaptionsPres";
  return CaptionsPres;
}(_react.Component), _class2.propTypes = {
  currentTime: _propTypes.default.number.isRequired,
  captions: _propTypes.default.arrayOf(_propTypes.default.shape({
    start: _propTypes.default.number,
    end: _propTypes.default.number,
    text: _propTypes.default.string
  })),
  captionPosition: _propTypes.default.oneOf(['top', 'bottom', 'left', 'right']),
  captionOffset: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  showControls: _propTypes.default.bool
}, _class2.defaultProps = {
  captions: [],
  captionPosition: 'top',
  captionOffset: 0,
  showControls: false
}, _temp)) || _class);
exports.CaptionsPres = CaptionsPres;

var Captions = /*#__PURE__*/function (_Component2) {
  (0, _inherits2.default)(Captions, _Component2);

  var _super2 = (0, _createSuper2.default)(Captions);

  function Captions(props) {
    var _this2;

    (0, _classCallCheck2.default)(this, Captions);
    _this2 = _super2.call(this, props);
    _this2.state = {
      captions: [],
      convertedTracks: {}
    };

    _this2.clearUnneededConvertedTracks = function (tracks, staleTracks) {
      var callback = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function () {};

      _this2.setState(function (prevState) {
        var tracksToKeep = staleTracks.filter(function (_ref4) {
          var staleId = _ref4.id;
          return tracks.some(function (track) {
            return staleId === track.id;
          });
        });
        var convertedTracks = tracksToKeep.reduce(function (result, _ref5) {
          var id = _ref5.id;
          var convertedTrack = prevState.convertedTracks[id];

          if (!convertedTrack) {
            return result;
          }

          return (0, _objectSpread4.default)((0, _objectSpread4.default)({}, result), {}, (0, _defineProperty2.default)({}, id, convertedTrack));
        }, {});
        return {
          convertedTracks: convertedTracks
        };
      }, callback);
    };

    _this2.maybeDefaultToOff = function () {
      var _this2$state = _this2.state,
          convertedTracks = _this2$state.convertedTracks,
          captions = _this2$state.captions;
      var currentCaptions = Object.values(convertedTracks).find(function (cachedCaptions) {
        return cachedCaptions === captions;
      });

      if (!currentCaptions) {
        _this2.toggleTrack(0); // TODO: change `0` to `null` once INSTUI-2429 is resolved

      }
    };

    _this2.findSelectedTrack = function (tracks, trackId) {
      return tracks.find(function (track) {
        return track.id === trackId;
      });
    };

    _this2.toggleTrack = function (trackId) {
      var selectedTrack = _this2.findSelectedTrack(_this2.props.tracks, trackId);

      var selectedTrackSrc = selectedTrack && selectedTrack.src;
      var selectedTrackId = selectedTrack && selectedTrack.id;

      var applyTrack = function applyTrack() {
        _this2.setState({
          captions: selectedTrackId ? _this2.state.convertedTracks[selectedTrackId] : []
        }, function () {
          return _this2.props.onTrackChange(trackId);
        });
      };

      if (selectedTrack && !_this2.state.convertedTracks[selectedTrackId]) {
        return _caption.default.getCaptionsFromFile(selectedTrackSrc).then(function (captionData) {
          var sortedCaptionData = _caption.default.sortByTime(captionData);

          _this2.setState(function (prevState) {
            return {
              convertedTracks: (0, _objectSpread4.default)((0, _objectSpread4.default)({}, prevState.convertedTracks), {}, (0, _defineProperty2.default)({}, selectedTrackId, sortedCaptionData))
            };
          }, applyTrack);
        }).catch(function (message) {
          window.console.warn(message);
          applyTrack();
          return Promise.reject(message);
        });
      } else {
        applyTrack();
      }

      return Promise.resolve();
    };

    _this2.props.setActions({
      toggleTrack: _this2.toggleTrack
    });

    if (_this2.props.autoShowCaption) {
      var _this2$props$tracks;

      var cap = (_this2$props$tracks = _this2.props.tracks) === null || _this2$props$tracks === void 0 ? void 0 : _this2$props$tracks.find(function (t) {
        return t.language === _this2.props.autoShowCaption;
      });

      if (cap) {
        _this2.toggleTrack(cap.id);
      }
    }

    return _this2;
  }

  (0, _createClass2.default)(Captions, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.tracks !== this.props.tracks) {
        this.clearUnneededConvertedTracks(this.props.tracks, prevProps.tracks, this.maybeDefaultToOff);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react.default.createElement(CaptionsPres, Object.assign({}, this.props, this.state));
    }
  }]);
  Captions.displayName = "Captions";
  return Captions;
}(_react.Component);

exports.Captions = exports.default = Captions;
Captions.propTypes = (0, _objectSpread4.default)({
  tracks: _PropTypes.tracksType,
  setActions: _propTypes.default.func,
  onTrackChange: _propTypes.default.func,
  autoShowCaption: _propTypes.default.string
}, CaptionsPres.propTypes);
Captions.defaultProps = (0, _objectSpread4.default)({
  tracks: [],
  setActions: function setActions() {},
  onTrackChange: function onTrackChange() {}
}, CaptionsPres.defaultProps);
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PlayerPropTypes", {
  enumerable: true,
  get: function get() {
    return _Player.PlayerPropTypes;
  }
});
exports.MediaPlayer = exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _screenfull = _interopRequireDefault(require("screenfull"));

var _uiMenu = require("@instructure/ui-menu");

var _uiPropTypes = require("@instructure/ui-prop-types");

var _uiThemeable = _interopRequireDefault(require("@instructure/ui-themeable"));

var _uiReactUtils = require("@instructure/ui-react-utils");

var _Player = require("../Player");

var _PlayerControls = _interopRequireDefault(require("../PlayerControls"));

var _HTML5Video = require("../Player/HTML5Video");

var _YouTube = require("../Player/YouTube");

var _Captions = require("../Player/Captions");

var _translations = require("../../constants/translated/translations");

var _dec, _class, _class2, _temp;

var MediaPlayer = (_dec = (0, _uiThemeable.default)(null, null), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(MediaPlayer, _Component);

  var _super = (0, _createSuper2.default)(MediaPlayer);

  function MediaPlayer() {
    (0, _classCallCheck2.default)(this, MediaPlayer);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(MediaPlayer, [{
    key: "render",
    value: function render() {
      var mediaPlayerProps = (0, _uiReactUtils.pickProps)(this.props, MediaPlayer.propTypes);
      var _this$props = this.props,
          sources = _this$props.sources,
          tracks = _this$props.tracks,
          type = _this$props.type,
          hideFullScreen = _this$props.hideFullScreen,
          markers = _this$props.markers,
          customControls = _this$props.customControls,
          playhead = _this$props.playhead;
      var renderer = MediaPlayer.rendererList[type]; // require('screenfull') returns "false" if full-screen isn't sfupported

      var isFullScreenHidden = !_screenfull.default || hideFullScreen;
      var isSourceChooserHidden = typeof sources === 'string' || sources.length <= 1;
      var isTrackChooserHidden = !tracks || !tracks.length;
      var playerProps = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, (0, _uiReactUtils.pickProps)(mediaPlayerProps, _Player.Player.propTypes)), {}, {
        renderer: renderer,
        controls: function controls(PlayerControls) {
          var allControls = [/*#__PURE__*/_react.default.createElement(PlayerControls.PlayPauseButton, {
            key: "PlayPauseButton "
          }), /*#__PURE__*/_react.default.createElement(PlayerControls.Timebar, {
            key: "Timebar",
            markers: markers,
            playhead: playhead
          }), /*#__PURE__*/_react.default.createElement(PlayerControls.Volume, {
            key: "Volume"
          }), /*#__PURE__*/_react.default.createElement(PlayerControls.PlaybackSpeed, {
            key: "PlaybackSpeed"
          })];
          var customControlsRendered = customControls();

          if (Array.isArray(customControlsRendered)) {
            allControls.push.apply(allControls, (0, _toConsumableArray2.default)(customControlsRendered));
          } else if (customControlsRendered) {
            allControls.push(customControlsRendered);
          }

          isTrackChooserHidden || allControls.push( /*#__PURE__*/_react.default.createElement(PlayerControls.TrackChooser, {
            key: "TrackChooser"
          }));
          isSourceChooserHidden || allControls.push( /*#__PURE__*/_react.default.createElement(PlayerControls.SourceChooser, {
            key: "SourceChooser"
          }));
          isFullScreenHidden || allControls.push( /*#__PURE__*/_react.default.createElement(PlayerControls.FullScreenButton, {
            key: "FullScreenButton"
          }));
          var firstControl = allControls.shift();
          var lastControl = allControls.pop();

          var firstControlPositioned = /*#__PURE__*/_react.default.cloneElement(firstControl, {
            position: 'start'
          });

          var lastControlPositioned = /*#__PURE__*/_react.default.cloneElement(lastControl, {
            position: 'end'
          });

          return /*#__PURE__*/_react.default.createElement(PlayerControls, null, [firstControlPositioned].concat(allControls, [lastControlPositioned]));
        }
      });
      var playerEventProps = (0, _uiReactUtils.pickProps)(this.props, _Player.PlayerPropTypes.playerEventsTypeSet);
      var rendererEventProps = (0, _uiReactUtils.pickProps)(this.props, _Player.PlayerPropTypes.rendererEventsTypeSet);
      return /*#__PURE__*/_react.default.createElement(_Player.Player, Object.assign({}, playerProps, playerEventProps, rendererEventProps), this.props.children);
    }
  }]);
  MediaPlayer.displayName = "MediaPlayer";
  return MediaPlayer;
}(_react.Component), _class2.propTypes = (0, _objectSpread2.default)((0, _objectSpread2.default)({
  type: _propTypes.default.oneOf(['video', 'youtube']),

  /**
   * URL(s) of video to play
   */
  sources: _Player.PlayerPropTypes.sourcesType,

  /**
   * tracks of the video to play
   */
  tracks: _Player.PlayerPropTypes.tracksType,

  /**
   * Additional controls to be added to the control bar
   */
  customControls: _propTypes.default.func,

  /**
   * If set to true, the controls will never dismiss.
   */
  alwaysShowControls: _propTypes.default.bool,

  /**
   * If set to true, FullScreenButton is hidden.
   */
  hideFullScreen: _propTypes.default.bool,

  /**
   * Give the player a label to be read by screen readers.
   */
  label: _propTypes.default.string,

  /**
   * Give the player a playhead
   */
  playhead: _propTypes.default.node,

  /**
   * The poster image to use before the media is played.
   */
  poster: _propTypes.default.string,

  /**
   * Label overrides for i18n. Defaults to english
   * See src/constants/translated/translations.js for default values
   */
  translations: _propTypes.default.shape(_translations.TranslationPropTypes),

  /**
   * Children of the <Player />
   */
  children: _uiPropTypes.Children.oneOf([_Player.Player.Overlay]),

  /**
   * indicates the player should fill the width of its container
   */
  fluidWidth: _propTypes.default.bool,

  /**
   * indicates the player should fill the height of its container
   */
  fluidHeight: _propTypes.default.bool,

  /**
   * A set of markers to apply to the timebar.
   */
  markers: _uiPropTypes.Children.oneOf([_Player.Player.Marker]),

  /**
   * Reference to actions object
   */
  actionsRef: _propTypes.default.func,

  /**
   * Disable right click on the player container
   */
  disableRightClick: _propTypes.default.bool,
  captionPosition: _Captions.Captions.propTypes.captionPosition,
  captionOffset: _Captions.Captions.propTypes.captionOffset,
  autoShowCaption: _propTypes.default.string
}, _Player.PlayerPropTypes.playerEventsTypeSet), _Player.PlayerPropTypes.rendererEventsTypeSet), _class2.defaultProps = {
  type: 'video',
  sources: [],
  tracks: [],
  actionsRef: null,
  customControls: function customControls() {
    return [];
  },
  alwaysShowControls: false,
  children: null,
  hideFullScreen: false,
  markers: [],
  playhead: null,
  poster: null,
  label: '',
  translations: {},
  fluidWidth: true,
  fluidHeight: false,
  disableRightClick: false,
  captionPosition: _Captions.Captions.defaultProps.captionPosition,
  captionOffset: _Captions.Captions.defaultProps.captionOffset,
  autoShowCaption: null
}, _class2.rendererList = {
  video: _HTML5Video.HTML5Video,
  youtube: _YouTube.YouTube
}, _class2.Marker = _Player.Player.Marker, _class2.Menu = _uiMenu.Menu, _class2.Overlay = _Player.Player.Overlay, _class2.Playhead = _Player.Player.Playhead, _class2.Control = _PlayerControls.default.Control, _temp)) || _class);
exports.MediaPlayer = MediaPlayer;
var _default = MediaPlayer;
exports.default = _default;
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react'
import PropTypes from 'prop-types'

import { pickProps } from '@instructure/ui-react-utils'
import { ScreenReaderContent } from '@instructure/ui-a11y-content'
import { Menu } from '@instructure/ui-menu'

import MediaContext from '../../Player/MediaContext'
import PlayerButton from '../../PlayerButton'
import PlayerPopover from '../../PlayerPopover'

// CustomControl component consumes all PlayerButton propTypes
// except of videoId which is created automatically
const { videoId: _, ...PlayerButtonPropTypes } = PlayerButton.propTypes

/**
---
private: true
---
@module CustomControl
**/
export default class CustomControl extends Component {
  static displayName = 'CustomControl'
  static propTypes = {
    variant: PropTypes.oneOf(['button', 'menu']),
    label: PropTypes.string.isRequired,
    icon: PropTypes.node.isRequired,
    menuItems: PropTypes.func,
    ...PlayerButtonPropTypes
  }

  static defaultProps = {
    variant: 'button',
    menuItems: () => null,
  }

  renderButton(videoId, mountNode) {
    const { tooltipLabel, label, icon } = this.props
    const tooltipProps = tooltipLabel ?
      {
        tooltipLabel,
        tooltipMountNode: mountNode,
      } : {}

    return (
      <PlayerButton
        {...pickProps(this.props, PlayerButton.propTypes)}
        {...tooltipProps}
        videoId={videoId}
      >
        <ScreenReaderContent>{label}</ScreenReaderContent>
        {icon}
      </PlayerButton>
    )
  }

  renderMenu({ videoId, showControls }, actions, fullScreenContainerRef) {
    const { label, menuItems } = this.props

    return (
      <PlayerPopover
        activateControl={actions.activateControl}
        deactivateControl={actions.deactivateControl}
        showControls={showControls}
      >
        {({ showPopover }, togglePopover) => (
          <Menu
            placement="top"
            trigger={this.renderButton(videoId, fullScreenContainerRef)}
            mountNode={fullScreenContainerRef}
            label={label}
            show={showPopover}
            onToggle={togglePopover}
          >
            {menuItems()}
          </Menu>
        )}
      </PlayerPopover>
    )
  }

  render() {
    const { variant } = this.props

    return (
      <MediaContext.Consumer>
        {({ state, fullScreenContainerRef, actions }) => {
          return variant === 'menu'
            ? this.renderMenu(state, actions, fullScreenContainerRef)
            : <span>{this.renderButton(state.videoId, fullScreenContainerRef)}</span>
        }}
      </MediaContext.Consumer>
    )
  }
}

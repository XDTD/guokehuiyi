/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react'
import PropTypes from 'prop-types'

import { pickProps } from '@instructure/ui-react-utils'
import { TruncateText } from '@instructure/ui-truncate-text'
import { Menu, MenuItemGroup, MenuItem } from '@instructure/ui-menu'
import { IconClosedCaptioningSolid } from '@instructure/ui-icons'
import { ScreenReaderContent } from '@instructure/ui-a11y-content'
import { tracksType } from '../../../Player/PropTypes'
import PlayerButton from '../../../PlayerButton'
import { translate } from '../../../../constants/translated/translations'

const OFF = 'OFF'

/**
---
private: true
---
**/
export default class TrackChooser extends Component {
  static propTypes = {
    showPopover: PropTypes.bool.isRequired,
    togglePopover: PropTypes.func.isRequired,
    videoId: PropTypes.string.isRequired,
    mountNode: PropTypes.func.isRequired,
    tracks: tracksType,
    handleKeyDown: PropTypes.func.isRequired,
    handleOnSelect: PropTypes.func.isRequired,
    handleOnMouseMove: PropTypes.func.isRequired,
    selectedTrackId: MenuItem.propTypes.value
  }

  static defaultProps = {
    selectedTrackId: null,
    tracks: []
  }

  renderTurnOffCaptionLabel = () => {
    return (
      <MenuItem data-test="Captions-Off" key={OFF} value={null} onKeyDown={this.props.handleKeyDown}>
        {translate('CAPTIONS_OFF')}
      </MenuItem>
    )
  }

  isActive = (trackId, selectedTrackId) => {
    if (trackId !== selectedTrackId) {
      return ''
    }
    return '-Active'
  }

  renderTrackOptionsLabels = (tracks) => (
    tracks.map((track) => {
      return (
        <MenuItem
          data-test={`Captions-${track.label}${this.isActive(track.id, this.props.selectedTrackId)}`}
          key={track.id}
          value={track.id}
          onKeyDown={this.props.handleKeyDown}
        >
          <TruncateText>
            {track.label}
          </TruncateText>
        </MenuItem>
      )
    })
  )

  render() {
    const {
      tracks, selectedTrackId,
      showPopover, togglePopover, videoId,
      mountNode, handleOnSelect, handleOnMouseMove
    } = this.props
    const label = translate('VIDEO_TRACK')
    const screenReaderContent = <ScreenReaderContent>{label}</ScreenReaderContent>

    return (
      <Menu
        placement="top"
        show={showPopover}
        onToggle={togglePopover}
        trigger={
          <PlayerButton
            {...pickProps(this.props, PlayerButton.propTypes)}
            tooltipLabel={label}
            tooltipMountNode={mountNode}
            videoId={videoId}
          >
            {screenReaderContent}
            <IconClosedCaptioningSolid size="x-small"/>
          </PlayerButton>
        }
        mountNode={mountNode()}
        label={label}
      >
        <MenuItemGroup
          onMouseMove={handleOnMouseMove}
          label={screenReaderContent}
          selected={[selectedTrackId]}
          onSelect={handleOnSelect}
        >
          {this.renderTurnOffCaptionLabel()}
          {this.renderTrackOptionsLabels(tracks)}
        </MenuItemGroup>
      </Menu>
    )
  }
}

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react'
import ReactDOM from 'react-dom'
import classnames from 'classnames'
import PropTypes from 'prop-types'

import { findFocusable } from '@instructure/ui-dom-utils'
import themeable from '@instructure/ui-themeable'

import { findAncestor } from '../../utils/findAncestor'

import theme from './theme'
import styles from './styles.css'

export const INSULATE_EVENTS = [
  'onKeyDown',
  'onKeyPress',
  'onKeyUp',
  'onMouseDown',
  'onClick',
  'onMouseUp'
]

/**
---
private: true
---
@module PlayerOverlay
**/
@themeable(theme, styles)
class PlayerOverlay extends Component {
  static propTypes = {
    children: PropTypes.func,
    passthrough: PropTypes.bool,
    backdrop: PropTypes.bool,
    setFocusEnabled: PropTypes.func
  }

  static defaultProps = {
    children: () => {},
    passthrough: false,
    backdrop: false,
    setFocusEnabled: () => {}
  }

  componentDidMount() {
    this.renderChildren()

    this.props.setFocusEnabled(this.props.passthrough)
  }

  componentDidUpdate(prevProps) {
    const { passthrough } = this.props

    if(prevProps.passthrough !== passthrough) {
      this.props.setFocusEnabled(passthrough)
    }

    this.renderChildren()
  }

  componentWillUnmount() {
    ReactDOM.unmountComponentAtNode(this.overlayRef)

    this.props.setFocusEnabled(true)
  }

  handleEvent = (event) => {
    event.stopPropagation()
  }

  onFocus = (event) => {
    if (this.overlayRef !== document.activeElement) {
      return
    }

    const focusable = findFocusable(this.overlayRef, el =>
      !findAncestor(
        el,
        node =>
          node.getAttribute && node.getAttribute('aria-hidden') === 'true'
      ))

    if(focusable.length) {
      focusable[0].focus()
    }
  }

  renderChildren() {
    ReactDOM.render(this.props.children(this.overlayRef), this.overlayRef)
  }

  render() {
    const overlayEvents = {}

    INSULATE_EVENTS.forEach((eventName) => {
      overlayEvents[eventName] = (event) => { this.handleEvent(event) }
    })

    const classes = {
      [styles.container]: true,
      [styles.passthrough]: this.props.passthrough,
      [styles.backdrop]: this.props.backdrop,
    }

    // Native browser behaviour causes the Player parent element to be focused
    // when clicking directly on an overlay that isn't pass-through. Block this
    // default behaviour from happening.
    const insulationProps = this.props.passthrough ? null : {
      onFocus: this.onFocus,
      tabIndex: -1
    }

    return (
      <div
        className={classnames(classes)}
        ref={ref => { this.overlayRef = ref }}
        {...overlayEvents}
        {...insulationProps}
      />
    )
  }
}

export default PlayerOverlay

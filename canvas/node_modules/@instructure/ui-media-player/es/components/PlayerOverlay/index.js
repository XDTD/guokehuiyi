import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import classnames from 'classnames';
import PropTypes from 'prop-types';
import { findFocusable } from '@instructure/ui-dom-utils';
import themeable from '@instructure/ui-themeable';
import { findAncestor } from '../../utils/findAncestor';
import theme from './theme';
var styles = {
  componentId: 'eSZtx',
  template: function template(theme) {
    return "\n\n.eSZtx_crZr{height:100%;left:0;position:absolute;top:0;width:100%}\n\n.eSZtx_fpTY{pointer-events:none}\n\n.eSZtx_cHdP{background-color:".concat(theme.backgroundColor || 'inherit', "}");
  },
  'container': 'eSZtx_crZr',
  'passthrough': 'eSZtx_fpTY',
  'backdrop': 'eSZtx_cHdP'
};
export var INSULATE_EVENTS = ['onKeyDown', 'onKeyPress', 'onKeyUp', 'onMouseDown', 'onClick', 'onMouseUp'];
/**
---
private: true
---
@module PlayerOverlay
**/

var PlayerOverlay = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(PlayerOverlay, _Component);

  var _super = _createSuper(PlayerOverlay);

  function PlayerOverlay() {
    var _this;

    _classCallCheck(this, PlayerOverlay);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleEvent = function (event) {
      event.stopPropagation();
    };

    _this.onFocus = function (event) {
      if (_this.overlayRef !== document.activeElement) {
        return;
      }

      var focusable = findFocusable(_this.overlayRef, function (el) {
        return !findAncestor(el, function (node) {
          return node.getAttribute && node.getAttribute('aria-hidden') === 'true';
        });
      });

      if (focusable.length) {
        focusable[0].focus();
      }
    };

    return _this;
  }

  _createClass(PlayerOverlay, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.renderChildren();
      this.props.setFocusEnabled(this.props.passthrough);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var passthrough = this.props.passthrough;

      if (prevProps.passthrough !== passthrough) {
        this.props.setFocusEnabled(passthrough);
      }

      this.renderChildren();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      ReactDOM.unmountComponentAtNode(this.overlayRef);
      this.props.setFocusEnabled(true);
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      ReactDOM.render(this.props.children(this.overlayRef), this.overlayRef);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this,
          _classes;

      var overlayEvents = {};
      INSULATE_EVENTS.forEach(function (eventName) {
        overlayEvents[eventName] = function (event) {
          _this2.handleEvent(event);
        };
      });
      var classes = (_classes = {}, _defineProperty(_classes, styles.container, true), _defineProperty(_classes, styles.passthrough, this.props.passthrough), _defineProperty(_classes, styles.backdrop, this.props.backdrop), _classes); // Native browser behaviour causes the Player parent element to be focused
      // when clicking directly on an overlay that isn't pass-through. Block this
      // default behaviour from happening.

      var insulationProps = this.props.passthrough ? null : {
        onFocus: this.onFocus,
        tabIndex: -1
      };
      return /*#__PURE__*/React.createElement("div", Object.assign({
        className: classnames(classes),
        ref: function ref(_ref) {
          _this2.overlayRef = _ref;
        }
      }, overlayEvents, insulationProps));
    }
  }]);

  PlayerOverlay.displayName = "PlayerOverlay";
  return PlayerOverlay;
}(Component), _class2.propTypes = {
  children: PropTypes.func,
  passthrough: PropTypes.bool,
  backdrop: PropTypes.bool,
  setFocusEnabled: PropTypes.func
}, _class2.defaultProps = {
  children: function children() {},
  passthrough: false,
  backdrop: false,
  setFocusEnabled: function setFocusEnabled() {}
}, _temp)) || _class);
export default PlayerOverlay;
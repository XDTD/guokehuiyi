import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import themeable from '@instructure/ui-themeable';
import { rendererEventsTypeSet } from '../PropTypes';
import { PAUSED, PLAYING, ENDED } from '../../../constants';
import { loadScript } from '../../utils';
var styles = {
  componentId: 'bZRFL',
  template: function template(theme) {
    return "\n\n.bZRFL_bRsT{height:0;padding-bottom:56.25%}\n\n.bZRFL_bRsT iframe{height:100%;left:0;position:absolute;top:0;width:100%}";
  },
  'youtubeContainer': 'bZRFL_bRsT'
};
var MIN_VOLUME = 0;
export var MAX_VOLUME = 100;
export var MEDIA_EVENT_UPDATE_INTERVAL = 50;
export var DIRECTION_FORWARD = 'DIRECTION_FORWARD';
export var DIRECTION_BACKWARD = 'DIRECTION_BACKWARD';
export var PLAYER_READY_TIMEOUT = 20 * 1000; // YouTube's timeupdate is not in perfect sync with React,
// which triggers markers' onReached twice when video is
// playing and marker is clicked. This tiny offset
// is to prevent double onReached trigger.
// Note: it's observed that this happens when
// the onReached involves seeking to the marker's time.

export var YOUTUBE_TIME_UPDATE_OFFSET = 0.0001;
var YouTube = (_dec = themeable({}, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(YouTube, _Component);

  var _super = _createSuper(YouTube);

  function YouTube() {
    var _this;

    _classCallCheck(this, YouTube);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.showSpinner = function () {
      _this.props.setLoadingOverlay('backdrop');
    };

    _this.hideSpinner = function () {
      _this.props.setLoadingOverlay(false);
    };

    _this.setupYT = function () {
      if (!window.YT) {
        window.onYouTubeIframeAPIReady = _this.loadVideo;
        loadScript('https://www.youtube.com/iframe_api');
      } else {
        _this.loadVideo();
      }
    };

    _this.getYouTubeVideoId = function (url) {
      if (!url) {
        return;
      }

      var regExp = /^.*(?:(?:youtu\.be\/|v\/|vi\/|u\/\w\/|embed\/)|(?:(?:watch)?\?v(?:i)?=|\&v(?:i)?=))([^#\&\?]*).*/; // eslint-disable-line no-useless-escape

      var result = url.match(regExp);
      return result && result[1];
    };

    _this.loadVideo = function () {
      _this.props.onLoadStart && _this.props.onLoadStart();

      var youtubeId = _this.getYouTubeVideoId(_this.props.selectedSrc);

      _this.player = new window.YT.Player(_this.props.videoId, {
        videoId: youtubeId,
        playerVars: {
          // https://developers.google.com/youtube/player_parameters#Parameters
          controls: 0,
          // hides YouTube controls
          disablekb: 1,
          // disables YouTube keyboard shortcut
          iv_load_policy: 3,
          // turns off YT annotations
          rel: 0,
          // only shows related videos from the same channel
          enablejsapi: 1 // enables the player to be controlled via IFrame or JavaScript Player API calls

        },
        events: {
          onReady: _this.onPlayerReady,
          onStateChange: _this.onPlayerStateChange,
          onPlaybackRateChange: _this.onPlayerPlaybackRateChange,
          onError: _this.onPlayerError
        }
      });
    };

    _this.onPlayerError = function (event) {
      _this.props.onError && _this.props.onError(event);
    };

    _this.onPlayerPlaybackRateChange = function () {
      _this.props.onRendererStateChange({
        playbackSpeed: _this.player.getPlaybackRate()
      }, function () {
        _this.props.onRateChange && _this.props.onRateChange();
      });
    };

    _this.handleOnLoadedMetadata = function () {
      _this.props.setActions({
        togglePlay: _this.togglePlay,
        play: _this.play,
        pause: _this.pause,
        seek: _this.seek,
        setVolume: _this.setVolume,
        toggleMute: _this.toggleMute,
        setPlaybackSpeed: _this.setPlaybackSpeed
      });

      _this.hideSpinner();

      _this.props.onLoadedMetadata && _this.props.onLoadedMetadata();
    };

    _this.onPlayerReady = function () {
      _this.props.onCanPlay && _this.props.onCanPlay();

      _this.handleOnLoadedMetadata();

      _this.props.setPlaybackSpeedOptions(_this.player.getAvailablePlaybackRates()); // Sadly, there's no callback functionality for time updates & volume changes
      // so we'll have to make it work ourselves.
      // See https://developers.google.com/youtube/iframe_api_reference#Events


      _this.clearEventUpdates = _this.setupEventUpdates(_this.player);
    };

    _this.hideTrack = function () {
      _this.player.setOption("captions", "track", {});
    };

    _this.onSeeked = function () {
      _this.seekDirection = null;
      _this.seekLastAttemptTime = null;
      _this.seeking = false;
      _this.targetTime = null;
      _this.props.onSeeked && _this.props.onSeeked();
    };

    _this.maybeFireMediaEventCallbacks = function () {
      _this.reportTimeUpdate && _this.props.onTimeUpdate && _this.props.onTimeUpdate();

      if (_this.reportVolumeChange) {
        _this.props.onVolumeChange && _this.props.onVolumeChange();
        _this.reportVolumeChange = false;
      }

      if (_this.seeking) {
        if (_this.seekDirection === DIRECTION_FORWARD && _this.player.getCurrentTime() >= _this.targetTime) {
          _this.onSeeked();
        } else if (_this.seekDirection === DIRECTION_BACKWARD) {
          if (_this.player.getCurrentTime() > _this.seekLastAttemptTime || _this.player.getCurrentTime() === _this.targetTime) {
            _this.onSeeked();
          } else {
            _this.seekLastAttemptTime = _this.player.getCurrentTime();
          }
        }
      }
    };

    _this.setupEventUpdates = function (player) {
      var onRendererStateChange = _this.props.onRendererStateChange;

      if (!onRendererStateChange) {
        return;
      }

      var onEventUpdate = function onEventUpdate() {
        var duration = player.getDuration();
        var currentTime;

        if (_this.seeking && _this.targetTime) {
          currentTime = _this.targetTime;
        } else {
          currentTime = _this.props.mediaState === ENDED ? duration : player.getCurrentTime();
        }

        onRendererStateChange({
          duration: duration,
          currentTime: currentTime,
          buffered: _this.props.mediaState === ENDED ? duration : player.getVideoLoadedFraction() * duration,
          muted: player.isMuted(),
          volume: player.getVolume() / MAX_VOLUME
        }, _this.maybeFireMediaEventCallbacks);
      };

      var eventUpdateId = setInterval(onEventUpdate, MEDIA_EVENT_UPDATE_INTERVAL);
      return function () {
        clearInterval(eventUpdateId);
      };
    };

    _this.playedTheFirstTime = false;
    _this.reportTimeUpdate = false;

    _this.onPlayerStateChange = function (event) {
      switch (event.data) {
        case window.YT.PlayerState.ENDED:
          _this.reportTimeUpdate = false;

          _this.props.onRendererStateChange({
            mediaState: ENDED
          }, function () {
            _this.props.onEnded && _this.props.onEnded();
          });

          break;

        case window.YT.PlayerState.PLAYING:
          _this.reportTimeUpdate = true;

          if (!_this.playedTheFirstTime) {
            _this.props.onLoadedData && _this.props.onLoadedData();

            _this.hideTrack();

            _this.playedTheFirstTime = true;
          }

          _this.props.onRendererStateChange({
            mediaState: PLAYING
          }, function () {
            _this.props.onPlay && _this.props.onPlay();
            _this.props.onPlaying && _this.props.onPlaying();
          });

          break;

        case window.YT.PlayerState.PAUSED:
          _this.reportTimeUpdate = false;

          _this.props.onRendererStateChange({
            mediaState: PAUSED
          }, function () {
            _this.props.onPause && _this.props.onPause();
          });

          break;

        case window.YT.PlayerState.BUFFERING:
          _this.props.onProgress && _this.props.onProgress();
          break;

        default:
          break;
      }
    };

    _this.togglePlay = function () {
      if (_this.props.mediaState === PLAYING) {
        _this.pause();
      } else {
        _this.play();
      }
    };

    _this.play = function () {
      _this.player.playVideo();
    };

    _this.pause = function () {
      _this.player.pauseVideo();
    };

    _this.seeking = false;
    _this.targetTime = null;

    _this.seek = function (time) {
      /* see comments at YOUTUBE_TIME_UPDATE_OFFSET's initialization for details */
      var timeWithOffset = time + YOUTUBE_TIME_UPDATE_OFFSET;
      /*
        Unfortunately, YouTube's getCurrentTime() doesn't work cleanly with YouTube's seekTo().
        getCurrentTime() returns an intermediate value between Time A (starting time) and Time B (target time).
         Simple diagram:
         (1) Time A -> (2) `player.getCurrentTime()` returns (A + 0.121314) -> (3) Time B
         This breaks the logic that tells whether we're done seeking or not in `this.maybeFireMediaEventCallbacks`.
        In our testing, we observed that there could be as little as 0 intermediate values to more than 5 intermediate values,
        so we're doing a relaxed check whether it has seeked forward/backwards. See the other part of the implementation
        in `this.maybeFireMediaEventCallbacks`.
      */

      var targetTime = Math.min(Math.max(0, timeWithOffset), _this.player.getDuration());

      var playerCurrentTime = _this.player.getCurrentTime();

      _this.seekDirection = targetTime > playerCurrentTime ? DIRECTION_FORWARD : DIRECTION_BACKWARD;
      _this.seekLastAttemptTime = playerCurrentTime;
      _this.seeking = true;
      _this.targetTime = targetTime;

      _this.player.seekTo(targetTime);

      _this.props.onSeeking && _this.props.onSeeking();
    };

    _this.reportVolumeChange = false;

    _this.setVolume = function (volume) {
      if (_this.player.isMuted()) {
        _this.player.unMute();
      }

      _this.player.setVolume(Math.min(Math.max(MIN_VOLUME, volume * MAX_VOLUME), MAX_VOLUME));

      _this.reportVolumeChange = true;
    };

    _this.toggleMute = function () {
      if (_this.player.isMuted()) {
        _this.player.unMute();
      } else {
        _this.player.mute();
      }
    };

    _this.setPlaybackSpeed = function (playbackSpeed) {
      _this.player.setPlaybackRate(playbackSpeed);
    };

    return _this;
  }

  _createClass(YouTube, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.showSpinner();
      this.setupYT();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.clearEventUpdates && this.clearEventUpdates();
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement("div", {
        className: styles.youtubeContainer
      }, /*#__PURE__*/React.createElement("div", {
        id: this.props.videoId
      }));
    }
  }]);

  YouTube.displayName = "YouTube";
  return YouTube;
}(Component), _class2.propTypes = _objectSpread({
  videoId: PropTypes.string.isRequired,
  mediaState: PropTypes.string,
  selectedSrc: PropTypes.string,
  setActions: PropTypes.func,
  onRendererStateChange: PropTypes.func,
  setPlaybackSpeedOptions: PropTypes.func
}, rendererEventsTypeSet), _class2.defaultProps = {
  mediaState: '',
  selectedSrc: '',
  setActions: function setActions() {},
  onRendererStateChange: function onRendererStateChange() {},
  setPlaybackSpeedOptions: function setPlaybackSpeedOptions() {}
}, _temp)) || _class);
export default YouTube;
export { YouTube };
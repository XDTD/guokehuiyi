import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import themeable from '@instructure/ui-themeable';
import { rendererEventsTypeSet } from '../PropTypes';
import { PAUSED, PLAYING, ENDED } from '../../../constants';
var styles = {
  componentId: 'bXaxV',
  template: function template(theme) {
    return "\n\n.bXaxV_fvys{-webkit-transform-style:preserve-3d;display:block;max-height:inherit;max-width:inherit;min-height:inherit;min-width:inherit;width:100%}\n\n.bXaxV_dBml{line-height:1.5;pointer-events:none;position:absolute;text-align:center}\n\n[dir=ltr] .bXaxV_dBml,[dir=rtl] .bXaxV_dBml{text-align:center}\n\n.bXaxV_fjhh{background-color:".concat(theme.captionBackgroundColor || 'inherit', ";color:").concat(theme.captionTextColor || 'inherit', ";padding:0.375rem}");
  },
  'video': 'bXaxV_fvys',
  'subtitleContainer': 'bXaxV_dBml',
  'subtitle': 'bXaxV_fjhh'
};
import theme from './theme';
export var MEDIA_ELEMENT_PROPS = ['onEnded', 'onLoadedMetadata', 'onProgress', 'onRateChange', 'onSeeked', 'onTimeUpdate', 'onVolumeChange'];
export var PLAYBACK_SPEED_OPTIONS = [0.5, 1, 1.5, 2.0];
var HTML5Video = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(HTML5Video, _Component);

  var _super = _createSuper(HTML5Video);

  function HTML5Video() {
    var _this;

    _classCallCheck(this, HTML5Video);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      lastKnownPlaying: null,
      lastKnownTime: null,
      lastKnownDuration: NaN,
      metadataLoaded: true
    };

    _this.setVideoRef = function (el) {
      if (!el) {
        return;
      }

      _this.video = el;
    };

    _this.showSpinner = function () {
      _this.props.setLoadingOverlay('backdrop');
    };

    _this.showBufferingSpinner = function () {
      _this.props.setLoadingOverlay('passthrough');
    };

    _this.hideSpinner = function () {
      _this.props.setLoadingOverlay(false);
    };

    _this.handleOnLoadedMetadata = function () {
      _this.props.setActions({
        togglePlay: _this.togglePlay,
        play: _this.play,
        pause: _this.pause,
        seek: _this.seek,
        setVolume: _this.setVolume,
        setPlaybackSpeed: _this.setPlaybackSpeed,
        setSource: _this.setSource,
        toggleMute: _this.toggleMute
      });

      _this.hideSpinner();

      _this.setState({
        metadataLoaded: true
      });
    };

    _this.rememberMediaState = function () {
      var _this$state = _this.state,
          lastKnownPlaying = _this$state.lastKnownPlaying,
          lastKnownTime = _this$state.lastKnownTime;

      if (lastKnownTime !== null) {
        _this.seek(lastKnownTime);
      }

      if (lastKnownPlaying !== null) {
        (lastKnownPlaying ? _this.play : _this.pause)();
      }

      _this.setState({
        lastKnownPlaying: null,
        lastKnownTime: null
      });
    };

    _this.handleOnCanPlay = function () {
      _this.rememberMediaState();

      _this.hideSpinner();
    };

    _this.togglePlay = function () {
      if (_this.props.mediaState === PLAYING) {
        _this.pause();
      } else {
        _this.play();
      }
    };

    _this.play = function () {
      _this.video.play();
    };

    _this.pause = function () {
      _this.video.pause();
    };

    _this.clampTime = function (_ref) {
      var time = _ref.time,
          _ref$minTime = _ref.minTime,
          minTime = _ref$minTime === void 0 ? 0 : _ref$minTime,
          maxTime = _ref.maxTime;
      return Math.min(Math.max(minTime, time), maxTime);
    };

    _this.seek = function (time) {
      _this.video.currentTime = _this.clampTime({
        time: time,
        maxTime: _this.video.duration
      });
    };

    _this.setVolume = function (volume) {
      if (_this.video.muted) {
        _this.video.muted = false;
      }

      _this.video.volume = Math.min(Math.max(0, volume), 1);
    };

    _this.setPlaybackSpeed = function (playbackSpeed) {
      _this.video.playbackRate = playbackSpeed;
    };

    _this.setSource = function (src) {
      if (_this.video.currentSrc === src) {
        return;
      }

      _this.setState({
        lastKnownPlaying: !_this.video.paused,
        // If the currentTime is 0:00, ensure that we show the poster upon source change,
        // instead of seeking immediately to 0:00
        lastKnownTime: _this.video.currentTime || null,
        lastKnownDuration: _this.video.duration || NaN,
        metadataLoaded: false
      });

      _this.video.src = src;
    };

    _this.toggleMute = function () {
      _this.video.muted = !_this.video.muted;
    };

    _this.renderSource = function () {
      var selectedSrc = _this.props.selectedSrc;

      if (selectedSrc) {
        return /*#__PURE__*/React.createElement("source", {
          src: selectedSrc
        });
      }
    };

    _this.updateRendererState = function () {
      if (!_this.video) {
        return;
      }

      var duration = _this.state.metadataLoaded ? _this.video.duration : _this.state.lastKnownDuration;
      var currentTime = _this.state.metadataLoaded ? _this.video.currentTime : _this.clampTime({
        time: _this.state.lastKnownTime,
        maxTime: duration
      });
      var bufferedRanges = _this.video.buffered;
      var bufferedValue = bufferedRanges.length > 0 ? bufferedRanges.end(bufferedRanges.length - 1) : 0; // In FF, when approaching the end of the video, buffered can be smaller than currentTime

      var buffered = Math.max(bufferedValue, currentTime);
      var mediaState = _this.video.paused ? PAUSED : PLAYING;

      if (_this.video.ended) {
        mediaState = ENDED;
      }

      var muted = _this.video.muted;
      var volume = _this.video.volume;
      var playbackSpeed = _this.video.playbackRate;
      var selectedSrc = _this.video.currentSrc;

      _this.props.onRendererStateChange({
        mediaState: mediaState,
        muted: muted,
        volume: volume,
        playbackSpeed: playbackSpeed,
        selectedSrc: selectedSrc,
        currentTime: currentTime,
        duration: duration,
        buffered: buffered
      });
    };

    return _this;
  }

  _createClass(HTML5Video, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.showSpinner();
      this.props.setPlaybackSpeedOptions(PLAYBACK_SPEED_OPTIONS);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.video = null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var videoId = this.props.videoId;
      var defaultProps = {
        onLoadStart: this.showSpinner,
        onLoadedMetadata: this.handleOnLoadedMetadata,
        onWaiting: this.showBufferingSpinner,
        onCanPlay: this.handleOnCanPlay
      };
      var eventProps = {};
      var allEvents = [].concat(MEDIA_ELEMENT_PROPS, _toConsumableArray(Object.keys(rendererEventsTypeSet)), _toConsumableArray(Object.keys(defaultProps)));
      allEvents.forEach(function (key) {
        var defaultPropFn = defaultProps[key];
        var isMediaElementProp = MEDIA_ELEMENT_PROPS.includes(key);
        var propFn = _this2.props[key];

        if (!isMediaElementProp && !propFn && !defaultPropFn) {
          return;
        }

        eventProps[key] = function (event) {
          if (isMediaElementProp) {
            _this2.updateRendererState();
          }

          if (defaultPropFn) {
            defaultPropFn(event);
          }

          if (propFn) {
            propFn(event);
          }
        };
      });
      /* eslint-disable jsx-a11y/media-has-caption, jsx-a11y/no-noninteractive-tabindex */

      return /*#__PURE__*/React.createElement("div", {
        style: {
          width: '100%',
          height: '100%',
          minHeight: 'inherit',
          minWidth: 'inherit',
          maxHeight: 'inherit',
          maxWidth: 'inherit',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center'
        }
      }, /*#__PURE__*/React.createElement("video", Object.assign({
        poster: this.props.poster,
        ref: this.setVideoRef,
        id: videoId,
        className: styles.video,
        tabIndex: "-1"
      }, eventProps), this.renderSource()));
      /* eslint-enable jsx-a11y/media-has-caption, jsx-a11y/no-noninteractive-tabindex */
    }
  }]);

  HTML5Video.displayName = "HTML5Video";
  return HTML5Video;
}(Component), _class2.propTypes = _objectSpread({
  videoId: PropTypes.string.isRequired,
  selectedSrc: PropTypes.string,
  setActions: PropTypes.func,
  onRendererStateChange: PropTypes.func,
  poster: PropTypes.string
}, rendererEventsTypeSet), _class2.defaultProps = {
  selectedSrc: '',
  setActions: function setActions() {},
  onRendererStateChange: function onRendererStateChange() {},
  poster: null
}, _temp)) || _class);
export default HTML5Video;
export { HTML5Video };
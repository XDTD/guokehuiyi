import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { Button } from '@instructure/ui-buttons';
import { Menu } from '@instructure/ui-menu';
import themeable from '@instructure/ui-themeable';
import MediaContext from '../Player/MediaContext';
var styles = {
  componentId: 'bHpCV',
  template: function template(theme) {
    return "\n\n.bHpCV_crZr{margin:".concat(theme.margin || 'inherit', "}");
  },
  'container': 'bHpCV_crZr'
};
import theme from './theme';
var PlayerPlayhead = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(PlayerPlayhead, _Component);

  var _super = _createSuper(PlayerPlayhead);

  function PlayerPlayhead() {
    var _this;

    _classCallCheck(this, PlayerPlayhead);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.focusPlayhead = function () {
      _this.buttonRef.focus(); // This is a workaround for an issue caused by the inert polyfill where the polyfill
      // uses a MutationObserver to detect the inert attribute change, and MutationObserver
      // events are asynchronous, so we have to defer focus() to the next tick.
      // https://github.com/WICG/inert/blob/v3.0.0/README.md


      setTimeout(function () {
        _this.buttonRef.focus();
      });
    };

    _this.setButtonRef = function (ref) {
      _this.buttonRef = ref;
    };

    _this.handleOnMouseMove = function (event) {
      event.stopPropagation();
    };

    _this.handleClick = function (event) {
      event.stopPropagation();

      _this.props.onClick(event);
    };

    return _this;
  }

  _createClass(PlayerPlayhead, [{
    key: "renderButton",
    value: function renderButton() {
      var _this$props = this.props,
          icon = _this$props.icon,
          label = _this$props.label;
      return /*#__PURE__*/React.createElement(Button, {
        buttonRef: this.setButtonRef,
        icon: icon,
        onMouseMove: this.handleOnMouseMove,
        onClick: this.handleClick,
        variant: "circle-default",
        size: "large"
      }, /*#__PURE__*/React.createElement(ScreenReaderContent, null, label));
    }
  }, {
    key: "renderMenu",
    value: function renderMenu() {
      var _this2 = this;

      var menuItems = this.props.menuItems;
      return /*#__PURE__*/React.createElement(MediaContext.Consumer, null, function (_ref) {
        var setActions = _ref.setActions,
            fullScreenContainerRef = _ref.fullScreenContainerRef;
        setActions({
          focusPlayhead: _this2.focusPlayhead
        });
        return /*#__PURE__*/React.createElement(Menu, {
          mountNode: fullScreenContainerRef,
          placement: "top",
          trigger: _this2.renderButton()
        }, menuItems);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var variant = this.props.variant;
      return /*#__PURE__*/React.createElement("div", {
        className: styles.container
      }, variant === 'button' ? this.renderButton() : this.renderMenu());
    }
  }]);

  PlayerPlayhead.displayName = "PlayerPlayhead";
  return PlayerPlayhead;
}(Component), _class2.propTypes = {
  icon: PropTypes.node,
  label: PropTypes.string.isRequired,
  onClick: PropTypes.func,
  menuItems: PropTypes.arrayOf(Menu.propTypes.children),
  variant: PropTypes.oneOf(['button', 'menu']).isRequired
}, _class2.defaultProps = {
  icon: null,
  onClick: function onClick() {},
  menuItems: null
}, _temp)) || _class);
export default PlayerPlayhead;
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import screenfull from 'screenfull';
import { Menu } from '@instructure/ui-menu';
import { Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import themeable from '@instructure/ui-themeable';
import { pickProps } from '@instructure/ui-react-utils';
import { Player, PlayerPropTypes } from '../Player';
import PlayerControls from '../PlayerControls';
import { HTML5Video } from '../Player/HTML5Video';
import { YouTube } from '../Player/YouTube';
import { Captions } from '../Player/Captions';
import { TranslationPropTypes } from '../../constants/translated/translations';
var MediaPlayer = (_dec = themeable(null, null), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(MediaPlayer, _Component);

  var _super = _createSuper(MediaPlayer);

  function MediaPlayer() {
    _classCallCheck(this, MediaPlayer);

    return _super.apply(this, arguments);
  }

  _createClass(MediaPlayer, [{
    key: "render",
    value: function render() {
      var mediaPlayerProps = pickProps(this.props, MediaPlayer.propTypes);
      var _this$props = this.props,
          sources = _this$props.sources,
          tracks = _this$props.tracks,
          type = _this$props.type,
          hideFullScreen = _this$props.hideFullScreen,
          markers = _this$props.markers,
          customControls = _this$props.customControls,
          playhead = _this$props.playhead;
      var renderer = MediaPlayer.rendererList[type]; // require('screenfull') returns "false" if full-screen isn't sfupported

      var isFullScreenHidden = !screenfull || hideFullScreen;
      var isSourceChooserHidden = typeof sources === 'string' || sources.length <= 1;
      var isTrackChooserHidden = !tracks || !tracks.length;

      var playerProps = _objectSpread(_objectSpread({}, pickProps(mediaPlayerProps, Player.propTypes)), {}, {
        renderer: renderer,
        controls: function controls(PlayerControls) {
          var allControls = [/*#__PURE__*/React.createElement(PlayerControls.PlayPauseButton, {
            key: "PlayPauseButton "
          }), /*#__PURE__*/React.createElement(PlayerControls.Timebar, {
            key: "Timebar",
            markers: markers,
            playhead: playhead
          }), /*#__PURE__*/React.createElement(PlayerControls.Volume, {
            key: "Volume"
          }), /*#__PURE__*/React.createElement(PlayerControls.PlaybackSpeed, {
            key: "PlaybackSpeed"
          })];
          var customControlsRendered = customControls();

          if (Array.isArray(customControlsRendered)) {
            allControls.push.apply(allControls, _toConsumableArray(customControlsRendered));
          } else if (customControlsRendered) {
            allControls.push(customControlsRendered);
          }

          isTrackChooserHidden || allControls.push( /*#__PURE__*/React.createElement(PlayerControls.TrackChooser, {
            key: "TrackChooser"
          }));
          isSourceChooserHidden || allControls.push( /*#__PURE__*/React.createElement(PlayerControls.SourceChooser, {
            key: "SourceChooser"
          }));
          isFullScreenHidden || allControls.push( /*#__PURE__*/React.createElement(PlayerControls.FullScreenButton, {
            key: "FullScreenButton"
          }));
          var firstControl = allControls.shift();
          var lastControl = allControls.pop();
          var firstControlPositioned = /*#__PURE__*/React.cloneElement(firstControl, {
            position: 'start'
          });
          var lastControlPositioned = /*#__PURE__*/React.cloneElement(lastControl, {
            position: 'end'
          });
          return /*#__PURE__*/React.createElement(PlayerControls, null, [firstControlPositioned].concat(allControls, [lastControlPositioned]));
        }
      });

      var playerEventProps = pickProps(this.props, PlayerPropTypes.playerEventsTypeSet);
      var rendererEventProps = pickProps(this.props, PlayerPropTypes.rendererEventsTypeSet);
      return /*#__PURE__*/React.createElement(Player, Object.assign({}, playerProps, playerEventProps, rendererEventProps), this.props.children);
    }
  }]);

  MediaPlayer.displayName = "MediaPlayer";
  return MediaPlayer;
}(Component), _class2.propTypes = _objectSpread(_objectSpread({
  type: PropTypes.oneOf(['video', 'youtube']),

  /**
   * URL(s) of video to play
   */
  sources: PlayerPropTypes.sourcesType,

  /**
   * tracks of the video to play
   */
  tracks: PlayerPropTypes.tracksType,

  /**
   * Additional controls to be added to the control bar
   */
  customControls: PropTypes.func,

  /**
   * If set to true, the controls will never dismiss.
   */
  alwaysShowControls: PropTypes.bool,

  /**
   * If set to true, FullScreenButton is hidden.
   */
  hideFullScreen: PropTypes.bool,

  /**
   * Give the player a label to be read by screen readers.
   */
  label: PropTypes.string,

  /**
   * Give the player a playhead
   */
  playhead: PropTypes.node,

  /**
   * The poster image to use before the media is played.
   */
  poster: PropTypes.string,

  /**
   * Label overrides for i18n. Defaults to english
   * See src/constants/translated/translations.js for default values
   */
  translations: PropTypes.shape(TranslationPropTypes),

  /**
   * Children of the <Player />
   */
  children: ChildrenPropTypes.oneOf([Player.Overlay]),

  /**
   * indicates the player should fill the width of its container
   */
  fluidWidth: PropTypes.bool,

  /**
   * indicates the player should fill the height of its container
   */
  fluidHeight: PropTypes.bool,

  /**
   * A set of markers to apply to the timebar.
   */
  markers: ChildrenPropTypes.oneOf([Player.Marker]),

  /**
   * Reference to actions object
   */
  actionsRef: PropTypes.func,

  /**
   * Disable right click on the player container
   */
  disableRightClick: PropTypes.bool,
  captionPosition: Captions.propTypes.captionPosition,
  captionOffset: Captions.propTypes.captionOffset,
  autoShowCaption: PropTypes.string
}, PlayerPropTypes.playerEventsTypeSet), PlayerPropTypes.rendererEventsTypeSet), _class2.defaultProps = {
  type: 'video',
  sources: [],
  tracks: [],
  actionsRef: null,
  customControls: function customControls() {
    return [];
  },
  alwaysShowControls: false,
  children: null,
  hideFullScreen: false,
  markers: [],
  playhead: null,
  poster: null,
  label: '',
  translations: {},
  fluidWidth: true,
  fluidHeight: false,
  disableRightClick: false,
  captionPosition: Captions.defaultProps.captionPosition,
  captionOffset: Captions.defaultProps.captionOffset,
  autoShowCaption: null
}, _class2.rendererList = {
  video: HTML5Video,
  youtube: YouTube
}, _class2.Marker = Player.Marker, _class2.Menu = Menu, _class2.Overlay = Player.Overlay, _class2.Playhead = Player.Playhead, _class2.Control = PlayerControls.Control, _temp)) || _class);
export default MediaPlayer;
export { MediaPlayer, PlayerPropTypes };
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { pickProps } from '@instructure/ui-react-utils';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { Menu } from '@instructure/ui-menu';
import MediaContext from '../../Player/MediaContext';
import PlayerButton from '../../PlayerButton';
import PlayerPopover from '../../PlayerPopover'; // CustomControl component consumes all PlayerButton propTypes
// except of videoId which is created automatically

var _PlayerButton$propTyp = PlayerButton.propTypes,
    _ = _PlayerButton$propTyp.videoId,
    PlayerButtonPropTypes = _objectWithoutProperties(_PlayerButton$propTyp, ["videoId"]);
/**
---
private: true
---
@module CustomControl
**/


var CustomControl = /*#__PURE__*/function (_Component) {
  _inherits(CustomControl, _Component);

  var _super = _createSuper(CustomControl);

  function CustomControl() {
    _classCallCheck(this, CustomControl);

    return _super.apply(this, arguments);
  }

  _createClass(CustomControl, [{
    key: "renderButton",
    value: function renderButton(videoId, mountNode) {
      var _this$props = this.props,
          tooltipLabel = _this$props.tooltipLabel,
          label = _this$props.label,
          icon = _this$props.icon;
      var tooltipProps = tooltipLabel ? {
        tooltipLabel: tooltipLabel,
        tooltipMountNode: mountNode
      } : {};
      return /*#__PURE__*/React.createElement(PlayerButton, Object.assign({}, pickProps(this.props, PlayerButton.propTypes), tooltipProps, {
        videoId: videoId
      }), /*#__PURE__*/React.createElement(ScreenReaderContent, null, label), icon);
    }
  }, {
    key: "renderMenu",
    value: function renderMenu(_ref, actions, fullScreenContainerRef) {
      var _this = this;

      var videoId = _ref.videoId,
          showControls = _ref.showControls;
      var _this$props2 = this.props,
          label = _this$props2.label,
          menuItems = _this$props2.menuItems;
      return /*#__PURE__*/React.createElement(PlayerPopover, {
        activateControl: actions.activateControl,
        deactivateControl: actions.deactivateControl,
        showControls: showControls
      }, function (_ref2, togglePopover) {
        var showPopover = _ref2.showPopover;
        return /*#__PURE__*/React.createElement(Menu, {
          placement: "top",
          trigger: _this.renderButton(videoId, fullScreenContainerRef),
          mountNode: fullScreenContainerRef,
          label: label,
          show: showPopover,
          onToggle: togglePopover
        }, menuItems());
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var variant = this.props.variant;
      return /*#__PURE__*/React.createElement(MediaContext.Consumer, null, function (_ref3) {
        var state = _ref3.state,
            fullScreenContainerRef = _ref3.fullScreenContainerRef,
            actions = _ref3.actions;
        return variant === 'menu' ? _this2.renderMenu(state, actions, fullScreenContainerRef) : /*#__PURE__*/React.createElement("span", null, _this2.renderButton(state.videoId, fullScreenContainerRef));
      });
    }
  }]);

  CustomControl.displayName = "CustomControl";
  return CustomControl;
}(Component);

CustomControl.displayName = 'CustomControl';
CustomControl.propTypes = _objectSpread({
  variant: PropTypes.oneOf(['button', 'menu']),
  label: PropTypes.string.isRequired,
  icon: PropTypes.node.isRequired,
  menuItems: PropTypes.func
}, PlayerButtonPropTypes);
CustomControl.defaultProps = {
  variant: 'button',
  menuItems: function menuItems() {
    return null;
  }
};
export { CustomControl as default };
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { pickProps } from '@instructure/ui-react-utils';
import { IconFullScreenSolid, IconExitFullScreenSolid } from '@instructure/ui-icons';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import PlayerButton from '../../PlayerButton';
import MediaContext from '../../Player/MediaContext';
import { WINDOWED_SCREEN, FULL_SCREEN } from '../../../constants';
import { translate } from '../../../constants/translated/translations';
/**
---
private: true
---
**/

var FullScreenButton = /*#__PURE__*/function (_Component) {
  _inherits(FullScreenButton, _Component);

  var _super = _createSuper(FullScreenButton);

  function FullScreenButton() {
    _classCallCheck(this, FullScreenButton);

    return _super.apply(this, arguments);
  }

  _createClass(FullScreenButton, [{
    key: "config",
    value: function config(variant) {
      var _VARIANTS;

      var VARIANTS = (_VARIANTS = {}, _defineProperty(_VARIANTS, WINDOWED_SCREEN, {
        label: translate('FULL_SCREEN'),
        Icon: IconFullScreenSolid
      }), _defineProperty(_VARIANTS, FULL_SCREEN, {
        label: translate('WINDOWED_SCREEN'),
        Icon: IconExitFullScreenSolid
      }), _VARIANTS);
      return VARIANTS[variant];
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      return /*#__PURE__*/React.createElement(MediaContext.Consumer, null, function (_ref) {
        var state = _ref.state,
            actions = _ref.actions,
            fullScreenContainerRef = _ref.fullScreenContainerRef;

        var _this$config = _this.config(state.screenState),
            label = _this$config.label,
            Icon = _this$config.Icon;

        return /*#__PURE__*/React.createElement(PlayerButton, Object.assign({}, pickProps(_this.props, PlayerButton.propTypes), {
          tooltipLabel: label,
          tooltipMountNode: fullScreenContainerRef,
          videoId: state.videoId,
          onClick: actions.toggleFullScreen
        }), /*#__PURE__*/React.createElement(ScreenReaderContent, null, label), /*#__PURE__*/React.createElement(Icon, {
          size: "x-small"
        }));
      });
    }
  }]);

  FullScreenButton.displayName = "FullScreenButton";
  return FullScreenButton;
}(Component);

FullScreenButton.propTypes = {
  forwardRef: PropTypes.func
};
FullScreenButton.defaultProps = {
  forwardRef: function forwardRef(ref) {}
};
export default FullScreenButton;
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import themeable from '@instructure/ui-themeable';
import PlayerMarker from '../../PlayerMarker';
import { translate } from '../../../constants/translated/translations';
var styles = {
  componentId: 'tmzXf',
  template: function template(theme) {
    return "\n\n.tmzXf_crZr{align-items:center;background-color:".concat(theme.backgroundColor || 'inherit', ";border:").concat(theme.border || 'inherit', ";display:flex;flex:100%;position:relative}\n\n.tmzXf_crZr:focus .tmzXf_bajH{border:0.0625rem solid transparent;bottom:0;box-shadow:inset 0 0 0 0.125rem ").concat(theme.focusOutlineColor || 'inherit', ";left:0;pointer-events:none;position:absolute;right:0;top:0}\n\n.tmzXf_crZr:focus{outline:none}\n\n.tmzXf_fDVa,.tmzXf_fWyE,.tmzXf_fuBh{height:100%}\n\n.tmzXf_fDVa{background-color:").concat(theme.bufferedBackgroundColor || 'inherit', "}\n\n.tmzXf_fuBh{background-color:").concat(theme.progressBackgroundColor || 'inherit', ";border-right:").concat(theme.progressSeparatorBorder || 'inherit', "}\n\n.tmzXf_fWyE{background-color:").concat(theme.restBackgroundColor || 'inherit', ";flex:1}\n\n.tmzXf_gaKF{align-items:center;bottom:0;color:").concat(theme.timestampColor || 'inherit', ";display:flex;font-size:").concat(theme.timestampFontSize || 'inherit', ";font-weight:").concat(theme.timestampFontWeight || 'inherit', ";justify-content:space-between;left:0;padding:").concat(theme.timestampPadding || 'inherit', ";position:absolute;right:0;top:0}\n\n.tmzXf_gaKF time{background-color:").concat(theme.timestampBackgroundColor || 'inherit', ";border-radius:").concat(theme.timestampBorderRadius || 'inherit', ";padding:0.125rem}\n\n.tmzXf_eHzx{align-items:center;background-color:").concat(theme.tooltipBackgroundColor || 'inherit', ";bottom:0;display:flex;flex-direction:column;pointer-events:none;position:absolute;top:0;width:").concat(theme.tooltipLineWidth || 'inherit', "}\n\n.tmzXf_eHzx:focus{outline:none}\n\n.tmzXf_duqv{visibility:hidden}\n\n.tmzXf_chlC{align-items:center;display:flex;flex-direction:column;margin-top:").concat(theme.tooltipTop || 'inherit', "}\n\n.tmzXf_dkLi{background-color:").concat(theme.tooltipBackgroundColor || 'inherit', ";color:").concat(theme.tooltipColor || 'inherit', ";font-size:").concat(theme.tooltipFontSize || 'inherit', ";font-weight:").concat(theme.tooltipFontWeight || 'inherit', ";padding:").concat(theme.tooltipPadding || 'inherit', "}\n\n.tmzXf_eWjx{border-left:").concat(theme.tooltipCaretSize || 'inherit', " solid transparent;border-right:").concat(theme.tooltipCaretSize || 'inherit', " solid transparent;border-top:").concat(theme.tooltipCaretSize || 'inherit', " solid ").concat(theme.tooltipBackgroundColor || 'inherit', ";height:0;width:0}\n\n.tmzXf_fWhq{background-color:").concat(theme.tooltipBackgroundColor || 'inherit', ";height:").concat(theme.tooltipLineHeight || 'inherit', ";width:").concat(theme.tooltipLineWidth || 'inherit', "}\n\n.tmzXf_bdpp{position:absolute;top:0}");
  },
  'container': 'tmzXf_crZr',
  'focusIndicator': 'tmzXf_bajH',
  'buffered': 'tmzXf_fDVa',
  'rest': 'tmzXf_fWyE',
  'viewed': 'tmzXf_fuBh',
  'timebarContent': 'tmzXf_gaKF',
  'tooltipContainer': 'tmzXf_eHzx',
  'hidden': 'tmzXf_duqv',
  'tooltipContent': 'tmzXf_chlC',
  'tooltip': 'tmzXf_dkLi',
  'tooltipCaret': 'tmzXf_eWjx',
  'tooltipLine': 'tmzXf_fWhq',
  'playhead': 'tmzXf_bdpp'
};
import theme from './theme';

function formatTime(time) {
  if (time && typeof time === 'number' && time < Infinity) {
    var hours = Math.floor(time / 3600);
    var minutes = Math.floor(time / 60) % 60;
    var seconds = Math.floor(time % 60);

    if (minutes < 10 && hours > 0) {
      minutes = "0".concat(minutes);
    }

    if (seconds < 10) {
      seconds = "0".concat(seconds);
    }

    return hours > 0 ? "".concat(hours, ":").concat(minutes, ":").concat(seconds) : "".concat(minutes, ":").concat(seconds);
  }

  return '0:00';
}
/**
---
private: true
---
**/


var Timebar = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Timebar, _Component);

  var _super = _createSuper(Timebar);

  function Timebar() {
    var _this;

    _classCallCheck(this, Timebar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      timebarHoverTime: null,
      timebarTooltipPosition: null
    };

    _this.handleTimebarScrub = function (e) {
      var relativeCoordinate = e.pageX - e.currentTarget.getBoundingClientRect().left;
      var position = relativeCoordinate / e.currentTarget.offsetWidth;
      var timestamp = position * _this.props.duration;

      if (timestamp < 0 || timestamp > _this.props.duration) {
        // Since the tooltip is techincally inside of the container, we have to
        // manually dismiss the tooltip if the user moves the pointer outside of
        // the container.
        _this.handleTimebarLeave();
      } else {
        var tooltipCenterOffset = _this.tooltip.offsetWidth / 2;

        _this.setState({
          hoverTime: timestamp,
          tooltipPosition: Math.min(relativeCoordinate, e.currentTarget.offsetWidth) - tooltipCenterOffset
        });
      }
    };

    _this.handleTimebarLeave = function () {
      _this.setState({
        hoverTime: null,
        tooltipPosition: null
      });
    };

    _this.handleTimebarClick = function () {
      if (_this.state.hoverTime) {
        _this.props.onClick(_this.state.hoverTime);
      }

      _this.timebar.focus();
    };

    _this.setTimebarRef = function (el) {
      _this.timebar = el;

      _this.props.forwardRef(el);
    };

    return _this;
  }

  _createClass(Timebar, [{
    key: "render",
    value: function render() {
      var _tooltipClasses,
          _this2 = this;

      var _this$props = this.props,
          duration = _this$props.duration,
          buffered = _this$props.buffered,
          currentTime = _this$props.currentTime,
          mediaState = _this$props.mediaState,
          seeking = _this$props.seeking,
          videoId = _this$props.videoId;
      var viewedPercent = currentTime / duration * 100 || 0;
      var bufferedPercent = buffered / duration * 100 - viewedPercent || 0;
      var currentTimeText = formatTime(currentTime);
      var timebarProps = {
        className: styles.container,
        onMouseMove: this.handleTimebarScrub,
        onMouseLeave: this.handleTimebarLeave,
        onClick: this.handleTimebarClick,
        ref: this.setTimebarRef,
        tabIndex: '0',
        role: 'slider',
        'aria-label': translate('ARIA_TIMEBAR_LABEL'),
        'aria-valuemin': 0,
        'aria-valuemax': duration,
        'aria-valuenow': currentTime,
        'aria-valuetext': currentTimeText,
        'aria-controls': videoId
      };
      var tooltipClasses = (_tooltipClasses = {}, _defineProperty(_tooltipClasses, styles.tooltipContainer, true), _defineProperty(_tooltipClasses, styles.hidden, !this.state.hoverTime), _tooltipClasses);
      var markers = this.props.markers.map(function (item) {
        return /*#__PURE__*/React.cloneElement(item, {
          currentTime: currentTime,
          duration: duration,
          mediaState: mediaState,
          seeking: seeking
        });
      });
      return /*#__PURE__*/React.createElement("div", timebarProps, /*#__PURE__*/React.createElement("div", {
        className: styles.timebarContent
      }, /*#__PURE__*/React.createElement("time", null, currentTimeText), /*#__PURE__*/React.createElement("time", null, formatTime(duration))), /*#__PURE__*/React.createElement("div", {
        className: styles.viewed,
        style: {
          flexBasis: "".concat(viewedPercent, "%")
        }
      }), /*#__PURE__*/React.createElement("div", {
        className: styles.buffered,
        style: {
          flexBasis: "".concat(bufferedPercent, "%")
        }
      }), /*#__PURE__*/React.createElement("div", {
        className: styles.rest
      }), /*#__PURE__*/React.createElement("div", {
        className: classnames(tooltipClasses),
        style: {
          left: "".concat(this.state.tooltipPosition, "px")
        },
        ref: function ref(e) {
          _this2.tooltip = e;
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: styles.tooltipContent
      }, /*#__PURE__*/React.createElement("div", {
        className: styles.tooltip
      }, formatTime(this.state.hoverTime)), /*#__PURE__*/React.createElement("div", {
        className: styles.tooltipCaret
      }))), /*#__PURE__*/React.createElement("div", {
        className: styles.focusIndicator
      }), /*#__PURE__*/React.createElement("div", {
        className: styles.playhead,
        style: {
          left: "".concat(viewedPercent, "%")
        }
      }, this.props.playhead), markers);
    }
  }]);

  Timebar.displayName = "Timebar";
  return Timebar;
}(Component), _class2.propTypes = {
  /**
   * Id of the video element. Used to ensure
   * correct aria properties are applied.
   */
  videoId: PropTypes.string.isRequired,

  /**
   * Number of seconds that have been buffered.
   */
  buffered: PropTypes.number,

  /**
   * The current playback time in seconds.
   */
  currentTime: PropTypes.number,

  /**
   * The length of the video in seconds.
   */
  duration: PropTypes.number,

  /**
   * Function invoked when timebar is clicked.
   * Invoked with time (in seconds) at the coordinates clicked.
   */
  onClick: PropTypes.func,
  forwardRef: PropTypes.func,
  markers: ChildrenPropTypes.oneOf([PlayerMarker]),
  mediaState: PropTypes.string,
  seeking: PropTypes.bool,
  playhead: PropTypes.node
}, _class2.defaultProps = {
  markers: [],
  playhead: null,
  duration: 0,
  buffered: 0,
  currentTime: 0,
  mediaState: null,
  seeking: false,
  onClick: function onClick(time) {},
  forwardRef: function forwardRef(ref) {}
}, _temp)) || _class);
export default Timebar;
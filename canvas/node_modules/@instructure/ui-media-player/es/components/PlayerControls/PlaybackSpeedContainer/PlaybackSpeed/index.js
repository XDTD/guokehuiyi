import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { pickProps } from '@instructure/ui-react-utils';
import { Menu, MenuItemGroup, MenuItem } from '@instructure/ui-menu';
import { Text } from '@instructure/ui-text';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import PlayerButton from '../../../PlayerButton';
import { translate } from '../../../../constants/translated/translations';
/**
---
private: true
---
**/

var PlaybackSpeed = /*#__PURE__*/function (_Component) {
  _inherits(PlaybackSpeed, _Component);

  var _super = _createSuper(PlaybackSpeed);

  function PlaybackSpeed() {
    var _this;

    _classCallCheck(this, PlaybackSpeed);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.getPlaybackSpeedText = function (playbackSpeed) {
      return "".concat(playbackSpeed, "x");
    };

    _this.renderPlaybackSpeedOptionLabels = function (playbackSpeedOptions) {
      return playbackSpeedOptions.map(function (playbackSpeed) {
        return /*#__PURE__*/React.createElement(MenuItem, {
          key: playbackSpeed.toString(),
          value: playbackSpeed,
          onKeyDown: _this.props.handleKeyDown
        }, _this.getPlaybackSpeedText(playbackSpeed));
      });
    };

    return _this;
  }

  _createClass(PlaybackSpeed, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          showPopover = _this$props.showPopover,
          togglePopover = _this$props.togglePopover,
          videoId = _this$props.videoId,
          playbackSpeed = _this$props.playbackSpeed,
          mountNode = _this$props.mountNode,
          handleOnSelect = _this$props.handleOnSelect,
          handleOnMouseMove = _this$props.handleOnMouseMove,
          playbackSpeedOptions = _this$props.playbackSpeedOptions;
      var label = translate('PLAYBACK_SPEED');
      var playbackSpeedText = this.getPlaybackSpeedText(playbackSpeed);
      var screenReaderContent = /*#__PURE__*/React.createElement(ScreenReaderContent, null, label, " ", playbackSpeedText);

      if (!playbackSpeedOptions || !playbackSpeedOptions.length) {
        return null;
      }

      return /*#__PURE__*/React.createElement(Menu, {
        placement: "top",
        show: showPopover,
        onToggle: togglePopover,
        trigger: /*#__PURE__*/React.createElement(PlayerButton, Object.assign({}, pickProps(this.props, PlayerButton.propTypes), {
          tooltipLabel: label,
          tooltipMountNode: mountNode,
          videoId: videoId
        }), screenReaderContent, /*#__PURE__*/React.createElement(Text, {
          size: playbackSpeedText.length >= 5 ? 'x-small' : 'medium'
        }, playbackSpeedText)),
        mountNode: mountNode(),
        label: label
      }, /*#__PURE__*/React.createElement(MenuItemGroup, {
        onMouseMove: handleOnMouseMove,
        label: screenReaderContent,
        selected: [playbackSpeed],
        onSelect: handleOnSelect
      }, this.renderPlaybackSpeedOptionLabels(playbackSpeedOptions)));
    }
  }]);

  PlaybackSpeed.displayName = "PlaybackSpeed";
  return PlaybackSpeed;
}(Component);

PlaybackSpeed.propTypes = {
  showPopover: PropTypes.bool.isRequired,
  togglePopover: PropTypes.func.isRequired,
  videoId: PropTypes.string.isRequired,
  mountNode: PropTypes.func.isRequired,
  playbackSpeed: PropTypes.number.isRequired,
  playbackSpeedOptions: PropTypes.arrayOf(PropTypes.number).isRequired,
  handleKeyDown: PropTypes.func.isRequired,
  handleOnSelect: PropTypes.func.isRequired,
  handleOnMouseMove: PropTypes.func.isRequired,
  forwardRef: PropTypes.func
};
PlaybackSpeed.defaultProps = {
  forwardRef: function forwardRef(ref) {}
};
export default PlaybackSpeed;
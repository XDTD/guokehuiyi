import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import themeable from '@instructure/ui-themeable';
import PlayPauseButton from './PlayPauseButton';
import Timebar from './Timebar';
import Volume from './VolumeContainer';
import PlaybackSpeed from './PlaybackSpeedContainer';
import TrackChooser from './TrackChooserContainer';
import SourceChooser from './SourceChooserContainer';
import FullScreenButton from './FullScreenButton';
import CustomControl from './CustomControl';
import MediaContext from '../Player/MediaContext';
import theme from './theme';
var styles = {
  componentId: 'dVRGv',
  template: function template(theme) {
    return "\n\n.dVRGv_crZr{-webkit-tap-highlight-color:\"rgba(0, 0, 0, 0)\";-webkit-tap-highlight-color:transparent;bottom:".concat(theme.controlsMargin || 'inherit', ";cursor:pointer;display:flex;height:2.375rem;left:").concat(theme.controlsMargin || 'inherit', ";opacity:1;position:absolute;right:").concat(theme.controlsMargin || 'inherit', ";transition:height 0.25s ease-in-out,opacity 0.25s linear}\n\n.dVRGv_duqv{height:0;opacity:0}");
  },
  'container': 'dVRGv_crZr',
  'hidden': 'dVRGv_duqv'
};
/**
---
parent: Player
---
**/

var PlayerControls = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(PlayerControls, _Component);

  var _super = _createSuper(PlayerControls);

  function PlayerControls() {
    var _this;

    _classCallCheck(this, PlayerControls);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleOnClick = function (showControls) {
      return function (e) {
        e.stopPropagation();
        showControls();
      };
    };

    return _this;
  }

  _createClass(PlayerControls, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement(MediaContext.Consumer, null, function (_ref) {
        var _classes;

        var state = _ref.state,
            actions = _ref.actions;
        var showControls = state.showControls;
        var classes = (_classes = {}, _defineProperty(_classes, styles.container, true), _defineProperty(_classes, styles.hidden, !showControls), _classes);
        /* eslint-disable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */

        /* eslint-disable jsx-a11y/no-static-element-interactions, jsx-a11y/mouse-events-have-key-events */

        return /*#__PURE__*/React.createElement("div", {
          className: classnames(classes),
          onClick: _this2.handleOnClick(actions.showControls),
          onMouseOver: function onMouseOver() {
            actions.setControlHovered(true);
          },
          onMouseOut: function onMouseOut() {
            actions.setControlHovered(false);
          }
        }, _this2.props.children);
        /* eslint-enable jsx-a11y/no-static-element-interactions, jsx-a11y/mouse-events-have-key-events */

        /* eslint-enable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */
      });
    }
  }]);

  PlayerControls.displayName = "PlayerControls";
  return PlayerControls;
}(Component), _class2.displayName = 'PlayerControls', _class2.propTypes = {
  /**
   * Children of the <PlayerControls />
   */
  children: PropTypes.node
}, _class2.defaultProps = {
  showControls: false
}, _class2.PlayPauseButton = PlayPauseButton, _class2.Timebar = function (props) {
  return /*#__PURE__*/React.createElement(MediaContext.Consumer, null, function (_ref2) {
    var state = _ref2.state,
        actions = _ref2.actions;
    return /*#__PURE__*/React.createElement(Timebar, Object.assign({
      seeking: state.seeking,
      duration: state.duration,
      currentTime: state.currentTime,
      mediaState: state.mediaState,
      buffered: state.buffered,
      videoId: state.videoId,
      onClick: actions.seek
    }, props));
  });
}, _class2.Volume = Volume, _class2.TrackChooser = TrackChooser, _class2.PlaybackSpeed = PlaybackSpeed, _class2.SourceChooser = SourceChooser, _class2.FullScreenButton = FullScreenButton, _class2.Control = CustomControl, _temp)) || _class);
export default PlayerControls;
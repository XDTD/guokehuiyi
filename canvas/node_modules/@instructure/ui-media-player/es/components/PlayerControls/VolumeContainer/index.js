import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PlayerPopover from '../../PlayerPopover';
import Volume from './Volume';
import MediaContext from '../../Player/MediaContext';
/**
---
private: true
---
@module VolumeContainer
**/

var VolumeContainer = /*#__PURE__*/function (_Component) {
  _inherits(VolumeContainer, _Component);

  var _super = _createSuper(VolumeContainer);

  function VolumeContainer() {
    var _this;

    _classCallCheck(this, VolumeContainer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleOnChange = function (volume, _ref) {
      var setVolume = _ref.setVolume;
      setVolume(parseFloat(volume));
    };

    _this.calculateVolume = function (volume) {
      var adjustVolume = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      return Math.round(volume * 100 + adjustVolume * 100) / 100;
    };

    _this.handleKeyPress = function (e, _ref2, _ref3, _ref4) {
      var volume = _ref2.volume;
      var setVolume = _ref3.setVolume,
          toggleMute = _ref3.toggleMute,
          showControls = _ref3.showControls;
      var SEEK_VOLUME_INTERVAL = _ref4.SEEK_VOLUME_INTERVAL,
          JUMP_VOLUME_INTERVAL = _ref4.JUMP_VOLUME_INTERVAL;
      var keyHandlers = {
        ArrowLeft: function ArrowLeft() {
          setVolume(_this.calculateVolume(volume, -SEEK_VOLUME_INTERVAL));
        },
        ArrowRight: function ArrowRight() {
          setVolume(_this.calculateVolume(volume, SEEK_VOLUME_INTERVAL));
        },
        ArrowUp: function ArrowUp() {
          setVolume(_this.calculateVolume(volume, SEEK_VOLUME_INTERVAL));
        },
        ArrowDown: function ArrowDown() {
          setVolume(_this.calculateVolume(volume, -SEEK_VOLUME_INTERVAL));
        },
        PageUp: function PageUp() {
          setVolume(_this.calculateVolume(volume, JUMP_VOLUME_INTERVAL));
        },
        PageDown: function PageDown() {
          setVolume(_this.calculateVolume(volume, -JUMP_VOLUME_INTERVAL));
        },
        Home: function Home() {
          setVolume(0);
        },
        End: function End() {
          setVolume(1);
        },
        ' ': function _() {
          toggleMute();
        },
        Enter: function Enter() {
          toggleMute();
        },
        m: function m() {
          toggleMute();
        },
        M: function M() {
          toggleMute();
        }
      };

      if (e.key in keyHandlers) {
        e.preventDefault();
        e.stopPropagation();
        showControls();
        keyHandlers[e.key]();
      }
    };

    return _this;
  }

  _createClass(VolumeContainer, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement(MediaContext.Consumer, null, function (_ref5) {
        var state = _ref5.state,
            fullScreenContainerRef = _ref5.fullScreenContainerRef,
            actions = _ref5.actions,
            constants = _ref5.constants;
        return /*#__PURE__*/React.createElement(PlayerPopover, {
          activateControl: function activateControl() {
            actions.activateControl('VolumeContainer');
          },
          deactivateControl: function deactivateControl() {
            actions.deactivateControl('VolumeContainer');
          },
          showControls: state.showControls
        }, function (_ref6, togglePopover) {
          var showPopover = _ref6.showPopover;
          return /*#__PURE__*/React.createElement(Volume, Object.assign({
            muted: state.muted,
            volume: state.volume,
            showPopover: showPopover,
            togglePopover: togglePopover,
            videoId: state.videoId,
            step: constants.SEEK_VOLUME_INTERVAL,
            onChange: function onChange(volume) {
              _this2.handleOnChange(volume, actions);
            },
            onKeyDown: function onKeyDown(e) {
              _this2.handleKeyPress(e, state, actions, constants);
            },
            mountNode: fullScreenContainerRef,
            showControls: state.showControls,
            handleShowControls: actions.showControls
          }, _this2.props));
        });
      });
    }
  }]);

  VolumeContainer.displayName = "VolumeContainer";
  return VolumeContainer;
}(Component);

export { VolumeContainer as default };
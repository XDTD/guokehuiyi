import * as React from 'react';

export type RadioInputValue = string | number;

export type RadioInputVariant = "simple" | "toggle";

export type RadioInputSize = "small" | "medium" | "large";

export type RadioInputContext = "success" | "warning" | "danger" | "off";

export interface RadioInputProps {
    label: React.ReactNode;
    value?: RadioInputValue;
    id?: string;
    name?: string;
    checked?: boolean;
    /**
     * Whether or not to disable the input
     */
    disabled?: boolean;
    /**
     * Works just like disabled but keeps the same styles as if it were active
     */
    readOnly?: boolean;
    variant?: RadioInputVariant;
    size?: RadioInputSize;
    context?: RadioInputContext;
    inline?: boolean;
    onClick?: (...args: any[])=>any;
    onChange?: (...args: any[])=>any;
}

export class RadioInput extends React.Component<RadioInputProps, any> {
    render(): JSX.Element;

}




export type RadioInputGroupDefaultValue = string | number;

export type RadioInputGroupVariant = "simple" | "toggle";

export type RadioInputGroupSize = "small" | "medium" | "large";

export type RadioInputGroupLayout = "stacked" | "columns" | "inline";

export interface RadioInputGroupProps {
    name: string;
    description: React.ReactNode;
    /**
     * value to set on initial render
     */
    defaultValue?: RadioInputGroupDefaultValue;
    /**
     * the selected value (must be accompanied by an `onChange` prop)
     */
    value?: any;
    /**
     * when used with the `value` prop, the component will not control its own state
     */
    onChange?: (...args: any[])=>any;
    disabled?: boolean;
    /**
     * works just like disabled but keeps the same styles as if it were active
     */
    readOnly?: boolean;
    /**
     * object with shape: `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
    /**
     * any children (ones that aren't `RadioInput` are passed through)
     */
    children?: React.ReactNode;
    variant?: RadioInputGroupVariant;
    size?: RadioInputGroupSize;
    layout?: RadioInputGroupLayout;
}

export class RadioInputGroup extends React.Component<RadioInputGroupProps, any> {
    render(): JSX.Element;

}


import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { error as _error } from "@instructure/console";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import keycode from 'keycode';
import { contains, addEventListener, getFrameDocumentSafe, ownerDocument, findTabbable } from '@instructure/ui-dom-utils';
import { uid } from '@instructure/uid';
import { ScreenReaderFocusRegion } from "./ScreenReaderFocusRegion.js";
import { KeyboardFocusRegion } from "./KeyboardFocusRegion.js";

var FocusRegion = /*#__PURE__*/function () {
  function FocusRegion(element, options) {
    var _this = this;

    _classCallCheck(this, FocusRegion);

    this._contextElement = null;
    this._preventCloseOnDocumentClick = false;
    this._listeners = [];
    this._active = false;

    this.handleDismiss = function (event, documentClick) {
      _this._options.onDismiss(event, documentClick);
    };

    this.captureDocumentClick = function (event) {
      var target = event.target;
      _this._preventCloseOnDocumentClick = event.button !== 0 || contains(_this._contextElement, target);
    };

    this.handleDocumentClick = function (event) {
      if (_this._options.shouldCloseOnDocumentClick && !_this._preventCloseOnDocumentClick) {
        _this.handleDismiss(event, true);
      }
    };

    this.handleFrameClick = function (event, frame) {
      if (!contains(_this._contextElement, frame)) {
        // dismiss if frame is not within the region
        _this.handleDismiss(event, true);
      }
    };

    this.handleKeyUp = function (event) {
      if (_this._options.shouldCloseOnEscape && event.keyCode === keycode.codes.escape && !event.defaultPrevented) {
        _this.handleDismiss(event);
      }
    };

    this._options = options || {
      shouldCloseOnDocumentClick: true,
      shouldCloseOnEscape: true,
      onDismiss: function onDismiss(event) {}
    };
    this._contextElement = element;
    this._screenReaderFocusRegion = new ScreenReaderFocusRegion(element, options);
    this._keyboardFocusRegion = new KeyboardFocusRegion(element, options);
    this._id = uid();
  }

  _createClass(FocusRegion, [{
    key: "updateElement",
    value: function updateElement(element) {
      this._contextElement = element;

      if (this._keyboardFocusRegion) {
        this._keyboardFocusRegion.updateElement(element);
      }

      if (this._screenReaderFocusRegion) {
        this._screenReaderFocusRegion.updateElement(element);
      }
    }
  }, {
    key: "activate",
    value: function activate() {
      var _this2 = this;

      if (!this._active) {
        var doc = ownerDocument(this._contextElement);

        this._keyboardFocusRegion.activate();

        this._screenReaderFocusRegion.activate();

        if (this._options.shouldCloseOnDocumentClick) {
          this._listeners.push(addEventListener(doc, 'click', this.captureDocumentClick, true));

          this._listeners.push(addEventListener(doc, 'click', this.handleDocumentClick));

          Array.from(doc.getElementsByTagName('iframe')).forEach(function (el) {
            // listen for mouseup events on any iframes in the document
            var frameDoc = getFrameDocumentSafe(el);

            if (frameDoc) {
              _this2._listeners.push(addEventListener(frameDoc, 'mouseup', function (event) {
                _this2.handleFrameClick(event, el);
              }));
            }
          });
        }

        if (this._options.shouldCloseOnEscape) {
          this._listeners.push(addEventListener(doc, 'keyup', this.handleKeyUp));
        }

        this._active = true;
      }
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
          _ref$keyboard = _ref.keyboard,
          keyboard = _ref$keyboard === void 0 ? true : _ref$keyboard;

      if (this._active) {
        this._listeners.forEach(function (listener) {
          listener.remove();
        });

        this._listeners = [];

        if (keyboard) {
          this._keyboardFocusRegion.deactivate();
        }

        this._screenReaderFocusRegion.deactivate();

        this._active = false;
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      /*#__PURE__*/

      /*#__PURE__*/
      _error(this._active, "[FocusRegion] Cannot call '.focus()' on a region that is not currently active.");

      this._keyboardFocusRegion.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      /*#__PURE__*/

      /*#__PURE__*/
      _error(!this._active, "[FocusRegion] Cannot call '.blur()' on a region that is currently active.");

      this._keyboardFocusRegion.blur();
    }
  }, {
    key: "id",
    get: function get() {
      return this._id;
    } // Focused returns when the focus region is active. Checking focused with the active element
    // is inconsistent across browsers (Safari/Firefox do not focus elements on click)

  }, {
    key: "focused",
    get: function get() {
      return this._active;
    }
  }, {
    key: "keyboardFocusable",
    get: function get() {
      return (findTabbable(this._contextElement) || []).length > 0;
    }
  }]);

  return FocusRegion;
}();

export default FocusRegion;
export {
/**
 * ---
 * category: utilities/a11y
 * ---
 * @module FocusRegion
 * Class for focus operations.
 * - Scoping focus within a given context (DOM node),
 * - Mark active element for focus later
 * - Return focus to the marked element
 */
FocusRegion };
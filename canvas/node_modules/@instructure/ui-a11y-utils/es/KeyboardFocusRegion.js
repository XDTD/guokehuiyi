import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { error as _error } from "@instructure/console";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { findDOMNode, findTabbable, findFocusable, ownerWindow, getActiveElement, addEventListener, ownerDocument, containsActiveElement, requestAnimationFrame } from '@instructure/ui-dom-utils';
import keycode from 'keycode';
import { scopeTab } from "./scopeTab.js";

var KeyboardFocusRegion = /*#__PURE__*/function () {
  function KeyboardFocusRegion(element, options) {
    var _this = this;

    _classCallCheck(this, KeyboardFocusRegion);

    this._contextElement = null;
    this._focusLaterElement = null;
    this._needToFocus = false;
    this._listeners = [];
    this._raf = [];
    this._active = false;

    this.handleDismiss = function (event) {
      _this._options.onDismiss(event);
    };

    this.handleKeyDown = function (event) {
      if (event.keyCode === keycode.codes.tab) {
        scopeTab(_this._contextElement, event);
      }
    };

    this.handleClick = function (event) {
      _this._wasDocumentClick = true;
    };

    this.handleWindowBlur = function (event) {
      if (_this._wasDocumentClick) {
        _this._wasDocumentClick = false;
        return;
      }

      _this._needToFocus = true;
    };

    this.handleFocus = function (event) {
      if (_this._needToFocus) {
        _this._needToFocus = false;

        if (!_this._contextElement) {
          return;
        } // need to see how jQuery shims document.on('focusin') so we don't need the
        // setTimeout, firefox doesn't support focusin, if it did, we could focus
        // the element outside of a setTimeout. Side-effect of this implementation
        // is that the document.body gets focus, and then we focus our element right
        // after, seems fine.


        _this._raf.push(requestAnimationFrame(function () {
          if (containsActiveElement(_this._contextElement)) {
            return;
          }

          _this.focusDefaultElement();
        }));
      }
    };

    this.handleFirstTabbableKeyDown = function (event) {
      if (event.keyCode === keycode.codes.tab && event.shiftKey) {
        _this._options.onBlur(event);
      }
    };

    this.handleLastTabbableKeyDown = function (event) {
      if (event.keyCode === keycode.codes.tab && !event.shiftKey) {
        _this._options.onBlur(event);
      }
    };

    this._contextElement = findDOMNode(element);
    this._options = options || {
      shouldContainFocus: true,
      shouldReturnFocus: true,
      onBlur: function onBlur(event) {},
      onDismiss: function onDismiss(event) {},
      defaultFocusElement: null
    };

    if (this._options.shouldReturnFocus) {
      this._focusLaterElement = this.activeElement;
    }
  }

  _createClass(KeyboardFocusRegion, [{
    key: "updateElement",
    value: function updateElement(element) {
      this._contextElement = findDOMNode(element);
    }
  }, {
    key: "focusDefaultElement",
    value: function focusDefaultElement() {
      var defaultFocusElement = this.defaultFocusElement,
          shouldContainFocus = this.shouldContainFocus;

      if (defaultFocusElement) {
        defaultFocusElement.focus();
      } else {
        if (shouldContainFocus) {
          // Blur the active element to place focus on the document body
          this.activeElement.blur();

          /*#__PURE__*/

          /*#__PURE__*/
          _error(true, "\n          [KeyboardFocusRegion] No `defaultFocusElement` was provided and `shouldContainFocus`\n          was set to `true`. Focus has been moved to the document body instead.\n          ");
        }
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      var _this2 = this;

      if (this.focused) {
        return;
      }

      this._raf.push(requestAnimationFrame(function () {
        _this2.focusDefaultElement();
      }));
    }
  }, {
    key: "blur",
    value: function blur() {
      if (this._options.shouldReturnFocus && this._focusLaterElement) {
        try {
          this._focusLaterElement.focus();
        } catch (e) {
          /*#__PURE__*/

          /*#__PURE__*/
          _error(false, "\n          [KeyboardFocusRegion] You tried to return focus to ".concat(this._focusLaterElement, "\n          but it is not in the DOM anymore: ").concat(e, "\n          "));
        }

        this._focusLaterElement = null;
      }
    }
  }, {
    key: "activate",
    value: function activate() {
      var defaultFocusElement = this.defaultFocusElement,
          shouldContainFocus = this.shouldContainFocus;

      if (!this._active) {
        if (defaultFocusElement || shouldContainFocus) {
          if (shouldContainFocus) {
            this._listeners.push(addEventListener(this.doc, 'keydown', this.handleKeyDown));
          } else {
            this._listeners.push(addEventListener(this.firstTabbable || defaultFocusElement, 'keydown', this.handleFirstTabbableKeyDown));

            this._listeners.push(addEventListener(this.lastTabbable || defaultFocusElement, 'keydown', this.handleLastTabbableKeyDown));
          }

          this._listeners.push(addEventListener(this.doc, 'click', this.handleClick, true));

          this._listeners.push(addEventListener(this.win, 'blur', this.handleWindowBlur, false));

          this._listeners.push(addEventListener(this.doc, 'focus', this.handleFocus, true));

          this._active = true;
        }
      }
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      if (this._active) {
        this._listeners.forEach(function (listener) {
          listener.remove();
        });

        this._listeners = [];

        this._raf.forEach(function (request) {
          return request.cancel();
        });

        this._raf = [];
        this._preventCloseOnDocumentClick = false;
        this._active = false;
      }
    }
  }, {
    key: "focused",
    get: function get() {
      return containsActiveElement(this._contextElement);
    }
  }, {
    key: "shouldContainFocus",
    get: function get() {
      var shouldContainFocus = this._options.shouldContainFocus;
      return shouldContainFocus === true || Array.isArray(shouldContainFocus) && shouldContainFocus.includes['keyboard'];
    }
  }, {
    key: "focusable",
    get: function get() {
      return findFocusable(this._contextElement, function () {
        return true;
      }, true) || [];
    }
  }, {
    key: "tabbable",
    get: function get() {
      return findTabbable(this._contextElement) || [];
    }
  }, {
    key: "firstTabbable",
    get: function get() {
      return this.tabbable[0];
    }
  }, {
    key: "lastTabbable",
    get: function get() {
      return this.tabbable.pop();
    }
  }, {
    key: "firstFocusable",
    get: function get() {
      return this.focusable[0];
    }
  }, {
    key: "lastFocusable",
    get: function get() {
      return this.focusable.pop();
    }
  }, {
    key: "doc",
    get: function get() {
      return ownerDocument(this._contextElement);
    }
  }, {
    key: "win",
    get: function get() {
      return ownerWindow(this._contextElement);
    }
  }, {
    key: "activeElement",
    get: function get() {
      return getActiveElement(this.doc);
    }
  }, {
    key: "defaultFocusElement",
    get: function get() {
      var defaultFocusElement = this._options.defaultFocusElement;
      var element = findDOMNode(typeof defaultFocusElement === 'function' ? defaultFocusElement() : defaultFocusElement);

      if (element && this._contextElement && this._contextElement.contains(element)) {
        return element;
      }

      var firstTabbable = this.firstTabbable;

      if (firstTabbable) {
        return firstTabbable;
      }

      if (this.focusable.includes(this._contextElement)) {
        return this._contextElement;
      }

      return null;
    }
  }]);

  return KeyboardFocusRegion;
}();

export default KeyboardFocusRegion;
export {
/**
 * ---
 * category: utilities/a11y
 * ---
 * @module KeyboardFocusRegion
 * Class for focus operations.
 * - Scoping focus within a given context (DOM node),
 * - Mark active element for focus later
 * - Return focus to the marked element
 */
KeyboardFocusRegion };
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import { error as _error } from "@instructure/console";
import { FocusRegion } from "./FocusRegion.js";
var ENTRIES = [];

var FocusRegionManager = function FocusRegionManager() {
  _classCallCheck(this, FocusRegionManager);
};

FocusRegionManager.focusRegion = function (element) {
  var idOrOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var entry;

  if (typeof idOrOptions === 'string') {
    entry = FocusRegionManager.getEntry(element, idOrOptions);
  } else {
    entry = FocusRegionManager.addEntry(element, idOrOptions);
  }

  if (entry && entry.region && typeof entry.region.focus === 'function') {
    entry.region.focus();
    return entry.region;
  } else {
    /*#__PURE__*/

    /*#__PURE__*/
    _error(false, "[FocusRegionManager] Could not focus region with element: ".concat(element));
  }
};

FocusRegionManager.activateRegion = function (element, options) {
  var _FocusRegionManager$a = FocusRegionManager.addEntry(element, options),
      region = _FocusRegionManager$a.region;

  return region;
};

FocusRegionManager.getActiveEntry = function () {
  return ENTRIES.find(function (_ref) {
    var region = _ref.region;
    return region.focused;
  });
};

FocusRegionManager.findEntry = function (element, id) {
  var index;

  if (id) {
    index = ENTRIES.findIndex(function (entry) {
      return entry.id === id;
    });
  } else {
    index = ENTRIES.findIndex(function (entry) {
      return entry.element === element;
    });
  }

  return index;
};

FocusRegionManager.getEntry = function (element, id) {
  return ENTRIES[FocusRegionManager.findEntry(element, id)];
};

FocusRegionManager.addEntry = function (element) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var region = new FocusRegion(element, options);
  var activeEntry = FocusRegionManager.getActiveEntry();
  var keyboardFocusable = region.keyboardFocusable;
  ENTRIES.forEach(function (_ref2) {
    var region = _ref2.region;

    if (region) {
      // If the active region is triggering a new focus region that does not have
      // keyboard focusable content, don't deactivate the active region's keyboard
      // focus region
      region.deactivate(region.focused && !keyboardFocusable && {
        keyboard: false
      });
    }
  });
  region.activate();

  if (options.shouldFocusOnOpen) {
    region.focus();
  }

  var entry = {
    id: region.id,
    element: element,
    region: region,
    children: [],
    parent: activeEntry
  };
  ENTRIES.push(entry);

  if (activeEntry) {
    activeEntry.children.push(entry);
  }

  return entry;
};

FocusRegionManager.removeEntry = function (element, id) {
  var index = FocusRegionManager.findEntry(element, id);
  var entry = ENTRIES[index];

  if (index > -1) {
    ENTRIES.splice(index, 1);
  }

  return entry;
};

FocusRegionManager.isFocused = function (element, id) {
  var entry = FocusRegionManager.getActiveEntry();

  if (id) {
    return entry && entry.region && entry.id === id;
  } else {
    return entry && entry.region && entry.element === element;
  }
};

FocusRegionManager.clearEntries = function () {
  ENTRIES = [];
};

FocusRegionManager.blurRegion = function (element, id) {
  var entry = FocusRegionManager.removeEntry(element, id);

  if (entry) {
    var children = entry.children,
        region = entry.region,
        parent = entry.parent; // deactivate the region...

    region && region.deactivate(); // and any regions created from it

    if (children) {
      children.forEach(function (_ref3) {
        var id = _ref3.id,
            element = _ref3.element;
        var entry = FocusRegionManager.removeEntry(element, id);
        entry && entry.region && entry.region.deactivate();
      });
    } // activate the region's parent if it exists


    parent && parent.region && parent.region.activate();
    region && region.blur(); // this should focus the parent region
  }
};

export default FocusRegionManager;
export {
/**
 * ---
 * category: utilities/a11y
 * ---
 * @module FocusManager
 * Class for focus operations.
 * - Scoping focus within a given context,
 * - Mark active element for focus later
 * - Return focus to the marked element
 */
FocusRegionManager };
import * as React from 'react';

export type TimeSelectRenderLabel = React.ReactNode | ((...args: any[])=>any);

export type TimeSelectStep = 5 | 10 | 15 | 20 | 30 | 60;

export type TimeSelectInteraction = "enabled" | "disabled" | "readonly";

export type TimeSelectRenderEmptyOption = React.ReactNode | ((...args: any[])=>any);

export type TimeSelectRenderBeforeInput = React.ReactNode | ((...args: any[])=>any);

export type TimeSelectRenderAfterInput = React.ReactNode | ((...args: any[])=>any);

export interface TimeSelectProps {
    /**
     * The form field label.
     */
    renderLabel: TimeSelectRenderLabel;
    /**
     * Whether to default to the first option when `defaultValue` hasn't been specified.
     */
    defaultToFirstOption?: boolean;
    /**
     * An ISO 8601 formatted date string representing the current selected value. If defined,
     * the component will act controlled and will not manage its own state.
     */
    value?: any;
    /**
     * An ISO 8601 formatted date string to use if `value` isn't provided.
     */
    defaultValue?: any;
    /**
     * The id of the text input. One is generated if not supplied.
     */
    id?: string;
    /**
     * The format to use when displaying the possible and currently selected options.
     * See [moment.js formats](https://momentjs.com/docs/#/displaying/format/) for the list of available formats.
     */
    format?: string;
    /**
     * The number of minutes to increment by when generating the allowable options.
     */
    step?: TimeSelectStep;
    /**
     * Specifies if interaction with the input is enabled, disabled, or readonly.
     * When "disabled", the input changes visibly to indicate that it cannot
     * receive user interactions. When "readonly" the input still cannot receive
     * user interactions but it keeps the same styles as if it were enabled.
     */
    interaction?: TimeSelectInteraction;
    /**
     * Html placeholder text to display when the input has no value. This should
     * be hint text, not a label replacement.
     */
    placeholder?: string;
    /**
     * Whether or not the text input is required.
     */
    isRequired?: boolean;
    /**
     * Whether the input is rendered inline with other elements or if it
     * is rendered as a block level element.
     */
    isInline?: boolean;
    /**
     * The width of the text input.
     */
    width?: string;
    /**
     * The max width the options list can be before option text wraps. If not
     * set, the list will only display as wide as the text input.
     */
    optionsMaxWidth?: string;
    /**
     * The number of options that should be visible before having to scroll.
     */
    visibleOptionsCount?: number;
    /**
     * Displays messages and validation for the input. It should be an object
     * with the following shape:
     * `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
    /**
     * The placement of the options list.
     */
    placement?: any;
    /**
     * The parent in which to constrain the placement.
     */
    constrain?: any;
    /**
     * Callback fired when a new option is selected.
     * @param {Object} event - the event object
     * @param {Object} data - additional data
     * @param data.value - the value of selected option
     */
    onChange?: (...args: any[])=>any;
    /**
     * Callback fired when text input receives focus.
     */
    onFocus?: (...args: any[])=>any;
    /**
     * Callback fired when text input loses focus.
     */
    onBlur?: (...args: any[])=>any;
    /**
     * Callback fired when the options list is shown.
     */
    onShowOptions?: (...args: any[])=>any;
    /**
     * Callback fired when the options list is hidden.
     */
    onHideOptions?: (...args: any[])=>any;
    /**
     * A ref to the html `input` element.
     */
    inputRef?: (...args: any[])=>any;
    /**
     * A ref to the html `ul` element.
     */
    listRef?: (...args: any[])=>any;
    /**
     * Content to display in the list when no options are available.
     */
    renderEmptyOption?: TimeSelectRenderEmptyOption;
    /**
     * Content to display before the text input. This will commonly be an icon.
     */
    renderBeforeInput?: TimeSelectRenderBeforeInput;
    /**
     * Content to display after the text input. This content will replace the
     * default arrow icons.
     */
    renderAfterInput?: TimeSelectRenderAfterInput;
    /**
     * eslint-disable react/require-default-props
     */
    locale?: string;
    /**
     * A timezone identifier in the format: Area/Location
     * See [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the list
     * of possible options.
     * This property can also be set via a context property and if both are set then the component property takes
     * precedence over the context property.
     * The web browser's timezone will be used if no value is set via a component property or a context
     * property.
     */
    timezone?: string;
    /**
     * __Deprecated - use `renderLabel`__
     */
    label?: React.ReactNode;
}

export class TimeSelect extends React.Component<TimeSelectProps, any> {
    render(): JSX.Element;

}


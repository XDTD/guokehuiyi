import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { Component } from 'react';
import PropTypes from 'prop-types';
import { controllable } from '@instructure/ui-prop-types';
import { uid } from '@instructure/uid';
import { createChainedFunction } from '@instructure/ui-utils';

var toggleExpanded = function toggleExpanded(_ref) {
  var expanded = _ref.expanded;
  return {
    expanded: !expanded
  };
};
/**
---
category: components/utilities
---
*/


var Expandable = /*#__PURE__*/function (_Component) {
  _inherits(Expandable, _Component);

  var _super = _createSuper(Expandable);

  function Expandable(props) {
    var _this;

    _classCallCheck(this, Expandable);

    _this = _super.call(this);

    _this.handleToggle = function (event) {
      if (!_this.isControlled()) {
        _this.setState(toggleExpanded);
      }

      _this.props.onToggle(event, !_this.expanded);
    };

    _this.state = {
      expanded: _this.isControlled(props) ? props.expanded : !!props.defaultExpanded
    };
    _this._contentId = uid('Expandable__content');
    return _this;
  }

  _createClass(Expandable, [{
    key: "isControlled",
    value: function isControlled() {
      var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
      return typeof props.expanded === 'boolean';
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          _this$props$render = _this$props.render,
          render = _this$props$render === void 0 ? children : _this$props$render;

      if (typeof render === 'function') {
        return render({
          expanded: this.expanded,
          getToggleProps: function getToggleProps() {
            var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            return _objectSpread({
              'aria-controls': _this2._contentId,
              'aria-expanded': _this2.expanded,
              onClick: createChainedFunction(_this2.handleToggle, props.onClick)
            }, props);
          },
          getDetailsProps: function getDetailsProps(props) {
            return {
              id: _this2._contentId
            };
          }
        });
      } else {
        return null;
      }
    }
  }, {
    key: "expanded",
    get: function get() {
      return this.isControlled() ? this.props.expanded : this.state.expanded;
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if ( // if component is controlled, keep internal state up to date
      // with the `expanded` prop value
      typeof nextProps.expanded === 'boolean' && nextProps.expanded !== state.expanded) {
        return {
          expanded: nextProps.expanded
        };
      } else {
        return null;
      }
    }
  }]);

  Expandable.displayName = "Expandable";
  return Expandable;
}(Component);

Expandable.propTypes = {
  /**
   * Whether the content is expanded or hidden
   */
  expanded: controllable(PropTypes.bool, 'onToggle', 'defaultExpanded'),

  /**
   * Whether the content is initially expanded or hidden (uncontrolled)
   */
  defaultExpanded: PropTypes.bool,
  onToggle: PropTypes.func,

  /**
   * @param {Object} renderProps
   * @param {Boolean} expanded
   * @param {Function} renderProps.getToggleProps - Props to be spread onto the trigger element
   * @param {Function} renderProps.getDetailsProps - Props to be spread onto the details element
   */
  children: PropTypes.func,

  /**
   * Identical to children
   */
  render: PropTypes.func
};
Expandable.defaultProps = {
  defaultExpanded: false,
  onToggle: function onToggle(event, expanded) {},
  expanded: void 0,
  children: null,
  render: void 0
};
export default Expandable;
export { Expandable };
import * as React from 'react';

export type ImgDisplay = "inline-block" | "block";

export interface ImgOverlay {
    color: string;
    opacity: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
    blend?: "normal" | "multiply" | "screen" | "overlay" | "color-burn";
}

export type ImgConstrain = "cover" | "contain";

export type ImgHeight = string | number;

export type ImgWidth = string | number;

export interface ImgProps {
    src: string;
    alt?: string;
    display?: ImgDisplay;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * Valid values for `opacity` are `0` - `10`. Valid values for `blend` are
     * `normal` (default), `multiply`, `screen`, `overlay`, and `color-burn`.
     */
    overlay?: ImgOverlay;
    withGrayscale?: boolean;
    withBlur?: boolean;
    constrain?: ImgConstrain;
    elementRef?: (...args: any[])=>any;
    height?: ImgHeight;
    width?: ImgWidth;
    /**
     * eslint-disable react/require-default-props
     */
    inline?: boolean;
    /**
     * __Deprecated - use `withGrayscale`__
     */
    grayscale?: boolean;
    /**
     * __Deprecated - use `withBlur`__
     */
    blur?: boolean;
}

export class Img extends React.Component<ImgProps, any> {
    render(): JSX.Element;

}


"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Img = exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames3 = _interopRequireDefault(require("classnames"));

var _View = require("@instructure/ui-view/lib/View");

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _ThemeablePropTypes = require("@instructure/ui-themeable/lib/ThemeablePropTypes.js");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _supportsObjectFit = require("@instructure/ui-dom-utils/lib/supportsObjectFit.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _theme = _interopRequireDefault(require("./theme.js"));

var _dec, _dec2, _dec3, _class, _class2, _temp;

var styles = {
  componentId: 'bzhOW',
  template: function template(theme) {
    return "\n\n.bzhOW_EtBB{bottom:auto;float:none;left:auto;line-height:normal;margin:0;max-height:none;max-width:100%;min-height:0;min-width:0;padding:0;position:static;right:auto;top:auto;transform:none}\n\n[dir=ltr] .bzhOW_EtBB,[dir=rtl] .bzhOW_EtBB{float:none}\n\n.bzhOW_fJwG{display:inline-block;vertical-align:middle}\n\n.bzhOW_cYkL{height:100%;left:0px;position:absolute;top:0px;width:100%}\n\n.bzhOW_fqss{display:block}\n\n.bzhOW_dIXK,.bzhOW_cYkL{transition:all ".concat(theme.effectTransitionDuration || 'inherit', "}\n\n.bzhOW_fZcw,.bzhOW_dETD,.bzhOW_bPct,.bzhOW_eJVL{height:100%;width:100%}\n\n.bzhOW_eJVL{object-fit:cover}\n\n.bzhOW_fZcw{object-fit:contain}\n\n.bzhOW_fZcw.bzhOW_fqss{height:auto;max-height:100%;max-width:100%;width:auto}\n\n.bzhOW_baUy{height:inherit}\n\n.bzhOW_dETD{background-position:50%;background-repeat:no-repeat}\n\n.bzhOW_dETD.bzhOW_baUy{background-size:contain}\n\n.bzhOW_dETD.bzhOW_bPct{background-size:cover}\n\n.bzhOW_rUUn{overflow:hidden;position:relative}");
  },
  'image': 'bzhOW_EtBB',
  'overlayLayout': 'bzhOW_fJwG',
  'overlay': 'bzhOW_cYkL',
  'has-overlay': 'bzhOW_fqss',
  'has-filter': 'bzhOW_dIXK',
  'contain': 'bzhOW_fZcw',
  'container--has-background': 'bzhOW_dETD',
  'container--has-cover': 'bzhOW_bPct',
  'cover': 'bzhOW_eJVL',
  'container--has-contain': 'bzhOW_baUy',
  'container--has-overlay': 'bzhOW_rUUn'
};

/**
---
category: components
---
**/
var Img = (_dec = (0, _deprecated.deprecated)('8.0.0', {
  grayscale: 'withGrayscale',
  blur: 'withBlur',
  inline: 'display'
}), _dec2 = (0, _testable.testable)(), _dec3 = (0, _themeable.themeable)(_theme.default, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Img, _Component);

  var _super = (0, _createSuper2.default)(Img);

  function Img() {
    (0, _classCallCheck2.default)(this, Img);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(Img, [{
    key: "renderFilter",
    value: function renderFilter() {
      var blur = "blur(".concat(this.theme.imageBlurAmount, ")");
      var grayscale = 'grayscale(1)';

      if ((this.props.withGrayscale || this.props.grayscale) && (this.props.withBlur || this.props.blur)) {
        return "".concat(blur, " ").concat(grayscale);
      } else if (this.props.withGrayscale || this.props.grayscale) {
        return grayscale;
      } else if (this.props.withBlur || this.props.blur) {
        return blur;
      } else {
        return null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          src = _this$props.src,
          alt = _this$props.alt,
          margin = _this$props.margin,
          display = _this$props.display,
          overlay = _this$props.overlay,
          withGrayscale = _this$props.withGrayscale,
          withBlur = _this$props.withBlur,
          constrain = _this$props.constrain,
          width = _this$props.width,
          height = _this$props.height,
          elementRef = _this$props.elementRef,
          inline = _this$props.inline,
          blur = _this$props.blur,
          grayscale = _this$props.grayscale,
          props = (0, _objectWithoutProperties2.default)(_this$props, ["src", "alt", "margin", "display", "overlay", "withGrayscale", "withBlur", "constrain", "width", "height", "elementRef", "inline", "blur", "grayscale"]);
      var a11yProps = {
        alt: alt || ''
      };
      var imageProps = {
        className: (0, _classnames3.default)((_classnames = {}, (0, _defineProperty2.default)(_classnames, styles.image, true), (0, _defineProperty2.default)(_classnames, styles['has-overlay'], overlay), (0, _defineProperty2.default)(_classnames, styles['has-filter'], withBlur || withGrayscale || blur || grayscale), (0, _defineProperty2.default)(_classnames, styles.cover, this.supportsObjectFit && constrain === 'cover'), (0, _defineProperty2.default)(_classnames, styles.contain, this.supportsObjectFit && constrain === 'contain'), _classnames)),
        style: {
          filter: withBlur || withGrayscale || blur || grayscale ? this.renderFilter() : 'none'
        },
        src: src
      };
      var containerProps = (0, _objectSpread2.default)({}, (0, _passthroughProps.passthroughProps)(props), {
        width: width,
        height: height,
        margin: margin,
        display: display === 'block' || inline === false ? 'block' : 'inline-block',
        elementRef: elementRef
      }); // if browser does not support ObjectFit CSS, and Img needs "constrain",
      // serve up a background-image instead

      var hasBackground = !this.supportsObjectFit && this.props.constrain;

      if (overlay || hasBackground) {
        var _classnames2;

        // if a background image is rendered we add the a11y props on the container element
        var rootProps = hasBackground ? (0, _objectSpread2.default)({}, a11yProps, {}, containerProps) : containerProps;
        return /*#__PURE__*/_react.default.createElement(_View.View, Object.assign({}, rootProps, {
          as: "span",
          className: (0, _classnames3.default)((_classnames2 = {}, (0, _defineProperty2.default)(_classnames2, styles['container--has-overlay'], overlay), (0, _defineProperty2.default)(_classnames2, styles['container--has-cover'], constrain === 'cover'), (0, _defineProperty2.default)(_classnames2, styles['container--has-contain'], constrain === 'contain'), (0, _defineProperty2.default)(_classnames2, styles['container--has-background'], hasBackground), _classnames2)),
          style: {
            backgroundImage: hasBackground ? "url(".concat(src, ")") : void 0
          }
        }), !hasBackground && /*#__PURE__*/_react.default.createElement("img", Object.assign({}, imageProps, a11yProps)) // eslint-disable-line jsx-a11y/alt-text
        , overlay && /*#__PURE__*/_react.default.createElement("span", {
          className: styles.overlay,
          style: {
            backgroundColor: overlay.color,
            opacity: overlay.opacity * 0.1,
            mixBlendMode: overlay.blend ? overlay.blend : null
          }
        }));
      } else {
        return /*#__PURE__*/_react.default.createElement(_View.View, Object.assign({}, containerProps, imageProps, a11yProps, {
          as: "img"
        }));
      }
    }
  }, {
    key: "supportsObjectFit",
    get: function get() {
      return (0, _supportsObjectFit.supportsObjectFit)();
    }
  }]);
  Img.displayName = "Img";
  return Img;
}(_react.Component), _class2.propTypes = {
  src: _propTypes.default.string.isRequired,
  alt: _propTypes.default.string,
  display: _propTypes.default.oneOf(['inline-block', 'block']),

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: _ThemeablePropTypes.ThemeablePropTypes.spacing,

  /**
   * Valid values for `opacity` are `0` - `10`. Valid values for `blend` are
   * `normal` (default), `multiply`, `screen`, `overlay`, and `color-burn`.
   */
  overlay: _propTypes.default.shape({
    color: _propTypes.default.string.isRequired,
    opacity: _propTypes.default.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).isRequired,
    blend: _propTypes.default.oneOf(['normal', 'multiply', 'screen', 'overlay', 'color-burn'])
  }),
  withGrayscale: _propTypes.default.bool,
  withBlur: _propTypes.default.bool,
  constrain: _propTypes.default.oneOf(['cover', 'contain']),
  elementRef: _propTypes.default.func,
  height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /* eslint-disable react/require-default-props */

  /**
   * __Deprecated - use `display`__
   */
  inline: _propTypes.default.bool,

  /**
   * __Deprecated - use `withGrayscale`__
   */
  grayscale: _propTypes.default.bool,

  /**
   * __Deprecated - use `withBlur`__
   */
  blur: _propTypes.default.bool
  /* eslint-enable react/require-default-props */

}, _class2.defaultProps = {
  margin: void 0,
  overlay: void 0,
  constrain: void 0,
  elementRef: void 0,
  height: void 0,
  width: void 0,
  alt: '',
  display: 'inline-block',
  withGrayscale: false,
  withBlur: false
}, _temp)) || _class) || _class) || _class);
exports.Img = Img;
var _default = Img;
exports.default = _default;
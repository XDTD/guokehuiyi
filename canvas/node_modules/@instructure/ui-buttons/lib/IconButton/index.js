"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconButton = exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _ThemeablePropTypes = require("@instructure/ui-themeable/lib/ThemeablePropTypes.js");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _ScreenReaderContent = require("@instructure/ui-a11y-content/lib/ScreenReaderContent");

var _index = require("../BaseButton/index.js");

var _theme = _interopRequireDefault(require("./theme.js"));

var _dec, _dec2, _class, _class2, _temp;

/**
---
category: components
---
**/
var IconButton = (_dec = (0, _testable.testable)(), _dec2 = (0, _themeable.themeable)(_theme.default), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(IconButton, _Component);

  var _super = (0, _createSuper2.default)(IconButton);

  function IconButton() {
    var _this;

    (0, _classCallCheck2.default)(this, IconButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._baseButton = null;
    return _this;
  }

  (0, _createClass2.default)(IconButton, [{
    key: "focus",
    value: function focus() {
      this._baseButton && this._baseButton.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          renderIcon = _this$props.renderIcon,
          screenReaderLabel = _this$props.screenReaderLabel,
          type = _this$props.type,
          size = _this$props.size,
          elementRef = _this$props.elementRef,
          as = _this$props.as,
          interaction = _this$props.interaction,
          color = _this$props.color,
          focusColor = _this$props.focusColor,
          shape = _this$props.shape,
          withBackground = _this$props.withBackground,
          withBorder = _this$props.withBorder,
          margin = _this$props.margin,
          cursor = _this$props.cursor,
          href = _this$props.href,
          props = (0, _objectWithoutProperties2.default)(_this$props, ["children", "renderIcon", "screenReaderLabel", "type", "size", "elementRef", "as", "interaction", "color", "focusColor", "shape", "withBackground", "withBorder", "margin", "cursor", "href"]);
      var theme = this.theme;
      return /*#__PURE__*/_react.default.createElement(_index.BaseButton, Object.assign({}, (0, _passthroughProps.passthroughProps)(props), {
        type: type,
        size: size,
        elementRef: elementRef,
        as: as,
        interaction: interaction,
        color: color,
        focusColor: focusColor,
        shape: shape,
        withBackground: withBackground,
        withBorder: withBorder,
        margin: margin,
        cursor: cursor,
        href: href,
        renderIcon: children || renderIcon,
        theme: theme,
        ref: function ref(component) {
          _this2._baseButton = component;
        }
      }), /*#__PURE__*/_react.default.createElement(_ScreenReaderContent.ScreenReaderContent, null, screenReaderLabel));
    }
  }, {
    key: "focused",
    get: function get() {
      return this._baseButton && this._baseButton.focused;
    }
  }]);
  IconButton.displayName = "IconButton";
  return IconButton;
}(_react.Component), _class2.propTypes = {
  /**
   * An icon, or function returning an icon (identical to the `renderIcon` prop).
   */
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * An icon, or function that returns an icon (identical to the `children` prop).
   */
  renderIcon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * An accessible label for the `IconButton`.
   */
  screenReaderLabel: _propTypes.default.string.isRequired,

  /**
   * Specifies the type of the `IconButton`'s underlying html element.
   */
  type: _propTypes.default.oneOf(['button', 'submit', 'reset']),

  /**
   * The size of the `IconButton`
   */
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),

  /**
   * Provides a reference to the `IconButton`'s underlying html element.
   */
  elementRef: _propTypes.default.func,

  /**
   * The element to render as the component root, `button` by default.
   */
  as: _propTypes.default.elementType,

  /**
   * Specifies if interaction with the `IconButton` is enabled, disabled, or readonly.
   */
  interaction: _propTypes.default.oneOf(['enabled', 'disabled', 'readonly']),

  /**
   * Specifies the color for the `IconButton`.
   */
  color: _propTypes.default.oneOf(['primary', 'primary-inverse', 'secondary', 'success', 'danger']),

  /**
   * Override the `Button`'s default focus outline color.
   */
  focusColor: _propTypes.default.oneOf(['info', 'inverse']),

  /**
   * Specifies if the `IconButton` shape should be a circle or rectangle.
   */
  shape: _propTypes.default.oneOf(['rectangle', 'circle']),

  /**
   * Specifies if the `IconButton` should render with a solid background. When false, the background is transparent.
   */
  withBackground: _propTypes.default.bool,

  /**
   * Specifies if the `IconButton` should render with a border.
   */
  withBorder: _propTypes.default.bool,

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: _ThemeablePropTypes.ThemeablePropTypes.spacing,

  /**
   * Specify a mouse cursor to use when hovering over the button.
   * The `pointer` cursor is used by default.
   */
  cursor: _propTypes.default.string,

  /**
   * Specifies an href attribute for the `IconButton`'s underlying html element.
   */
  href: _propTypes.default.string
}, _class2.defaultProps = {
  children: null,
  renderIcon: void 0,
  type: 'button',
  size: 'medium',
  elementRef: function elementRef(el) {},
  as: 'button',
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  color: 'secondary',
  focusColor: void 0,
  shape: 'rectangle',
  withBackground: true,
  withBorder: true,
  margin: '0',
  cursor: 'pointer',
  href: void 0
}, _temp)) || _class) || _class);
exports.IconButton = IconButton;
var _default = IconButton;
exports.default = _default;
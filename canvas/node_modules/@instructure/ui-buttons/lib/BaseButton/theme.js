"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generator;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _alpha = require("@instructure/ui-color-utils/lib/alpha.js");

var _darken = require("@instructure/ui-color-utils/lib/darken.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var activeShadow = 'inset 0 0 0.1875rem 0.0625rem';

var generateButtonThemeVars = function generateButtonThemeVars(_ref) {
  var _ref2;

  var style = _ref.style,
      textColor = _ref.textColor,
      ghostTextColor = _ref.ghostTextColor,
      backgroundColor = _ref.backgroundColor,
      borderColor = _ref.borderColor,
      _ref$ghostBorderColor = _ref.ghostBorderColor,
      ghostBorderColor = _ref$ghostBorderColor === void 0 ? borderColor : _ref$ghostBorderColor;
  return _ref2 = {}, (0, _defineProperty2.default)(_ref2, "".concat(style, "Color"), textColor), (0, _defineProperty2.default)(_ref2, "".concat(style, "BorderColor"), (0, _darken.darken)(borderColor, 10)), (0, _defineProperty2.default)(_ref2, "".concat(style, "Background"), backgroundColor), (0, _defineProperty2.default)(_ref2, "".concat(style, "HoverBackground"), (0, _darken.darken)(backgroundColor, 10)), (0, _defineProperty2.default)(_ref2, "".concat(style, "ActiveBackground"), (0, _darken.darken)(backgroundColor, 10)), (0, _defineProperty2.default)(_ref2, "".concat(style, "ActiveBoxShadow"), "".concat(activeShadow, " ").concat((0, _darken.darken)(borderColor, 20, 0.45))), (0, _defineProperty2.default)(_ref2, "".concat(style, "GhostColor"), ghostTextColor), (0, _defineProperty2.default)(_ref2, "".concat(style, "GhostBorderColor"), ghostBorderColor), (0, _defineProperty2.default)(_ref2, "".concat(style, "GhostBackground"), 'transparent'), (0, _defineProperty2.default)(_ref2, "".concat(style, "GhostHoverBackground"), (0, _alpha.alpha)(ghostTextColor, 10)), (0, _defineProperty2.default)(_ref2, "".concat(style, "GhostActiveBackground"), 'transparent'), (0, _defineProperty2.default)(_ref2, "".concat(style, "GhostActiveBoxShadow"), "".concat(activeShadow, " ").concat((0, _alpha.alpha)(ghostBorderColor, 28))), _ref2;
};

function generator() {
  var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
      _ref3$borders = _ref3.borders,
      borders = _ref3$borders === void 0 ? {} : _ref3$borders,
      _ref3$colors = _ref3.colors,
      colors = _ref3$colors === void 0 ? {} : _ref3$colors,
      _ref3$forms = _ref3.forms,
      forms = _ref3$forms === void 0 ? {} : _ref3$forms,
      _ref3$spacing = _ref3.spacing,
      spacing = _ref3$spacing === void 0 ? {} : _ref3$spacing,
      _ref3$typography = _ref3.typography,
      typography = _ref3$typography === void 0 ? {} : _ref3$typography;

  return (0, _objectSpread2.default)({
    transform: 'none',
    hoverTransform: 'none',
    fontFamily: typography.fontFamily,
    fontWeight: typography.fontWeightNormal,
    textTransform: 'none',
    letterSpacing: 'normal',
    borderRadius: borders.radiusMedium,
    borderStyle: borders.style,
    borderWidth: borders.widthSmall,
    smallHeight: forms.inputHeightSmall,
    smallFontSize: typography.fontSizeSmall,
    smallPaddingHorizontal: spacing.xSmall,
    smallPaddingTop: '0.375rem',
    smallPaddingBottom: '0.3125rem',
    mediumHeight: forms.inputHeightMedium,
    mediumFontSize: typography.fontSizeMedium,
    mediumPaddingHorizontal: spacing.small,
    mediumPaddingTop: '0.5625rem',
    mediumPaddingBottom: '0.5625rem',
    largeHeight: forms.inputHeightLarge,
    largeFontSize: typography.fontSizeLarge,
    largePaddingHorizontal: spacing.medium,
    largePaddingTop: '0.6875rem',
    largePaddingBottom: '0.6875rem',
    lineHeight: typography.lineHeightFit,
    iconSizeSmall: '1rem',
    iconSizeMedium: '1.25rem',
    iconSizeLarge: '1.625rem'
  }, generateButtonThemeVars({
    style: 'primary',
    backgroundColor: colors.backgroundBrand,
    borderColor: colors.borderBrand,
    textColor: colors.textLightest,
    ghostTextColor: colors.textBrand
  }), {}, generateButtonThemeVars({
    style: 'secondary',
    backgroundColor: colors.backgroundLight,
    borderColor: colors.borderLight,
    ghostBorderColor: colors.borderDarkest,
    textColor: colors.textDarkest,
    ghostTextColor: colors.textDarkest
  }), {}, generateButtonThemeVars({
    style: 'success',
    backgroundColor: colors.backgroundSuccess,
    borderColor: colors.borderSuccess,
    textColor: colors.textLightest,
    ghostTextColor: colors.textSuccess
  }), {}, generateButtonThemeVars({
    style: 'danger',
    backgroundColor: colors.backgroundDanger,
    borderColor: colors.borderDanger,
    textColor: colors.textLightest,
    ghostTextColor: colors.textDanger
  }), {}, generateButtonThemeVars({
    style: 'primaryInverse',
    backgroundColor: colors.backgroundLightest,
    borderColor: colors.borderLightest,
    textColor: colors.textDarkest,
    ghostTextColor: colors.textLightest
  }), {
    // Overrides for primary-inverse to match what was previously the `light` button variant
    primaryInverseBorderColor: (0, _darken.darken)(colors.borderLight, 10),
    primaryInverseHoverBackground: (0, _darken.darken)(colors.backgroundLightest, 5),
    primaryInverseActiveBackground: colors.backgroundLightest,
    primaryInverseActiveBoxShadow: "".concat(activeShadow, " ").concat((0, _darken.darken)(colors.borderLightest, 25)),
    // Overrides for ghost hover states to ensure correct color contrast for a11y
    successGhostHoverBackground: (0, _alpha.alpha)(colors.textSuccess, 1)
  });
}

generator['canvas'] = function (_ref4) {
  var colors = _ref4.colors,
      variables = (0, _objectWithoutProperties2.default)(_ref4, ["colors"]);
  return (0, _objectSpread2.default)({}, generateButtonThemeVars({
    style: 'primary',
    backgroundColor: variables['ic-brand-button--primary-bgd'],
    borderColor: variables['ic-brand-button--primary-bgd'],
    textColor: variables['ic-brand-button--primary-text'],
    ghostTextColor: variables['ic-brand-button--primary-bgd']
  }), {
    primaryGhostHoverBackground: (0, _alpha.alpha)(variables['ic-brand-button--primary-bgd'], 10)
  });
};

generator['canvas-a11y'] = generator['canvas-high-contrast'] = function (_ref5) {
  var colors = _ref5.colors;
  return {
    secondaryBorderColor: colors.borderMedium,
    primaryInverseBorderColor: colors.borderMedium
  };
};

generator['instructure'] = function () {
  return {
    borderRadius: '999em',
    smallPaddingTop: '0.5rem',
    smallPaddingBottom: '0.4375rem',
    mediumPaddingTop: '0.75rem',
    mediumPaddingBottom: '0.75rem',
    largePaddingTop: '1rem',
    largePaddingBottom: '1rem',
    largeFontSize: '1.125rem'
  };
};
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { testable } from '@instructure/ui-testable';
import { PositionPropTypes } from '@instructure/ui-position';
import { callRenderProp, passthroughProps } from '@instructure/ui-react-utils';
import { Tooltip } from '@instructure/ui-tooltip';
import { IconButton } from "../IconButton/index.js";
/**
---
category: components
---
**/

var ToggleButton = (_dec = testable(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(ToggleButton, _Component);

  var _super = _createSuper(ToggleButton);

  function ToggleButton(props) {
    var _this;

    _classCallCheck(this, ToggleButton);

    _this = _super.call(this, props);
    _this.state = {
      isShowingTooltip: props.isShowingTooltip || false
    };
    return _this;
  }

  _createClass(ToggleButton, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          as = _this$props.as,
          color = _this$props.color,
          elementRef = _this$props.elementRef,
          size = _this$props.size,
          interaction = _this$props.interaction,
          mountNode = _this$props.mountNode,
          renderIcon = _this$props.renderIcon,
          renderTooltipContent = _this$props.renderTooltipContent,
          screenReaderLabel = _this$props.screenReaderLabel,
          status = _this$props.status,
          placement = _this$props.placement,
          onClick = _this$props.onClick,
          props = _objectWithoutProperties(_this$props, ["as", "color", "elementRef", "size", "interaction", "mountNode", "renderIcon", "renderTooltipContent", "screenReaderLabel", "status", "placement", "onClick"]);

      return /*#__PURE__*/React.createElement(Tooltip, {
        renderTip: renderTooltipContent,
        on: ['hover', 'focus'],
        placement: placement,
        color: color === 'primary-inverse' ? 'primary-inverse' : 'primary',
        isShowingContent: this.isShowingTooltip,
        onShowContent: function onShowContent(event) {
          _this2.setState({
            isShowingTooltip: true
          });
        },
        onHideContent: function onHideContent(event) {
          _this2.setState({
            isShowingTooltip: false
          });
        },
        mountNode: mountNode
      }, /*#__PURE__*/React.createElement(IconButton, Object.assign({}, passthroughProps(props), {
        screenReaderLabel: screenReaderLabel,
        withBackground: false,
        withBorder: false,
        color: color,
        size: size,
        elementRef: elementRef,
        as: as,
        onClick: onClick,
        interaction: interaction,
        "aria-pressed": status === 'pressed'
      }), callRenderProp(renderIcon)));
    }
  }, {
    key: "isShowingTooltip",
    get: function get() {
      return typeof this.props.isShowingTooltip === 'undefined' ? this.state.isShowingTooltip : this.props.isShowingTooltip;
    }
  }]);

  ToggleButton.displayName = "ToggleButton";
  return ToggleButton;
}(Component), _class2.propTypes = {
  /**
   * Text to output only to screen readers
   */
  screenReaderLabel: PropTypes.PropTypes.string.isRequired,

  /**
   * Text to render in the tooltip shown on hover/focus
   */
  renderTooltipContent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,

  /**
   * An icon or function that returns an icon
   */
  renderIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,

  /**
   * Toggles the `aria-pressed` attribute on the button (`true` if `pressed`; `false` if `unpressed`)
   */
  status: PropTypes.oneOf(['pressed', 'unpressed']).isRequired,

  /**
   * The element to render as the component root; `button` by default
   */
  as: PropTypes.elementType,

  /**
   * Specifies if interaction with `ToggleButton` is `enabled`, `disabled`, or `readonly`
   */
  interaction: PropTypes.oneOf(['enabled', 'disabled', 'readonly']),

  /**
   * The size of the `ToggleButton`
   */
  size: PropTypes.oneOf(['small', 'medium', 'large']),

  /**
   * Provides a reference to `ToggleButton`'s underlying HTML element
   */
  elementRef: PropTypes.func,

  /**
   * Callback fired when the `ToggleButton` is clicked
   */
  onClick: PropTypes.func,

  /**
   * The color in which to display the icon
   */
  color: PropTypes.string,

  /**
   * By default, the tooltip will show on hover/focus. Use this prop if you need to override that behavior.
   */
  isShowingTooltip: PropTypes.bool,

  /**
   * An element or a function returning an element to use as the mount node
   */
  mountNode: PositionPropTypes.mountNode,

  /**
   * The placement of the tooltip in relation to the button
   */
  placement: PositionPropTypes.placement,

  /**
   * The parent in which to constrain the tooltip.
   * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
   * or a function returning an element.
   */
  constrain: PositionPropTypes.constrain
}, _class2.defaultProps = {
  size: 'medium',
  as: 'button',
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  elementRef: function elementRef(el) {},
  renderIcon: function renderIcon() {},
  onClick: function onClick() {},
  mountNode: null,
  color: 'secondary',
  isShowingTooltip: void 0,
  placement: 'top center',
  constrain: 'window'
}, _temp)) || _class);
export { ToggleButton };
export default ToggleButton;
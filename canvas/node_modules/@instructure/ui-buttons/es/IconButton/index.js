import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { testable } from '@instructure/ui-testable';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
import { passthroughProps } from '@instructure/ui-react-utils';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { BaseButton } from "../BaseButton/index.js";
import theme from './theme.js';
/**
---
category: components
---
**/

var IconButton = (_dec = testable(), _dec2 = themeable(theme), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(IconButton, _Component);

  var _super = _createSuper(IconButton);

  function IconButton() {
    var _this;

    _classCallCheck(this, IconButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._baseButton = null;
    return _this;
  }

  _createClass(IconButton, [{
    key: "focus",
    value: function focus() {
      this._baseButton && this._baseButton.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          renderIcon = _this$props.renderIcon,
          screenReaderLabel = _this$props.screenReaderLabel,
          type = _this$props.type,
          size = _this$props.size,
          elementRef = _this$props.elementRef,
          as = _this$props.as,
          interaction = _this$props.interaction,
          color = _this$props.color,
          focusColor = _this$props.focusColor,
          shape = _this$props.shape,
          withBackground = _this$props.withBackground,
          withBorder = _this$props.withBorder,
          margin = _this$props.margin,
          cursor = _this$props.cursor,
          href = _this$props.href,
          props = _objectWithoutProperties(_this$props, ["children", "renderIcon", "screenReaderLabel", "type", "size", "elementRef", "as", "interaction", "color", "focusColor", "shape", "withBackground", "withBorder", "margin", "cursor", "href"]);

      var theme = this.theme;
      return /*#__PURE__*/React.createElement(BaseButton, Object.assign({}, passthroughProps(props), {
        type: type,
        size: size,
        elementRef: elementRef,
        as: as,
        interaction: interaction,
        color: color,
        focusColor: focusColor,
        shape: shape,
        withBackground: withBackground,
        withBorder: withBorder,
        margin: margin,
        cursor: cursor,
        href: href,
        renderIcon: children || renderIcon,
        theme: theme,
        ref: function ref(component) {
          _this2._baseButton = component;
        }
      }), /*#__PURE__*/React.createElement(ScreenReaderContent, null, screenReaderLabel));
    }
  }, {
    key: "focused",
    get: function get() {
      return this._baseButton && this._baseButton.focused;
    }
  }]);

  IconButton.displayName = "IconButton";
  return IconButton;
}(Component), _class2.propTypes = {
  /**
   * An icon, or function returning an icon (identical to the `renderIcon` prop).
   */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
   * An icon, or function that returns an icon (identical to the `children` prop).
   */
  renderIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
   * An accessible label for the `IconButton`.
   */
  screenReaderLabel: PropTypes.string.isRequired,

  /**
   * Specifies the type of the `IconButton`'s underlying html element.
   */
  type: PropTypes.oneOf(['button', 'submit', 'reset']),

  /**
   * The size of the `IconButton`
   */
  size: PropTypes.oneOf(['small', 'medium', 'large']),

  /**
   * Provides a reference to the `IconButton`'s underlying html element.
   */
  elementRef: PropTypes.func,

  /**
   * The element to render as the component root, `button` by default.
   */
  as: PropTypes.elementType,

  /**
   * Specifies if interaction with the `IconButton` is enabled, disabled, or readonly.
   */
  interaction: PropTypes.oneOf(['enabled', 'disabled', 'readonly']),

  /**
   * Specifies the color for the `IconButton`.
   */
  color: PropTypes.oneOf(['primary', 'primary-inverse', 'secondary', 'success', 'danger']),

  /**
   * Override the `Button`'s default focus outline color.
   */
  focusColor: PropTypes.oneOf(['info', 'inverse']),

  /**
   * Specifies if the `IconButton` shape should be a circle or rectangle.
   */
  shape: PropTypes.oneOf(['rectangle', 'circle']),

  /**
   * Specifies if the `IconButton` should render with a solid background. When false, the background is transparent.
   */
  withBackground: PropTypes.bool,

  /**
   * Specifies if the `IconButton` should render with a border.
   */
  withBorder: PropTypes.bool,

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: ThemeablePropTypes.spacing,

  /**
   * Specify a mouse cursor to use when hovering over the button.
   * The `pointer` cursor is used by default.
   */
  cursor: PropTypes.string,

  /**
   * Specifies an href attribute for the `IconButton`'s underlying html element.
   */
  href: PropTypes.string
}, _class2.defaultProps = {
  children: null,
  renderIcon: void 0,
  type: 'button',
  size: 'medium',
  elementRef: function elementRef(el) {},
  as: 'button',
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  color: 'secondary',
  focusColor: void 0,
  shape: 'rectangle',
  withBackground: true,
  withBorder: true,
  margin: '0',
  cursor: 'pointer',
  href: void 0
}, _temp)) || _class) || _class);
export default IconButton;
export { IconButton };
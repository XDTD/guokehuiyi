import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _dec3, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { testable } from '@instructure/ui-testable';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
import { getInteraction, passthroughProps, deprecated } from '@instructure/ui-react-utils';
import { BaseButton } from "../BaseButton/index.js";
import { DeprecatedButton } from "../DeprecatedButton/index.js";
import { themeAdapter } from "./themeAdapter.js";
import generateDeprecatedTheme from "../DeprecatedButton/theme.js";
import theme from "./theme.js";
/**
---
category: components
---
**/

var Button = (_dec = deprecated('8.0.0', {
  buttonRef: 'elementRef',
  fluidWidth: 'display',
  icon: 'renderIcon',
  variant: null
}, 'See the following upgrade guide for more help updating https://instructure.design/#button-upgrade-guide'), _dec2 = testable(), _dec3 = themeable(theme, null, themeAdapter), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Button, _Component);

  var _super = _createSuper(Button);

  function Button() {
    var _this;

    _classCallCheck(this, Button);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._buttonComponent = null;

    _this.handleElementRef = function (el) {
      var _this$props = _this.props,
          elementRef = _this$props.elementRef,
          buttonRef = _this$props.buttonRef;
      elementRef(el);

      if (typeof buttonRef === 'function') {
        buttonRef(el);
      }
    };

    _this.handleButtonRef = function (component) {
      _this._buttonComponent = component;
    };

    _this.scopeTheme = function () {
      // TODO: Remove this function in version 8.0.0
      // We only want to pass the theme vars that exist in the deprecated
      // button, otherwise every theme var that is unique to the updated
      // button gets injected into the style tag for the deprecated one
      // (that ends up being a _massive_ amount of variables)
      var _assertThisInitialize = _assertThisInitialized(_this),
          _assertThisInitialize2 = _assertThisInitialize.theme,
          theme = _assertThisInitialize2 === void 0 ? {} : _assertThisInitialize2;

      var deprecatedTheme = generateDeprecatedTheme() || {};
      var deprecatedKeys = Object.keys(deprecatedTheme);
      return Object.entries(theme).reduce(function (result, _ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        if (deprecatedKeys.includes(key)) {
          return _objectSpread({}, result, _defineProperty({}, key, value));
        }

        return result;
      }, {});
    };

    return _this;
  }

  _createClass(Button, [{
    key: "focus",
    value: function focus() {
      this._buttonComponent && this._buttonComponent.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          type = _this$props2.type,
          size = _this$props2.size,
          as = _this$props2.as,
          color = _this$props2.color,
          focusColor = _this$props2.focusColor,
          display = _this$props2.display,
          textAlign = _this$props2.textAlign,
          withBackground = _this$props2.withBackground,
          margin = _this$props2.margin,
          cursor = _this$props2.cursor,
          href = _this$props2.href,
          icon = _this$props2.icon,
          renderIcon = _this$props2.renderIcon,
          variant = _this$props2.variant,
          fluidWidth = _this$props2.fluidWidth,
          props = _objectWithoutProperties(_this$props2, ["children", "type", "size", "as", "color", "focusColor", "display", "textAlign", "withBackground", "margin", "cursor", "href", "icon", "renderIcon", "variant", "fluidWidth"]);

      var interaction = getInteraction({
        props: props
      });
      var _this$theme = this.theme,
          theme = _this$theme === void 0 ? {} : _this$theme;

      if (variant) {
        return /*#__PURE__*/React.createElement(DeprecatedButton, Object.assign({}, passthroughProps(props), {
          type: type,
          size: size,
          as: as,
          disabled: interaction === 'disabled',
          readOnly: interaction === 'readonly',
          margin: margin,
          cursor: cursor,
          href: href,
          icon: renderIcon || icon,
          fluidWidth: fluidWidth,
          variant: variant,
          buttonRef: this.handleElementRef,
          ref: this.handleButtonRef,
          theme: this.scopeTheme()
        }), children);
      }

      var buttonProps = _objectSpread({}, passthroughProps(props), {
        type: type,
        size: size,
        elementRef: this.handleElementRef,
        ref: this.handleButtonRef,
        as: as,
        color: color,
        interaction: interaction,
        focusColor: focusColor,
        display: display,
        textAlign: textAlign,
        withBackground: withBackground,
        margin: margin,
        cursor: cursor,
        href: href,
        renderIcon: renderIcon || icon,
        theme: theme
      });

      if (fluidWidth) {
        buttonProps.textAlign = 'start';
        buttonProps.display = 'block';
      }

      return /*#__PURE__*/React.createElement(BaseButton, buttonProps, children);
    }
  }, {
    key: "focused",
    get: function get() {
      return this._buttonComponent && this._buttonComponent.focused;
    }
  }]);

  Button.displayName = "Button";
  return Button;
}(Component), _class2.propTypes = {
  /**
   * Specifies the `Button` children.
   */
  children: PropTypes.node,

  /**
   * Specifies the type of the `Button`'s underlying html element.
   */
  type: PropTypes.oneOf(['button', 'submit', 'reset']),

  /**
   * The size of the `Button`
   */
  size: PropTypes.oneOf(['small', 'medium', 'large']),

  /**
   * Provides a reference to the `Button`'s underlying html element.
   */
  elementRef: PropTypes.func,

  /**
   * The element to render as the component root, `Button` by default.
   */
  as: PropTypes.elementType,

  /**
   * Specifies if interaction with the `Button` is enabled, disabled, or readonly.
   */
  interaction: PropTypes.oneOf(['enabled', 'disabled', 'readonly']),

  /**
   * Specifies the color for the `Button`.
   */
  color: PropTypes.oneOf(['primary', 'primary-inverse', 'secondary', 'success', 'danger']),

  /**
   * Override the `Button`'s default focus outline color.
   */
  focusColor: PropTypes.oneOf(['info', 'inverse']),

  /**
   * The `Button` display property. When set to `inline-block`, the `Button` displays inline with other elements.
   * When set to block, the `Button` expands to fill the width of the container.
   */
  display: PropTypes.oneOf(['inline-block', 'block']),

  /**
   * Sets the alignment of the `Button` children and/or icon.
   */
  textAlign: PropTypes.oneOf(['start', 'center']),

  /**
   * Specifies if the `Button` should render with a solid background. When false, the background is transparent.
   */
  withBackground: PropTypes.bool,

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: ThemeablePropTypes.spacing,

  /**
   * Specify a mouse cursor to use when hovering over the button.
   * The `pointer` cursor is used by default.
   */
  cursor: PropTypes.string,

  /**
   * Specifies an href attribute for the `Button`'s underlying html element.
   */
  href: PropTypes.string,

  /**
   * An icon, or function that returns an icon.
   */
  renderIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
   * __Deprecated - use `elementRef` instead (See the [upgrade guide](#button-upgrade-guide/#v8-button-upgrade-guide-props-that-need-to-be-upgraded) for more details)__
   */
  buttonRef: PropTypes.func,

  /**
   * __Deprecated - see the [upgrade guide](#button-upgrade-guide/#v8-button-upgrade-guide-upgrading-variant-default,-primary,-success,-danger,-light,-ghost,-or-ghost-inverse)__
   */
  variant: PropTypes.oneOf(['default', 'primary', 'success', 'danger', 'light', 'ghost', 'ghost-inverse', 'link', 'link-inverse', 'circle-default', 'circle-primary', 'circle-danger', 'icon', 'icon-inverse']),

  /**
   * __Deprecated - set `display="block"` and `textAlign="start"` instead (See the [upgrade guide](#button-upgrade-guide/#v8-button-upgrade-guide-props-that-need-to-be-upgraded) for more details)__
   */
  fluidWidth: PropTypes.bool,

  /**
   * __Deprecated - use `renderIcon` instead (See the [upgrade guide](#button-upgrade-guide/#v8-button-upgrade-guide-props-that-need-to-be-upgraded) for more details)__
   */
  icon: PropTypes.oneOfType([PropTypes.func, PropTypes.element])
}, _class2.defaultProps = {
  children: null,
  type: 'button',
  size: 'medium',
  elementRef: function elementRef(el) {},
  as: 'button',
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  // TODO: Switch to 'secondary' in 8.0 when we drop variant
  color: void 0,
  focusColor: void 0,
  display: 'inline-block',
  textAlign: 'center',
  withBackground: true,
  margin: '0',
  cursor: 'pointer',
  href: void 0,
  renderIcon: void 0,
  buttonRef: void 0,
  variant: void 0,
  fluidWidth: void 0,
  icon: void 0
}, _temp)) || _class) || _class) || _class);
export default Button;
export { Button };
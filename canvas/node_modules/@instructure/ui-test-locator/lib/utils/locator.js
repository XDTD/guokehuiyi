"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.locator = locator;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _uiTestQueries = require("@instructure/ui-test-queries");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
function locator(containerSelector) {
  var customMethods = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};

  var queryAll = function queryAll(element, selector, options) {
    return (0, _uiTestQueries.querySelectorAllWithin)(containerSelector, element, selector, options);
  };

  queryAll.displayName = containerSelector;

  var query = function query() {
    return (0, _uiTestQueries.firstOrNull)(queryAll.apply(void 0, arguments));
  };

  var findAll = function findAll() {
    var _parseQueryArguments = _uiTestQueries.parseQueryArguments.apply(void 0, arguments),
        element = _parseQueryArguments.element,
        selector = _parseQueryArguments.selector,
        options = _parseQueryArguments.options;

    return (0, _uiTestQueries.findAllByQuery)(queryAll, element, selector, (0, _objectSpread2.default)({}, options, {
      customMethods: (0, _objectSpread2.default)({}, customMethods, {}, options.customMethods)
    }));
  };

  var find = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      var _args = arguments;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = _uiTestQueries.firstOrNull;
              _context.next = 3;
              return findAll.apply(void 0, _args);

            case 3:
              _context.t1 = _context.sent;
              return _context.abrupt("return", (0, _context.t0)(_context.t1));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function find() {
      return _ref.apply(this, arguments);
    };
  }();

  var findWithText = function findWithText() {
    var _parseQueryArguments2 = _uiTestQueries.parseQueryArguments.apply(void 0, arguments),
        element = _parseQueryArguments2.element,
        selector = _parseQueryArguments2.selector,
        options = _parseQueryArguments2.options;

    return find(element, ":withText(\"".concat(selector, "\")"), options);
  };

  var findWithLabel = function findWithLabel() {
    var _parseQueryArguments3 = _uiTestQueries.parseQueryArguments.apply(void 0, arguments),
        element = _parseQueryArguments3.element,
        selector = _parseQueryArguments3.selector,
        options = _parseQueryArguments3.options;

    return find(element, ":withLabel(\"".concat(selector, "\")"), options);
  };

  var methods = {};
  Object.keys(customMethods).forEach(function (methodKey) {
    methods[methodKey] = /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
      var _parseQueryArguments4,
          element,
          selector,
          options,
          container,
          _args2 = arguments;

      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _parseQueryArguments4 = _uiTestQueries.parseQueryArguments.apply(void 0, _args2), element = _parseQueryArguments4.element, selector = _parseQueryArguments4.selector, options = _parseQueryArguments4.options;
              _context2.next = 3;
              return find(element);

            case 3:
              container = _context2.sent;
              return _context2.abrupt("return", container ? container[methodKey](selector, options) : null);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
  });
  return (0, _objectSpread2.default)({
    customMethods: customMethods,
    selector: containerSelector,
    query: query,
    queryAll: queryAll,
    findAll: findAll,
    find: find,
    findWithText: findWithText,
    findWithLabel: findWithLabel
  }, methods);
}
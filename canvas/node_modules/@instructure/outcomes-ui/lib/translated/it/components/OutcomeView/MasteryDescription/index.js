"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiText = require("@instructure/ui-text");

var _uiSpinner = require("@instructure/ui-spinner");

var _uiThemeable = require("@instructure/ui-themeable");

var _shapes = require("../../../store/shapes");

var _theme = _interopRequireDefault(require("../../theme"));

var _percent_it_number = Intl.NumberFormat("it", { style: "percent" }).format,
    _default_it_number = Intl.NumberFormat("it", { style: "decimal" }).format,
    _dec,
    _class,
    _class2,
    _temp;

var styles = {
  componentId: 'IalyE',
  template: function template(theme) {
    return "\n\n.outcomes-ui__MasteryDescription--scoreMastery {\n  background-color: #F5F5F5;\n  border: solid 1px #999999;\n  border-radius: 0.25rem;\n  margin-top: 2rem;\n  padding: 1.0rem 1.0rem;\n}\n\n.outcomes-ui__MasteryDescription--scoreMasteryText {\n  margin-top: 1rem;\n}\n";
  },
  'scoreMastery': 'outcomes-ui__MasteryDescription--scoreMastery',
  'scoreMasteryText': 'outcomes-ui__MasteryDescription--scoreMasteryText'
};

var scoringText = function scoringText(scoringMethod) {
  switch (scoringMethod.algorithm) {
    case 'decaying_average':
      return "Padronanza calcolata in base alla media ponderata. I punteggi pi\xF9 recenti vengono considerati come " + _percent_it_number(scoringMethod.algorithm_data.decaying_average_percent) + " del peso del livello di padronanza, la media di tutti gli altri risultati viene considerata come " + _percent_it_number(1.0 - scoringMethod.algorithm_data.decaying_average_percent) + " del peso. Se \xE8 presente un solo risultato, verr\xE0 restituito il singolo punteggio.";

    case 'n_mastery':
      return "Padronanza calcolata in base a n numero di volte. Occorre raggiungere il livello di padronanza almeno " + _default_it_number(scoringMethod.algorithm_data.n_mastery_count) + " volte.  La media dei punteggi al di sopra del livello di padronanza verr\xE0 utilizzata per calcolare il punteggio finale.";

    case 'highest':
      return "Padronanza calcolata in base al punteggio pi\xF9 alto. Il punteggio del livello di padronanza riflette il punteggio pi\xF9 alto di una valutazione con voto.";

    case 'latest':
      return "Padronanza calcolata in base al punteggio pi\xF9 recente. Il punteggio del livello di padronanza riflette la valutazione con voto pi\xF9 recente.";

    default:
      return '';
  }
};

var masteryText = function masteryText(masteryPercent, artifactTypeName) {
  return "Allineando a questo " + artifactTypeName + " se gli studenti raggiungeranno punteggi al di sopra del " + _percent_it_number(masteryPercent) + " di padronanza.";
};

var MasteryDescription = (_dec = (0, _uiThemeable.themeable)(_theme.default, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(MasteryDescription, _React$Component);

  function MasteryDescription() {
    (0, _classCallCheck2.default)(this, MasteryDescription);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MasteryDescription).apply(this, arguments));
  }

  (0, _createClass2.default)(MasteryDescription, [{
    key: "render",
    // eslint-disable-next-line no-undef
    value: function render() {
      var _this$props = this.props,
          artifactTypeName = _this$props.artifactTypeName,
          displayMasteryPercentText = _this$props.displayMasteryPercentText,
          scoringMethod = _this$props.scoringMethod;

      if (!scoringMethod) {
        return _react.default.createElement(_uiSpinner.Spinner, {
          renderTitle: "Caricamento in corso"
        });
      }

      return _react.default.createElement("div", {
        className: styles.scoreMastery,
        "data-automation": "outcomeView__scoreMethodDescription"
      }, _react.default.createElement("div", null, _react.default.createElement(_uiText.Text, {
        size: "small"
      }, scoringText(scoringMethod))), displayMasteryPercentText && artifactTypeName && _react.default.createElement("div", {
        className: styles.scoreMasteryText
      }, _react.default.createElement(_uiText.Text, {
        size: "small"
      }, masteryText(scoringMethod.mastery_percent, artifactTypeName))));
    }
  }]);
  MasteryDescription.displayName = "MasteryDescription";
  return MasteryDescription;
}(_react.default.Component), _class2.propTypes = {
  artifactTypeName: _propTypes.default.string,
  displayMasteryPercentText: _propTypes.default.bool.isRequired,
  scoringMethod: _shapes.scoringMethodShape
}, _class2.defaultProps = {
  artifactTypeName: null,
  scoringMethod: null
}, _temp)) || _class);
exports.default = MasteryDescription;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setInitialSelectedOutcomes = exports.getOutcomesList = exports.setSelectedOutcomeIds = exports.setListTotal = exports.setListPage = exports.setOutcomes = exports.setOutcomeList = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reduxActions = require("redux-actions");

var _reduxServiceMiddleware = require("@instructure/redux-service-middleware");

var _selectors = require("../config/selectors");

var _constants = require("../../constants");

var _actions = require("../OutcomePicker/actions");

var _actions2 = require("../context/actions");

var _selectors2 = require("../alignments/selectors");

var _selectors3 = require("./selectors");

var setOutcomeList = (0, _reduxActions.createAction)(_constants.SET_OUTCOME_LIST);
exports.setOutcomeList = setOutcomeList;
var setOutcomes = (0, _reduxActions.createAction)(_constants.SET_OUTCOMES);
exports.setOutcomes = setOutcomes;
var setListPage = (0, _reduxActions.createAction)(_constants.SET_LIST_PAGE);
exports.setListPage = setListPage;
var setListTotal = (0, _reduxActions.createAction)(_constants.SET_LIST_TOTAL);
exports.setListTotal = setListTotal;
var setSelectedOutcomeIds = (0, _reduxActions.createAction)(_constants.SET_SELECTED_OUTCOME_IDS);
exports.setSelectedOutcomeIds = setSelectedOutcomeIds;

var getOutcomesList = function getOutcomesList() {
  var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
      page = _ref.page;

  return function (dispatch, getState, _arg, scope) {
    var initialPage = page || (0, _selectors3.getListPage)(getState(), scope);

    if (page) {
      dispatch(setListPage(page));
    }

    dispatch((0, _actions.setOutcomePickerState)('loading'));

    var _getConfig = (0, _selectors.getConfig)(getState(), scope),
        host = _getConfig.host,
        jwt = _getConfig.jwt,
        contextUuid = _getConfig.contextUuid,
        artifactId = _getConfig.artifactId,
        artifactType = _getConfig.artifactType;

    return dispatch({
      type: _reduxServiceMiddleware.CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'listOutcomes',
        args: [host, jwt, initialPage, contextUuid, artifactId, artifactType]
      }
    }).then(function (json) {
      if ((0, _selectors3.getListPage)(getState(), scope) === initialPage) {
        dispatch(setOutcomeList(json.outcomes));
        var outcomes = json.outcomes.reduce(function (map, obj) {
          // eslint-disable-next-line no-param-reassign
          map[obj.id] = obj;
          return map;
        }, {});
        dispatch(setOutcomes((0, _defineProperty2.default)({}, contextUuid, outcomes)));
        dispatch(setListTotal(json.total));
        dispatch((0, _actions.setOutcomePickerState)('choosing'));
      }

      return Promise.resolve(json.outcomes);
    }).catch(function (e) {
      dispatch((0, _actions2.setError)(e));
    });
  };
};

exports.getOutcomesList = getOutcomesList;

var setInitialSelectedOutcomes = function setInitialSelectedOutcomes() {
  return function (dispatch, getState, _arg, scope) {
    dispatch(setSelectedOutcomeIds((0, _selectors2.getAlignedOutcomeIds)(getState(), scope)));
    return Promise.resolve();
  };
};

exports.setInitialSelectedOutcomes = setInitialSelectedOutcomes;
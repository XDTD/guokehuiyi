"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _immutable = require("immutable");

var _chai = require("chai");

var _constants = require("../../../constants");

var _reducers = _interopRequireDefault(require("../reducers"));

describe('context/reducers', function () {
  var reduce = function reduce(state, type, payload) {
    return (0, _reducers.default)(state, {
      type: type,
      payload: payload
    });
  };

  var state = (0, _immutable.fromJS)({
    contexts: {
      1: {
        loading: false,
        data: {
          id: 1,
          key: 'foo'
        }
      }
    },
    outcomes: {
      course_100: {
        10: {
          id: 10,
          label: 'foo',
          title: 'bar'
        },
        11: {
          id: 11,
          label: 'baz',
          title: 'bat'
        }
      }
    },
    rootOutcomeIds: {
      course_100: [1, 2, 3]
    }
  });
  describe('outcomes', function () {
    it('is merged with SET_OUTCOMES', function () {
      var newOutcomes = {
        course_100: {
          100: {
            id: 100,
            label: 'blue',
            title: 'green'
          },
          200: {
            id: 200,
            label: 'yellow',
            title: 'red'
          }
        }
      };
      var newState = reduce(state, _constants.SET_OUTCOMES, newOutcomes);
      (0, _chai.expect)(newState.getIn(['outcomes', 'course_100']).toJS()).to.deep.equal((0, _objectSpread2.default)({}, state.toJS().outcomes.course_100, {}, newOutcomes.course_100));
    });
    it('does not replace other context outcomes', function () {
      var newOutcomes = {
        course_101: [{
          id: 100,
          label: 'blue',
          title: 'green'
        }, {
          id: 200,
          label: 'yellow',
          title: 'red'
        }]
      };
      var newState = reduce(state, _constants.SET_OUTCOMES, newOutcomes);
      (0, _chai.expect)(Object.keys(newState.get('outcomes').toJS()).length).to.equal(2);
    });
    it('sets the scoring method on SET_SCORING_METHOD', function () {
      var request = {
        context_uuid: 'course_100',
        id: 10,
        scoring_method: {
          points_possible: 5
        }
      };
      var newState = reduce(state, _constants.SET_SCORING_METHOD, request);
      (0, _chai.expect)(newState.getIn(['outcomes', 'course_100', 10, 'scoring_method', 'points_possible'])).to.equal(5);
    });
  });
  describe('rootOutcomeIds', function () {
    it('is replaced by SET_ROOT_OUTCOME_IDS', function () {
      var newState = reduce(state, _constants.SET_ROOT_OUTCOME_IDS, {
        course_100: [4, 5, 6]
      });
      (0, _chai.expect)(newState.get('rootOutcomeIds').toJS()).to.deep.equal({
        course_100: [4, 5, 6]
      });
    });
    it('does not replace other context root outcome ids', function () {
      var newState = reduce(state, _constants.SET_ROOT_OUTCOME_IDS, {
        course_101: [7, 8, 9]
      });
      (0, _chai.expect)(Object.keys(newState.get('rootOutcomeIds').toJS()).length).to.equal(2);
    });
  });
  describe('contexts', function () {
    it('is replaced by SET_CONTEXT', function () {
      var newState = reduce(state, _constants.SET_CONTEXT, {
        1: {
          loading: false,
          data: {
            id: 1,
            key: 'bar'
          }
        }
      });
      (0, _chai.expect)(newState.get('contexts').toJS()).to.deep.equal({
        1: {
          loading: false,
          data: {
            id: 1,
            key: 'bar'
          }
        }
      });
    });
    it('does not replace other context', function () {
      var newState = reduce(state, _constants.SET_CONTEXT, {
        2: {
          loading: false,
          data: {
            id: 2,
            key: 'bar'
          }
        }
      });
      (0, _chai.expect)(Object.keys(newState.get('contexts').toJS()).length).to.equal(2);
    });
  });
});
"use strict";

var _chai = require("chai");

var _immutable = require("immutable");

var _selectors = require("../selectors");

describe('report/selectors', function () {
  var state = (0, _immutable.fromJS)({
    scopeForTest: {
      report: {
        page: {
          number: 2,
          loaded: true
        },
        pageData: {
          perPage: 50,
          total: 149
        },
        rollups: [{
          a: 1,
          b: 2
        }],
        results: {
          1: {
            2: {
              percentScore: 0.5,
              points: 100,
              pointsPossible: 200
            }
          }
        },
        users: [{
          uuid: '100'
        }, {
          uuid: '200'
        }],
        openReportAlignmentId: 12,
        outcomes: {
          123: {
            id: '123',
            label: 'foo'
          }
        }
      }
    }
  });
  describe('getPageCount', function () {
    it('returns the right page count', function () {
      (0, _chai.expect)((0, _selectors.getPageCount)(state, 'scopeForTest')).to.deep.equal(3);
    });
    it('returns null on initial load', function () {
      var newState = (0, _immutable.Map)();
      (0, _chai.expect)((0, _selectors.getPageCount)(newState, 'scopeForTest')).to.deep.equal(null);
    });
  });
  describe('getCurrentPage', function () {
    it('returns the current page', function () {
      (0, _chai.expect)((0, _selectors.getPageNumber)(state, 'scopeForTest')).to.deep.equal(2);
    });
  });
  describe('getRollups', function () {
    it('retrieves the correct rollups', function () {
      (0, _chai.expect)((0, _selectors.getRollups)(state, 'scopeForTest')).to.deep.equal([{
        a: 1,
        b: 2
      }]);
    });
    it('returns an empty array if no outcomes are selected', function () {
      var newState = (0, _immutable.Map)();
      (0, _chai.expect)((0, _selectors.getRollups)(newState, 'scopeForTest')).to.deep.equal([]);
    });
  });
  describe('getScore', function () {
    it('returns score if outcome id and user id are present', function () {
      (0, _chai.expect)((0, _selectors.getScore)(state, 'scopeForTest', '1', '2')).to.deep.equal({
        percentScore: 0.5,
        points: 100,
        pointsPossible: 200
      });
    });
    it('returns null if outcome is not present', function () {
      (0, _chai.expect)((0, _selectors.getScore)(state, 'scopeForTest', '2', '2')).to.equal(null);
    });
    it('returns null if user is not present', function () {
      (0, _chai.expect)((0, _selectors.getScore)(state, 'scopeForTest', '1', '3')).to.equal(null);
    });
  });
  describe('isOpen', function () {
    it('returns true if alignment id is openReportAlignmentId', function () {
      (0, _chai.expect)((0, _selectors.isOpen)(state, 'scopeForTest', 12)).to.be.true;
    });
    it('returns false if another alignment id is openReportAlignmentId', function () {
      (0, _chai.expect)((0, _selectors.isOpen)(state, 'scopeForTest', 13)).to.be.false;
    });
    it('returns false if no alignment is openReportAlignmentId', function () {
      var newState = (0, _immutable.Map)();
      (0, _chai.expect)((0, _selectors.isOpen)(newState, 'scopeForTest', 12)).to.be.false;
    });
  });
  describe('getUsers', function () {
    it('retrieves the correct users', function () {
      (0, _chai.expect)((0, _selectors.getUsers)(state, 'scopeForTest')).to.deep.equal([{
        uuid: '100'
      }, {
        uuid: '200'
      }]);
    });
    it('returns an empty array if no users are present', function () {
      var newState = (0, _immutable.Map)();
      (0, _chai.expect)((0, _selectors.getUsers)(newState, 'scopeForTest')).to.deep.equal([]);
    });
  });
  describe('getReportOutcome', function () {
    it('retrieves the correct outcome', function () {
      (0, _chai.expect)((0, _selectors.getReportOutcome)(state, 'scopeForTest', '123')).to.deep.equal({
        id: '123',
        label: 'foo'
      });
    });
    it('returns nil if no outcome is found', function () {
      (0, _chai.expect)((0, _selectors.getReportOutcome)(state, 'scopeForTest', '124')).to.equal(null);
    });
  });
});
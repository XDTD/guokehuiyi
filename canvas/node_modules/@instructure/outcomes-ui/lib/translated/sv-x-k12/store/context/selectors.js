"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isOutcomeGroup = isOutcomeGroup;
exports.getChildrenToLoad = exports.getDescriptor = exports.getCollectionData = exports.makeGetOutcomeSummary = exports.getContextByScope = exports.getContext = exports.hasRootOutcomes = exports.getRootOutcomeIds = exports.getOutcome = exports.hasContextOutcomes = exports.isGroup = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _immutable = require("immutable");

var _reselect = require("reselect");

var _reReselect = _interopRequireWildcard(require("re-reselect"));

var _selectors = require("../config/selectors");

var _default_svXK12_number = Intl.NumberFormat("sv-x-k12", { style: "decimal" }).format;

function restrict(state, contextUuid) {
  return state.getIn(['context', contextUuid]) || (0, _immutable.Map)();
}

function getContextUuid(state, scope) {
  return (0, _selectors.getConfig)(state, scope).contextUuid || '';
}

var isGroup = function isGroup(outcome) {
  return outcome && (outcome.has_children || outcome.child_ids && outcome.child_ids.length > 0);
};

exports.isGroup = isGroup;
var getContextOutcomes = (0, _reselect.createSelector)(function (state, scope) {
  var uuid = getContextUuid(state, scope);
  return restrict(state, 'outcomes').get(uuid);
}, function (contextOutcomes) {
  return contextOutcomes ? contextOutcomes.toJS() : {};
});

var hasContextOutcomes = function hasContextOutcomes(state, scope) {
  var contextOutcomes = getContextOutcomes(state, scope);
  return Object.keys(contextOutcomes).length > 0;
};

exports.hasContextOutcomes = hasContextOutcomes;
var getOutcome = (0, _reReselect.default)(function (state, scope, id) {
  var uuid = getContextUuid(state, scope);
  return restrict(state, 'outcomes').getIn([uuid, id.toString()]);
}, function (outcome) {
  return outcome ? outcome.toJS() : null;
})({
  keySelector: function keySelector(state, scope, id) {
    return "".concat(getContextUuid(state, scope), "#").concat(id);
  },
  cacheObject: new _reReselect.LruObjectCache({
    cacheSize: 50
  })
});
exports.getOutcome = getOutcome;

function isOutcomeGroup(state, scope, id) {
  var outcome = getOutcome(state, scope, id);
  return isGroup(outcome);
}

var getRootOutcomeIds = (0, _reselect.createSelector)(function (state, scope) {
  var uuid = getContextUuid(state, scope);
  return restrict(state, 'rootOutcomeIds').get(uuid);
}, function (ids) {
  return ids ? ids.toJS() : [];
});
exports.getRootOutcomeIds = getRootOutcomeIds;

var hasRootOutcomes = function hasRootOutcomes(state, scope) {
  var rootIds = getRootOutcomeIds(state, scope);
  return rootIds.length > 0;
};

exports.hasRootOutcomes = hasRootOutcomes;

var getContext = function getContext(state, contextUuid) {
  var _state$getIn;

  return (_state$getIn = state.getIn(['context', 'contexts', contextUuid])) === null || _state$getIn === void 0 ? void 0 : _state$getIn.toJS();
};

exports.getContext = getContext;
var getContextByScope = (0, _reselect.createSelector)(function (state) {
  return state;
}, getContextUuid, getContext);
exports.getContextByScope = getContextByScope;
var makeGetOutcomeSummary = (0, _reselect.createSelector)([getContextOutcomes], function (outcomes) {
  return function (id) {
    return getCollectionDetails(outcomes, id).descriptor;
  };
});
exports.makeGetOutcomeSummary = makeGetOutcomeSummary;
var getCollectionData = (0, _reselect.createSelector)(getContextOutcomes, function (outcomes) {
  if (outcomes.length === 0) {
    return; // return null so tree doesnt try to render an empty object
  }

  var collections = {};

  for (var _i = 0, _Object$keys = Object.keys(outcomes); _i < _Object$keys.length; _i++) {
    var id = _Object$keys[_i];

    // eslint-disable-line no-restricted-syntax
    if (!isCollectionId(outcomes, id)) {
      continue; // eslint-disable-line no-continue
    }

    collections[id] = getCollectionDetails(outcomes, id); // eslint-disable-line immutable/no-mutation
  }

  return collections;
});
exports.getCollectionData = getCollectionData;

var isCollectionId = function isCollectionId(outcomes, id) {
  var outcome = outcomes[id];
  return outcome && (outcome.has_children || outcome.child_ids && outcome.child_ids.length > 0);
};

var getGroupText = function getGroupText(count) {
  var _s, _n, _i2, _v;

  if (!(count > 0)) {
    return;
  }

  return _s = count, _n = +_s, (_i2 = Math.floor(Math.abs(+_s)), _v = (_s + '.').split('.')[1].length, _i2 === 1 && _v === 0 ? _default_svXK12_number(count) + " grupp" : _default_svXK12_number(count) + " grupper");
};

var getOutcomeText = function getOutcomeText(count) {
  var _s2, _n2, _i3, _v2;

  if (!(count > 0)) {
    return;
  }

  return _s2 = count, _n2 = +_s2, (_i3 = Math.floor(Math.abs(+_s2)), _v2 = (_s2 + '.').split('.')[1].length, _i3 === 1 && _v2 === 0 ? _default_svXK12_number(count) + " l\xE4randem\xE5l" : _default_svXK12_number(count) + " l\xE4randem\xE5l");
};

var getDescriptor = function getDescriptor(groupCount, outcomeCount) {
  var groupText = getGroupText(groupCount);
  var outcomeText = getOutcomeText(outcomeCount);

  if (groupText && outcomeText) {
    return "".concat(groupText, " | ").concat(outcomeText);
  } else if (groupText) {
    return groupText;
  } else if (outcomeText) {
    return outcomeText;
  }

  return '';
};

exports.getDescriptor = getDescriptor;

var getCollectionDetails = function getCollectionDetails(outcomes, id) {
  var outcome = outcomes[id.toString()];
  var childIds = outcome.child_ids || [];
  var subcollections = childIds.filter(function (id) {
    return isCollectionId(outcomes, id);
  });
  var groupCount = subcollections.length;
  var outcomeCount = childIds.length - groupCount;
  return (0, _objectSpread2.default)({}, outcome, {
    name: outcome.title,
    collections: subcollections,
    descriptor: getDescriptor(groupCount, outcomeCount)
  });
};

var getChildrenToLoad = function getChildrenToLoad(state, scope, id) {
  var outcome = getOutcome(state, scope, id);

  if (!outcome || outcome.is_partial) {
    return [id];
  }

  if (!outcome.child_ids) {
    return [];
  }

  return outcome.child_ids.filter(function (id) {
    var o = getOutcome(state, scope, id);
    return o.is_partial && o.has_children;
  });
};

exports.getChildrenToLoad = getChildrenToLoad;
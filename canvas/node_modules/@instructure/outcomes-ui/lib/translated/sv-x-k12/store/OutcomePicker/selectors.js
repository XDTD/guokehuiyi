"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFocusedOutcome = getFocusedOutcome;
exports.anyOutcomeSelected = anyOutcomeSelected;
exports.getActiveCollectionId = getActiveCollectionId;
exports.getSelectedOutcomes = exports.getActiveChildren = exports.getActiveCollection = exports.getOutcomePickerState = exports.makeIsOutcomeSelected = exports.getExpandedIds = exports.getSelectedOutcomeIds = void 0;

var _immutable = require("immutable");

var _lodash = require("lodash");

var _reselect = require("reselect");

var _reReselect = _interopRequireDefault(require("re-reselect"));

var _selectors = require("../context/selectors");

var _selectors2 = require("../alignments/selectors");

// Deep compare objects to avoid rerendering when contents are the same
var customDeepComparisonSelector = (0, _reselect.createSelectorCreator)(_reselect.defaultMemoize, _lodash.isEqual);

function restrict(state, scope) {
  return state.getIn([scope, 'OutcomePicker']) || (0, _immutable.Map)();
}

function selectedOutcomeIds(state, scope) {
  return restrict(state, scope).get('selected');
}

var getSelectedOutcomeIds = (0, _reReselect.default)(selectedOutcomeIds, function (ids) {
  return ids ? ids.toJS() : [];
})(function (_state, scope) {
  return scope;
});
exports.getSelectedOutcomeIds = getSelectedOutcomeIds;

function getFocusedOutcome(state, scope) {
  return restrict(state, scope).get('focusedOutcome');
}

var getExpandedIds = (0, _reselect.createSelector)(function (state, scope) {
  return restrict(state, scope).get('expandedIds');
}, function (ids) {
  return ids ? ids.toJS() : [];
});
exports.getExpandedIds = getExpandedIds;
var makeIsOutcomeSelected = (0, _reReselect.default)(selectedOutcomeIds, function (selected) {
  return function (id) {
    return selected ? selected.has(id.toString()) : false;
  };
})(function (_state, scope) {
  return scope;
});
exports.makeIsOutcomeSelected = makeIsOutcomeSelected;

function anyOutcomeSelected(state, scope) {
  var ids = restrict(state, scope).get('selected');
  return ids ? !ids.isEmpty() : false;
}

function getActiveCollectionId(state, scope) {
  return restrict(state, scope).get('activeCollection') || '';
}

var getOutcomePickerState = function getOutcomePickerState(state, scope) {
  return restrict(state, scope).get('state');
};

exports.getOutcomePickerState = getOutcomePickerState;

var getActiveCollectionOutcome = function getActiveCollectionOutcome(state, scope) {
  var id = getActiveCollectionId(state, scope);
  return id ? (0, _selectors.getOutcome)(state, scope, id) : null;
};

var getActiveCollection = (0, _reReselect.default)(getActiveCollectionOutcome, function (state, scope) {
  var id = getActiveCollectionId(state, scope);
  return id ? (0, _selectors.makeGetOutcomeSummary)(state, scope)(id) : '';
}, function (outcome, summary) {
  return {
    header: outcome ? outcome.title : '',
    id: outcome ? outcome.id : '',
    description: outcome ? outcome.description : '',
    summary: summary
  };
})(getActiveCollectionId);
exports.getActiveCollection = getActiveCollection;
var getActiveChildren = (0, _reReselect.default)(function (state, scope) {
  var active = getActiveCollectionOutcome(state, scope);

  if (active && active.child_ids) {
    return active.child_ids.map(function (id) {
      return (0, _selectors.getOutcome)(state, scope, id);
    });
  }

  return [];
}, function (childOutcomes) {
  var _childOutcomes$reduce = childOutcomes.reduce(function (acc, val) {
    (0, _selectors.isGroup)(val) ? acc.groups.push(val) : acc.nonGroups.push(val);
    return acc;
  }, {
    groups: [],
    nonGroups: []
  }),
      groups = _childOutcomes$reduce.groups,
      nonGroups = _childOutcomes$reduce.nonGroups;

  return {
    groups: groups,
    nonGroups: nonGroups
  };
})(getActiveCollectionId, {
  selectorCreator: customDeepComparisonSelector
});
exports.getActiveChildren = getActiveChildren;
var getSelectedOutcomes = customDeepComparisonSelector(function (state, scope) {
  return getSelectedOutcomeIds(state, scope).map(function (id) {
    return (0, _selectors2.getAnyOutcome)(state, scope, id);
  });
}, function (outcomes) {
  return outcomes;
});
exports.getSelectedOutcomes = getSelectedOutcomes;
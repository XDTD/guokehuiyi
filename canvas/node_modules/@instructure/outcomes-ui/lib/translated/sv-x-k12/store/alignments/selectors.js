"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAlignedOutcomeCount = getAlignedOutcomeCount;
exports.getAnyOutcome = getAnyOutcome;
exports.getOutcomeAlignmentSetId = getOutcomeAlignmentSetId;
exports.makeIsOpen = exports.getAlignedOutcome = exports.getAlignedOutcomeIds = exports.getAlignedOutcomes = void 0;

var _immutable = require("immutable");

var _reselect = require("reselect");

var _reReselect = _interopRequireDefault(require("re-reselect"));

var _selectors = require("../context/selectors");

var restrict = function restrict(state, scope) {
  return state.getIn([scope, 'alignments']) || (0, _immutable.Map)();
};

var alignedOutcomes = function alignedOutcomes(state, scope) {
  return restrict(state, scope).get('alignedOutcomes') || (0, _immutable.List)();
};

var openAlignmentId = function openAlignmentId(state, scope) {
  return restrict(state, scope).get('openAlignmentId');
};

var getAlignedOutcomes = (0, _reReselect.default)(alignedOutcomes, function (alignedOutcomes) {
  return alignedOutcomes.toJS().sort(function (a, b) {
    var titleA = a && a.title || 'ZZZZZZZZZZZZ'; // treat null as really large

    var titleB = b && b.title || 'ZZZZZZZZZZZZ'; // treat null as really large

    return titleA.localeCompare(titleB);
  });
})(function (_state, scope) {
  return scope;
});
exports.getAlignedOutcomes = getAlignedOutcomes;
var getAlignedOutcomeIds = (0, _reselect.createSelector)(getAlignedOutcomes, function (outcomes) {
  return outcomes.map(function (o) {
    return o.id;
  });
});
exports.getAlignedOutcomeIds = getAlignedOutcomeIds;

function getAlignedOutcomeCount(state, scope) {
  if (state && restrict(state, scope).get('alignedOutcomes')) {
    return restrict(state, scope).get('alignedOutcomes').size;
  }

  return 0;
}

var getAlignedOutcome = (0, _reselect.createSelector)(function (state, scope, id) {
  return getAlignedOutcomes(state, scope).find(function (o) {
    return o.id === id;
  });
}, function (outcome) {
  return outcome;
});
exports.getAlignedOutcome = getAlignedOutcome;

function getAnyOutcome(state, scope, id) {
  return getAlignedOutcome(state, scope, id) || (0, _selectors.getOutcome)(state, scope, id);
}

function getOutcomeAlignmentSetId(state, scope) {
  return restrict(state, scope).get('alignmentSetId');
}

var makeIsOpen = (0, _reReselect.default)(openAlignmentId, function (openAlignments) {
  return function (id) {
    return openAlignments === id;
  };
})(function (_state, scope) {
  return scope;
});
exports.makeIsOpen = makeIsOpen;
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _chai = require("chai");

var _sinon = _interopRequireDefault(require("sinon"));

var _immutable = require("immutable");

var _constants = require("../../../constants");

var _createMockStore = _interopRequireWildcard(require("../../../test/createMockStore"));

var actions = _interopRequireWildcard(require("../actions"));

var _actions2 = require("../../../store/context/actions");

var scopedActions = (0, _createMockStore.scopeActions)((0, _objectSpread2.default)({}, actions, {
  setOutcomes: _actions2.setOutcomes
}));
describe('search/actions', function () {
  var state = (0, _immutable.fromJS)({
    scopeForTest: {
      config: {
        contextUuid: 'course_100'
      },
      OutcomePicker: {
        search: {
          searchText: 'abc',
          pagination: {
            page: 1,
            total: null
          },
          isLoading: true,
          entries: []
        }
      }
    }
  });
  describe('search updates', function () {
    var clock;
    var service = {
      getSearchResults: _sinon.default.stub().returns(Promise.resolve({}))
    };
    beforeEach(function () {
      clock = _sinon.default.useFakeTimers();
    });
    afterEach(function () {
      clock.restore();
      service.getSearchResults.resetHistory();
    });
    describe('updateSearchText', function () {
      it('handles search flow in the correct order', function () {
        var store = (0, _createMockStore.default)(state, service);
        store.dispatch(actions.updateSearchText('def'));
        (0, _chai.expect)(store.getActions()[0]).to.deep.equal(scopedActions.setSearchText('def'));
        (0, _chai.expect)(store.getActions()[1]).to.deep.equal(scopedActions.setSearchPage(1));
        (0, _chai.expect)(store.getActions()[2]).to.deep.equal(scopedActions.setSearchTotal(null));
        (0, _chai.expect)(store.getActions()[3]).to.deep.equal(scopedActions.setSearchLoading(true));
        (0, _chai.expect)(store.getActions()).to.have.length(4);
        clock.tick(250);
        (0, _chai.expect)(store.getActions()).to.have.length(5);
        (0, _chai.expect)(service.getSearchResults).to.have.been.called;
        (0, _chai.expect)(service.getSearchResults.getCall(0).args).to.include('def'); // text

        (0, _chai.expect)(service.getSearchResults.getCall(0).args).to.include(1); // page
      });
    });
    describe('updateSearchPage', function () {
      it('triggers a search action', function () {
        var store = (0, _createMockStore.default)(state, service);
        store.dispatch(actions.updateSearchPage(10));
        (0, _chai.expect)(store.getActions()[0]).to.deep.equal(scopedActions.setSearchLoading(true));
        (0, _chai.expect)(store.getActions()[1]).to.deep.equal(scopedActions.setSearchPage(10));
        (0, _chai.expect)(store.getActions()).to.have.length(2);
        clock.tick(250);
        (0, _chai.expect)(store.getActions()).to.have.length(3);
        (0, _chai.expect)(service.getSearchResults).to.have.been.called;
        (0, _chai.expect)(service.getSearchResults.getCall(0).args).to.include('abc'); // text

        (0, _chai.expect)(service.getSearchResults.getCall(0).args).to.include(10); // page
      });
    });
  });
  describe('setSearchText', function () {
    it('creates an action', function () {
      var action = actions.setSearchText('elephant');
      (0, _chai.expect)(action.type).to.equal(_constants.SET_SEARCH_TEXT);
      (0, _chai.expect)(action.payload).to.equal('elephant');
    });
  });
  describe('setSearchLoading', function () {
    it('creates an action', function () {
      var action = actions.setSearchLoading(true);
      (0, _chai.expect)(action.type).to.equal(_constants.SET_SEARCH_LOADING);
      (0, _chai.expect)(action.payload).to.equal(true);
    });
  });
  describe('setSearchEntries', function () {
    it('creates an action', function () {
      var action = actions.setSearchEntries([1, 2, 3]);
      (0, _chai.expect)(action.type).to.equal(_constants.SET_SEARCH_ENTRIES);
      (0, _chai.expect)(action.payload).to.eql([1, 2, 3]);
    });
  });
  describe('searchOutcomes', function () {
    var matches = [{
      id: '1'
    }];
    var outcomes = {
      course_100: {
        1: {
          id: '1'
        },
        2: {
          id: '2'
        }
      }
    };
    var response = {
      matches: matches,
      outcomes: outcomes['course_100'],
      total: 101
    };
    var service = {
      getSearchResults: function getSearchResults() {
        return new Promise(function (resolve) {
          return resolve(response);
        });
      }
    };
    it('handles search flow in the correct order', function () {
      var store = (0, _createMockStore.default)(state, service);
      return store.dispatch(actions.searchOutcomes('abc')).then(function () {
        (0, _chai.expect)(store.getActions()[1]).to.deep.equal(scopedActions.setOutcomes(outcomes));
        (0, _chai.expect)(store.getActions()[2]).to.deep.equal(scopedActions.setSearchEntries(matches));
        (0, _chai.expect)(store.getActions()[3]).to.deep.equal(scopedActions.setSearchTotal(101));
        (0, _chai.expect)(store.getActions()[4]).to.deep.equal(scopedActions.setSearchLoading(false));
      });
    });
    it('does not set search entries if search query does not match', function () {
      var store = (0, _createMockStore.default)(state, service);
      return store.dispatch(actions.searchOutcomes({
        text: 'something else'
      })).then(function () {
        (0, _chai.expect)(store.getActions().length).to.equal(1);
      });
    });
    it('does not set search entries if search page does not match', function () {
      var store = (0, _createMockStore.default)(state, service);
      return store.dispatch(actions.searchOutcomes({
        page: 12
      })).then(function () {
        (0, _chai.expect)(store.getActions().length).to.equal(1);
      });
    });
  });
});
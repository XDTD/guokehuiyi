"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadMoreOutcomes = exports.loadRootOutcomes = exports.loadContext = exports.setScoringMethod = exports.setError = exports.setRootOutcomeIds = exports.setOutcomes = exports.setContext = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reduxActions = require("redux-actions");

var _reduxServiceMiddleware = require("@instructure/redux-service-middleware");

var _constants = require("../../constants");

var _selectors = require("./selectors");

var _selectors2 = require("../config/selectors");

var setContext = (0, _reduxActions.createAction)(_constants.SET_CONTEXT);
exports.setContext = setContext;
var setOutcomes = (0, _reduxActions.createAction)(_constants.SET_OUTCOMES);
exports.setOutcomes = setOutcomes;
var setRootOutcomeIds = (0, _reduxActions.createAction)(_constants.SET_ROOT_OUTCOME_IDS);
exports.setRootOutcomeIds = setRootOutcomeIds;
var setError = (0, _reduxActions.createAction)(_constants.SET_ERROR);
exports.setError = setError;
var setScoringMethod = (0, _reduxActions.createAction)(_constants.SET_SCORING_METHOD);
exports.setScoringMethod = setScoringMethod;

var loadContext = function loadContext(host, jwt, contextUuid) {
  return function (dispatch, getState) {
    if ((0, _selectors.getContext)(getState(), contextUuid)) {
      return Promise.resolve();
    }

    dispatch(setContext((0, _defineProperty2.default)({}, contextUuid, {
      loading: true
    })));
    return dispatch({
      type: _reduxServiceMiddleware.CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'getContext',
        args: [host, jwt, contextUuid]
      }
    }).then(function (json) {
      return dispatch(setContext((0, _defineProperty2.default)({}, contextUuid, {
        loading: false,
        data: json
      })));
    }).catch(function (e) {
      return dispatch(setError(e));
    });
  };
};

exports.loadContext = loadContext;

var loadRootOutcomes = function loadRootOutcomes() {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig = (0, _selectors2.getConfig)(getState(), scope),
        contextUuid = _getConfig.contextUuid;

    if ((0, _selectors.hasRootOutcomes)(getState(), scope)) {
      return Promise.resolve();
    }

    return dispatch(loadOutcomes(null)).then(function (json) {
      Object.assign(json.outcomes, {
        root: {
          id: 'root',
          title: "Hjem",
          description: "Hjemmegrupper og resultater",
          child_ids: json.root_ids.map(function (id) {
            return id.toString();
          })
        }
      });
      dispatch(setOutcomes((0, _defineProperty2.default)({}, contextUuid, json.outcomes)));
      dispatch(setRootOutcomeIds((0, _defineProperty2.default)({}, contextUuid, json.root_ids)));
      return Promise.resolve();
    }).catch(function (e) {
      dispatch(setError(e));
    });
  };
};

exports.loadRootOutcomes = loadRootOutcomes;

var loadMoreOutcomes = function loadMoreOutcomes(id) {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig2 = (0, _selectors2.getConfig)(getState(), scope),
        contextUuid = _getConfig2.contextUuid;

    var idsToLoad = (0, _selectors.getChildrenToLoad)(getState(), scope, id);

    if (idsToLoad.length === 0) {
      return Promise.resolve();
    }

    return dispatch(loadOutcomes(idsToLoad)).then(function (json) {
      dispatch(setOutcomes((0, _defineProperty2.default)({}, contextUuid, json.outcomes)));
      return Promise.resolve();
    }).catch(function (e) {
      dispatch(setError(e));
    });
  };
};

exports.loadMoreOutcomes = loadMoreOutcomes;

var loadOutcomes = function loadOutcomes(ids) {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig3 = (0, _selectors2.getConfig)(getState(), scope),
        host = _getConfig3.host,
        jwt = _getConfig3.jwt,
        contextUuid = _getConfig3.contextUuid;

    return dispatch({
      type: _reduxServiceMiddleware.CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'loadOutcomes',
        args: [host, jwt, contextUuid, ids]
      }
    }).then(function (json) {
      return Promise.resolve(json);
    });
  };
};
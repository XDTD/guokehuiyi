"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _chai = require("chai");

var _immutable = require("immutable");

var _sinon = _interopRequireDefault(require("sinon"));

var _constants = require("../../../constants");

var _createMockStore = _interopRequireWildcard(require("../../../test/createMockStore"));

var actions = _interopRequireWildcard(require("../actions"));

var _actions2 = require("../../../store/context/actions");

var _actions3 = require("../../alignments/actions");

var _actions4 = require("../../activePicker/actions");

var _arguments = arguments;
var scopedActions = (0, _createMockStore.scopeActions)((0, _objectSpread2.default)({}, actions, {
  setError: _actions2.setError,
  setScoringMethod: _actions2.setScoringMethod,
  setAlignments: _actions3.setAlignments,
  setScope: _actions4.setScope
}));
describe('OutcomePicker/actions', function () {
  describe('selectOutcomeIds', function () {
    it('creates an action', function () {
      var action = actions.selectOutcomeIds([1, 2, 3]);
      (0, _chai.expect)(action.type).to.equal(_constants.SELECT_OUTCOME_IDS);
      (0, _chai.expect)(action.payload).to.deep.equal([1, 2, 3]);
    });
  });
  describe('deselectOutcomeIds', function () {
    it('creates an action', function () {
      var action = actions.deselectOutcomeIds([1, 2]);
      (0, _chai.expect)(action.type).to.equal(_constants.UNSELECT_OUTCOME_IDS);
      (0, _chai.expect)(action.payload).to.deep.equal([1, 2]);
    });
  });
  describe('setSelectedOutcomeIds', function () {
    it('creates an action', function () {
      var action = actions.setSelectedOutcomeIds([1, 2, 3]);
      (0, _chai.expect)(action.type).to.equal(_constants.SET_SELECTED_OUTCOME_IDS);
      (0, _chai.expect)(action.payload).to.deep.equal([1, 2, 3]);
    });
  });
  describe('setOutcomePickerState', function () {
    it('creates an action', function () {
      var action = actions.setOutcomePickerState('foo');
      (0, _chai.expect)(action.type).to.equal(_constants.SET_OUTCOME_PICKER_STATE);
      (0, _chai.expect)(action.payload).to.deep.equal('foo');
    });
  });
  describe('loadOutcomePicker', function () {
    it('dispatches state change to loading', function () {
      var store = (0, _createMockStore.default)();
      return store.dispatch(actions.loadOutcomePicker()).then(function () {
        (0, _chai.expect)(store.getActions()[0]).to.deep.equal(scopedActions.setOutcomePickerState('loading'));
      });
    });
    it('dispatches loadOutcomes', function () {
      var service = {
        loadOutcomes: _sinon.default.stub().returns(Promise.resolve({}))
      };
      var store = (0, _createMockStore.default)((0, _immutable.Map)(), service);
      return store.dispatch(actions.loadOutcomePicker()).then(function () {
        (0, _chai.expect)(service.loadOutcomes.calledOnce).to.be.true;
        (0, _chai.expect)(service.loadOutcomes.args[0][3]).to.be.null;
      });
    });
    it('dispatches set selected outcome ids', function () {
      var state = (0, _immutable.fromJS)({
        scopeForTest: {
          alignments: {
            alignedOutcomes: [{
              id: '101'
            }, {
              id: '202'
            }]
          }
        }
      });
      var store = (0, _createMockStore.default)(state);
      return store.dispatch(actions.loadOutcomePicker()).then(function () {
        (0, _chai.expect)(store.getActions()).to.deep.include(scopedActions.setSelectedOutcomeIds(['101', '202']));
      });
    });
    it('dispatches state change to choosing', function () {
      var store = (0, _createMockStore.default)();
      return store.dispatch(actions.loadOutcomePicker()).then(function () {
        (0, _chai.expect)(store.getActions()).to.deep.include(scopedActions.setOutcomePickerState('choosing'));
      });
    });
  });
  describe('setActiveCollection', function () {
    it('sets the underlying collection id', function () {
      var store = (0, _createMockStore.default)();
      return store.dispatch(actions.setActiveCollection(12)).then(function () {
        (0, _chai.expect)(store.getActions()).to.deep.include(scopedActions.setActiveCollectionFrd(12));
      });
    });
    it('calls loadMoreOutcomes', function () {
      var service = {
        loadOutcomes: _sinon.default.stub().returns(Promise.resolve({}))
      };
      var store = (0, _createMockStore.default)((0, _immutable.Map)(), service);
      return store.dispatch(actions.setActiveCollection(12)).then(function () {
        (0, _chai.expect)(service.loadOutcomes.calledOnce).to.be.true;
        (0, _chai.expect)(service.loadOutcomes.args[0][3]).to.deep.equal([12]);
      });
    });
  });
  describe('setFocusedOutcome', function () {
    it('dispatches setFocusedOutcomeAction', function () {
      var service = {
        setFocusedOutcome: _sinon.default.stub().returns(Promise.resolve())
      };
      var store = (0, _createMockStore.default)((0, _immutable.Map)(), service);
      var full = {
        id: 1,
        scoring_method: {}
      };
      return store.dispatch(actions.setFocusedOutcome(full)).then(function () {
        (0, _chai.expect)(store.getActions()).to.have.length(1);
        (0, _chai.expect)(store.getActions()[0]).to.deep.equal(scopedActions.setFocusedOutcomeAction(full));
        return null;
      });
    });
    it('fetches an outcome and dispatches setFocusedOutcomeAction twice', function () {
      var full = {
        id: 1,
        scoring_method: {}
      };
      var service = {
        getOutcome: _sinon.default.stub().returns(Promise.resolve(full)),
        setFocusedOutcome: _sinon.default.stub().returns(Promise.resolve())
      };
      var store = (0, _createMockStore.default)((0, _immutable.Map)(), service);
      var partial = {
        id: 1
      };
      return store.dispatch(actions.setFocusedOutcome(partial)).then(function () {
        (0, _chai.expect)(store.getActions()).to.have.length(4);
        (0, _chai.expect)(store.getActions()[0]).to.deep.equal(scopedActions.setFocusedOutcomeAction(partial));
        (0, _chai.expect)(store.getActions()[2]).to.deep.equal(scopedActions.setScoringMethod({
          context_uuid: void 0,
          id: 1,
          scoring_method: {}
        }));
        (0, _chai.expect)(store.getActions()[3]).to.deep.equal(scopedActions.setFocusedOutcomeAction(full));
        return null;
      });
    });
  });
  describe('saveOutcomePickerAlignments', function () {
    var state = (0, _immutable.fromJS)({
      context: {
        outcomes: {
          course_100: {
            1: {
              id: '1'
            },
            2: {
              id: '2'
            }
          }
        }
      },
      scopeForTest: {
        config: {
          contextUuid: 'course_100'
        },
        OutcomePicker: {
          selected: ['1', '2'],
          scope: 'scopeForTest'
        }
      }
    });
    it('wraps its calls in setOutcomePickerState', function () {
      var store = (0, _createMockStore.default)(state);
      return store.dispatch(actions.saveOutcomePickerAlignments()).then(function () {
        (0, _chai.expect)(store.getActions()[0]).to.deep.equal(scopedActions.setOutcomePickerState('saving'));
        (0, _chai.expect)(store.getActions()).to.deep.include(scopedActions.setAlignments({
          guid: 'newguid',
          outcomes: [{
            id: '1'
          }, {
            id: '2'
          }]
        }));
        (0, _chai.expect)(store.getActions()[store.getActions().length - 1]).to.deep.equal(scopedActions.setOutcomePickerState('complete'));
      });
    });
    it('fires an updateCallback function if provided', function () {
      var store = (0, _createMockStore.default)(state);

      var callback = _sinon.default.stub().returns(_arguments);

      return store.dispatch(actions.saveOutcomePickerAlignments(callback)).then(function () {
        (0, _chai.expect)(callback.calledOnce).to.be.true;
        (0, _chai.expect)(callback.calledWith({
          guid: 'newguid',
          outcomes: [{
            id: '1'
          }, {
            id: '2'
          }]
        })).to.be.true;
      });
    });
    it('creates alignment set from selection', function () {
      var newState = state.setIn(['OutcomePicker', 'selected'], (0, _immutable.List)(['1', '2', '3']));
      var service = {
        createAlignmentSet: _sinon.default.stub().returns(Promise.resolve())
      };
      var store = (0, _createMockStore.default)(newState, service);
      return store.dispatch(actions.saveOutcomePickerAlignments()).then(function () {
        (0, _chai.expect)(service.createAlignmentSet.calledOnce).to.be.true;
        (0, _chai.expect)(service.createAlignmentSet.calledWith(['1', '2', '3']));
      });
    });
    it('can pull aligned outcomes from previously aligned outcomes', function () {
      var newState = state.deleteIn(['context', 'outcomes', 'course_100', '1']).setIn(['alignments', 'alignedOutcomes'], (0, _immutable.fromJS)([{
        id: '1'
      }]));
      var service = {
        createAlignmentSet: _sinon.default.stub().returns(Promise.resolve())
      };
      var store = (0, _createMockStore.default)(newState, service);
      return store.dispatch(actions.saveOutcomePickerAlignments()).then(function () {
        (0, _chai.expect)(service.createAlignmentSet.calledWith(['1', '2']));
      });
    });
    it('dispatches setError on save alignments failure', function () {
      var error = {
        message: 'foo bar baz'
      };
      var service = {
        createAlignmentSet: _sinon.default.stub().returns(Promise.reject(error))
      };
      var store = (0, _createMockStore.default)((0, _immutable.Map)(), service);
      return store.dispatch(actions.saveOutcomePickerAlignments()).then(function () {
        (0, _chai.expect)(store.getActions()).to.have.length(3);
        (0, _chai.expect)(store.getActions()[2]).to.deep.equal(scopedActions.setError(error));
        return null;
      });
    });
    it('calls upsertArtifact if shouldUpdateArtifact is true', function () {
      var service = {
        upsertArtifact: _sinon.default.stub().returns(Promise.resolve({
          guid: 'guid-1',
          outcomes: ['1', '2']
        }))
      };
      var store = (0, _createMockStore.default)(state, service);
      return store.dispatch(actions.saveOutcomePickerAlignments(null, true)).then(function () {
        (0, _chai.expect)(service.upsertArtifact.calledWith(['1', '2']));
        (0, _chai.expect)(store.getActions()).to.deep.include(scopedActions.setAlignments({
          guid: 'guid-1',
          outcomes: [{
            id: '1'
          }, {
            id: '2'
          }]
        }));
        (0, _chai.expect)(store.getActions()[store.getActions().length - 1]).to.deep.equal(scopedActions.setOutcomePickerState('complete'));
      });
    });
  });
  describe('resetOutcomePicker', function () {
    it('creates an action', function () {
      var action = actions.resetOutcomePicker();
      (0, _chai.expect)(action.type).to.equal(_constants.RESET_OUTCOME_PICKER);
    });
  });
  describe('openOutcomePicker', function () {
    it('dispatches flow in the correct order', function () {
      var store = (0, _createMockStore.default)();
      store.dispatch(actions.openOutcomePicker());
      (0, _chai.expect)(store.getActions()[0]).to.deep.equal(scopedActions.setScope('scopeForTest'));
      (0, _chai.expect)(store.getActions()[1]).to.deep.equal(scopedActions.setOutcomePickerState('loading'));
      (0, _chai.expect)(store.getActions()).to.have.length(2);
    });
    it('does not try to open an already open picker', function () {
      var state = (0, _immutable.fromJS)({
        scopeForTest: {
          config: {
            contextUuid: 'course_100'
          },
          OutcomePicker: {
            scope: 'scopeForTest',
            state: 'choosing'
          }
        }
      });
      var store = (0, _createMockStore.default)(state);
      store.dispatch(actions.openOutcomePicker());
      (0, _chai.expect)(store.getActions()).to.have.length(0);
    });
  });
  describe('closeOutcomePicker', function () {
    it('dispatches flow in the correct order', function () {
      var store = (0, _createMockStore.default)();
      store.dispatch(actions.closeOutcomePicker());
      (0, _chai.expect)(store.getActions()[0]).to.deep.equal(scopedActions.setScope(''));
      (0, _chai.expect)(store.getActions()[1]).to.deep.equal(scopedActions.setOutcomePickerState('closed'));
      (0, _chai.expect)(store.getActions()).to.have.length(2);
    });
  });
});
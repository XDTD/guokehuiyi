"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _chai = require("chai");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("../index"));

var _MasteryCounts = _interopRequireDefault(require("../MasteryCounts"));

var _MasteryDescription = _interopRequireDefault(require("../MasteryDescription"));

var _ScoringTiers = _interopRequireDefault(require("../ScoringTiers"));

var _checkA11y = _interopRequireDefault(require("../../../test/checkA11y"));

var sharedSpecs = function sharedSpecs(makeProps) {
  it('includes the title and description', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));
    var text = wrapper.text();
    (0, _chai.expect)(text).to.match(/The rain in spain stays mainly\.\.\./);
    (0, _chai.expect)(text).to.match(/My description/);
  });
  it('sanitizes the description', function () {
    var props = makeProps({
      description: 'The <blink>rain in Spain'
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    (0, _chai.expect)(wrapper.html()).to.include('</blink>');
  });
  it('includes counts if outcome result is defined', function () {
    var props = makeProps({
      outcomeResult: {
        count: 100,
        masteryCount: 50
      }
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find(_MasteryCounts.default)).to.have.length(1);
  });
  it('does not display scoring tiers if tiers not defined', function () {
    var props = makeProps({
      scoringTiers: null
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find(_ScoringTiers.default)).to.have.length(0);
  });
  it('meets a11y standards', function () {
    return (0, _checkA11y.default)(_react.default.createElement(_index.default, makeProps()));
  });
};

describe('OutcomeView', function () {
  var scoringMethod = {
    id: 1,
    description: 'Some Method',
    points_possible: 5,
    mastery_percent: 0.6,
    algorithm: 'highest',
    algorithm_data: {}
  };
  var defaultProps = {
    description: 'My description',
    label: 'Foo',
    title: 'The rain in spain stays mainly...',
    scoringMethod: scoringMethod,
    scoringTiers: [{
      id: 1,
      description: 'Cri 1',
      percent: 1.0
    }, {
      id: 2,
      description: 'Cri 2',
      percent: 0.6
    }, {
      id: 3,
      description: 'Cri 3',
      percent: 0.22222222
    }]
  };

  var makeProps = function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return (0, _objectSpread2.default)({}, defaultProps, {}, props);
  };

  sharedSpecs(makeProps);
  describe('context without proficiency data', function () {
    sharedSpecs(function () {
      var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      return makeProps((0, _objectSpread2.default)({
        context: {
          id: 1
        }
      }, props));
    });
  });
  it('does not include counts if outcome result not defined', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find(_MasteryCounts.default)).to.have.length(0);
  });
  it('renders mastery description if displayMasteryDescription is true and no artifactTypeName provided', function () {
    var props = makeProps({
      displayMasteryDescription: true
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    var scoreMastery = wrapper.find(_MasteryDescription.default);
    (0, _chai.expect)(scoreMastery.length).to.equal(1);
  });
  it('does not render mastery description if displayMasteryDescription is false', function () {
    var props = makeProps({
      displayMasteryDescription: false
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    var scoreMastery = wrapper.find(_MasteryDescription.default);
    (0, _chai.expect)(scoreMastery.length).to.equal(0);
  });
  it('displays scoring tiers if scoring method and tiers defined', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find(_ScoringTiers.default)).to.have.length(1);
  });
  describe('with context configured with proficiency', function () {
    var context = {
      id: 1,
      outcome_proficiency: {
        outcome_proficiency_ratings: [{
          color: 'FF00FF',
          mastery: false,
          points: 5.0,
          description: 'Exceeds Expectations'
        }, {
          color: 'FF00FF',
          mastery: true,
          points: 3.0,
          description: 'Meets Expectations.'
        }, {
          color: 'FF00FF',
          mastery: false,
          points: 0.0,
          description: 'Does Not Meet Expectations'
        }]
      },
      outcome_calculation_method: {
        calculation_method: 'highest',
        calculation_int: null
      }
    };

    var runWithContextSpecs = function runWithContextSpecs(makeProps) {
      sharedSpecs(makeProps);
      it('does not render mastery description if displayMasteryDescription is true and no artifactTypeName provided', function () {
        var props = makeProps({
          displayMasteryDescription: true
        });
        var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
          disableLifecycleMethods: true
        });
        var scoreMastery = wrapper.find(_MasteryDescription.default);
        (0, _chai.expect)(scoreMastery.length).to.equal(0);
      });
      it('does not display scoring tiers', function () {
        var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
          disableLifecycleMethods: true
        });
        (0, _chai.expect)(wrapper.find(_ScoringTiers.default)).to.have.length(0);
      });
      it('displays scoring tiers if outcomeResult is defined', function () {
        var props = makeProps({
          outcomeResult: {
            count: 100,
            masteryCount: 50
          }
        });
        var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
          disableLifecycleMethods: true
        });
        (0, _chai.expect)(wrapper.find(_ScoringTiers.default)).to.have.length(1);
      });
      it('passes prop.scoringTiers to <ScoringTiers /> if defined', function () {
        var props = makeProps({
          outcomeResult: {
            count: 100,
            masteryCount: 50
          },
          scoringTiers: defaultProps.scoringTiers
        });
        var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
          disableLifecycleMethods: true
        });
        (0, _chai.expect)(wrapper.find(_ScoringTiers.default).prop('scoringTiers')).to.deep.equal(defaultProps.scoringTiers);
      });
      it('renders mastery description if displayMasteryDescription is true, no artifactTypeName provided and outcomeResult defined', function () {
        var props = makeProps({
          displayMasteryDescription: true,
          outcomeResult: {
            count: 100,
            masteryCount: 50
          }
        });
        var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
          disableLifecycleMethods: true
        });
        var scoreMastery = wrapper.find(_MasteryDescription.default);
        (0, _chai.expect)(scoreMastery.length).to.equal(1);
      });
    };

    describe('without scoringTiers and scoringMethod from props', function () {
      runWithContextSpecs(function () {
        var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        return makeProps((0, _objectSpread2.default)({
          context: context,
          scoringTiers: null,
          scoringMethod: null
        }, props));
      });
    });
    describe('with scoringTiers and scoringMethod from props', function () {
      runWithContextSpecs(function () {
        var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        return makeProps((0, _objectSpread2.default)({
          context: context
        }, props));
      });
    });
  });
});
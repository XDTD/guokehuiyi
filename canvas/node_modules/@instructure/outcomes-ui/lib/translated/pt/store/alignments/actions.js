"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.upsertArtifact = exports.loadArtifact = exports.clearAlignmentSet = exports.createAlignmentSet = exports.removeAlignment = exports.loadAlignments = exports.updateAlignments = exports.viewAlignment = exports.updateAlignment = exports.closeAlignment = exports.viewAlignmentAction = exports.setAlignments = void 0;

var _reduxActions = require("redux-actions");

var _reduxServiceMiddleware = require("@instructure/redux-service-middleware");

var _constants = require("../../constants");

var _selectors = require("./selectors");

var _selectors2 = require("../config/selectors");

var _actions = require("../context/actions");

/*
 * action creators
 */
var setAlignments = (0, _reduxActions.createAction)(_constants.SET_ALIGNMENTS);
exports.setAlignments = setAlignments;
var viewAlignmentAction = (0, _reduxActions.createAction)(_constants.VIEW_ALIGNMENT);
exports.viewAlignmentAction = viewAlignmentAction;
var closeAlignment = (0, _reduxActions.createAction)(_constants.CLOSE_ALIGNMENT);
exports.closeAlignment = closeAlignment;
var updateAlignment = (0, _reduxActions.createAction)(_constants.UPDATE_ALIGNMENT);
exports.updateAlignment = updateAlignment;

var viewAlignment = function viewAlignment(outcomeId) {
  return function (dispatch, getState, _arg, scope) {
    var outcome = (0, _selectors.getAlignedOutcome)(getState(), scope, outcomeId);
    dispatch(viewAlignmentAction(outcomeId));

    if (outcome && outcome.scoring_method) {
      return Promise.resolve();
    }

    var _getConfig = (0, _selectors2.getConfig)(getState(), scope),
        host = _getConfig.host,
        jwt = _getConfig.jwt;

    return dispatch({
      type: _reduxServiceMiddleware.CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'getOutcome',
        args: [host, jwt, outcomeId]
      }
    }).then(function (json) {
      return dispatch(updateAlignment({
        outcome: json
      }));
    });
  };
};

exports.viewAlignment = viewAlignment;

var updateAlignments = function updateAlignments(guid, outcomes, updateCallback) {
  return function (dispatch) {
    dispatch(setAlignments({
      guid: guid,
      outcomes: outcomes
    }));

    if (updateCallback) {
      updateCallback({
        guid: guid,
        outcomes: outcomes
      });
    }

    return Promise.resolve();
  };
};

exports.updateAlignments = updateAlignments;

var loadAlignments = function loadAlignments(alignmentSetId, updateCallback) {
  return function (dispatch, getState, _arg, scope) {
    if (alignmentSetId && (0, _selectors.getOutcomeAlignmentSetId)(getState(), scope) === alignmentSetId) {
      return Promise.resolve();
    }

    var _getConfig2 = (0, _selectors2.getConfig)(getState(), scope),
        host = _getConfig2.host,
        jwt = _getConfig2.jwt;

    return dispatch(clearAlignmentSet()).then(function () {
      return dispatch({
        type: _reduxServiceMiddleware.CALL_SERVICE,
        payload: {
          service: 'outcomes',
          method: 'getAlignments',
          args: [host, jwt, alignmentSetId]
        }
      });
    }).then(function (json) {
      return dispatch(updateAlignments(json.guid, json.outcomes, updateCallback));
    }).catch(function (e) {
      return dispatch((0, _actions.setError)(e));
    });
  };
};

exports.loadAlignments = loadAlignments;

var removeAlignment = function removeAlignment(alignmentId, updateCallback) {
  var shouldUpdateArtifact = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  return function (dispatch, getState, _arg, scope) {
    var newIds = (0, _selectors.getAlignedOutcomeIds)(getState(), scope).filter(function (id) {
      return id !== alignmentId;
    });

    if (newIds.length === 0 && !shouldUpdateArtifact) {
      return dispatch(clearAlignmentSet(updateCallback));
    }

    var updateAlignmentFunc = shouldUpdateArtifact ? upsertArtifact : createAlignmentSet;
    return dispatch(updateAlignmentFunc(newIds)).then(function (response) {
      var newOutcomes = newIds.map(function (id) {
        return (0, _selectors.getAlignedOutcome)(getState(), scope, id);
      });
      dispatch(updateAlignments(response.guid, newOutcomes, updateCallback));
    }).catch(function (e) {
      return dispatch((0, _actions.setError)(e));
    });
  };
};

exports.removeAlignment = removeAlignment;

var createAlignmentSet = function createAlignmentSet(outcomeIds) {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig3 = (0, _selectors2.getConfig)(getState(), scope),
        host = _getConfig3.host,
        jwt = _getConfig3.jwt;

    return dispatch({
      type: _reduxServiceMiddleware.CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'createAlignmentSet',
        args: [host, jwt, outcomeIds]
      }
    });
  };
};

exports.createAlignmentSet = createAlignmentSet;

var clearAlignmentSet = function clearAlignmentSet(updateCallback) {
  return function (dispatch) {
    dispatch(updateAlignments(null, [], updateCallback));
    return Promise.resolve();
  };
};

exports.clearAlignmentSet = clearAlignmentSet;

var loadArtifact = function loadArtifact() {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig4 = (0, _selectors2.getConfig)(getState(), scope),
        host = _getConfig4.host,
        jwt = _getConfig4.jwt,
        artifactType = _getConfig4.artifactType,
        artifactId = _getConfig4.artifactId;

    return dispatch(clearAlignmentSet()).then(function () {
      return dispatch({
        type: _reduxServiceMiddleware.CALL_SERVICE,
        payload: {
          service: 'outcomes',
          method: 'getArtifact',
          args: [host, jwt, artifactType, artifactId]
        }
      });
    }).then(function (json) {
      return dispatch(updateAlignments(json.guid, json.outcomes));
    }).catch(function (e) {
      return dispatch((0, _actions.setError)(e));
    });
  };
};

exports.loadArtifact = loadArtifact;

var upsertArtifact = function upsertArtifact(outcomeIds) {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig5 = (0, _selectors2.getConfig)(getState(), scope),
        host = _getConfig5.host,
        jwt = _getConfig5.jwt,
        artifactType = _getConfig5.artifactType,
        artifactId = _getConfig5.artifactId,
        contextUuid = _getConfig5.contextUuid;

    return dispatch({
      type: _reduxServiceMiddleware.CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'upsertArtifact',
        args: [host, jwt, artifactType, artifactId, contextUuid, outcomeIds]
      }
    });
  };
};

exports.upsertArtifact = upsertArtifact;
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _multireducer = require("multireducer");

var _reactRedux = require("react-redux");

var contextActions = _interopRequireWildcard(require("../store/context/actions"));

var activePickerActions = _interopRequireWildcard(require("../store/activePicker/actions"));

var searchActions = _interopRequireWildcard(require("../store/search/actions"));

var outcomePickerActions = _interopRequireWildcard(require("../store/OutcomePicker/actions"));

var trayActions = _interopRequireWildcard(require("../store/OutcomeTray/actions"));

var _selectors = require("../store/search/selectors");

var _selectors2 = require("../store/OutcomePicker/selectors");

var _selectors3 = require("../store/OutcomeTray/selectors");

var _OutcomeTray = _interopRequireDefault(require("../components/OutcomeTray"));

var _selectors4 = require("../store/activePicker/selectors");

function mapStateToProps(state, ownProps) {
  var scope = ownProps.scope;
  return {
    searchText: (0, _selectors.getSearchText)(state, scope),
    isSearchLoading: (0, _selectors.getIsSearchLoading)(state, scope),
    searchEntries: (0, _selectors.getSearchEntries)(state, scope),
    searchPage: (0, _selectors.getSearchPage)(state, scope),
    searchTotal: (0, _selectors.getSearchTotal)(state, scope),
    isOpen: (0, _selectors4.isOpen)(state, scope),
    isFetching: (0, _selectors2.getOutcomePickerState)(state, scope) === 'loading',
    selectedOutcomeIds: (0, _selectors2.getSelectedOutcomeIds)(state, scope),
    isOutcomeSelected: (0, _selectors2.makeIsOutcomeSelected)(state, scope),
    outcomes: (0, _selectors3.getOutcomeList)(state, scope),
    listPage: (0, _selectors3.getListPage)(state, scope),
    listTotal: (0, _selectors3.getListTotal)(state, scope),
    focusedOutcome: (0, _selectors2.getFocusedOutcome)(state, scope)
  };
}

function mapDispatchToProps(dispatch, ownProps) {
  var screenreaderNotification = ownProps.screenreaderNotification,
      scope = ownProps.scope;
  return (0, _objectSpread2.default)({}, (0, _multireducer.bindActionCreators)(outcomePickerActions, dispatch, scope), {}, (0, _multireducer.bindActionCreators)(activePickerActions, dispatch), {}, (0, _multireducer.bindActionCreators)(contextActions, dispatch, scope), {}, (0, _multireducer.bindActionCreators)(searchActions, dispatch, scope), {}, (0, _multireducer.bindActionCreators)(trayActions, dispatch, scope), {
    screenreaderNotification: screenreaderNotification
  });
}

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_OutcomeTray.default);

exports.default = _default;
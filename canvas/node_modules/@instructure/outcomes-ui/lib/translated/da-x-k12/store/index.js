"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeScope = makeScope;
exports.makeUserScope = makeUserScope;
exports.getStore = getStore;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _redux = require("redux");

var _reduxImmutable = require("redux-immutable");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _reduxLogger = require("redux-logger");

var _reduxServiceMiddleware = _interopRequireDefault(require("@instructure/redux-service-middleware"));

var _immutable = _interopRequireDefault(require("multireducer/immutable"));

var _OutcomesService = _interopRequireDefault(require("../services/OutcomesService"));

var _reducers = _interopRequireDefault(require("./context/reducers"));

var _reducers2 = _interopRequireDefault(require("./config/reducers"));

var _actions = require("./features/actions");

var _actions2 = require("./context/actions");

var _reducers3 = _interopRequireDefault(require("./features/reducers"));

var _reducers4 = _interopRequireDefault(require("./OutcomePicker/reducers"));

var _reducers5 = _interopRequireDefault(require("./alignments/reducers"));

var _reducers6 = _interopRequireDefault(require("./report/reducers"));

var _reducers7 = _interopRequireDefault(require("./activePicker/reducers"));

/**
 * The outcomes redux store is shared between components on a page.
 * The shape has the form:
 *    OutcomePicker:
 *    context:
 *    quiz:::99:
 *      alignments
 *    question:::100:
 *      alignments
 *    ...
 *
 * When a new component retrieves the store using getStore,
 * its scope (artifactType:::artifactId) is added to the
 * store's shape via `dynamicReducers` if necessary.
 */
function makeScope(artifactType, artifactId) {
  return "".concat(artifactType, ":::").concat(artifactId);
}

function makeUserScope(artifactType, artifactId, userUuid) {
  if (userUuid === null) {
    return null;
  }

  return "user::".concat(artifactType, ":").concat(artifactId, ":").concat(userUuid);
}

var dynamicReducers = {};

function createRootReducer() {
  return (0, _reduxImmutable.combineReducers)((0, _objectSpread2.default)({
    context: _reducers.default,
    features: _reducers3.default,
    activePicker: _reducers7.default
  }, dynamicReducers));
}

function createStore() {
  var loggerMiddleware = (0, _reduxLogger.createLogger)({
    stateTransformer: function stateTransformer(state) {
      return state.toJS();
    }
  });
  var services = (0, _reduxServiceMiddleware.default)({
    outcomes: new _OutcomesService.default()
  });
  var compose = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
  var dev = process.env.NODE_ENV === 'development';
  var devMiddleware = (0, _redux.applyMiddleware)(_reduxThunk.default, loggerMiddleware, services);
  var prodMiddleware = (0, _redux.applyMiddleware)(_reduxThunk.default, services);
  var middleware = dev ? devMiddleware : prodMiddleware;
  return (0, _redux.createStore)(createRootReducer(), void 0, compose(middleware));
}

function addScopeToStore(store, key, host, jwt, contextUuid, artifactType, artifactId) {
  if (!dynamicReducers[key]) {
    dynamicReducers[key] = (0, _immutable.default)((0, _reduxImmutable.combineReducers)({
      // eslint-disable-line immutable/no-mutation
      config: (0, _reducers2.default)({
        host: host,
        jwt: jwt,
        contextUuid: contextUuid,
        artifactType: artifactType,
        artifactId: artifactId
      }),
      alignments: _reducers5.default,
      report: _reducers6.default,
      OutcomePicker: _reducers4.default
    }), key);
    store.replaceReducer(createRootReducer());
  }

  return store;
}

function initializeStore(store, _ref) {
  var host = _ref.host,
      jwt = _ref.jwt;
  store.dispatch((0, _actions.loadFeatures)(host, jwt));
}

var store = null;

function getStore(host, jwt, key, contextUuid, artifactType, artifactId) {
  if (!store) {
    store = createStore();
    initializeStore(store, {
      host: host,
      jwt: jwt
    });
  }

  store.dispatch((0, _actions2.loadContext)(host, jwt, contextUuid));
  addScopeToStore(store, key, host, jwt, contextUuid, artifactType, artifactId);
  return store;
}
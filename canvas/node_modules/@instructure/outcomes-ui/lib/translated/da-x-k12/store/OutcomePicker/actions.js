"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.closeOutcomePicker = exports.openOutcomePicker = exports.saveOutcomePickerAlignments = exports.setFocusedOutcome = exports.setActiveCollection = exports.loadOutcomePicker = exports.resetOutcomePicker = exports.toggleExpandedIds = exports.setFocusedOutcomeAction = exports.setActiveCollectionFrd = exports.setOutcomePickerState = exports.setSelectedOutcomeIds = exports.deselectOutcomeIds = exports.selectOutcomeIds = void 0;

var _reduxActions = require("redux-actions");

var _reduxServiceMiddleware = require("@instructure/redux-service-middleware");

var _selectors = require("../config/selectors");

var _constants = require("../../constants");

var _actions = require("../context/actions");

var _selectors2 = require("../alignments/selectors");

var _selectors3 = require("./selectors");

var _actions2 = require("../alignments/actions");

var _actions3 = require("../activePicker/actions");

var selectOutcomeIds = (0, _reduxActions.createAction)(_constants.SELECT_OUTCOME_IDS);
exports.selectOutcomeIds = selectOutcomeIds;
var deselectOutcomeIds = (0, _reduxActions.createAction)(_constants.UNSELECT_OUTCOME_IDS);
exports.deselectOutcomeIds = deselectOutcomeIds;
var setSelectedOutcomeIds = (0, _reduxActions.createAction)(_constants.SET_SELECTED_OUTCOME_IDS);
exports.setSelectedOutcomeIds = setSelectedOutcomeIds;
var setOutcomePickerState = (0, _reduxActions.createAction)(_constants.SET_OUTCOME_PICKER_STATE);
exports.setOutcomePickerState = setOutcomePickerState;
var setActiveCollectionFrd = (0, _reduxActions.createAction)(_constants.SET_ACTIVE_COLLECTION_ID);
exports.setActiveCollectionFrd = setActiveCollectionFrd;
var setFocusedOutcomeAction = (0, _reduxActions.createAction)(_constants.SET_FOCUSED_OUTCOME);
exports.setFocusedOutcomeAction = setFocusedOutcomeAction;
var toggleExpandedIds = (0, _reduxActions.createAction)(_constants.TOGGLE_EXPANDED_IDS);
exports.toggleExpandedIds = toggleExpandedIds;
var resetOutcomePicker = (0, _reduxActions.createAction)(_constants.RESET_OUTCOME_PICKER);
exports.resetOutcomePicker = resetOutcomePicker;

var loadOutcomePicker = function loadOutcomePicker() {
  return function (dispatch, getState, _arg, scope) {
    dispatch(setOutcomePickerState('loading'));
    return dispatch((0, _actions.loadRootOutcomes)()).then(function () {
      return dispatch(setSelectedOutcomeIds((0, _selectors2.getAlignedOutcomeIds)(getState(), scope)));
    }).then(function () {
      return dispatch(setOutcomePickerState('choosing'));
    }).then(function () {
      return Promise.resolve();
    }); // allows chaining other thunks
  };
};

exports.loadOutcomePicker = loadOutcomePicker;

var setActiveCollection = function setActiveCollection(id) {
  return function (dispatch, getState, _arg, scope) {
    dispatch(setActiveCollectionFrd(id));
    return dispatch((0, _actions.loadMoreOutcomes)(id));
  };
};

exports.setActiveCollection = setActiveCollection;

var setFocusedOutcome = function setFocusedOutcome(outcome) {
  return function (dispatch, getState, _arg, scope) {
    if (!outcome || outcome.scoring_method) {
      dispatch(setFocusedOutcomeAction(outcome));
      return Promise.resolve();
    }

    var _getConfig = (0, _selectors.getConfig)(getState(), scope),
        host = _getConfig.host,
        jwt = _getConfig.jwt,
        contextUuid = _getConfig.contextUuid; // First dispatch brings up the outcome view,
    // second dispatch provides the scoring method


    dispatch(setFocusedOutcomeAction(outcome));
    return dispatch({
      type: _reduxServiceMiddleware.CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'getOutcome',
        args: [host, jwt, outcome.id]
      }
    }).then(function (json) {
      dispatch((0, _actions.setScoringMethod)({
        context_uuid: contextUuid,
        id: outcome.id,
        scoring_method: json.scoring_method
      }));
      return dispatch(setFocusedOutcomeAction(json));
    });
  };
};

exports.setFocusedOutcome = setFocusedOutcome;

var saveOutcomePickerAlignments = function saveOutcomePickerAlignments(updateCallback) {
  var shouldUpdateArtifact = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  return function (dispatch, getState, _arg, scope) {
    dispatch(setOutcomePickerState('saving'));
    var state = getState();
    var outcomeIds = (0, _selectors3.getSelectedOutcomeIds)(state, scope);
    var outcomes = outcomeIds.map(function (id) {
      return (0, _selectors2.getAnyOutcome)(state, scope, id);
    });
    var updateAlignmentFunc = shouldUpdateArtifact ? _actions2.upsertArtifact : _actions2.createAlignmentSet;
    return dispatch(updateAlignmentFunc(outcomeIds)).then(function (response) {
      return dispatch((0, _actions2.updateAlignments)(response.guid, outcomes, updateCallback));
    }).then(function () {
      return dispatch(setOutcomePickerState('complete'));
    }).catch(function (err) {
      return dispatch((0, _actions.setError)(err));
    });
  };
};

exports.saveOutcomePickerAlignments = saveOutcomePickerAlignments;

var openOutcomePicker = function openOutcomePicker() {
  return function (dispatch, getState, _arg, scope) {
    var pickerState = (0, _selectors3.getOutcomePickerState)(getState(), scope);

    if (pickerState !== 'choosing') {
      dispatch((0, _actions3.setScope)(scope));
      dispatch(setOutcomePickerState('loading'));
    }
  };
};

exports.openOutcomePicker = openOutcomePicker;

var closeOutcomePicker = function closeOutcomePicker() {
  return function (dispatch, getState, _arg, _scope) {
    dispatch((0, _actions3.setScope)(''));
    dispatch(setOutcomePickerState('closed'));
  };
};

exports.closeOutcomePicker = closeOutcomePicker;
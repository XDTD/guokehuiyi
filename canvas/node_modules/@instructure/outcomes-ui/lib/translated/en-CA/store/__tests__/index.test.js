"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _chai = require("chai");

var _sinon = _interopRequireDefault(require("sinon"));

var _index = require("../index");

var host = 'http://outcomes.docker';
var jwt = 'jwt';
describe('getStore', function () {
  it('exports a function', function () {
    (0, _chai.expect)(_index.getStore).to.be.a('function');
  });
  it('returns an object', function () {
    var store = (0, _index.getStore)(host, jwt, 'scope');
    (0, _chai.expect)(store).to.be.an('object');
  });
  it('returns a well formed store', function () {
    var store = (0, _index.getStore)(host, jwt, 'scope');
    (0, _chai.expect)(store).to.contain.all.keys('dispatch subscribe getState replaceReducer'.split(' '));
  });
  it('returns the same store for multiple scopes', function () {
    var store = (0, _index.getStore)(host, jwt, 'scope');
    var store2 = (0, _index.getStore)(host, jwt, 'scope2');
    (0, _chai.expect)(store2).to.equal(store);
  });
  it('creates state for each scope', function () {
    var store = (0, _index.getStore)(host, jwt, 'scope');
    (0, _index.getStore)(host, jwt, 'scope2');
    (0, _chai.expect)(store.getState().toJS()).to.include.keys('scope', 'scope2');
  });
  it('calls replaceReducer per unique scope', function () {
    var store = (0, _index.getStore)(host, jwt, 'scope');

    var stub = _sinon.default.stub(store, 'replaceReducer');

    (0, _index.getStore)(host, jwt, 'scope');
    (0, _index.getStore)(host, jwt, 'scopefoo');
    (0, _index.getStore)(host, jwt, 'scopefoo');
    (0, _index.getStore)(host, jwt, 'scopebar');
    (0, _index.getStore)(host, jwt, 'scopebar'); // replaceReducer already called once for 'scope' before we stub

    (0, _chai.expect)(stub).to.have.been.calledTwice;
  });
});
describe('makeScope', function () {
  it('returns unique scope string for different ids', function () {
    var thing1 = (0, _index.makeScope)('thing', 1);
    var thing2 = (0, _index.makeScope)('thing', 2);
    (0, _chai.expect)(thing1).not.to.equal(thing2);
  });
  it('returns unique scope for different types', function () {
    var foo = (0, _index.makeScope)('foo', 1);
    var bar = (0, _index.makeScope)('bar', 1);
    (0, _chai.expect)(foo).not.to.equal(bar);
  });
});
describe('makeUserScope', function () {
  it('returns unique user scope string for different user uuids', function () {
    var thing1 = (0, _index.makeUserScope)('user1');
    var thing2 = (0, _index.makeUserScope)('user2');
    (0, _chai.expect)(thing1).not.to.equal(thing2);
  });
});
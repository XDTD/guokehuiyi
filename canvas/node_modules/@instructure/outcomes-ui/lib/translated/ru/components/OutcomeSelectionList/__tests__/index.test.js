"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _chai = require("chai");

var _react = _interopRequireDefault(require("react"));

var _sinon = _interopRequireDefault(require("sinon"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("../index"));

var _checkA11y = _interopRequireDefault(require("../../../test/checkA11y"));

describe('OutcomeSelectionList', function () {
  function selectedIds(ids) {
    var isOutcomeSelected = _sinon.default.stub();

    isOutcomeSelected.returns(false);
    ids.forEach(function (id) {
      isOutcomeSelected.withArgs(id).returns(true);
    });
    return isOutcomeSelected;
  }

  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var outcomes = [{
      id: '1',
      label: 'ABC',
      title: 'Title1'
    }, {
      id: '2',
      label: 'DEF',
      title: 'Title2'
    }, {
      id: '3',
      label: 'GHI',
      title: 'Title3'
    }];
    return Object.assign({
      outcomes: outcomes,
      setFocusedOutcome: _sinon.default.spy(),
      isOutcomeSelected: selectedIds([]),
      selectOutcomeIds: _sinon.default.spy(),
      deselectOutcomeIds: _sinon.default.spy()
    }, props);
  }

  it('renders an empty element if no active ids', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps({
      activeChildrenIds: []
    })), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('OutcomeCheckbox')).not.to.be.present;
  });
  it('renders a checkbox for each outcome', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('OutcomeCheckbox')).to.have.length(3);
  });
  it('passes the right args to each checkbox', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('OutcomeCheckbox').first().prop('outcome')).to.deep.equal({
      id: '1',
      label: 'ABC',
      title: 'Title1'
    });
  });
  it('renders a select all checkbox', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Checkbox[value="selectAll"]')).to.have.length(1);
  });
  it('renders select all as unchecked when no outcomes selected', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Checkbox[value="selectAll"]').prop('checked')).to.be.false;
  });
  it('renders select all as unchecked when not all outcomes selected', function () {
    var props = makeProps({
      isOutcomeSelected: selectedIds(['1', '3'])
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Checkbox[value="selectAll"]').prop('checked')).to.be.false;
  });
  it('renders select all as checked when all outcomes selected', function () {
    var props = makeProps({
      isOutcomeSelected: selectedIds(['1', '2', '3'])
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Checkbox[value="selectAll"]').prop('checked')).to.be.true;
  });
  it('renders select all checkbox as "Select all" when not all outcomes selected', function () {
    var props = makeProps({
      isOutcomeSelected: selectedIds(['1', '3'])
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    (0, _chai.expect)(wrapper.find('Text').at(0).text()).to.equal('Select all');
  });
  it('renders select all checkbox as "Deselect all" when all outcomes selected', function () {
    var props = makeProps({
      isOutcomeSelected: selectedIds(['1', '2', '3'])
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    (0, _chai.expect)(wrapper.find('Text').at(0).text()).to.equal('Deselect all');
  });
  it('calls select function on all outcomes when select all is unchecked and clicked', function () {
    var props = makeProps({
      isOutcomeSelected: selectedIds(['1', '3'])
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    wrapper.find('Checkbox[value="selectAll"]').simulate('change');
    (0, _chai.expect)(props.selectOutcomeIds.calledWith(['1', '2', '3']));
  });
  it('calls unselect function on all outcomes when select all is checked and clicked', function () {
    var props = makeProps({
      isOutcomeSelected: selectedIds(['1', '2', '3'])
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    wrapper.find('Checkbox[value="selectAll"]').simulate('change');
    (0, _chai.expect)(props.deselectOutcomeIds.calledWith(['1', '2', '3']));
  });
  it('meets a11y standards', function () {
    return (0, _checkA11y.default)(_react.default.createElement(_index.default, makeProps()));
  });
});
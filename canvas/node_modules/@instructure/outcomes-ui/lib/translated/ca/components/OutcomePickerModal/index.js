"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiButtons = require("@instructure/ui-buttons");

var _uiText = require("@instructure/ui-text");

var _uiHeading = require("@instructure/ui-heading");

var _uiModal = require("@instructure/ui-modal");

var _OutcomePickerLoader = _interopRequireDefault(require("../OutcomePickerLoader"));

var ModalHeader = _uiModal.Modal.Header,
    ModalBody = _uiModal.Modal.Body,
    ModalFooter = _uiModal.Modal.Footer;

var OutcomePickerModal = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(OutcomePickerModal, _React$Component);

  function OutcomePickerModal() {
    (0, _classCallCheck2.default)(this, OutcomePickerModal);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(OutcomePickerModal).apply(this, arguments));
  }

  (0, _createClass2.default)(OutcomePickerModal, [{
    key: "handleModalReady",
    value: function handleModalReady() {
      if (this.props.onModalOpen) {
        this.props.onModalOpen();
      }
    }
  }, {
    key: "handleModalClose",
    value: function handleModalClose() {
      if (this.props.trigger) {
        // can be null during testing
        this.props.trigger.focus();
      }

      if (this.props.onModalClose) {
        this.props.onModalClose();
      }
    }
  }, {
    key: "handleModalRequestClose",
    value: function handleModalRequestClose() {
      this.props.closeOutcomePicker();
    }
  }, {
    key: "handleModalExited",
    value: function handleModalExited() {
      this.props.resetOutcomePicker();
    }
  }, {
    key: "handleSubmit",
    value: function handleSubmit() {
      var _this = this;

      var _this$props = this.props,
          saveOutcomePickerAlignments = _this$props.saveOutcomePickerAlignments,
          onUpdate = _this$props.onUpdate;
      return saveOutcomePickerAlignments(onUpdate).then(function () {
        return _this.handleModalRequestClose();
      });
    }
  }, {
    key: "submitText",
    value: function submitText() {
      switch (this.props.outcomePickerState) {
        case 'loading':
        case 'choosing':
          if (this.props.anyOutcomeSelected) {
            return "Confirma les alineacions";
          } else {
            return "Fet";
          }

        case 'saving':
        case 'complete':
        default:
          return "D'acord";
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var disabled = this.props.outcomePickerState !== 'choosing';
      var open = this.props.outcomePickerState !== 'closed';
      var _this$props2 = this.props,
          outcomePickerState = _this$props2.outcomePickerState,
          outcomePicker = _this$props2.outcomePicker,
          loadOutcomePicker = _this$props2.loadOutcomePicker,
          setFocusedOutcome = _this$props2.setFocusedOutcome,
          scope = _this$props2.scope,
          artifactTypeName = _this$props2.artifactTypeName,
          displayMasteryDescription = _this$props2.displayMasteryDescription,
          displayMasteryPercentText = _this$props2.displayMasteryPercentText,
          screenreaderNotification = _this$props2.screenreaderNotification,
          liveRegion = _this$props2.liveRegion,
          mountNode = _this$props2.mountNode;
      return _react.default.createElement("span", null, _react.default.createElement(_uiModal.Modal, {
        open: open,
        shouldCloseOnDocumentClick: false,
        onOpen: function onOpen() {
          return _this2.handleModalReady();
        },
        onClose: function onClose() {
          return _this2.handleModalClose();
        },
        onDismiss: function onDismiss() {
          return _this2.handleModalRequestClose();
        },
        onExited: function onExited() {
          return _this2.handleModalExited();
        },
        transition: "fade",
        size: "fullscreen",
        label: "Alinea els resultats",
        zIndex: "9998",
        liveRegion: liveRegion,
        mountNode: mountNode,
        overflow: "fit",
        "data-automation": "outcomePicker__modal"
      }, _react.default.createElement(ModalHeader, {
        "data-automation": "outcomePicker__modalHeader"
      }, _react.default.createElement(_uiButtons.CloseButton, {
        offset: "medium",
        onClick: function onClick() {
          return _this2.handleModalRequestClose();
        },
        placement: "end",
        variant: "icon"
      }, "Cancel\xB7la"), _react.default.createElement(_uiHeading.Heading, null, _react.default.createElement(_uiText.Text, {
        size: "large"
      }, "Resultats adjunts"))), _react.default.createElement(ModalBody, {
        padding: "0",
        "data-automation": "outcomePicker__modalBody"
      }, // We need to conditionally render OutcomePickerLoader here to
      // work around an instui bug:
      // https://instructure.atlassian.net/browse/INSTUI-1437. The bug
      // causes the OutcomePickerLoader to unmount, re-mount, and
      // unmount again when the modal is closed. When this happens,
      // OutcomePickerLoader triggers the loadOutcomePicker action,
      // which resets the modal state to 'open'.
      // TODO: remove `open && ` when INSTUI-1437 is fixed
      open && _react.default.createElement(_OutcomePickerLoader.default, {
        outcomePickerState: outcomePickerState,
        outcomePicker: outcomePicker,
        loadOutcomePicker: loadOutcomePicker,
        setFocusedOutcome: setFocusedOutcome,
        scope: scope,
        artifactTypeName: artifactTypeName,
        displayMasteryDescription: displayMasteryDescription,
        displayMasteryPercentText: displayMasteryPercentText,
        screenreaderNotification: screenreaderNotification
      })), _react.default.createElement(ModalFooter, null, _react.default.createElement(_uiButtons.Button, {
        margin: "xxx-small",
        onClick: function onClick() {
          return _this2.handleModalRequestClose();
        },
        variant: "default",
        disabled: disabled,
        "data-automation": "outcomePicker__cancelButton"
      }, "Cancel\xB7la"), _react.default.createElement(_uiButtons.Button, {
        margin: "xxx-small",
        onClick: function onClick() {
          return _this2.handleSubmit();
        },
        variant: "primary",
        disabled: disabled,
        "data-automation": "outcomePicker__submitButton"
      }, this.submitText()))));
    }
  }]);
  OutcomePickerModal.displayName = "OutcomePickerModal";
  return OutcomePickerModal;
}(_react.default.Component);

exports.default = OutcomePickerModal;
OutcomePickerModal.propTypes = {
  outcomePickerState: _propTypes.default.string.isRequired,
  resetOutcomePicker: _propTypes.default.func.isRequired,
  closeOutcomePicker: _propTypes.default.func.isRequired,
  loadOutcomePicker: _propTypes.default.func.isRequired,
  setFocusedOutcome: _propTypes.default.func.isRequired,
  saveOutcomePickerAlignments: _propTypes.default.func.isRequired,
  outcomePicker: _propTypes.default.func.isRequired,
  onModalClose: _propTypes.default.func,
  onModalOpen: _propTypes.default.func,
  onUpdate: _propTypes.default.func,
  anyOutcomeSelected: _propTypes.default.bool.isRequired,
  trigger: _propTypes.default.object,
  scope: _propTypes.default.string.isRequired,
  artifactTypeName: _propTypes.default.string,
  displayMasteryDescription: _propTypes.default.bool,
  displayMasteryPercentText: _propTypes.default.bool,
  setSearchText: _propTypes.default.func.isRequired,
  screenreaderNotification: _propTypes.default.func,
  liveRegion: _uiModal.Modal.propTypes.liveRegion,
  mountNode: _uiModal.Modal.propTypes.mountNode
};
OutcomePickerModal.defaultProps = {
  onModalClose: null,
  onModalOpen: null,
  onUpdate: null,
  trigger: null,
  artifactTypeName: null,
  displayMasteryDescription: false,
  displayMasteryPercentText: false,
  screenreaderNotification: null,
  liveRegion: null,
  mountNode: null
};
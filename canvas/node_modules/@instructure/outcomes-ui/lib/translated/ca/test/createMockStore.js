"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMockStore;
exports.scopeActions = scopeActions;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _sinon = _interopRequireDefault(require("sinon"));

var _immutable = require("immutable");

var _reduxServiceMiddleware = _interopRequireDefault(require("@instructure/redux-service-middleware"));

var _multireducer = require("multireducer");

var mockService = {
  loadOutcomes: _sinon.default.stub().returns(Promise.resolve([])),
  getAlignments: _sinon.default.stub().returns(Promise.resolve([])),
  getContext: _sinon.default.stub().returns(Promise.resolve({})),
  createAlignmentSet: _sinon.default.stub().returns(Promise.resolve({
    guid: 'newguid'
  })),
  outcomePickerState: 'closed'
};

function createMockStore() {
  var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, _immutable.Map)();
  var outcomesService = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : mockService;
  var scope = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'scopeForTest';
  var baseStore = (0, _reduxMockStore.default)([_reduxThunk.default, (0, _reduxServiceMiddleware.default)({
    outcomes: outcomesService
  })])(state);
  return (0, _objectSpread2.default)({}, baseStore, {
    dispatch: (0, _multireducer.wrapDispatch)(baseStore.dispatch, scope)
  });
}

function scopeActions(actions) {
  var scope = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'scopeForTest';
  return Object.keys(actions).reduce(function (set, key) {
    return Object.assign(set, (0, _defineProperty2.default)({}, key, function (arg) {
      return (0, _multireducer.wrapAction)(actions[key](arg), scope);
    }));
  }, {});
}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _chai = require("chai");

var _react = _interopRequireDefault(require("react"));

var _sinon = _interopRequireDefault(require("sinon"));

var _enzyme = require("enzyme");

var _uiIcons = require("@instructure/ui-icons");

var _index = _interopRequireDefault(require("../index"));

var _checkA11y = _interopRequireDefault(require("../../../test/checkA11y"));

describe('OutcomeTags', function () {
  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};

    var deselectOutcomeIds = _sinon.default.stub();

    var outcomes = [{
      id: '1',
      label: 'ABC',
      title: 'Title1'
    }, {
      id: '2',
      label: 'DEF',
      title: 'Title2'
    }, {
      id: '3',
      label: 'GHI',
      title: 'Title3'
    }];
    return Object.assign({
      outcomes: outcomes,
      deselectOutcomeIds: deselectOutcomeIds
    }, props);
  }

  it('renders an icon', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find(_uiIcons.IconOutcomesLine)).to.have.length(1);
  });
  it('renders tags for each outcome', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Tag')).to.have.length(3);
  });
  it('removes alignment when tag is clicked', function () {
    var props = makeProps();
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    wrapper.find('Tag').first().simulate('click');
    (0, _chai.expect)(props.deselectOutcomeIds.calledOnce).to.be.true;
    (0, _chai.expect)(props.deselectOutcomeIds.calledWith(['1'])).to.be.true;
  });
  it('renders outcome titles', function () {
    var wrapper = (0, _enzyme.render)(_react.default.createElement(_index.default, makeProps()));
    var text = wrapper.text();
    (0, _chai.expect)(text.match(/Title1/)).to.be.truthy;
    (0, _chai.expect)(text.match(/Title2/)).to.be.truthy;
    (0, _chai.expect)(text.match(/Title3/)).to.be.truthy;
  });
  it('does not render outcome labels', function () {
    var wrapper = (0, _enzyme.render)(_react.default.createElement(_index.default, makeProps()));
    var text = wrapper.text();
    (0, _chai.expect)(text.match(/ABC/)).to.be.falsey;
    (0, _chai.expect)(text.match(/DEF/)).to.be.falsey;
    (0, _chai.expect)(text.match(/GHI/)).to.be.falsey;
  });
  it('renders default text when outcome list empty', function () {
    var props = makeProps({
      outcomes: []
    });
    var wrapper = (0, _enzyme.render)(_react.default.createElement(_index.default, props));
    (0, _chai.expect)(wrapper.text().match(/No Outcomes are currently selected/)).to.be.truthy;
  });
  it('focuses on the prior tag when current tag deleted', function (done) {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));

    var focusInput = _sinon.default.spy(wrapper.instance(), 'focusInput');

    setTimeout(function () {
      var last = wrapper.find('Tag').at(2);
      var previous = wrapper.find('Tag').at(1);

      var focus = _sinon.default.spy(previous.find('button').instance(), 'focus');

      var remove = last.prop('onClick');
      remove();
      setTimeout(function () {
        (0, _chai.expect)(focus.calledOnce).to.be.true;
        (0, _chai.expect)(focusInput.calledOnce).to.be.true;
        done();
      }, 1);
    }, 1);
  });
  it('focuses on the next tag when the first tag is deleted', function (done) {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));

    var focusInput = _sinon.default.spy(wrapper.instance(), 'focusInput');

    setTimeout(function () {
      var first = wrapper.find('Tag').at(0);
      var next = wrapper.find('Tag').at(1);

      var focus = _sinon.default.spy(next.find('button').instance(), 'focus');

      var remove = first.prop('onClick');
      remove();
      setTimeout(function () {
        (0, _chai.expect)(focus.calledOnce).to.be.true;
        (0, _chai.expect)(focusInput.calledOnce).to.be.true;
        done();
      }, 1);
    }, 1);
  });
  it('focuses on empty results div when all tags are deleted', function (done) {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));
    setTimeout(function () {
      [0, 1, 2].forEach(function (tagIndex) {
        var tag = wrapper.find('Tag').at(tagIndex);
        var remove = tag.prop('onClick');
        remove();
      });
      setTimeout(function () {
        (0, _chai.expect)(document.activeElement.tabIndex).to.equal(-1);
        done();
      }, 1);
    }, 1);
  });
  it('meets a11y standards', function () {
    return (0, _checkA11y.default)(_react.default.createElement(_index.default, makeProps()));
  });
});
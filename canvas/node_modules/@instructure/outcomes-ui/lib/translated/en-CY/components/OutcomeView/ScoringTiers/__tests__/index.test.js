"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _chai = require("chai");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _uiIcons = require("@instructure/ui-icons");

var _index = _interopRequireDefault(require("../index"));

var _checkA11y = _interopRequireDefault(require("../../../../test/checkA11y"));

var styles = {
  componentId: 'bCFPW',
  template: function template(theme) {
    return "\n\n.outcomes-ui__ScoringTiers--score {\n  border: 1px solid #ccc;\n  color: #888;\n  border-radius: 100%;\n  width: 2.25rem;\n  height: 2.25rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-left: 0.1rem;\n  margin-right: 1.0rem;\n}\n\n.outcomes-ui__ScoringTiers--description {\n  flex: 1;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.outcomes-ui__ScoringTiers--mastery {\n  margin-top: 0.25rem;\n}\n\n.outcomes-ui__ScoringTiers--rating {\n  display: flex;\n  margin-bottom: 0.5rem;\n}\n\n.outcomes-ui__ScoringTiers--scoringTier {\n  margin-bottom: 1.0rem;\n}\n\n.outcomes-ui__ScoringTiers--masteryCount {\n  font-weight: bold;\n  margin-left: 3.5rem;\n}\n\n.outcomes-ui__ScoringTiers--gap:not(:empty) {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 1rem;\n  margin-left: 3.5rem;\n}\n\n.outcomes-ui__ScoringTiers--pill {\n  display: flex;\n  align-items: center;\n  font-size: 1.2rem;\n}\n\n.outcomes-ui__ScoringTiers--pill.outcomes-ui__ScoringTiers--mastery {\n  color: ".concat(theme.masteryColor || 'inherit', ";\n}\n\n.outcomes-ui__ScoringTiers--pill.outcomes-ui__ScoringTiers--average {\n  color: ").concat(theme.averageColor || 'inherit', "\n}\n\n.outcomes-ui__ScoringTiers--pill:not(:last-child) {\n  margin-bottom: 0.75rem;\n}\n");
  },
  'score': 'outcomes-ui__ScoringTiers--score',
  'description': 'outcomes-ui__ScoringTiers--description',
  'mastery': 'outcomes-ui__ScoringTiers--mastery',
  'rating': 'outcomes-ui__ScoringTiers--rating',
  'scoringTier': 'outcomes-ui__ScoringTiers--scoringTier',
  'masteryCount': 'outcomes-ui__ScoringTiers--masteryCount',
  'gap': 'outcomes-ui__ScoringTiers--gap',
  'pill': 'outcomes-ui__ScoringTiers--pill',
  'average': 'outcomes-ui__ScoringTiers--average'
};
describe('OutcomeView ScoringTiers', function () {
  var scoringMethod = {
    id: 1,
    description: 'Some Method',
    points_possible: 5,
    mastery_percent: 0.6,
    algorithm: 'highest',
    algorithm_data: {}
  };
  var outcomeResult = {
    childArtifactCount: 0,
    masteryCount: 0,
    count: 0,
    averageScore: 0.6,
    outcomeId: 'foo'
  };

  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      scoringMethod: scoringMethod,
      scoringTiers: [{
        id: 1,
        description: 'Cri 1',
        percent: 1.0
      }, {
        id: 2,
        description: 'Cri 2',
        percent: 0.6
      }, {
        id: 3,
        description: 'Cri 3',
        percent: 0.22222222
      }]
    }, props);
  }

  it('displays scoring tiers', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));
    (0, _chai.expect)(wrapper.find(".".concat(styles.rating))).to.have.length(3);
  });

  var nextScore = function nextScore(pillWrapper) {
    var gapNode = pillWrapper.closest(".".concat(styles.gap)).instance();
    var tierNode = gapNode.nextSibling;
    var score = tierNode ? tierNode.getElementsByClassName(styles.score)[0].innerText : null;
    return score;
  };

  it('shows mastery between correct tiers', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));
    var mastery = wrapper.find(_uiIcons.IconStarSolid);
    var score = nextScore(mastery);
    (0, _chai.expect)(score).to.equal('1.11');
  });
  it('shows average between the correct tiers', function () {
    var props = makeProps({
      outcomeResult: (0, _objectSpread2.default)({}, outcomeResult, {
        averageScore: 0.99
      })
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    var average = wrapper.find(_uiIcons.IconEmptyLine);
    var score = nextScore(average);
    (0, _chai.expect)(score).to.equal('3');
  });
  it('shows mastery above average if they are equal', function () {
    var props = makeProps({
      outcomeResult: (0, _objectSpread2.default)({
        averageScore: 0.6
      }, outcomeResult)
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    var gap = wrapper.find(_uiIcons.IconStarSolid).closest(".".concat(styles.gap));
    (0, _chai.expect)(gap.childAt(0).hasClass(styles.mastery)).to.be.true;
    (0, _chai.expect)(gap.childAt(1).hasClass(styles.average)).to.be.true;
  });
  it('rounds mastery points', function () {
    var props = makeProps();
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    var score = wrapper.find(".".concat(styles.rating)).last().find(".".concat(styles.score));
    (0, _chai.expect)(score.text()).to.equal('1.11');
  });
  it('renders tier mastery count', function () {
    var props = makeProps({
      scoringTiers: [{
        id: 1,
        description: 'Cri 1',
        percent: 1.0,
        count: 10
      }]
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    var txt = wrapper.find(".".concat(styles.masteryCount)).find('Text');
    (0, _chai.expect)(txt.first().text()).to.match(/Students/);
  });
  it('meets a11y standards', function () {
    return (0, _checkA11y.default)(_react.default.createElement(_index.default, makeProps()));
  });
});
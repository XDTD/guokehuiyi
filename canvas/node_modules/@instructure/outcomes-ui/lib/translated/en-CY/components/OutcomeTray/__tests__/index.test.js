"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _chai = require("chai");

var _react = _interopRequireDefault(require("react"));

var _sinon = _interopRequireDefault(require("sinon"));

var _enzyme = require("enzyme");

var _checkA11y = _interopRequireDefault(require("../../../test/checkA11y"));

var _index = _interopRequireDefault(require("../index"));

describe('OutcomeTray', function () {
  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      searchText: '',
      updateSearchText: _sinon.default.spy(),
      setSearchLoading: _sinon.default.spy(),
      setSearchEntries: _sinon.default.spy(),
      isSearchLoading: false,
      searchEntries: [],
      getOutcome: _sinon.default.spy(),
      getOutcomeSummary: _sinon.default.spy(),
      setActiveCollection: _sinon.default.spy(),
      toggleExpandedIds: _sinon.default.spy(),
      setFocusedOutcome: _sinon.default.spy(),
      isOutcomeSelected: _sinon.default.spy(),
      isOutcomeGroup: _sinon.default.spy(),
      selectOutcomeIds: _sinon.default.spy(),
      deselectOutcomeIds: _sinon.default.spy(),
      screenreaderNotification: _sinon.default.spy(),
      onUpdate: _sinon.default.spy(),
      searchTotal: 0,
      searchPage: 0,
      getOutcomesList: _sinon.default.spy(),
      outcomes: [],
      isOpen: true,
      isFetching: false,
      scope: 'scopeForTest',
      listPage: 0,
      listTotal: 0,
      resetOutcomePicker: _sinon.default.spy(),
      closeOutcomePicker: _sinon.default.spy(),
      setInitialSelectedOutcomes: _sinon.default.spy(),
      shouldModifyArtifact: false
    }, props);
  }

  var wrapper;
  afterEach(function () {
    if (wrapper) {
      wrapper.unmount();
      wrapper = null;
    }
  });
  it('renders a tray', function () {
    wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Tray')).to.have.length(1);
  });
  it('renders cancel and alignment button', function () {
    wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Button')).to.have.length(2);
  });
  it('renders tray closed by when state is closed', function () {
    var props = makeProps({
      isOpen: false
    });
    wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Tray').prop('open')).to.be.false;
  });
  it('renders tray open when state not closed', function () {
    wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Tray').prop('open')).to.be.true;
  });
  it('meets a11y standards', function () {
    return (0, _checkA11y.default)(_react.default.createElement(_index.default, makeProps()));
  });
  it('renders icon and list if no search text', function () {
    wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));
    (0, _chai.expect)(wrapper.find('IconSearchLine')).to.have.length(1);
    (0, _chai.expect)(wrapper.find('OutcomeList')).to.have.length(1);
  });
  it('closes when close button is clicked', function () {
    var props = makeProps();
    wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    wrapper.find('CloseButton').prop('onClick')();
    (0, _chai.expect)(props.closeOutcomePicker).to.be.calledOnce;
  });
  it('shows only search results when searchText is present', function () {
    var props = makeProps({
      searchText: 'foo'
    });
    wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('SearchResults')).to.have.length(1);
    (0, _chai.expect)(wrapper.find('OutcomeList')).to.have.length(0);
  });
  it('updates search text when new search is entered', function () {
    var props = makeProps({
      searchText: 'out'
    });
    wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    wrapper.find('TextInput').prop('onChange')(null, 'text');
    (0, _chai.expect)(props.updateSearchText.getCall(0).args).to.deep.equal(['text']);
  });
  it('initiates search on open', function () {
    var props = makeProps({
      searchText: 'foo',
      isOpen: false
    });
    wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    wrapper.setProps({
      isOpen: true
    });
    (0, _chai.expect)(props.updateSearchText).to.be.called;
  });
  it('aligns when confirm alignment button is clicked', function () {
    var props = makeProps({
      saveOutcomePickerAlignments: _sinon.default.stub().resolves()
    });
    wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    wrapper.find('Button').last().prop('onClick')();
    (0, _chai.expect)(props.saveOutcomePickerAlignments).to.be.called;
    (0, _chai.expect)(props.saveOutcomePickerAlignments).to.be.calledWith(props.onUpdate, false);
  });
  it('syncs selected and aligned outcomes on open', function () {
    var props = makeProps({
      isOpen: false
    });
    wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    wrapper.setProps({
      isOpen: true
    });
    (0, _chai.expect)(props.setInitialSelectedOutcomes).to.be.called;
  });
});
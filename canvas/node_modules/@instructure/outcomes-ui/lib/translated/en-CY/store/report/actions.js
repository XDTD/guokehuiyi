"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadRollups = exports.loadPage = exports.loadUsers = exports.setLoading = exports.setPage = exports.setPageData = exports.setUsers = exports.closeReportAlignment = exports.viewReportAlignment = exports.setResults = exports.setRollups = exports.setReportOutcomes = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reduxActions = require("redux-actions");

var _reduxServiceMiddleware = require("@instructure/redux-service-middleware");

var _selectors = require("./selectors");

var _constants = require("../../constants");

var _selectors2 = require("../config/selectors");

var _actions = require("../context/actions");

/*
 * action creators
 */
var setReportOutcomes = (0, _reduxActions.createAction)(_constants.SET_REPORT_OUTCOMES);
exports.setReportOutcomes = setReportOutcomes;
var setRollups = (0, _reduxActions.createAction)(_constants.SET_REPORT_ROLLUPS);
exports.setRollups = setRollups;
var setResults = (0, _reduxActions.createAction)(_constants.SET_REPORT_RESULTS);
exports.setResults = setResults;
var viewReportAlignment = (0, _reduxActions.createAction)(_constants.VIEW_REPORT_ALIGNMENT);
exports.viewReportAlignment = viewReportAlignment;
var closeReportAlignment = (0, _reduxActions.createAction)(_constants.CLOSE_REPORT_ALIGNMENT);
exports.closeReportAlignment = closeReportAlignment;
var setUsers = (0, _reduxActions.createAction)(_constants.SET_REPORT_USERS);
exports.setUsers = setUsers;
var setPageData = (0, _reduxActions.createAction)(_constants.SET_REPORT_PAGE_DATA);
exports.setPageData = setPageData;
var setPage = (0, _reduxActions.createAction)(_constants.SET_REPORT_PAGE);
exports.setPage = setPage;
var setLoading = (0, _reduxActions.createAction)(_constants.SET_REPORT_LOADING);
exports.setLoading = setLoading;

var loadUsers = function loadUsers(artifactType, artifactId, pageNumber) {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig = (0, _selectors2.getConfig)(getState(), scope),
        host = _getConfig.host,
        jwt = _getConfig.jwt;

    return dispatch({
      type: _reduxServiceMiddleware.CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'getUsers',
        args: [host, jwt, artifactType, artifactId, pageNumber]
      }
    });
  };
};

exports.loadUsers = loadUsers;

var loadPage = function loadPage(artifactType, artifactId, pageNumber, loadUsersOverride) {
  return function (dispatch, getState, _arg, scope) {
    var loading = (0, _selectors.getPageLoading)(getState(), scope);

    if (!loading) {
      dispatch(setLoading(true));
      dispatch(setPage({
        number: pageNumber,
        loading: true
      }));
      var usersPromiseChain;

      if (loadUsersOverride) {
        // if the override function is provided, we assume the upstream application has handled dispatching and is
        // returning a promise to us
        usersPromiseChain = loadUsersOverride(artifactType, artifactId, pageNumber);
      } else {
        usersPromiseChain = dispatch(loadUsers(artifactType, artifactId, pageNumber));
      }

      return usersPromiseChain.then(function (_ref) {
        var users = _ref.users,
            perPage = _ref.perPage,
            total = _ref.total;
        var pageData = {
          perPage: perPage,
          total: total
        };
        dispatch(setUsers(users));
        return dispatch(setPageData(pageData));
      }).then(function () {
        return dispatch(loadRollups(artifactType, artifactId));
      }).then(function () {
        return dispatch(setPage({
          number: pageNumber,
          loading: false
        }));
      }).then(function () {
        return dispatch(setLoading(false));
      }).catch(function (e) {
        return dispatch((0, _actions.setError)(e));
      });
    } else {
      return Promise.resolve();
    }
  };
};

exports.loadPage = loadPage;

var loadRollups = function loadRollups(artifactType, artifactId) {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig2 = (0, _selectors2.getConfig)(getState(), scope),
        host = _getConfig2.host,
        jwt = _getConfig2.jwt;

    var userList = (0, _selectors.getUsers)(getState(), scope).map(function (user) {
      return user.uuid;
    });
    var jsonPromise = dispatch({
      type: _reduxServiceMiddleware.CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'getOutcomeRollups',
        args: [host, jwt, artifactType, artifactId]
      }
    });
    return jsonPromise.then(function (json) {
      var outcomes = json.reduce(function (acc, el) {
        return Object.assign(acc, (0, _defineProperty2.default)({}, el.outcome.id, el.outcome));
      }, {});
      var rollups = json.map(function (el) {
        return {
          outcomeId: el.outcome.id,
          averageScore: el.average_score,
          count: el.count,
          masteryCount: el.mastery_count,
          childArtifactCount: el.child_artifact_count,
          usesBank: el.uses_bank
        };
      });
      dispatch(setReportOutcomes(outcomes));
      dispatch(setRollups(rollups));

      var getOutcomeResults = function getOutcomeResults(outcomeId) {
        return dispatch({
          type: _reduxServiceMiddleware.CALL_SERVICE,
          payload: {
            service: 'outcomes',
            method: 'getOutcomeResults',
            args: [host, jwt, artifactType, artifactId, outcomeId, userList]
          }
        });
      };

      var resultPromises = json.map(function (el) {
        return getOutcomeResults(el.outcome.id) // eslint-disable-line promise/no-nesting
        .then(function (results) {
          dispatch(setResults({
            outcomeId: el.outcome.id,
            results: results
          }));
          return results;
        });
      });
      return Promise.all(resultPromises);
    }).catch(function (e) {
      return dispatch((0, _actions.setError)(e));
    });
  };
};

exports.loadRollups = loadRollups;
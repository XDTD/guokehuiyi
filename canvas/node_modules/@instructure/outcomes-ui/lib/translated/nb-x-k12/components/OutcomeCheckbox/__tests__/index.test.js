"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _chai = require("chai");

var _react = _interopRequireDefault(require("react"));

var _sinon = _interopRequireDefault(require("sinon"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("../index"));

var _checkA11y = _interopRequireDefault(require("../../../test/checkA11y"));

describe('OutcomeCheckbox', function () {
  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      outcome: {
        id: '101',
        label: 'XYZ',
        title: 'The student will make cupcakes',
        description: 'Hello there'
      },
      setFocusedOutcome: _sinon.default.spy(),
      isOutcomeSelected: _sinon.default.spy(),
      selectOutcomeIds: _sinon.default.spy(),
      deselectOutcomeIds: _sinon.default.spy()
    }, props);
  }

  it('renders a checkbox', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Checkbox')).to.have.length(1);
  });
  it('renders outcome title in link', function () {
    var props = makeProps();
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    var link = wrapper.find('Link');
    (0, _chai.expect)(link.text()).to.equal('The student will make cupcakes');
  });
  it('renders an OutcomeDescription component', function () {
    var props = makeProps();
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    (0, _chai.expect)(wrapper.find('OutcomeDescription')).to.have.length(1);
  });
  it('will focus an outcome when the title is clicked', function () {
    var props = makeProps();
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    var click = wrapper.find('Link').prop('onClick');

    var preventDefault = _sinon.default.stub();

    click({
      preventDefault: preventDefault
    });
    (0, _chai.expect)(props.setFocusedOutcome.calledOnce).to.be.true;
    (0, _chai.expect)(preventDefault.calledOnce).to.be.true;
  });
  it('selects the checkbox when isOutcomeSelected', function () {
    var isOutcomeSelected = _sinon.default.stub().withArgs(101).returns(false);

    var props = makeProps({
      isOutcomeSelected: isOutcomeSelected
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Checkbox').prop('checked')).to.equal(false);
  });
  it('does not select the checkbox when not isOutcomeSelected', function () {
    var isOutcomeSelected = _sinon.default.stub().withArgs(101).returns(true);

    var props = makeProps({
      isOutcomeSelected: isOutcomeSelected
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Checkbox').prop('checked')).to.equal(true);
  });
  it('calls selectOutcomeIds when unselected and user clicks', function () {
    var isOutcomeSelected = _sinon.default.stub().withArgs(101).returns(false);

    var props = makeProps({
      isOutcomeSelected: isOutcomeSelected
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    wrapper.find('Checkbox').simulate('change');
    (0, _chai.expect)(props.selectOutcomeIds.calledWith([101]));
  });
  it('calls deselectOutcomeIds when selected and user clicks', function () {
    var isOutcomeSelected = _sinon.default.stub().withArgs(101).returns(true);

    var props = makeProps({
      isOutcomeSelected: isOutcomeSelected
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    wrapper.find('Checkbox').simulate('change');
    (0, _chai.expect)(props.deselectOutcomeIds.calledWith([101]));
  });
  it('meets a11y standards', function () {
    return (0, _checkA11y.default)(_react.default.createElement(_index.default, makeProps()));
  });
});
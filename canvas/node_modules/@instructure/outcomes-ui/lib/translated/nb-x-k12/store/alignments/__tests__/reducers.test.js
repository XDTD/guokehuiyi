"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _chai = require("chai");

var _immutable = require("immutable");

var _constants = require("../../../constants");

var _reducers = _interopRequireDefault(require("../reducers"));

describe('alignments/reducers', function () {
  var reduce = function reduce(state, type, payload) {
    return (0, _reducers.default)(state, {
      type: type,
      payload: payload
    });
  };

  var state = (0, _immutable.fromJS)({
    alignmentSetId: 'originalguid',
    alignedOutcomes: [{
      id: '2'
    }, {
      id: '3'
    }],
    openAlignmentId: 10
  });
  describe('alignedOutcomes', function () {
    it('is updated by SET_ALIGNMENTS', function () {
      var newAlignments = {
        guid: 'imaguid',
        outcomes: [{
          id: '1'
        }, {
          id: '2'
        }, {
          id: '3'
        }]
      };
      var newState = reduce(state, _constants.SET_ALIGNMENTS, newAlignments);
      (0, _chai.expect)(newState.get('alignedOutcomes').toJS()).to.deep.equal(newAlignments.outcomes);
    });
    it('is updated by UPDATE_ALIGNMENT', function () {
      var outcome = {
        id: '3',
        scoring_method: 'boom'
      };
      var newState = reduce(state, _constants.UPDATE_ALIGNMENT, {
        outcome: outcome
      });
      (0, _chai.expect)(newState.getIn(['alignedOutcomes', 1]).toJS()).to.deep.equal(outcome);
    });
  });
  describe('openAlignmentId', function () {
    it('is set by VIEW_ALIGNMENT', function () {
      var newState = reduce(state, _constants.VIEW_ALIGNMENT, 99);
      (0, _chai.expect)(newState.get('openAlignmentId')).to.equal(99);
    });
    it('is cleared by CLOSE_ALIGNMENT', function () {
      var newState = reduce(state, _constants.CLOSE_ALIGNMENT, null);
      (0, _chai.expect)(newState.get('openAlignmentId')).to.equal(null);
    });
  });
  describe('alignmentSetId', function () {
    it('is updated by SET_ALIGNMENTS', function () {
      var newAlignmentSet = {
        guid: 'iamgroot',
        outcomes: [{
          id: '5'
        }]
      };
      var newState = reduce(state, _constants.SET_ALIGNMENTS, newAlignmentSet);
      (0, _chai.expect)(newState.get('alignmentSetId')).to.deep.equal(newAlignmentSet.guid);
    });
  });
});
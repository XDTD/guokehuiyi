"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _chai = require("chai");

var _react = _interopRequireDefault(require("react"));

var _sinon = _interopRequireDefault(require("sinon"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("../index"));

var _checkA11y = _interopRequireDefault(require("../../../../test/checkA11y"));

describe('TreeBrowser', function () {
  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      collections: {
        1: {
          id: '1',
          name: 'Collectiony Collectionface',
          collections: ['3']
        },
        2: {
          id: '2',
          name: 'Collection 2 Electric Boogaloo'
        },
        3: {
          id: '3',
          name: 'Collection Trifection'
        }
      },
      expandedIds: [],
      toggleExpandedIds: _sinon.default.spy(),
      items: {},
      rootOutcomeIds: [],
      setActiveCollection: _sinon.default.spy()
    }, props);
  }

  function collectionsWithRoot(rootIds) {
    var collections = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    var cols = collections || rootIds;
    return Object.assign(makeProps().collections, {
      root: {
        id: 'root',
        name: 'Home',
        collections: cols,
        child_ids: rootIds
      }
    });
  }

  it('renders a TreeBrowser component', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));
    (0, _chai.expect)(wrapper.find('TreeBrowser')).to.have.length(1);
  });
  it('does not require a set of rootOutcomeIds', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));
    (0, _chai.expect)(wrapper.find('TreeButton')).to.have.length(3);
  });
  it('does not render a Home directory if only existing root is a collection', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps({
      rootOutcomeIds: [1],
      collections: collectionsWithRoot([1])
    })));
    (0, _chai.expect)(wrapper.find('TreeButton')).to.have.length(2);
    (0, _chai.expect)(wrapper.find('TreeButton').at(0).text()).to.include('Collectiony Collectionface');
  });
  it('renders a Home directory if only existing root is not a collection', function () {
    var rootIds = ['4'];
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps({
      rootOutcomeIds: rootIds,
      collections: collectionsWithRoot(rootIds, [])
    })));
    (0, _chai.expect)(wrapper.find('TreeButton')).to.have.length(1);
    (0, _chai.expect)(wrapper.find('TreeButton').at(0).text()).to.include('Home');
  });
  it('does not render Home level if all roots are collections', function () {
    var rootIds = ['1', '2'];
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps({
      rootOutcomeIds: rootIds,
      collections: collectionsWithRoot(rootIds)
    })));
    (0, _chai.expect)(wrapper.find('TreeButton')).to.have.length(2);
  });
  it('passes children of root collections', function () {
    var rootIds = ['1', '2'];
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps({
      rootOutcomeIds: rootIds,
      collections: collectionsWithRoot(rootIds),
      expandedIds: ['1']
    })));
    (0, _chai.expect)(wrapper.find('TreeButton')).to.have.length(3);
  });
  it('can expand non-root collections', function () {
    var collections = {
      1: {
        id: '1',
        name: 'Collectiony Collectionface',
        collections: ['2']
      },
      2: {
        id: '2',
        name: 'Collection 2 Electric Boogaloo',
        collections: ['3']
      },
      3: {
        id: '3',
        name: 'Collection 2 Electric Boogaloo',
        collections: ['4']
      },
      4: {
        id: '4',
        name: 'Collection Trifection'
      },
      root: {
        id: 'root',
        name: 'Home',
        collections: ['1'],
        child_ids: ['1']
      }
    };
    var rootIds = ['1'];
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps({
      rootOutcomeIds: rootIds,
      collections: collections,
      expandedIds: ['2', '3']
    })));
    (0, _chai.expect)(wrapper.find('TreeButton')).to.have.length(4);
  });
  it('does not render if collections are undefined', function () {
    var props = makeProps({
      collections: void 0
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    (0, _chai.expect)(wrapper.find('TreeBrowser')).to.have.length(0);
  });
  it('sets the active collection and when clicked', function () {
    var setActiveCollection = _sinon.default.stub();

    var props = makeProps({
      setActiveCollection: setActiveCollection
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    wrapper.find('TreeButton').first().simulate('click');
    (0, _chai.expect)(props.setActiveCollection.calledWith()).to.equal(true);
  });
  it('meets a11y standards', function () {
    return (0, _checkA11y.default)(_react.default.createElement(_index.default, makeProps()));
  });
});
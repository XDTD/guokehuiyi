"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPageCount = getPageCount;
exports.getLoading = getLoading;
exports.getPageNumber = getPageNumber;
exports.getPageLoading = getPageLoading;
exports.getUsers = getUsers;
exports.getRollups = getRollups;
exports.getScore = getScore;
exports.isOpen = isOpen;
exports.getReportOutcome = getReportOutcome;
exports.hasAnyOutcomes = hasAnyOutcomes;

var _immutable = require("immutable");

function restrict(state, scope) {
  return state.getIn([scope, 'report']) || (0, _immutable.Map)();
}

function getPageCount(state, scope) {
  if (state) {
    var pageData = restrict(state, scope).get('pageData');

    if (pageData) {
      var _pageData$toJS = pageData.toJS(),
          total = _pageData$toJS.total,
          perPage = _pageData$toJS.perPage;

      return Math.ceil(total / perPage);
    }
  }

  return null;
}

function getLoading(state, scope) {
  return state && restrict(state, scope).get('loading');
}

function getPageNumber(state, scope) {
  return state && restrict(state, scope).getIn(['page', 'number']);
}

function getPageLoading(state, scope) {
  return state && restrict(state, scope).getIn(['page', 'loading'], false);
}

function getUsers(state, scope) {
  var users = state && restrict(state, scope).get('users');
  return users ? users.toJS() : [];
}

function getRollups(state, scope) {
  var rollups = state && restrict(state, scope).get('rollups');
  return rollups ? rollups.toJS() : [];
}

function getScore(state, scope, outcomeId, userId) {
  var score = state && restrict(state, scope).getIn(['results', outcomeId, userId]);
  return score ? score.toJS() : null;
}

function isOpen(state, scope, outcomeId) {
  return restrict(state, scope).get('openReportAlignmentId') === outcomeId;
}

function getReportOutcome(state, scope, outcomeId) {
  var outcome = restrict(state, scope).getIn(['outcomes', outcomeId]);
  return outcome ? outcome.toJS() : null;
}

function hasAnyOutcomes(state, scope) {
  return state && restrict(state, scope).getIn(['outcomes']).size > 0;
}
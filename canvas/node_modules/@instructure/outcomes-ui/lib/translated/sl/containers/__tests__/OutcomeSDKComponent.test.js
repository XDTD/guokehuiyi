"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _chai = require("chai");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _enzyme = require("enzyme");

var _createMockStore = _interopRequireDefault(require("../../test/createMockStore"));

var _OutcomeSDKComponent = _interopRequireDefault(require("../OutcomeSDKComponent"));

var _selectors = require("../../store/config/selectors");

describe('OutcomeSDKComponent', function () {
  var Inner = function Inner(props) {
    return _react.default.createElement("div", null);
  };

  var Wrapped = (0, _OutcomeSDKComponent.default)(Inner, {
    foo: _propTypes.default.string
  });

  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var store = (0, _createMockStore.default)();
    return Object.assign({
      store: store,
      artifactType: 'foo',
      artifactId: '1',
      host: 'http://foo.outcomes.foo',
      jwt: 'secretfoo'
    }, props);
  }

  it('requires sdk prop types', function () {
    (0, _chai.expect)(Wrapped.propTypes.artifactType).to.equal(_propTypes.default.string.isRequired);
    (0, _chai.expect)(Wrapped.propTypes.artifactId).to.equal(_propTypes.default.string.isRequired);
    (0, _chai.expect)(Wrapped.propTypes.host).to.equal(_propTypes.default.string.isRequired);
    (0, _chai.expect)(Wrapped.propTypes.jwt).to.equal(_propTypes.default.string.isRequired);
  });
  it('adds required prop types', function () {
    (0, _chai.expect)(Wrapped.propTypes.foo).to.equal(_propTypes.default.string);
  });
  it('renders', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement("div", {
      id: "app"
    }, _react.default.createElement(Wrapped, makeProps())));
    (0, _chai.expect)(wrapper.find(Inner)).to.have.length(1);
  });
  it('sets the scope', function () {
    var props = makeProps();
    var wrapper = (0, _enzyme.mount)(_react.default.createElement("div", {
      id: "app"
    }, _react.default.createElement(Wrapped, props)));
    (0, _chai.expect)(wrapper.find(Inner).prop('scope')).to.equal('foo:::1');
  });
  it('creates a user scope', function () {
    var props = makeProps({
      userUuid: 'myUserId'
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement("div", {
      id: "app"
    }, _react.default.createElement(Wrapped, props)));
    (0, _chai.expect)(wrapper.find(Inner).prop('scope')).to.equal('user::foo:1:myUserId');
  });
  it('uses the supplied store', function () {
    var props = makeProps();
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(Wrapped, props));
    (0, _chai.expect)(wrapper.instance().store()).to.equal(props.store);
  });
  it('creates a default store', function () {
    var props = makeProps({
      store: null
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(Wrapped, props));
    (0, _chai.expect)(wrapper.instance().store()).not.to.be.null;
  });
  it('converts null context uuid to empty string property', function () {
    var props = makeProps({
      contextUuid: null
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(Wrapped, props));
    (0, _chai.expect)(wrapper.find(Inner).prop('contextUuid')).to.equal('');
  });
  it('converts null context uuid to empty store key', function () {
    var props = makeProps({
      store: null,
      contextUuid: null
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(Wrapped, props));
    (0, _chai.expect)((0, _selectors.getConfig)(wrapper.instance().store().getState(), 'foo:::1').contextUuid).to.equal('');
  });
});
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiText = require("@instructure/ui-text");

var _uiLink = require("@instructure/ui-link");

var _uiIcons = require("@instructure/ui-icons");

var _uiThemeable = require("@instructure/ui-themeable");

var _theme = _interopRequireDefault(require("../theme"));

var _dec, _class, _class2, _temp;

var styles = {
  componentId: 'jBlIf',
  template: function template(theme) {
    return "\n\n.outcomes-ui__OutcomeFolder--folder {\n  display: flex;\n  align-content: flex-start;\n  padding: ".concat(theme.outcomePickerItemPadding || 'inherit', ";\n}\n\n.outcomes-ui__OutcomeFolder--folderIcon {\n  font-size: 1.5em;\n  height: 1.25rem;\n  width: 1.25rem;\n  margin-right: 0.5rem;\n}\n\n.outcomes-ui__OutcomeFolder--folderDetails {\n  padding-left: 0.5rem;\n}\n");
  },
  'folder': 'outcomes-ui__OutcomeFolder--folder',
  'folderIcon': 'outcomes-ui__OutcomeFolder--folderIcon',
  'folderDetails': 'outcomes-ui__OutcomeFolder--folderDetails'
};
var OutcomeFolder = (_dec = (0, _uiThemeable.themeable)(_theme.default, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(OutcomeFolder, _React$Component);

  function OutcomeFolder() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, OutcomeFolder);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf2.default)(OutcomeFolder)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.handleClick = function (id) {
      var _this$props = _this.props,
          setActiveCollection = _this$props.setActiveCollection,
          toggleExpandedIds = _this$props.toggleExpandedIds,
          activeCollectionId = _this$props.activeCollectionId;

      if (activeCollectionId) {
        toggleExpandedIds({
          id: activeCollectionId,
          forceOpen: true
        });
      }

      setActiveCollection(id);
      toggleExpandedIds({
        id: id,
        forceOpen: true
      });
    };

    _this.renderTitle = function (outcome) {
      var clickable = _this.props.clickable; // Temporarily have the Folders rendered in search results
      // be unclickable, until we decide how to retrieve all
      // their ancestor outcomes and put them into state. A necessary
      // reqt in order to render the tree picker.

      return clickable ? _react.default.createElement(_uiText.Text, {
        size: "small"
      }, _react.default.createElement(_uiLink.Link, {
        onClick: function onClick() {
          return _this.handleClick(outcome.id);
        }
      }, outcome.title)) : _react.default.createElement(_uiText.Text, {
        size: "x-small"
      }, outcome.title);
    };

    return _this;
  }

  (0, _createClass2.default)(OutcomeFolder, [{
    key: "renderSummary",
    value: function renderSummary(outcome) {
      var getOutcomeSummary = this.props.getOutcomeSummary;

      if (getOutcomeSummary(outcome.id)) {
        return _react.default.createElement("div", {
          className: styles.folderSummary
        }, _react.default.createElement(_uiText.Text, {
          size: "x-small"
        }, getOutcomeSummary(outcome.id)));
      }
    }
  }, {
    key: "render",
    value: function render() {
      var outcome = this.props.outcome;
      return _react.default.createElement("div", {
        className: styles.folder
      }, _react.default.createElement("div", {
        className: styles.folderIcon
      }, _react.default.createElement(_uiIcons.IconFolderSolid, null)), _react.default.createElement("div", {
        className: styles.folderDetails
      }, _react.default.createElement("div", {
        "data-automation": "outcomeFolder__folderTitle"
      }, this.renderTitle(outcome)), this.renderSummary(outcome), _react.default.createElement("div", {
        className: styles.folderDescription
      }, _react.default.createElement(_uiText.Text, {
        size: "x-small"
      }, outcome.label))));
    }
  }]);
  OutcomeFolder.displayName = "OutcomeFolder";
  return OutcomeFolder;
}(_react.default.Component), _class2.propTypes = {
  outcome: _propTypes.default.object.isRequired,
  clickable: _propTypes.default.bool,
  getOutcomeSummary: _propTypes.default.func.isRequired,
  setActiveCollection: _propTypes.default.func.isRequired,
  toggleExpandedIds: _propTypes.default.func.isRequired,
  activeCollectionId: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
}, _class2.defaultProps = {
  clickable: true,
  activeCollectionId: null
}, _temp)) || _class);
exports.default = OutcomeFolder;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _chai = require("chai");

var _react = _interopRequireDefault(require("react"));

var _sinon = _interopRequireDefault(require("sinon"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("../index"));

var _checkA11y = _interopRequireDefault(require("../../../test/checkA11y"));

describe('AlignmentList', function () {
  var triggerButtonSelector = 'Button[variant="circle-primary"]';

  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      alignedOutcomes: [{
        id: '1',
        label: 'A1',
        title: 'tA1'
      }, {
        id: '2',
        label: 'B2',
        title: 'tB2'
      }, {
        id: '3',
        label: 'C3',
        title: 'tC3'
      }],
      emptySetHeading: 'Foo',
      scope: 'scopeForTest',
      viewAlignment: _sinon.default.spy(),
      closeAlignment: _sinon.default.spy(),
      removeAlignment: _sinon.default.spy(),
      onUpdate: _sinon.default.spy(),
      isOpen: _sinon.default.stub().returns(false),
      setOutcomePickerState: _sinon.default.spy(),
      openOutcomePicker: _sinon.default.spy(),
      screenreaderNotification: _sinon.default.spy(),
      addModal: function addModal() {
        return null;
      },
      outcomePicker: function outcomePicker() {
        return null;
      },
      readOnly: false
    }, props);
  }

  describe('no alignments present', function () {
    var props = makeProps({
      alignedOutcomes: []
    });
    it('shows billboard when no alignments present', function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
        disableLifecycleMethods: true
      });
      (0, _chai.expect)(wrapper.find('Billboard')).to.have.length(1);
    });
    it('does not show the billboard when readOnly is true', function () {
      var props = makeProps({
        alignedOutcomes: [],
        readOnly: true
      });
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
        disableLifecycleMethods: true
      });
      (0, _chai.expect)(wrapper.find('Billboard')).to.have.length(0);
    });
    it('includes the right heading', function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
        disableLifecycleMethods: true
      });
      (0, _chai.expect)(wrapper.find('Billboard').prop('heading')).to.equal('Foo');
    });
    it('launches modal when billboard clicked', function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
        disableLifecycleMethods: true
      });
      wrapper.find('Billboard').simulate('click');
      (0, _chai.expect)(props.openOutcomePicker.calledOnce).to.be.true;
    });
    it('focuses the billboard button when focus called', function (done) {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
      setTimeout(function () {
        var trigger = wrapper.find('button').last();

        var focus = _sinon.default.spy(trigger.instance(), 'focus');

        wrapper.instance().focus();
        setTimeout(function () {
          (0, _chai.expect)(focus.calledOnce).to.be.true;
          (0, _chai.expect)(focus.calledWith()).to.be.true;
          done();
        }, 1);
      }, 1);
    });
    it('meets a11y standards', function () {
      return (0, _checkA11y.default)(_react.default.createElement(_index.default, props));
    });
  });
  describe('alignments present', function () {
    it('shows list', function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
        disableLifecycleMethods: true
      });
      (0, _chai.expect)(wrapper.find('ul')).to.have.length(1);
    });
    it('adds one alignment row per alignment', function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
        disableLifecycleMethods: true
      });
      (0, _chai.expect)(wrapper.find('Alignment')).to.have.length(3);
    });
    it('gives correct outcome to alignment rows', function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
        disableLifecycleMethods: true
      });
      (0, _chai.expect)(wrapper.find('Alignment').last().prop('outcome')).to.have.property('label', 'C3');
    });
    it('gives correct callbacks to alignment rows', function () {
      var props = makeProps();
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
      var first = wrapper.find('Alignment').at(0);
      var remove = first.prop('removeAlignment');
      remove();
      (0, _chai.expect)(props.removeAlignment.calledWith('1', props.onUpdate)).to.be.true;
      var view = first.prop('viewAlignment');
      view();
      (0, _chai.expect)(props.viewAlignment.calledWith('1')).to.be.true;
      var close = first.prop('closeAlignment');
      close();
      (0, _chai.expect)(props.closeAlignment.calledWith()).to.be.true;
    });
    it('renders a trigger button when readOnly is false', function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
        disableLifecycleMethods: true
      });
      (0, _chai.expect)(wrapper.find(triggerButtonSelector)).to.have.length(1);
    });
    it('does not render a trigger button when readOnly is true', function () {
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps({
        readOnly: true
      })), {
        disableLifecycleMethods: true
      });
      (0, _chai.expect)(wrapper.find(triggerButtonSelector)).to.have.length(0);
    });
    it('launches modal when trigger button clicked', function () {
      var props = makeProps();
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
        disableLifecycleMethods: true
      });
      wrapper.find(triggerButtonSelector).simulate('click');
      (0, _chai.expect)(props.openOutcomePicker.calledOnce).to.be.true;
    });
    it('focuses the add button when modal dismissed', function (done) {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));
      setTimeout(function () {
        var trigger = wrapper.find('button').last();

        var focus = _sinon.default.spy(trigger.instance(), 'focus');

        wrapper.instance().focus();
        setTimeout(function () {
          (0, _chai.expect)(focus.calledOnce).to.be.true;
          (0, _chai.expect)(focus.calledWith()).to.be.true;
          done();
        }, 1);
      }, 1);
    });
    it('generates screenreader notification when removing an alignment', function (done) {
      var props = makeProps();
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
      var first = wrapper.find('Alignment').at(0);
      var label = first.instance().props.outcome.label;
      var remove = first.prop('removeAlignment');
      remove();
      setTimeout(function () {
        (0, _chai.expect)(props.screenreaderNotification.getCall(0).args[0]).to.include(label);
        done();
      }, 1);
    });
    it('focuses on the prior alignment when current alignment deleted', function (done) {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));
      setTimeout(function () {
        var last = wrapper.find('Alignment').at(2);
        var previous = wrapper.find('Alignment').at(1);

        var focus = _sinon.default.spy(previous.instance(), 'focus');

        var remove = last.prop('removeAlignment');
        remove();
        setTimeout(function () {
          (0, _chai.expect)(focus.calledOnce).to.be.true;
          (0, _chai.expect)(focus.calledWith()).to.be.true;
          done();
        }, 1);
      }, 1);
    });
    it('focuses on the next alignment when first alignment deleted', function (done) {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));
      setTimeout(function () {
        var first = wrapper.find('Alignment').at(0);
        var next = wrapper.find('Alignment').at(1);

        var focus = _sinon.default.spy(next.instance(), 'focus');

        var remove = first.prop('removeAlignment');
        remove();
        setTimeout(function () {
          (0, _chai.expect)(focus.calledOnce).to.be.true;
          (0, _chai.expect)(focus.calledWith()).to.be.true;
          done();
        }, 1);
      }, 1);
    });
    it('meets a11y standards', function () {
      return (0, _checkA11y.default)(_react.default.createElement(_index.default, makeProps()));
    });
  });
});
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _chai = require("chai");

var _immutable = require("immutable");

var _constants = require("../../../constants");

var actions = _interopRequireWildcard(require("../actions"));

var _reducers = _interopRequireDefault(require("../reducers"));

describe('OutcomePicker/reducers', function () {
  var state = (0, _immutable.fromJS)({
    focusedOutcome: null,
    selected: (0, _immutable.Set)(['1', '2', '3']),
    state: 'testing',
    scope: 'scopeForTest'
  });

  var reduce = function reduce(state, type, payload) {
    return (0, _reducers.default)(state, {
      type: type,
      payload: payload
    });
  };

  describe('state (outcomePickerState)', function () {
    it('is set by SET_OUTCOME_PICKER_STATE', function () {
      var newState = reduce(state, _constants.SET_OUTCOME_PICKER_STATE, 'monkey');
      (0, _chai.expect)(newState.get('state')).to.equal('monkey');
    });
  });
  describe('focusedOutcome', function () {
    it('is set by setFocusedOutcomeAction', function () {
      var next = (0, _reducers.default)(state, actions.setFocusedOutcomeAction('rhino'));
      (0, _chai.expect)(next.get('focusedOutcome')).to.equal('rhino');
    });
  });
  describe('selected', function () {
    describe('adds ids on SELECT_OUTCOME_IDS', function () {
      it('when distinct', function () {
        var newState = reduce(state, _constants.SELECT_OUTCOME_IDS, [4, 5]);
        (0, _chai.expect)(newState.get('selected').toJS().sort()).to.deep.equal(['1', '2', '3', '4', '5']);
      });
      it('when not distinct', function () {
        var newState = reduce(state, _constants.SELECT_OUTCOME_IDS, [1, 2, 5]);
        (0, _chai.expect)(newState.get('selected').toJS().sort()).to.deep.equal(['1', '2', '3', '5']);
      });
    });
    describe('removes ids on UNSELECT_OUTCOME_IDS', function () {
      it('when present', function () {
        var newState = reduce(state, _constants.UNSELECT_OUTCOME_IDS, ['1', '2']);
        (0, _chai.expect)(newState.get('selected').toJS()).to.deep.equal(['3']);
      });
      it('when absent', function () {
        var newState = reduce(state, _constants.UNSELECT_OUTCOME_IDS, ['3', '4']);
        (0, _chai.expect)(newState.get('selected').toJS().sort()).to.deep.equal(['1', '2']);
      });
    });
    it('replaces ids on SET_SELECTED_OUTCOME_IDS', function () {
      var newState = reduce(state, _constants.SET_SELECTED_OUTCOME_IDS, ['2', '5']);
      (0, _chai.expect)(newState.get('selected').toJS().sort()).to.deep.equal(['2', '5']);
    });
  });
  describe('activeCollection', function () {
    it('is set by SET_ACTIVE_COLLECTION_ID', function () {
      var newState = reduce(state, _constants.SET_ACTIVE_COLLECTION_ID, '1701');
      (0, _chai.expect)(newState.get('activeCollection')).to.equal('1701');
    });
  });
  describe('expandedIds', function () {
    it('is set by toggleExpandedIds', function () {
      var next = (0, _reducers.default)(state, actions.toggleExpandedIds({
        id: 1
      }));
      (0, _chai.expect)(next.get('expandedIds').toJS()).to.deep.equal(['1']);
    });
    it('properly adds and removes ids from the set', function () {
      var firstState = (0, _reducers.default)(state, actions.toggleExpandedIds({
        id: 1
      }));
      var secondState = (0, _reducers.default)(firstState, actions.toggleExpandedIds({
        id: 2
      }));
      (0, _chai.expect)(secondState.get('expandedIds').toJS()).to.deep.equal(['1', '2']);
      var thirdState = (0, _reducers.default)(secondState, actions.toggleExpandedIds({
        id: 1
      }));
      (0, _chai.expect)(thirdState.get('expandedIds').toJS()).to.deep.equal(['2']);
    });
    it('does not remove an id if collection is forced open', function () {
      var firstState = (0, _reducers.default)(state, actions.toggleExpandedIds({
        id: 1
      }));
      var secondState = (0, _reducers.default)(firstState, actions.toggleExpandedIds({
        id: 1,
        forceOpen: true
      }));
      (0, _chai.expect)(secondState.get('expandedIds').toJS()).to.deep.equal(['1']);
    });
  });
  describe('when action type is RESET_OUTCOME_PICKER ', function () {
    it('resets state to default', function () {
      var newState = reduce(state, _constants.RESET_OUTCOME_PICKER, 'scopeForTest');
      (0, _chai.expect)(newState.get('state')).to.equal('closed'); // eslint-disable-line no-console

      (0, _chai.expect)(newState.get('selected').toJS()).to.deep.equal([]);
    });
  });
});
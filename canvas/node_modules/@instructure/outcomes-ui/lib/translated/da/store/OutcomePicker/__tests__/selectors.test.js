"use strict";

var _chai = require("chai");

var _immutable = require("immutable");

var _selectors = require("../selectors");

describe('OutcomePicker/selectors', function () {
  var scope = 'scopeForTest';
  var state = (0, _immutable.fromJS)({
    scopeForTest: {
      config: {
        contextUuid: 'course_100'
      },
      OutcomePicker: {
        selected: ['1', '2', '3'],
        state: 'testing',
        expandedIds: ['1'],
        scope: scope
      }
    },
    context: {
      outcomes: {
        course_100: {
          1: {
            id: 1,
            title: 'Some outcome 1',
            description: 'Description 1',
            child_ids: ['2', '3']
          },
          2: {
            id: 2,
            title: 'Some outcome 2',
            description: 'Description 2',
            child_ids: ['4']
          },
          3: {
            id: 3,
            title: 'Some outcome 3',
            description: 'Description 3',
            child_ids: []
          },
          4: {
            id: 4,
            title: 'Some outcome 4',
            description: 'Description 4'
          }
        }
      }
    }
  });
  describe('getSelectedOutcomeIds', function () {
    it('retrieves the correct ids', function () {
      (0, _chai.expect)((0, _selectors.getSelectedOutcomeIds)(state, scope)).to.deep.equal(['1', '2', '3']);
    });
    it('returns an empty array if no outcomes are selected', function () {
      var newState = (0, _immutable.Map)();
      (0, _chai.expect)((0, _selectors.getSelectedOutcomeIds)(newState, scope)).to.deep.equal([]);
    });
  });
  describe('makeIsOutcomeSelected', function () {
    it('returns true if outcome id is selected', function () {
      (0, _chai.expect)((0, _selectors.makeIsOutcomeSelected)(state, scope)('2')).to.be.true;
    });
    it('returns false if outcome is not selected', function () {
      (0, _chai.expect)((0, _selectors.makeIsOutcomeSelected)(state, scope)('4')).to.be.false;
    });
    it('returns false if no outcomes are selected', function () {
      var newState = (0, _immutable.Map)();
      (0, _chai.expect)((0, _selectors.makeIsOutcomeSelected)(newState, scope)('1')).to.be.false;
    });
  });
  describe('anyOutcomeSelected', function () {
    it('returns true when outcomes are selected', function () {
      (0, _chai.expect)((0, _selectors.anyOutcomeSelected)(state, scope)).to.be.true;
    });
    it('returns false if empty selected outcomes', function () {
      var newState = state.setIn([scope, 'OutcomePicker', 'selected'], new _immutable.List());
      (0, _chai.expect)((0, _selectors.anyOutcomeSelected)(newState, scope)).to.be.false;
    });
    it('returns false if no selected outcomes', function () {
      var newState = (0, _immutable.Map)();
      (0, _chai.expect)((0, _selectors.anyOutcomeSelected)(newState)).to.be.false;
    });
  });
  describe('getActiveCollection', function () {
    it('returns correct values if there is no active collection', function () {
      var data = (0, _selectors.getActiveCollection)(state, scope);
      (0, _chai.expect)(data.id).to.equal('');
      (0, _chai.expect)(data.header).to.equal('');
      (0, _chai.expect)(data.summary).to.equal('');
      (0, _chai.expect)(data.description).to.equal('');
    });
    it('returns the correct values if id if present', function () {
      var newState = state.setIn([scope, 'OutcomePicker', 'activeCollection'], '1');
      var data = (0, _selectors.getActiveCollection)(newState, scope);
      (0, _chai.expect)(data.id).to.equal(1);
      (0, _chai.expect)(data.header).to.equal('Some outcome 1');
      (0, _chai.expect)(data.summary).to.equal('1 Group | 1 Outcome');
      (0, _chai.expect)(data.description).to.equal('Description 1');
    });
  });
  describe('getActiveChildren', function () {
    it('returns an empty map when no set active', function () {
      (0, _chai.expect)((0, _selectors.getActiveChildren)(state, scope)).to.deep.equal({
        groups: [],
        nonGroups: []
      });
    });
    it('returns the list of groups and non groups when present', function () {
      var newState = state.setIn([scope, 'OutcomePicker', 'activeCollection'], '1');

      var _getActiveChildren = (0, _selectors.getActiveChildren)(newState, scope),
          groups = _getActiveChildren.groups,
          nonGroups = _getActiveChildren.nonGroups;

      (0, _chai.expect)(groups).to.deep.equal([{
        id: 2,
        title: 'Some outcome 2',
        description: 'Description 2',
        child_ids: ['4']
      }]);
      (0, _chai.expect)(nonGroups).to.deep.equal([{
        id: 3,
        title: 'Some outcome 3',
        description: 'Description 3',
        child_ids: []
      }]);
    });
    it('returns an empty map when no child ids are present', function () {
      var newState = state.setIn([scope, 'OutcomePicker', 'activeCollection'], '4');
      (0, _chai.expect)((0, _selectors.getActiveChildren)(newState, scope)).to.deep.equal({
        groups: [],
        nonGroups: []
      });
    });
  });
  describe('getOutcomePickerState', function () {
    it('retrieves the correct value', function () {
      (0, _chai.expect)((0, _selectors.getOutcomePickerState)(state, scope)).to.equal('testing');
    });
  });
  describe('getExpandedIds', function () {
    it('retrieves the correct value', function () {
      (0, _chai.expect)((0, _selectors.getExpandedIds)(state, scope)).to.deep.equal(['1']);
    });
  });
});
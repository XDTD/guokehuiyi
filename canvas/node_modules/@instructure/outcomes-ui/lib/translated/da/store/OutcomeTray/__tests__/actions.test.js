"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _chai = require("chai");

var _immutable = require("immutable");

var _sinon = _interopRequireDefault(require("sinon"));

var _createMockStore = _interopRequireWildcard(require("../../../test/createMockStore"));

var actions = _interopRequireWildcard(require("../actions"));

var _actions2 = require("../../../store/context/actions");

var _actions3 = require("../../../store/OutcomePicker/actions");

/* eslint-disable promise/always-return */
var scopedActions = (0, _createMockStore.scopeActions)((0, _objectSpread2.default)({}, actions, {
  setError: _actions2.setError,
  setOutcomePickerState: _actions3.setOutcomePickerState
}));
describe('OutcomeTray/actions', function () {
  var state = (0, _immutable.fromJS)({
    scopeForTest: {
      OutcomePicker: {
        tray: {
          pagination: {
            page: 1,
            total: null
          },
          list: [],
          selected: ['2', '3', '4']
        }
      }
    }
  });
  var outcomes = [{
    id: '1',
    name: 'red'
  }, {
    id: '2',
    name: 'blue'
  }];
  var response = {
    outcomes: outcomes,
    total: 2
  };
  var service = {
    listOutcomes: _sinon.default.stub().returns(Promise.resolve(response))
  };
  afterEach(function () {
    return service.listOutcomes.resetHistory();
  });
  describe('getOutcomesList', function () {
    it('dispatches state change to loading', function () {
      var store = (0, _createMockStore.default)(state, service);
      return store.dispatch(actions.getOutcomesList()).then(function () {
        (0, _chai.expect)(store.getActions()[0]).to.deep.equal(scopedActions.setOutcomePickerState('loading'));
      });
    });
    it('dispatches listOutcomes', function () {
      var store = (0, _createMockStore.default)(state, service);
      return store.dispatch(actions.getOutcomesList()).then(function () {
        return (0, _chai.expect)(service.listOutcomes.calledOnce).to.be.true;
      });
    });
    it('dispatches in correct order', function () {
      var store = (0, _createMockStore.default)(state, service);
      return store.dispatch(actions.getOutcomesList()).then(function () {
        (0, _chai.expect)(store.getActions()[2]).to.deep.equal(scopedActions.setOutcomeList(outcomes));
        (0, _chai.expect)(store.getActions()[3]).to.deep.equal(scopedActions.setOutcomes((0, _defineProperty2.default)({}, void 0, {
          '1': outcomes[0],
          '2': outcomes[1]
        })));
        (0, _chai.expect)(store.getActions()[4]).to.deep.equal(scopedActions.setListTotal(response.total));
        (0, _chai.expect)(store.getActions()[5]).to.deep.equal(scopedActions.setOutcomePickerState('choosing'));
      });
    });
    it('dispatches setPage if a page is provided', function () {
      var store = (0, _createMockStore.default)(state, service);
      return store.dispatch(actions.getOutcomesList({
        page: 2
      })).then(function () {
        return (0, _chai.expect)(store.getActions()[0]).to.deep.equal(scopedActions.setListPage(2));
      });
    });
    it('dispatches setError on listOutcomes failure', function () {
      var error = {
        message: 'foo bar baz'
      };
      var service = {
        listOutcomes: _sinon.default.stub().returns(Promise.reject(error))
      };
      var store = (0, _createMockStore.default)(state, service);
      return store.dispatch(actions.getOutcomesList()).then(function () {
        (0, _chai.expect)(store.getActions()).to.have.length(3);
        (0, _chai.expect)(store.getActions()[2]).to.deep.equal(scopedActions.setError(error));
      });
    });
  });
  describe('setInitialSelectedOutcomes', function () {
    var alignedOutcomes = [{
      id: '1'
    }, {
      id: '999'
    }];
    var alignmentState = state.setIn(['scopeForTest', 'alignments', 'alignedOutcomes'], (0, _immutable.fromJS)(alignedOutcomes));
    it('dispatches setSelectedOutcomeIds', function () {
      var store = (0, _createMockStore.default)(alignmentState, service);
      return store.dispatch(actions.setInitialSelectedOutcomes()).then(function () {
        (0, _chai.expect)(store.getActions()).to.have.length(1);
        (0, _chai.expect)(store.getActions()[0]).to.deep.equal(scopedActions.setSelectedOutcomeIds(['1', '999']));
        (0, _chai.expect)(store.getActions()[0].payload).to.deep.equal(['1', '999']);
      });
    });
  });
});
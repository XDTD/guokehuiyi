"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiButtons = require("@instructure/ui-buttons");

var _uiHeading = require("@instructure/ui-heading");

var _uiFlex = require("@instructure/ui-flex");

var _uiModal = require("@instructure/ui-modal");

var _uiThemeable = require("@instructure/ui-themeable");

var _uiView = require("@instructure/ui-view");

var _uiTray = require("@instructure/ui-tray");

var _uiSpinner = require("@instructure/ui-spinner");

var _OutcomeList = _interopRequireDefault(require("./OutcomeList"));

var _OutcomeViewModal = _interopRequireDefault(require("../OutcomeViewModal"));

var _SearchInput = _interopRequireDefault(require("../SearchInput"));

var _SearchResults = _interopRequireDefault(require("../SearchResults"));

var _theme = _interopRequireDefault(require("../theme"));

var _shapes = require("../../store/shapes");

var _dec, _class, _class2, _temp;

var styles = {
  componentId: 'fPfsV',
  template: function template(theme) {
    return "\n\n.outcomes-ui__OutcomeTray--outcomeTray {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  min-height: 0;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.outcomes-ui__OutcomeTray--trayContainer {\n  padding: 1rem;\n  flex-grow: 1;\n  overflow: auto;\n  min-height: 0;\n}\n\n.outcomes-ui__OutcomeTray--footerContainer {\n  bottom: 0;\n  position: -webkit-sticky;\n  position: sticky;\n}\n";
  },
  'outcomeTray': 'outcomes-ui__OutcomeTray--outcomeTray',
  'trayContainer': 'outcomes-ui__OutcomeTray--trayContainer',
  'footerContainer': 'outcomes-ui__OutcomeTray--footerContainer'
};
var ModalFooter = _uiModal.Modal.Footer;
var OutcomeTray = (_dec = (0, _uiThemeable.themeable)(_theme.default, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(OutcomeTray, _React$Component);

  function OutcomeTray() {
    (0, _classCallCheck2.default)(this, OutcomeTray);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(OutcomeTray).apply(this, arguments));
  }

  (0, _createClass2.default)(OutcomeTray, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props,
          getOutcomesList = _this$props.getOutcomesList,
          isOpen = _this$props.isOpen,
          updateSearchText = _this$props.updateSearchText,
          setInitialSelectedOutcomes = _this$props.setInitialSelectedOutcomes;

      if (!prevProps.isOpen && isOpen) {
        getOutcomesList({
          page: 1
        });
        updateSearchText('');
        setInitialSelectedOutcomes();
      }
    }
  }, {
    key: "renderList",
    value: function renderList() {
      var _this$props2 = this.props,
          outcomes = _this$props2.outcomes,
          setFocusedOutcome = _this$props2.setFocusedOutcome,
          isOutcomeSelected = _this$props2.isOutcomeSelected,
          selectOutcomeIds = _this$props2.selectOutcomeIds,
          deselectOutcomeIds = _this$props2.deselectOutcomeIds,
          isFetching = _this$props2.isFetching,
          listPage = _this$props2.listPage,
          listTotal = _this$props2.listTotal,
          getOutcomesList = _this$props2.getOutcomesList;
      return _react.default.createElement(_uiView.View, {
        display: "block",
        padding: "small none none none"
      }, _react.default.createElement(_OutcomeList.default, {
        outcomes: outcomes,
        setFocusedOutcome: setFocusedOutcome,
        isOutcomeSelected: isOutcomeSelected,
        selectOutcomeIds: selectOutcomeIds,
        deselectOutcomeIds: deselectOutcomeIds,
        isLoading: isFetching,
        listPage: listPage,
        listTotal: listTotal,
        getOutcomesList: getOutcomesList
      }));
    }
  }, {
    key: "renderViewModal",
    value: function renderViewModal() {
      var _this$props3 = this.props,
          focusedOutcome = _this$props3.focusedOutcome,
          setFocusedOutcome = _this$props3.setFocusedOutcome,
          artifactTypeName = _this$props3.artifactTypeName,
          displayMasteryDescription = _this$props3.displayMasteryDescription,
          displayMasteryPercentText = _this$props3.displayMasteryPercentText,
          scope = _this$props3.scope;
      return focusedOutcome && _react.default.createElement(_OutcomeViewModal.default, {
        artifactTypeName: artifactTypeName,
        displayMasteryDescription: displayMasteryDescription,
        displayMasteryPercentText: displayMasteryPercentText,
        outcome: focusedOutcome,
        scope: scope,
        closeAlignment: function closeAlignment() {
          return setFocusedOutcome(null);
        },
        isOpen: true
      });
    }
  }, {
    key: "renderSearchMode",
    value: function renderSearchMode() {
      var _this$props4 = this.props,
          screenreaderNotification = _this$props4.screenreaderNotification,
          setSearchLoading = _this$props4.setSearchLoading,
          setSearchEntries = _this$props4.setSearchEntries,
          searchText = _this$props4.searchText,
          updateSearchPage = _this$props4.updateSearchPage,
          isSearchLoading = _this$props4.isSearchLoading,
          isOutcomeSelected = _this$props4.isOutcomeSelected,
          searchEntries = _this$props4.searchEntries,
          searchPage = _this$props4.searchPage,
          searchTotal = _this$props4.searchTotal,
          selectOutcomeIds = _this$props4.selectOutcomeIds,
          deselectOutcomeIds = _this$props4.deselectOutcomeIds,
          setFocusedOutcome = _this$props4.setFocusedOutcome;
      return _react.default.createElement(_SearchResults.default, {
        screenreaderNotification: screenreaderNotification,
        setSearchLoading: setSearchLoading,
        setSearchEntries: setSearchEntries,
        searchText: searchText,
        updateSearchPage: updateSearchPage,
        isSearchLoading: isSearchLoading,
        isOutcomeSelected: isOutcomeSelected,
        searchEntries: searchEntries,
        searchPage: searchPage,
        searchTotal: searchTotal,
        selectOutcomeIds: selectOutcomeIds,
        deselectOutcomeIds: deselectOutcomeIds,
        setFocusedOutcome: setFocusedOutcome
      });
    }
  }, {
    key: "renderBody",
    value: function renderBody() {
      var _this$props5 = this.props,
          searchText = _this$props5.searchText,
          isFetching = _this$props5.isFetching;

      if (isFetching) {
        return _react.default.createElement(_uiFlex.Flex, {
          justifyItems: "center"
        }, _react.default.createElement(_uiFlex.Flex.Item, {
          padding: "small"
        }, _react.default.createElement(_uiSpinner.Spinner, {
          renderTitle: "\u8AAD\u307F\u8FBC\u307F\u4E2D"
        })));
      }

      return searchText ? this.renderSearchMode() : this.renderList();
    }
  }, {
    key: "handleSubmit",
    value: function handleSubmit() {
      var _this$props6 = this.props,
          saveOutcomePickerAlignments = _this$props6.saveOutcomePickerAlignments,
          onUpdate = _this$props6.onUpdate,
          closeOutcomePicker = _this$props6.closeOutcomePicker,
          shouldModifyArtifact = _this$props6.shouldModifyArtifact;
      return saveOutcomePickerAlignments(onUpdate, shouldModifyArtifact).then(function () {
        return closeOutcomePicker();
      });
    }
  }, {
    key: "renderActions",
    value: function renderActions() {
      var _this = this;

      var closeOutcomePicker = this.props.closeOutcomePicker;
      return _react.default.createElement("div", {
        className: styles.footerContainer
      }, _react.default.createElement(ModalFooter, null, _react.default.createElement(_uiButtons.Button, {
        margin: "xxx-small",
        variant: "default",
        onClick: closeOutcomePicker
      }, "\u30AD\u30E3\u30F3\u30BB\u30EB"), _react.default.createElement(_uiButtons.Button, {
        margin: "xxx-small",
        variant: "primary",
        onClick: function onClick() {
          return _this.handleSubmit();
        }
      }, "\u8868\u793A\u4F4D\u7F6E\u3092\u78BA\u8A8D\u3059\u308B")));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props7 = this.props,
          liveRegion = _this$props7.liveRegion,
          mountNode = _this$props7.mountNode,
          searchText = _this$props7.searchText,
          placement = _this$props7.placement,
          size = _this$props7.size,
          updateSearchText = _this$props7.updateSearchText,
          closeOutcomePicker = _this$props7.closeOutcomePicker,
          isOpen = _this$props7.isOpen,
          resetOutcomePicker = _this$props7.resetOutcomePicker;
      var trayProps = {
        placement: placement,
        size: size
      };
      return _react.default.createElement(_uiTray.Tray, Object.assign({
        "data-automation": "outcomeTrayPicker__view",
        liveRegion: liveRegion,
        mountNode: mountNode,
        open: isOpen,
        onExiting: resetOutcomePicker,
        label: "\u7D50\u679C\u306E\u6574\u5217"
      }, trayProps), _react.default.createElement("div", {
        className: styles.outcomeTray
      }, _react.default.createElement("div", {
        className: styles.trayContainer
      }, _react.default.createElement(_uiFlex.Flex, {
        margin: "none none small none"
      }, _react.default.createElement(_uiFlex.Flex.Item, {
        shouldGrow: true,
        shouldShrink: true
      }, _react.default.createElement(_uiHeading.Heading, {
        level: "h3",
        margin: "0 0 x-small"
      }, "\u7D50\u679C\u306E\u6574\u5217")), _react.default.createElement(_uiFlex.Flex.Item, null, _react.default.createElement(_uiButtons.CloseButton, {
        onClick: closeOutcomePicker
      }, "\u30AD\u30E3\u30F3\u30BB\u30EB"))), _react.default.createElement(_SearchInput.default, {
        onChange: function onChange(_, value) {
          return updateSearchText(value);
        },
        onClear: function onClear() {
          return updateSearchText('');
        },
        searchText: searchText
      }), this.renderBody()), this.renderActions(), this.renderViewModal()));
    }
  }]);
  OutcomeTray.displayName = "OutcomeTray";
  return OutcomeTray;
}(_react.default.Component), _class2.propTypes = {
  searchText: _propTypes.default.string.isRequired,
  updateSearchText: _propTypes.default.func.isRequired,
  setSearchLoading: _propTypes.default.func.isRequired,
  setSearchEntries: _propTypes.default.func.isRequired,
  isSearchLoading: _propTypes.default.bool.isRequired,
  searchEntries: _propTypes.default.array.isRequired,
  setFocusedOutcome: _propTypes.default.func.isRequired,
  isOutcomeSelected: _propTypes.default.func.isRequired,
  selectOutcomeIds: _propTypes.default.func.isRequired,
  deselectOutcomeIds: _propTypes.default.func.isRequired,
  saveOutcomePickerAlignments: _propTypes.default.func.isRequired,
  screenreaderNotification: _propTypes.default.func,
  liveRegion: _uiTray.Tray.propTypes.liveRegion,
  mountNode: _uiTray.Tray.propTypes.mountNode,
  size: _propTypes.default.string,
  placement: _propTypes.default.string,
  searchTotal: _propTypes.default.number,
  searchPage: _propTypes.default.number.isRequired,
  outcomes: _propTypes.default.array.isRequired,
  getOutcomesList: _propTypes.default.func.isRequired,
  updateSearchPage: _propTypes.default.func.isRequired,
  listPage: _propTypes.default.number.isRequired,
  listTotal: _propTypes.default.number,
  isFetching: _propTypes.default.bool.isRequired,
  isOpen: _propTypes.default.bool.isRequired,
  closeOutcomePicker: _propTypes.default.func.isRequired,
  resetOutcomePicker: _propTypes.default.func.isRequired,
  setInitialSelectedOutcomes: _propTypes.default.func.isRequired,
  onUpdate: _propTypes.default.func,
  focusedOutcome: _shapes.outcomeShape,
  artifactTypeName: _propTypes.default.string,
  displayMasteryDescription: _propTypes.default.bool,
  displayMasteryPercentText: _propTypes.default.bool,
  shouldModifyArtifact: _propTypes.default.bool,
  scope: _propTypes.default.string.isRequired
}, _class2.defaultProps = {
  screenreaderNotification: null,
  liveRegion: null,
  mountNode: null,
  size: 'regular',
  placement: 'end',
  onUpdate: null,
  focusedOutcome: null,
  artifactTypeName: null,
  displayMasteryDescription: false,
  displayMasteryPercentText: false,
  shouldModifyArtifact: false,
  searchTotal: null,
  listTotal: null
}, _temp)) || _class);
exports.default = OutcomeTray;
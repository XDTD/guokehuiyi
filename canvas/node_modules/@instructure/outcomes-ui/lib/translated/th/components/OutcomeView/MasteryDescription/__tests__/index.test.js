"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _chai = require("chai");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("../index"));

var _checkA11y = _interopRequireDefault(require("../../../../test/checkA11y"));

var styles = {
  componentId: 'IalyE',
  template: function template(theme) {
    return "\n\n.outcomes-ui__MasteryDescription--scoreMastery {\n  background-color: #F5F5F5;\n  border: solid 1px #999999;\n  border-radius: 0.25rem;\n  margin-top: 2rem;\n  padding: 1.0rem 1.0rem;\n}\n\n.outcomes-ui__MasteryDescription--scoreMasteryText {\n  margin-top: 1rem;\n}\n";
  },
  'scoreMastery': 'outcomes-ui__MasteryDescription--scoreMastery',
  'scoreMasteryText': 'outcomes-ui__MasteryDescription--scoreMasteryText'
};
describe('MasteryDescription', function () {
  var scoringMethod = {
    id: 1,
    description: 'Some Method',
    points_possible: 5,
    mastery_percent: 0.6,
    algorithm: 'highest',
    algorithm_data: {}
  };

  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      artifactTypeName: 'Quiz',
      displayMasteryPercentText: true,
      scoringMethod: scoringMethod
    }, props);
  }

  it('renders spinner with no scoring method', function () {
    var props = makeProps({
      scoringMethod: null
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props), {
      attachTo: document.body
    });
    (0, _chai.expect)(wrapper.find('Spinner')).to.have.length(1);
  });
  it('does not render mastery percent text if displayMasteryPercentText is false', function () {
    var props = makeProps({
      displayMasteryPercentText: false
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    var scoreMastery = wrapper.find(".".concat(styles.scoreMasteryText));
    (0, _chai.expect)(scoreMastery.length).to.equal(0);
  });
  it('does not render mastery percent text if no artifactTypeName provided', function () {
    var props = makeProps({
      artifactTypeName: null
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    var scoreMastery = wrapper.find(".".concat(styles.scoreMasteryText));
    (0, _chai.expect)(scoreMastery.length).to.equal(0);
  });
  it('renders mastery percent text', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));
    var scoreMastery = wrapper.find(".".concat(styles.scoreMasteryText));
    (0, _chai.expect)(scoreMastery.length).to.equal(1);
  });
  it('renders mastery description for decaying_average', function () {
    var props = makeProps({
      scoringMethod: (0, _objectSpread2.default)({}, scoringMethod, {
        mastery_percent: 0.8,
        algorithm: 'decaying_average'
      })
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    var txt = wrapper.find(".".concat(styles.scoreMastery)).find('Text');
    (0, _chai.expect)(txt.first().text()).to.match(/Decaying Average/);
  });
  it('renders mastery description for n_mastery', function () {
    var props = makeProps({
      scoringMethod: (0, _objectSpread2.default)({}, scoringMethod, {
        mastery_percent: 0.8,
        algorithm: 'n_mastery'
      })
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    var txt = wrapper.find(".".concat(styles.scoreMastery)).find('Text');
    (0, _chai.expect)(txt.first().text()).to.match(/n Number of Times/);
  });
  it('renders mastery description for highest', function () {
    var props = makeProps({
      scoringMethod: (0, _objectSpread2.default)({}, scoringMethod, {
        mastery_percent: 0.8,
        algorithm: 'highest'
      })
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    var txt = wrapper.find(".".concat(styles.scoreMastery)).find('Text');
    (0, _chai.expect)(txt.first().text()).to.match(/Highest Score/);
  });
  it('renders mastery description for latest', function () {
    var props = makeProps({
      scoringMethod: (0, _objectSpread2.default)({}, scoringMethod, {
        mastery_percent: 0.8,
        algorithm: 'latest'
      })
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    var txt = wrapper.find(".".concat(styles.scoreMastery)).find('Text');
    (0, _chai.expect)(txt.first().text()).to.match(/Most Recent Score/);
  });
  it('meets a11y standards', function () {
    return (0, _checkA11y.default)(_react.default.createElement(_index.default, makeProps()));
  });
});
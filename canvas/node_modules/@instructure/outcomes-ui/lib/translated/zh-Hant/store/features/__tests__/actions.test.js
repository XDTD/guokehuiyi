"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _chai = require("chai");

var _immutable = require("immutable");

var _sinon = _interopRequireDefault(require("sinon"));

var constants = _interopRequireWildcard(require("../../../constants"));

var _createMockStore = _interopRequireWildcard(require("../../../test/createMockStore"));

var actions = _interopRequireWildcard(require("../actions"));

var scopedActions = (0, _createMockStore.scopeActions)(actions);
var response = ['feature_1', 'feature_2'];
describe('features/actions', function () {
  describe('setFeatures', function () {
    it('creates an action', function () {
      var action = actions.setFeatures(['feature_1']);
      (0, _chai.expect)(action.type).to.equal(constants.SET_FEATURES);
      (0, _chai.expect)(action.payload).to.deep.equal(['feature_1']);
    });
  });
  describe('loadFeatures', function () {
    describe('with existing feature flags', function () {
      var getFeaturesStub;
      beforeEach(function () {
        getFeaturesStub = _sinon.default.stub(constants, 'getFeatureFlags').returns(['feature_1', 'feature_2']);
      });
      afterEach(function () {
        getFeaturesStub.restore();
      });
      it('calls outcome service to load features', function () {
        var service = {
          getFeatures: _sinon.default.stub().returns(Promise.resolve(response))
        };
        var store = (0, _createMockStore.default)((0, _immutable.Map)(), service);
        return store.dispatch(actions.loadFeatures()).then(function () {
          (0, _chai.expect)(service.getFeatures.calledOnce).to.be.true;
          return null;
        });
      });
      it('dispatches setFeatures on outcome service success', function () {
        var service = {
          getFeatures: _sinon.default.stub().returns(Promise.resolve(response))
        };
        var store = (0, _createMockStore.default)((0, _immutable.Map)(), service);
        return store.dispatch(actions.loadFeatures()).then(function () {
          (0, _chai.expect)(store.getActions()).to.have.length(2);
          (0, _chai.expect)(store.getActions()).to.deep.include(scopedActions.setFeatures(['feature_1', 'feature_2']));
          return null;
        });
      });
      it('dispatches setError on outcome service failure', function () {
        var error = {
          message: 'foo bar baz'
        };
        var service = {
          getFeatures: _sinon.default.stub().returns(Promise.reject(error))
        };
        var store = (0, _createMockStore.default)((0, _immutable.Map)(), service);
        return store.dispatch(actions.loadFeatures()).then(function () {
          (0, _chai.expect)(store.getActions()).to.have.length(2);
          (0, _chai.expect)(store.getActions()[1]).to.deep.equal(scopedActions.setError(error));
          return null;
        });
      });
    });
    describe('with no existing feature flags', function () {
      var getFeaturesStub;
      beforeEach(function () {
        getFeaturesStub = _sinon.default.stub(constants, 'getFeatureFlags').returns([]);
      });
      afterEach(function () {
        getFeaturesStub.restore();
      });
      it('does not call the outcome service to load features', function () {
        var service = {
          getFeatures: _sinon.default.stub().returns(Promise.resolve(response))
        };
        var store = (0, _createMockStore.default)((0, _immutable.Map)(), service);
        return store.dispatch(actions.loadFeatures()).then(function () {
          (0, _chai.expect)(service.getFeatures.calledOnce).to.be.false;
          return null;
        });
      });
    });
  });
});
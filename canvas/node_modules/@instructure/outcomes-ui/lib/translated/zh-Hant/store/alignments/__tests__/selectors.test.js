"use strict";

var _chai = require("chai");

var _immutable = require("immutable");

var _selectors = require("../selectors");

describe('alignments/selectors', function () {
  var state = (0, _immutable.fromJS)({
    scopeForTest: {
      alignments: {
        alignedOutcomes: [{
          id: '101',
          label: 'l1',
          title: 't2'
        }, {
          id: '102',
          label: 'l2',
          title: 't1'
        }, {
          id: '103',
          label: 'l3',
          title: 't3'
        }],
        openAlignmentId: 12
      }
    }
  });
  describe('getAlignedOutcomeIds', function () {
    it('retrieves the correct value', function () {
      (0, _chai.expect)((0, _selectors.getAlignedOutcomeIds)(state, 'scopeForTest')).to.deep.equal(['102', '101', '103']);
    });
    it('returns [] when not set', function () {
      var newState = (0, _immutable.Map)();
      (0, _chai.expect)((0, _selectors.getAlignedOutcomeIds)(newState, 'scopeForTest')).to.deep.equal([]);
    });
  });
  describe('getAlignedOutcomes', function () {
    it('retrieves the outcomes for each aligned outcome id', function () {
      var outcomes = (0, _selectors.getAlignedOutcomes)(state, 'scopeForTest');
      (0, _chai.expect)(outcomes).to.have.length(3);
      (0, _chai.expect)(outcomes).to.deep.equal([{
        id: '102',
        label: 'l2',
        title: 't1'
      }, {
        id: '101',
        label: 'l1',
        title: 't2'
      }, {
        id: '103',
        label: 'l3',
        title: 't3'
      }]);
    });
    it('memoizes alignedOutcomes by scope', function () {
      _selectors.getAlignedOutcomes.resetRecomputations();

      _selectors.getAlignedOutcomes.clearCache();

      (0, _selectors.getAlignedOutcomes)(state, 'scopeForTest');
      (0, _selectors.getAlignedOutcomes)((0, _immutable.Map)(), 'newScope');
      (0, _selectors.getAlignedOutcomes)(state, 'scopeForTest');
      (0, _chai.expect)(_selectors.getAlignedOutcomes.recomputations()).to.equal(2);
    });
  });
  describe('getAlignedOutcomeCount', function () {
    it('returns the count when the list of outcomes is defined', function () {
      var count = (0, _selectors.getAlignedOutcomeCount)(state, 'scopeForTest');
      (0, _chai.expect)(count).to.equal(3);
    });
    it('returns 0 when the list is not defined', function () {
      var count = (0, _selectors.getAlignedOutcomeCount)(state, 'anotherScope');
      (0, _chai.expect)(count).to.equal(0);
    });
  });
  describe('makeIsOpen', function () {
    it('returns true if alignment id is openAlignmentId', function () {
      (0, _chai.expect)((0, _selectors.makeIsOpen)(state, 'scopeForTest')(12)).to.be.true;
    });
    it('returns false if another alignment id is openAlignmentId', function () {
      (0, _chai.expect)((0, _selectors.makeIsOpen)(state, 'scopeForTest')(13)).to.be.false;
    });
    it('returns false if no alignment is openAlignmentId', function () {
      var newState = (0, _immutable.Map)();
      (0, _chai.expect)((0, _selectors.makeIsOpen)(newState, 'scopeForTest')(12)).to.be.false;
    });
  });
  describe('getAlignedOutcome', function () {
    it('retrieves an aligned outcome by its id', function () {
      var outcome = (0, _selectors.getAlignedOutcome)(state, 'scopeForTest', '101');
      (0, _chai.expect)(outcome).to.deep.equal({
        id: '101',
        label: 'l1',
        title: 't2'
      });
    });
  });
  describe('getAnyOutcome', function () {
    it('can pull outcomes from aligned outcomes', function () {
      var outcome = (0, _selectors.getAnyOutcome)(state, 'scopeForTest', '101');
      (0, _chai.expect)(outcome.label).to.equal('l1');
    });
    it('can pull outcomes from context outcomes', function () {
      var state = (0, _immutable.fromJS)({
        scopeForTest: {
          config: {
            contextUuid: 'course_100'
          }
        },
        context: {
          outcomes: {
            course_100: {
              1: {
                id: 1,
                label: 'l1',
                title: 't1',
                child_ids: ['2', '3']
              }
            }
          }
        }
      });
      var outcome = (0, _selectors.getAnyOutcome)(state, 'scopeForTest', '1');
      (0, _chai.expect)(outcome.label).to.equal('l1');
    });
    it('returns null if neither present', function () {
      var state = (0, _immutable.Map)();
      var outcome = (0, _selectors.getAnyOutcome)(state, 'scopeForTest', '101');
      (0, _chai.expect)(outcome).to.be.null;
    });
  });
});
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _chai = require("chai");

var _react = _interopRequireDefault(require("react"));

var _sinon = _interopRequireDefault(require("sinon"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("../index"));

var _checkA11y = _interopRequireDefault(require("../../../test/checkA11y"));

var styles = {
  componentId: 'bkdMu',
  template: function template(theme) {
    return "\n\n.outcomes-ui__OutcomeTree--outcomeTree {\n  overflow: scroll;\n  height: 100%;\n}\n\n.outcomes-ui__OutcomeTree--outcomeContent {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow-y: scroll;\n}\n\n.outcomes-ui__OutcomeTree--selectedOutcomeCollection {\n  padding-bottom: 1rem;\n  padding-left: 1rem;\n  padding-top: 1rem;\n}\n\n.outcomes-ui__OutcomeTree--selectedOutcomeCollection .outcomes-ui__OutcomeTree--outcomeDescription > p {\n  margin-top: 0.75rem;\n  margin-bottom: 0.75rem;\n}\n\n.outcomes-ui__OutcomeTree--selectedOutcomeCollection .outcomes-ui__OutcomeTree--outcomeDescription > p:last-child {\n    margin-bottom: 0\n  }\n";
  },
  'outcomeTree': 'outcomes-ui__OutcomeTree--outcomeTree',
  'outcomeContent': 'outcomes-ui__OutcomeTree--outcomeContent',
  'selectedOutcomeCollection': 'outcomes-ui__OutcomeTree--selectedOutcomeCollection',
  'outcomeDescription': 'outcomes-ui__OutcomeTree--outcomeDescription'
};
describe('OutcomeTree', function () {
  var outcomeData = {
    label: 'FOO',
    title: 'bar'
  };
  var groups = [(0, _objectSpread2.default)({
    'id': '2'
  }, outcomeData), (0, _objectSpread2.default)({
    'id': '3'
  }, outcomeData), (0, _objectSpread2.default)({
    'id': '6'
  }, outcomeData)];
  var nonGroups = [(0, _objectSpread2.default)({
    'id': '4'
  }, outcomeData), (0, _objectSpread2.default)({
    'id': '5'
  }, outcomeData)];

  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      activeChildren: {
        groups: groups,
        nonGroups: nonGroups
      },
      rootOutcomeIds: [],
      toggleExpandedIds: _sinon.default.spy(),
      isOutcomeSelected: _sinon.default.stub().returns(false),
      getOutcomeSummary: _sinon.default.spy(),
      selectOutcomeIds: _sinon.default.spy(),
      deselectOutcomeIds: _sinon.default.spy(),
      setFocusedOutcome: _sinon.default.spy(),
      setActiveCollection: _sinon.default.spy(),
      collections: {
        100: {
          id: '100',
          name: 'Outcome group'
        }
      },
      expandedIds: [],
      activeCollection: {
        id: '100',
        header: 'Outcome group',
        summary: '1 outcome',
        description: 'This is the description'
      }
    }, props);
  }

  it('passes the correct params to OutcomeBrowser', function () {
    var props = makeProps();
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('OutcomeBrowser')).to.have.length(1);
    (0, _chai.expect)(wrapper.find('OutcomeBrowser').prop('collections')).to.deep.equal(props.collections);
    (0, _chai.expect)(wrapper.find('OutcomeBrowser').prop('rootOutcomeIds')).to.deep.equal(props.rootOutcomeIds);
    (0, _chai.expect)(wrapper.find('OutcomeBrowser').prop('expandedIds')).to.deep.equal(props.expandedIds);
  });
  it('wraps the browser with the proper CSS styling', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find(".".concat(styles.outcomeTree)).exists()).to.equal(true);
  });
  it('passes correct params to OutcomeSelectionList component', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('OutcomeSelectionList').prop('outcomes')).to.deep.equal(nonGroups);
  });
  it('passes correct params to OutcomeFolderList component', function () {
    var props = makeProps();
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('OutcomeFolderList').prop('outcomes')).to.deep.equal(groups);
    (0, _chai.expect)(wrapper.find('OutcomeFolderList').prop('activeCollectionId')).to.deep.equal(props.activeCollection.id);
  });
  it('passes correct params to the Text components', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    var texts = wrapper.find('Text');
    var header = wrapper.find('Heading');
    (0, _chai.expect)(texts.at(0).render().text()).to.equal('1 outcome');
    (0, _chai.expect)(texts.at(1).render().text()).to.equal('This is the description');
    (0, _chai.expect)(header.at(0).render().text()).to.equal('Outcome group');
  });
  it('sanitizes the outcome description', function () {
    var props = makeProps();
    props.activeCollection.description = 'I have <blink>invalid html';
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    (0, _chai.expect)(wrapper.html()).to.include('</blink>');
  });
  it('sets the CSS styling when there is a description', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find(".".concat(styles.outcomeDescription)).exists()).to.equal(true);
  });
  it('shows the proper billboard when there are no active collection details', function () {
    var props = makeProps({
      activeCollection: {}
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Billboard')).to.have.length(1);
    (0, _chai.expect)(wrapper.find('Billboard').prop('heading')).to.equal('Align Outcomes');
  });
  it('shows the proper billboard when there is no active collection id', function () {
    var props = makeProps();
    delete props.activeCollection.id;
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find('Billboard')).to.have.length(1);
    (0, _chai.expect)(wrapper.find('Billboard').prop('heading')).to.equal('Align Outcomes');
  });
  it('does not set the CSS description styling when there are no active collection details', function () {
    var props = makeProps({
      activeCollection: {}
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find(".".concat(styles.outcomeDescription)).exists()).to.equal(false);
  });
  it('sets the CSS content styling', function () {
    var props = makeProps({
      activeCollection: {}
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props), {
      disableLifecycleMethods: true
    });
    (0, _chai.expect)(wrapper.find(".".concat(styles.outcomeContent)).exists()).to.equal(true);
  });
  it('handles missing activeCollection props', function () {
    var props = makeProps();
    delete props.activeCollection;
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    var texts = wrapper.find('Text');
    (0, _chai.expect)(texts.at(0).render().text()).to.equal('Select all');
  });
  it('meets a11y standards', function () {
    var props = makeProps();
    return (0, _checkA11y.default)(_react.default.createElement(_index.default, props));
  });
  it('resets focus on update', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, makeProps()));
    wrapper.setProps((0, _objectSpread2.default)({}, makeProps({
      activeCollection: {
        id: '101'
      }
    })));
    (0, _chai.expect)(wrapper.getDOMNode().contains(document.activeElement));
  });
});
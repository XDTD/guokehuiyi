"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _chai = require("chai");

var _react = _interopRequireDefault(require("react"));

var _sinon = _interopRequireDefault(require("sinon"));

var _enzyme = require("enzyme");

var _checkA11y = _interopRequireDefault(require("../../../test/checkA11y"));

var _index = _interopRequireDefault(require("../index"));

describe('OutcomePickerModal', function () {
  var primaryButtonSelector = 'Button[variant="primary"]';
  var cancelButtonSelector = 'Button[variant="default"]';

  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      outcomePickerState: 'choosing',
      outcomePicker: function outcomePicker() {
        return _react.default.createElement("div", {
          className: "outcomePicker"
        });
      },
      // eslint-disable-line react/display-name
      resetOutcomePicker: _sinon.default.spy(),
      closeOutcomePicker: _sinon.default.spy(),
      loadOutcomePicker: _sinon.default.spy(),
      setFocusedOutcome: _sinon.default.spy(),
      onModalOpen: _sinon.default.spy(),
      onModalClose: _sinon.default.spy(),
      setSearchText: _sinon.default.spy(),
      onUpdate: _sinon.default.spy(),
      anyOutcomeSelected: false,
      saveOutcomePickerAlignments: _sinon.default.stub().returns(Promise.resolve()),
      scope: 'scopeForTest'
    }, props);
  }

  it('renders a modal', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()));
    (0, _chai.expect)(wrapper.find('Modal')).to.have.length(1);
  });
  it('renders modal closed by when state is closed', function () {
    var props = makeProps({
      outcomePickerState: 'closed'
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    (0, _chai.expect)(wrapper.find('Modal').prop('open')).to.be.false;
  });
  it('renders modal open when state not closed', function () {
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, makeProps()));
    (0, _chai.expect)(wrapper.find('Modal').prop('open')).to.be.true;
  });
  it('triggers onModalOpen on modal open', function (done) {
    var props = makeProps();
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    wrapper.find('Modal').simulate('open');
    setTimeout(function () {
      (0, _chai.expect)(props.onModalOpen.calledOnce).to.be.true;
      done();
    }, 1);
  });
  it('closes modal on requestClose', function () {
    var props = makeProps();
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    wrapper.find('Modal').simulate('dismiss');
    (0, _chai.expect)(props.closeOutcomePicker.calledOnce).to.be.true;
  });
  it('resets modal on via onExited prop', function (done) {
    var props = makeProps();
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    wrapper.find('Modal').prop('onExited')();
    setTimeout(function () {
      (0, _chai.expect)(props.resetOutcomePicker.calledOnce).to.be.true;
      done();
    }, 1);
  });
  it('calls focus on the trigger element when modal dismissed', function () {
    var props = makeProps({
      trigger: {
        focus: _sinon.default.stub()
      }
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    wrapper.find('Modal').simulate('close');
    (0, _chai.expect)(props.trigger.focus.called).to.be.true;
  });
  it('shows "Confirm Alignments" when picker in choosing state and an outcome is selected', function () {
    var props = makeProps({
      outcomePickerState: 'choosing',
      anyOutcomeSelected: true
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    (0, _chai.expect)(wrapper.find(primaryButtonSelector).childAt(0).text()).to.equal('Confirm Alignments');
  });
  it('shows "Done" when picker in choosing state and no outcome is selected', function () {
    var props = makeProps({
      outcomePickerState: 'choosing',
      anyOutcomeSelected: false
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    (0, _chai.expect)(wrapper.find(primaryButtonSelector).childAt(0).text()).to.equal('Done');
  });
  it('shows "OK" when picker in complete state', function () {
    var props = makeProps({
      outcomePickerState: 'complete'
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    (0, _chai.expect)(wrapper.find(primaryButtonSelector).childAt(0).text()).to.equal('OK');
  });
  it('has Done and Cancel buttons disabled when picker in loading state', function () {
    var props = makeProps({
      outcomePickerState: 'loading'
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    (0, _chai.expect)(wrapper.find(primaryButtonSelector).childAt(0).text()).to.equal('Done');
    wrapper.find('ModalFooter Button').forEach(function (btn) {
      (0, _chai.expect)(btn.prop('disabled')).to.equal(true);
    });
  });
  it('has OK and Cancel buttons disabled when picker in saving state', function () {
    var props = makeProps({
      outcomePickerState: 'saving'
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    (0, _chai.expect)(wrapper.find(primaryButtonSelector).childAt(0).text()).to.equal('OK');
    wrapper.find('ModalFooter Button').forEach(function (btn) {
      (0, _chai.expect)(btn.prop('disabled')).to.equal(true);
    });
  });
  it('saves outcome alignments when Confirm Alignments is pressed', function () {
    var props = makeProps({
      outcomePickerState: 'saving'
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    wrapper.find(primaryButtonSelector).simulate('click');
    (0, _chai.expect)(props.saveOutcomePickerAlignments.calledOnce).to.be.true;
    (0, _chai.expect)(props.saveOutcomePickerAlignments.calledWith(props.onUpdate)).to.be.true;
  });
  it('closes modal when Confirm Alignments is complete', function (done) {
    var props = makeProps({
      outcomePickerState: 'saving'
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    wrapper.find(primaryButtonSelector).simulate('click');
    setTimeout(function () {
      (0, _chai.expect)(props.closeOutcomePicker.called).to.be.true;
      done();
    }, 1);
  });
  it('triggers onModalClose on modal close', function (done) {
    var props = makeProps({
      outcomePickerState: 'closed'
    });
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_index.default, props));
    wrapper.find('Modal').prop('onClose')();
    setTimeout(function () {
      (0, _chai.expect)(props.onModalClose.calledOnce).to.be.true;
      done();
    }, 1);
  });
  it('does not save outcome alignments when Cancel is pressed', function () {
    var props = makeProps({
      outcomePickerState: 'saving'
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    wrapper.find(cancelButtonSelector).simulate('click');
    (0, _chai.expect)(props.saveOutcomePickerAlignments.called).to.be.false;
  });
  it('triggers closeOutcomePicker on closeButton click', function () {
    var props = makeProps({
      outcomePickerState: 'saving'
    });
    var wrapper = (0, _enzyme.shallow)(_react.default.createElement(_index.default, props));
    wrapper.find(cancelButtonSelector).simulate('click');
    (0, _chai.expect)(props.closeOutcomePicker.called).to.be.true;
  });
  it('meets a11y standards', function () {
    return (0, _checkA11y.default)(_react.default.createElement(_index.default, makeProps()));
  });
});
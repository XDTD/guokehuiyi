"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _multireducer = require("multireducer");

var _reactRedux = require("react-redux");

var contextActions = _interopRequireWildcard(require("../store/context/actions"));

var searchActions = _interopRequireWildcard(require("../store/search/actions"));

var outcomePickerActions = _interopRequireWildcard(require("../store/OutcomePicker/actions"));

var _selectors = require("../store/context/selectors");

var _selectors2 = require("../store/search/selectors");

var _selectors3 = require("../store/OutcomePicker/selectors");

var _OutcomePicker = _interopRequireDefault(require("../components/OutcomePicker"));

var _ConnectedOutcomeTree = _interopRequireDefault(require("./ConnectedOutcomeTree"));

function mapStateToProps(state, ownProps) {
  var artifactTypeName = ownProps.artifactTypeName,
      displayMasteryDescription = ownProps.displayMasteryDescription,
      displayMasteryPercentText = ownProps.displayMasteryPercentText,
      scope = ownProps.scope;
  return {
    hasOutcomes: (0, _selectors.hasContextOutcomes)(state, scope),
    focusedOutcome: (0, _selectors3.getFocusedOutcome)(state, scope),
    outcomePickerState: (0, _selectors3.getOutcomePickerState)(state, scope),
    selectedOutcomes: (0, _selectors3.getSelectedOutcomes)(state, scope),
    isOutcomeSelected: (0, _selectors3.makeIsOutcomeSelected)(state, scope),
    artifactTypeName: artifactTypeName,
    displayMasteryDescription: displayMasteryDescription,
    displayMasteryPercentText: displayMasteryPercentText,
    searchText: (0, _selectors2.getSearchText)(state, scope),
    isSearchLoading: (0, _selectors2.getIsSearchLoading)(state, scope),
    searchPage: (0, _selectors2.getSearchPage)(state, scope),
    searchEntries: (0, _selectors2.getSearchEntries)(state, scope),
    searchTotal: (0, _selectors2.getSearchTotal)(state, scope),
    treeView: _ConnectedOutcomeTree.default
  };
}

function mapDispatchToProps(dispatch, ownProps) {
  var screenreaderNotification = ownProps.screenreaderNotification,
      scope = ownProps.scope;
  return (0, _objectSpread2.default)({}, (0, _multireducer.bindActionCreators)(outcomePickerActions, dispatch, scope), {}, (0, _multireducer.bindActionCreators)(contextActions, dispatch, scope), {}, (0, _multireducer.bindActionCreators)(searchActions, dispatch, scope), {
    screenreaderNotification: screenreaderNotification
  });
}

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_OutcomePicker.default);

exports.default = _default;
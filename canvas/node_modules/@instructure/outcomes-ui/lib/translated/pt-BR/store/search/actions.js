"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateSearchPage = exports.updateSearchText = exports.searchOutcomes = exports.setSearchTotal = exports.setSearchPage = exports.setSearchEntries = exports.setSearchLoading = exports.setSearchText = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reduxActions = require("redux-actions");

var _reduxServiceMiddleware = require("@instructure/redux-service-middleware");

var _selectors = require("../config/selectors");

var _selectors2 = require("./selectors");

var _constants = require("../../constants");

var _actions = require("../context/actions");

var _debouceLatestPromise = _interopRequireDefault(require("../../util/debouceLatestPromise"));

var setSearchText = (0, _reduxActions.createAction)(_constants.SET_SEARCH_TEXT);
exports.setSearchText = setSearchText;
var setSearchLoading = (0, _reduxActions.createAction)(_constants.SET_SEARCH_LOADING);
exports.setSearchLoading = setSearchLoading;
var setSearchEntries = (0, _reduxActions.createAction)(_constants.SET_SEARCH_ENTRIES);
exports.setSearchEntries = setSearchEntries;
var setSearchPage = (0, _reduxActions.createAction)(_constants.SET_SEARCH_PAGE);
exports.setSearchPage = setSearchPage;
var setSearchTotal = (0, _reduxActions.createAction)(_constants.SET_SEARCH_TOTAL);
exports.setSearchTotal = setSearchTotal;
var getSearchResultsDebounced = (0, _debouceLatestPromise.default)(function (dispatch) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return dispatch(searchOutcomes.apply(void 0, args));
}, 250);

var getSearchResultsAction = function getSearchResultsAction() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return function (dispatch) {
    return getSearchResultsDebounced.apply(void 0, [dispatch].concat(args));
  };
};

var searchOutcomes = function searchOutcomes(_ref) {
  var text = _ref.text,
      page = _ref.page;
  return function (dispatch, getState, _arg, scope) {
    var initialText = text || (0, _selectors2.getSearchText)(getState(), scope);
    var initialPage = page || (0, _selectors2.getSearchPage)(getState(), scope);

    var _getConfig = (0, _selectors.getConfig)(getState(), scope),
        host = _getConfig.host,
        jwt = _getConfig.jwt,
        contextUuid = _getConfig.contextUuid;

    return dispatch({
      type: _reduxServiceMiddleware.CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'getSearchResults',
        args: [host, jwt, initialText, initialPage, contextUuid]
      }
    }).then(function (json) {
      if ((0, _selectors2.getSearchText)(getState(), scope) === initialText && (0, _selectors2.getSearchPage)(getState(), scope) === initialPage) {
        dispatch((0, _actions.setOutcomes)((0, _defineProperty2.default)({}, contextUuid, json.outcomes)));
        dispatch(setSearchEntries(json.matches));
        dispatch(setSearchTotal(json.total));
        dispatch(setSearchLoading(false));
      }

      return Promise.resolve();
    });
  };
};

exports.searchOutcomes = searchOutcomes;

var updateSearchText = function updateSearchText(text) {
  return function (dispatch, _getState, _arg, _scope) {
    dispatch(setSearchText(text));
    dispatch(setSearchPage(1));
    dispatch(setSearchTotal(null));

    if (text) {
      dispatch(setSearchLoading(true));
      dispatch(getSearchResultsAction({
        text: text,
        page: 1
      }));
    }
  };
};

exports.updateSearchText = updateSearchText;

var updateSearchPage = function updateSearchPage(page) {
  return function (dispatch, _getState, _arg, _scope) {
    dispatch(setSearchLoading(true));
    dispatch(setSearchPage(page));
    dispatch(getSearchResultsAction({
      page: page
    }));
  };
};

exports.updateSearchPage = updateSearchPage;
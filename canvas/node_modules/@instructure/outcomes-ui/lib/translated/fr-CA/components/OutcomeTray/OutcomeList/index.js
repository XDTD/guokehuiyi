"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RESULTS_PER_PAGE = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiSpinner = require("@instructure/ui-spinner");

var _uiFlex = require("@instructure/ui-flex");

var _OutcomeCheckbox = _interopRequireDefault(require("../../OutcomeCheckbox"));

var _Pagination = _interopRequireDefault(require("../../Pagination"));

var RESULTS_PER_PAGE = 10;
exports.RESULTS_PER_PAGE = RESULTS_PER_PAGE;

var OutcomeList = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(OutcomeList, _React$Component);

  function OutcomeList() {
    (0, _classCallCheck2.default)(this, OutcomeList);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(OutcomeList).apply(this, arguments));
  }

  (0, _createClass2.default)(OutcomeList, [{
    key: "renderList",
    value: function renderList() {
      var _this$props = this.props,
          outcomes = _this$props.outcomes,
          setFocusedOutcome = _this$props.setFocusedOutcome,
          isOutcomeSelected = _this$props.isOutcomeSelected,
          selectOutcomeIds = _this$props.selectOutcomeIds,
          deselectOutcomeIds = _this$props.deselectOutcomeIds;
      return outcomes.map(function (outcome) {
        return _react.default.createElement("div", {
          key: outcome.id
        }, _react.default.createElement(_OutcomeCheckbox.default, {
          outcome: outcome,
          setFocusedOutcome: setFocusedOutcome,
          isOutcomeSelected: isOutcomeSelected,
          selectOutcomeIds: selectOutcomeIds,
          deselectOutcomeIds: deselectOutcomeIds
        }));
      });
    }
  }, {
    key: "renderLoading",
    value: function renderLoading() {
      return _react.default.createElement(_uiFlex.Flex, {
        justifyItems: "center"
      }, _react.default.createElement(_uiFlex.Flex.Item, {
        padding: "small"
      }, _react.default.createElement(_uiSpinner.Spinner, {
        renderTitle: "Chargement en cours..."
      })));
    }
  }, {
    key: "renderPagination",
    value: function renderPagination() {
      var _this$props2 = this.props,
          listPage = _this$props2.listPage,
          listTotal = _this$props2.listTotal,
          getOutcomesList = _this$props2.getOutcomesList;
      return _react.default.createElement(_Pagination.default, {
        page: listPage,
        updatePage: function updatePage(page) {
          return getOutcomesList({
            page: page
          });
        },
        numPages: Math.ceil(listTotal / RESULTS_PER_PAGE)
      });
    }
  }, {
    key: "render",
    value: function render() {
      var isLoading = this.props.isLoading;
      return _react.default.createElement(_uiFlex.Flex, {
        height: "100%",
        width: "100%",
        padding: "none none none none",
        alignItems: "stretch",
        direction: "column"
      }, _react.default.createElement(_uiFlex.Flex.Item, {
        shouldGrow: true
      }, isLoading ? this.renderLoading() : this.renderList()), _react.default.createElement(_uiFlex.Flex.Item, null, !isLoading && this.renderPagination()));
    }
  }]);
  OutcomeList.displayName = "OutcomeList";
  return OutcomeList;
}(_react.default.Component);

exports.default = OutcomeList;
OutcomeList.propTypes = {
  outcomes: _propTypes.default.array.isRequired,
  setFocusedOutcome: _propTypes.default.func.isRequired,
  isOutcomeSelected: _propTypes.default.func.isRequired,
  selectOutcomeIds: _propTypes.default.func.isRequired,
  deselectOutcomeIds: _propTypes.default.func.isRequired,
  getOutcomesList: _propTypes.default.func.isRequired,
  isLoading: _propTypes.default.bool.isRequired,
  listPage: _propTypes.default.number.isRequired,
  listTotal: _propTypes.default.number
};
OutcomeList.defaultProps = {
  listTotal: null
};
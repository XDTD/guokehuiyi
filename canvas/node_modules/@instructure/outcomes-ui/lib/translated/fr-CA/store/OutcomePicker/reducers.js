"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reduxActions = require("redux-actions");

var _reduxImmutable = require("redux-immutable");

var _immutable = require("immutable");

var _constants = require("../../constants");

var _actions = require("./actions");

var _reducers = _interopRequireDefault(require("../search/reducers"));

var _reducers2 = _interopRequireDefault(require("../OutcomeTray/reducers"));

var focusedOutcome = (0, _reduxActions.handleActions)((0, _defineProperty2.default)({}, _actions.setFocusedOutcomeAction, function (state, action) {
  return action.payload;
}), null);
var expandedIds = (0, _reduxActions.handleActions)((0, _defineProperty2.default)({}, _actions.toggleExpandedIds, function (state, action) {
  if (state.has(action.payload.id.toString()) && !action.payload.forceOpen) {
    return state.delete(action.payload.id.toString());
  } else {
    return state.add(action.payload.id.toString());
  }
}), (0, _immutable.Set)());
var selected = (0, _reduxActions.handleActions)({
  SELECT_OUTCOME_IDS: function SELECT_OUTCOME_IDS(state, action) {
    return state.union(action.payload.map(function (id) {
      return id.toString();
    }));
  },
  UNSELECT_OUTCOME_IDS: function UNSELECT_OUTCOME_IDS(state, action) {
    return state.subtract(action.payload.map(function (id) {
      return id.toString();
    }));
  },
  SET_SELECTED_OUTCOME_IDS: function SET_SELECTED_OUTCOME_IDS(state, action) {
    return (0, _immutable.Set)(action.payload);
  }
}, (0, _immutable.Set)());
var activeCollection = (0, _reduxActions.handleActions)({
  SET_ACTIVE_COLLECTION_ID: function SET_ACTIVE_COLLECTION_ID(state, action) {
    return action.payload;
  }
}, null);
var state = (0, _reduxActions.handleActions)({
  SET_OUTCOME_PICKER_STATE: function SET_OUTCOME_PICKER_STATE(state, action) {
    return action.payload;
  }
}, 'closed');
var OutcomePickerReducer = (0, _reduxImmutable.combineReducers)({
  state: state,
  selected: selected,
  focusedOutcome: focusedOutcome,
  activeCollection: activeCollection,
  expandedIds: expandedIds,
  search: _reducers.default,
  tray: _reducers2.default
});

var _default = function _default(state, action) {
  return action.type === _constants.RESET_OUTCOME_PICKER // When the reducer receives a close action, reset
  // the state of the picker to default values
  ? OutcomePickerReducer(void 0, action) : OutcomePickerReducer(state, action);
};

exports.default = _default;
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import { AccessibleContent, PresentationContent } from '@instructure/ui-a11y-content';
import { Text } from '@instructure/ui-text';
import { Link } from '@instructure/ui-link';
import { Tooltip } from '@instructure/ui-tooltip';
import { themeable } from '@instructure/ui-themeable';
import { TruncateText } from '@instructure/ui-truncate-text';
import OutcomeViewModal from '../../OutcomeViewModal';
import HeaderDetails from '../HeaderDetails';
import theme from '../../theme';
var styles = {
  componentId: 'fbTpU',
  template: function template(theme) {
    return "\n\n.outcomes-ui__Header--header {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  font-weight: normal;\n  line-height: 1.3rem;\n  text-align: left;\n}\n\n[dir=\"ltr\"] .outcomes-ui__Header--header {\n  text-align: left;\n}\n\n[dir=\"rtl\"] .outcomes-ui__Header--header {\n  text-align: left;\n}\n";
  },
  'header': 'outcomes-ui__Header--header'
};
var Header = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits(Header, _React$Component);

  // eslint-disable-next-line no-undef
  // eslint-disable-next-line no-undef
  function Header(props) {
    var _this;

    _classCallCheck(this, Header);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Header).call(this, props));

    _this.renderTitle = function (outcome) {
      var viewReportAlignment = _this.props.viewReportAlignment;
      return React.createElement(Link, {
        onClick: viewReportAlignment
      }, React.createElement(Text, {
        size: "medium",
        transform: "uppercase"
      }, React.createElement(TruncateText, {
        maxLines: 1,
        position: 'middle',
        onUpdate: function onUpdate(isTruncated) {
          return _this.setState({
            showTooltip: isTruncated
          });
        }
      }, React.createElement(AccessibleContent, {
        alt: outcome.title
      }, outcome.title))));
    };

    _this.state = {
      showTooltip: false
    };
    return _this;
  }

  _createClass(Header, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          outcomeResult = _this$props.outcomeResult,
          getReportOutcome = _this$props.getReportOutcome,
          isOpen = _this$props.isOpen,
          closeReportAlignment = _this$props.closeReportAlignment,
          showRollups = _this$props.showRollups,
          scope = _this$props.scope;
      var showTooltip = this.state.showTooltip;
      var outcome = getReportOutcome(outcomeResult.outcomeId);
      return React.createElement("div", {
        className: styles.header
      }, showTooltip ? React.createElement(Tooltip, {
        tip: outcome.title,
        placement: "bottom",
        variant: "inverse"
      }, this.renderTitle(outcome)) : this.renderTitle(outcome), React.createElement(PresentationContent, null, React.createElement(HeaderDetails, {
        outcomeResult: outcomeResult,
        showRollups: showRollups
      })), React.createElement(OutcomeViewModal, {
        header: "Detalles de la competencia",
        outcome: outcome,
        outcomeResult: outcomeResult,
        closeAlignment: closeReportAlignment,
        isOpen: isOpen,
        scope: scope,
        displayMasteryDescription: true
      }));
    }
  }]);

  Header.displayName = "Header";
  return Header;
}(React.Component), _class2.propTypes = {
  outcomeResult: PropTypes.object.isRequired,
  getReportOutcome: PropTypes.func.isRequired,
  viewReportAlignment: PropTypes.func.isRequired,
  isOpen: PropTypes.bool.isRequired,
  closeReportAlignment: PropTypes.func.isRequired,
  scope: PropTypes.string.isRequired,
  showRollups: PropTypes.bool
}, _class2.defaultProps = {
  showRollups: true
}, _temp)) || _class);
export { Header as default };
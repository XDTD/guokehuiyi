import React, { isValidElement } from 'react';
import { expect } from 'chai';
import { mount, shallow } from 'enzyme';
import sinon from 'sinon';
import * as constants from '../../constants';
import IfFeature from '../IfFeature';
describe('IfFeature', function () {
  describe('with features in constants.js', function () {
    var getFeaturesStub;
    beforeEach(function () {
      getFeaturesStub = sinon.stub(constants, 'getFeatureFlags').returns(['feature1', 'feature2']);
    });
    afterEach(function () {
      getFeaturesStub.restore();
    });
    it('returns a valid React Element', function () {
      var element = React.createElement(IfFeature, {
        name: 'feature1',
        features: []
      });
      expect(isValidElement(element)).to.be.true;
    });
    it('renders an IfFeature', function () {
      expect(mount(React.createElement(IfFeature, {
        name: 'feature1',
        features: []
      })).find('IfFeature')).to.have.length(1);
    });
    context('when turned off', function () {
      it('renders without the child', function () {
        var wrapper = shallow(React.createElement(IfFeature, {
          name: 'feature1',
          features: ['feature2']
        }, React.createElement("div", null, "Hello!!!")));
        expect(wrapper.find('div')).to.have.length(0);
      });
    });
    context('when turned on', function () {
      it('renders with the child', function () {
        var wrapper = shallow(React.createElement(IfFeature, {
          features: ['feature1'],
          name: 'feature1'
        }, React.createElement("div", null, "Hello!!!")));
        expect(wrapper.find('div')).to.have.length(1);
        expect(wrapper.find('div').text()).to.eq('Hello!!!');
      });
    });
  });
  describe('with no features in constants.js', function () {
    var getFeaturesStub;
    beforeEach(function () {
      getFeaturesStub = sinon.stub(constants, 'getFeatureFlags').returns([]);
    });
    afterEach(function () {
      getFeaturesStub.restore();
    });
    it('throws an error if given an unknown feature', function () {
      expect(function () {
        return shallow(React.createElement(IfFeature, {
          name: 'feature1',
          features: []
        }));
      }).to.throw(Error);
    });
  });
});
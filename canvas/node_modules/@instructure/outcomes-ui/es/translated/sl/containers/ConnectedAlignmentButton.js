import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { bindActionCreators as bindScopedActionCreators } from 'multireducer';
import { compose } from 'redux';
import { connect } from 'react-redux';
import * as alignmentActions from '../store/alignments/actions';
import { getAlignedOutcomes } from '../store/alignments/selectors';
import * as outcomePickerActions from '../store/OutcomePicker/actions';
import AlignmentButton from '../components/AlignmentButton';
import WithArtifact from '../components/WithArtifact';
import ConnectedOutcomeTray from './ConnectedOutcomeTray';

var mapStateToProps = function mapStateToProps(state, ownProps) {
  var scope = ownProps.scope;
  return {
    tray: ConnectedOutcomeTray,
    alignedOutcomes: getAlignedOutcomes(state, scope)
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch, ownProps) {
  var scope = ownProps.scope;
  return _objectSpread({}, bindScopedActionCreators(outcomePickerActions, dispatch, scope), {}, bindScopedActionCreators(alignmentActions, dispatch, scope));
};

var ConnectedAlignmentButton = compose(connect(mapStateToProps, mapDispatchToProps), WithArtifact)(AlignmentButton);
export default ConnectedAlignmentButton;
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import { Text } from '@instructure/ui-text';
import { Link } from '@instructure/ui-link';
import { IconFolderSolid } from '@instructure/ui-icons';
import { themeable } from '@instructure/ui-themeable';
import theme from '../theme';
var styles = {
  componentId: 'jBlIf',
  template: function template(theme) {
    return "\n\n.outcomes-ui__OutcomeFolder--folder {\n  display: flex;\n  align-content: flex-start;\n  padding: ".concat(theme.outcomePickerItemPadding || 'inherit', ";\n}\n\n.outcomes-ui__OutcomeFolder--folderIcon {\n  font-size: 1.5em;\n  height: 1.25rem;\n  width: 1.25rem;\n  margin-right: 0.5rem;\n}\n\n.outcomes-ui__OutcomeFolder--folderDetails {\n  padding-left: 0.5rem;\n}\n");
  },
  'folder': 'outcomes-ui__OutcomeFolder--folder',
  'folderIcon': 'outcomes-ui__OutcomeFolder--folderIcon',
  'folderDetails': 'outcomes-ui__OutcomeFolder--folderDetails'
};
var OutcomeFolder = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits(OutcomeFolder, _React$Component);

  function OutcomeFolder() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, OutcomeFolder);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OutcomeFolder)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.handleClick = function (id) {
      var _this$props = _this.props,
          setActiveCollection = _this$props.setActiveCollection,
          toggleExpandedIds = _this$props.toggleExpandedIds,
          activeCollectionId = _this$props.activeCollectionId;

      if (activeCollectionId) {
        toggleExpandedIds({
          id: activeCollectionId,
          forceOpen: true
        });
      }

      setActiveCollection(id);
      toggleExpandedIds({
        id: id,
        forceOpen: true
      });
    };

    _this.renderTitle = function (outcome) {
      var clickable = _this.props.clickable; // Temporarily have the Folders rendered in search results
      // be unclickable, until we decide how to retrieve all
      // their ancestor outcomes and put them into state. A necessary
      // reqt in order to render the tree picker.

      return clickable ? React.createElement(Text, {
        size: "small"
      }, React.createElement(Link, {
        onClick: function onClick() {
          return _this.handleClick(outcome.id);
        }
      }, outcome.title)) : React.createElement(Text, {
        size: "x-small"
      }, outcome.title);
    };

    return _this;
  }

  _createClass(OutcomeFolder, [{
    key: "renderSummary",
    value: function renderSummary(outcome) {
      var getOutcomeSummary = this.props.getOutcomeSummary;

      if (getOutcomeSummary(outcome.id)) {
        return React.createElement("div", {
          className: styles.folderSummary
        }, React.createElement(Text, {
          size: "x-small"
        }, getOutcomeSummary(outcome.id)));
      }
    }
  }, {
    key: "render",
    value: function render() {
      var outcome = this.props.outcome;
      return React.createElement("div", {
        className: styles.folder
      }, React.createElement("div", {
        className: styles.folderIcon
      }, React.createElement(IconFolderSolid, null)), React.createElement("div", {
        className: styles.folderDetails
      }, React.createElement("div", {
        "data-automation": "outcomeFolder__folderTitle"
      }, this.renderTitle(outcome)), this.renderSummary(outcome), React.createElement("div", {
        className: styles.folderDescription
      }, React.createElement(Text, {
        size: "x-small"
      }, outcome.label))));
    }
  }]);

  OutcomeFolder.displayName = "OutcomeFolder";
  return OutcomeFolder;
}(React.Component), _class2.propTypes = {
  outcome: PropTypes.object.isRequired,
  clickable: PropTypes.bool,
  getOutcomeSummary: PropTypes.func.isRequired,
  setActiveCollection: PropTypes.func.isRequired,
  toggleExpandedIds: PropTypes.func.isRequired,
  activeCollectionId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
}, _class2.defaultProps = {
  clickable: true,
  activeCollectionId: null
}, _temp)) || _class);
export { OutcomeFolder as default };
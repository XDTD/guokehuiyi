import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { expect } from 'chai';
import { fromJS, Map } from 'immutable';
import { wrapAction } from 'multireducer';
import sinon from 'sinon';
import * as actions from '../actions';
import { SET_ERROR, VIEW_REPORT_ALIGNMENT, CLOSE_REPORT_ALIGNMENT } from '../../../constants';
import { setError } from '../../context/actions';
import createMockStore, { scopeActions } from '../../../test/createMockStore';
var scopedActions = scopeActions(_objectSpread({}, actions, {
  setError: setError
}));
var getUsersResponse = {
  users: [{
    uuid: '100'
  }, {
    uuid: '100'
  }],
  perPage: 50,
  total: 2
};
var rollupResponse = [{
  count: 2,
  mastery_count: 1,
  average_score: 0.3,
  outcome: {
    id: 2848,
    guid: '7DE656A0-7440-11DF-93FA-01FD9CFF4B22',
    title: 'Read grade-level text with purpose and understanding.',
    parent_id: 2257,
    position: 0,
    created_at: '2017-05-09T20:46:26.411Z',
    updated_at: '2017-05-09T20:46:26.411Z',
    label: 'CCSS.ELA-Literacy.RF.1.4.a',
    description: 'Read grade-level text with purpose and understanding.'
  }
}, {
  count: 2,
  mastery_count: 2,
  average_score: 0.7,
  uses_bank: false,
  outcome: {
    id: 2849,
    guid: '7DE6D0EE-7440-11DF-93FA-01FD9CFF4B22',
    title: 'Read grade-level text orally with accuracy, appropriate rate, and expression on successive readings.',
    parent_id: 2257,
    position: 1,
    created_at: '2017-05-09T20:12:06.430Z',
    updated_at: '2017-05-09T20:12:06.430Z',
    label: 'CCSS.ELA-Literacy.RF.1.4.b',
    description: 'Read grade-level text orally with accuracy, appropriate rate, and expression on successive readings.' // eslint-disable-line max-len

  }
}];
var fakeResults = {
  2848: [{
    user_uuid: 'bc5c4f0e-bfbb-46a7-98f3-1ee8c86a1c6f',
    percent_score: 0.3,
    points: 30.0,
    points_possible: 100
  }, {
    user_uuid: '560fddd9-9b16-4e3a-969c-2f095e7afc78',
    percent_score: 0.8,
    points: 80.0,
    points_possible: 100
  }],
  2849: [{
    user_uuid: 'bc5c4f0e-bfbb-46a7-98f3-1ee8c86a1c6f',
    percent_score: 0.9,
    points: 90.0,
    points_possible: 100
  }, {
    user_uuid: '560fddd9-9b16-4e3a-969c-2f095e7afc78',
    percent_score: 0.8,
    points: 80.0,
    points_possible: 100
  }]
};
var rollups = rollupResponse.map(function (_ref) {
  var count = _ref.count,
      masteryCount = _ref.mastery_count,
      outcome = _ref.outcome,
      averageScore = _ref.average_score,
      childArtifactCount = _ref.child_artifact_count,
      usesBank = _ref.uses_bank;
  return {
    outcomeId: outcome.id,
    count: count,
    masteryCount: masteryCount,
    averageScore: averageScore,
    childArtifactCount: childArtifactCount,
    usesBank: usesBank
  };
});
var userList = fakeResults['2848'].map(function (user) {
  return user.user_uuid;
});
var users = userList.map(function (uuid) {
  return {
    uuid: uuid
  };
});
var service = {
  getUsers: sinon.stub().resolves({
    users: users
  }),
  getOutcomeRollups: sinon.stub().resolves(rollupResponse),
  getOutcomeResults: function getOutcomeResults(host, jwt, t, i, outcomeId) {
    return Promise.resolve(fakeResults[outcomeId.toString()]);
  }
};
var failedService = {
  getOutcomeRollups: sinon.stub().rejects({
    error: 'OHNO'
  })
};
describe('report/actions', function () {
  describe('loadRollups', function () {
    it('calls outcome service to load rollups and individual results', function () {
      var state = {
        scopeForTest: {
          report: {
            users: users
          }
        }
      };
      var store = createMockStore(Map(fromJS(state)), service);
      return store.dispatch(actions.loadRollups('quiz', 101)).then(function () {
        var _store$getActions$sli = store.getActions().slice(1),
            _store$getActions$sli2 = _slicedToArray(_store$getActions$sli, 2),
            add = _store$getActions$sli2[0],
            update = _store$getActions$sli2[1];

        expect(add.type).to.equal(actions.setReportOutcomes.toString());
        rollupResponse.forEach(function (r) {
          expect(add.payload[r.outcome.id]).to.deep.equal(r.outcome);
        });
        expect(update.type).to.equal(actions.setRollups.toString());
        expect(update.payload).to.deep.equal(rollups);
        store.getActions().filter(function (act) {
          return act.payload.method === 'getOutcomeResults';
        }).forEach(function (act) {
          var _act$payload$args$sli = act.payload.args.slice(-1),
              _act$payload$args$sli2 = _slicedToArray(_act$payload$args$sli, 1),
              requestedUsers = _act$payload$args$sli2[0];

          expect(requestedUsers).to.deep.equal(userList);
        });
        var resultActions = store.getActions().slice(-2);
        resultActions.forEach(function (act) {
          var outcomeId = act.payload.outcomeId;
          var results = fakeResults[outcomeId];
          expect(act).to.deep.equal(scopedActions.setResults({
            outcomeId: outcomeId,
            results: results
          }));
        });
        return null;
      });
    });
    it('dispatches failure action on failure', function () {
      var store = createMockStore(Map(), failedService);
      return store.dispatch(actions.loadRollups('quiz', 101)).then(function () {
        var _store$getActions$sli3 = store.getActions().slice(1),
            _store$getActions$sli4 = _slicedToArray(_store$getActions$sli3, 1),
            err = _store$getActions$sli4[0];

        expect(err.type).to.equal(SET_ERROR);
        return null;
      });
    });
    describe('viewReportAlignment', function () {
      it('creates an action', function () {
        var action = actions.viewReportAlignment(12);
        expect(action.type).to.equal(VIEW_REPORT_ALIGNMENT);
        expect(action.payload).to.deep.equal(12);
      });
    });
    describe('closeReportAlignment', function () {
      it('creates an action', function () {
        var action = actions.closeReportAlignment();
        expect(action.type).to.equal(CLOSE_REPORT_ALIGNMENT);
      });
    });
  });
  describe('loadPage', function () {
    it('changes the page, then loads users / score data', function () {
      var store = createMockStore(Map(), service);
      return store.dispatch(actions.loadPage('quiz', 101, 2)).then(function () {
        expect(store.getActions()).to.deep.include.members([wrapAction(actions.setPage({
          number: 2,
          loading: true
        }), 'scopeForTest'), wrapAction(actions.setUsers(users), 'scopeForTest'), wrapAction(actions.setRollups(rollups), 'scopeForTest'), wrapAction(actions.setPage({
          number: 2,
          loading: false
        }), 'scopeForTest')]);
        return null;
      });
    });
    it('will reload the current page', function () {
      var state = {
        scopeForTest: {
          report: {
            page: {
              number: 10,
              loading: false
            }
          }
        }
      };
      var store = createMockStore(fromJS(state), service);
      return store.dispatch(actions.loadPage('quiz', 101, 10)).then(function () {
        expect(store.getActions()).to.deep.include.members([wrapAction(actions.setPage({
          number: 10,
          loading: true
        }), 'scopeForTest'), wrapAction(actions.setUsers(users), 'scopeForTest'), wrapAction(actions.setRollups(rollups), 'scopeForTest'), wrapAction(actions.setPage({
          number: 10,
          loading: false
        }), 'scopeForTest')]);
        return null;
      });
    });
    it('will not change to a new page until the prior page has loaded', function () {
      var state = {
        scopeForTest: {
          report: {
            page: {
              number: 5,
              loading: true
            }
          }
        }
      };
      var store = createMockStore(fromJS(state), service);
      return store.dispatch(actions.loadPage('quiz', 101, 2)).then(function () {
        expect(store.getActions()).to.deep.equal([]);
        return null;
      });
    });
    it('dispatches setUsers / setPageData on outcome service success', function () {
      var service = {
        getUsers: sinon.stub().returns(Promise.resolve(getUsersResponse))
      };
      var store = createMockStore(Map(), service);
      return store.dispatch(actions.loadPage('quiz', 101, 2)).then(function () {
        expect(store.getActions()).to.deep.include(scopedActions.setUsers(getUsersResponse.users));
        expect(store.getActions()).to.deep.include(scopedActions.setPageData({
          perPage: 50,
          total: 2
        }));
        return null;
      });
    });
    it('dispatches setError on outcome service failure', function () {
      var error = {
        message: 'foo bar baz'
      };
      var service = {
        getUsers: sinon.stub().returns(Promise.reject(error))
      };
      var store = createMockStore(Map(), service);
      return store.dispatch(actions.loadPage('quiz', 101, 2)).then(function () {
        expect(store.getActions()).to.have.length(4);
        expect(store.getActions()[3]).to.deep.equal(scopedActions.setError(error));
        return null;
      });
    });
    it('dispatches an alternative loadUsers function if specified', function () {
      var service = {
        getUsers: sinon.stub().returns(Promise.resolve(getUsersResponse))
      };
      var loadUsers = sinon.stub().returns(Promise.resolve());
      var store = createMockStore(Map(), service);
      return store.dispatch(actions.loadPage('quiz', 101, 2, loadUsers)).then(function () {
        expect(service.getUsers).not.to.have.been.called;
        expect(loadUsers).to.have.been.calledOnce;
        return null;
      });
    });
  });
  describe('loadUsers', function () {
    it('calls outcome service to load users', function () {
      var service = {
        getUsers: sinon.stub().returns(Promise.resolve(getUsersResponse))
      };
      var store = createMockStore(Map(), service);
      return store.dispatch(actions.loadUsers()).then(function () {
        expect(service.getUsers).to.have.been.calledOnce;
        return null;
      });
    });
  });
});
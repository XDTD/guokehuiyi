import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { shallow, mount } from 'enzyme';
import OutcomeViewModal from '../index';
import { Provider } from 'react-redux';
import createMockStore from '../../../test/createMockStore';
import { fromJS } from 'immutable';
describe('OutcomeViewModal', function () {
  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      outcome: {
        label: 'Foo',
        title: 'Bar',
        scoring_method: {
          scoring_tiers: [{
            description: 'it brings a tier to your eye',
            points: 100
          }]
        }
      },
      closeAlignment: sinon.spy(),
      isOpen: true
    }, props);
  }

  var store = createMockStore(fromJS({}));
  it('displays when isOpen true', function () {
    var wrapper = shallow(React.createElement(OutcomeViewModal, makeProps()));
    var modal = wrapper.find('Modal');
    expect(modal.prop('open')).to.be.true;
  });
  it('does not display when isOpen false', function () {
    var wrapper = shallow(React.createElement(OutcomeViewModal, Object.assign({}, makeProps(), {
      isOpen: false
    })));
    var modal = wrapper.find('Modal');
    expect(modal.prop('open')).to.be.false;
  });
  it('calls closeAlignment on close', function () {
    var props = makeProps();
    var wrapper = shallow(React.createElement(OutcomeViewModal, props));
    var modal = wrapper.find('Modal');
    modal.simulate('close');
    expect(props.closeAlignment.calledWith()).to.be.true;
  });
  it('calls closeAlignment on requestClose', function () {
    var props = makeProps();
    var wrapper = shallow(React.createElement(OutcomeViewModal, props));
    var modal = wrapper.find('Modal');
    modal.simulate('dismiss');
    expect(props.closeAlignment.calledWith()).to.be.true;
  });
  it('includes a close button in the footer', function () {
    var props = makeProps();
    var wrapper = shallow(React.createElement(OutcomeViewModal, props));
    var closeButton = wrapper.find('ModalFooter Button');
    expect(closeButton.length).to.equal(1);
    closeButton.simulate('click');
    expect(props.closeAlignment.calledWith()).to.be.true;
  });
  it('uses standard header', function () {
    var props = makeProps();
    var wrapper = shallow(React.createElement(OutcomeViewModal, props));
    var txt = wrapper.find('ModalHeader Heading Text');
    expect(txt.render().text()).to.equal('View Outcome');
  });
  it('uses provided header', function () {
    var props = makeProps({
      header: 'Overriding'
    });
    var wrapper = shallow(React.createElement(OutcomeViewModal, props));
    var txt = wrapper.find('ModalHeader Heading Text');
    expect(txt.render().text()).to.equal('Overriding');
  });
  it('renders an outcome view when loaded', function () {
    var props = makeProps();
    var wrapper = mount(React.createElement(Provider, {
      store: store
    }, React.createElement(OutcomeViewModal, props)));
    expect(wrapper.find('OutcomeView')).to.have.length(1);
  });
});
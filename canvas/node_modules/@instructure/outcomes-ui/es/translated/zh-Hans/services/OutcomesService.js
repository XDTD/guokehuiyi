import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import 'isomorphic-fetch';
import queryString from 'query-string';
var OUTCOME_QUERY_DEPTH = 2;

var checkResponse = function checkResponse(response) {
  if (!response.ok) {
    throw response;
  }

  return response;
};

var toJson = function toJson(response) {
  return response.json();
};

var getTotal = function getTotal(response) {
  var total = response.headers.get('total');
  return total ? Number.parseInt(total) : 0;
};

var OutcomesService = /*#__PURE__*/function () {
  function OutcomesService() {
    _classCallCheck(this, OutcomesService);
  }

  _createClass(OutcomesService, [{
    key: "get",
    value: function get(host, jwt, path) {
      return fetch(host + path, {
        headers: {
          Authorization: jwt
        }
      });
    }
  }, {
    key: "post",
    value: function post(host, jwt, path, body) {
      return fetch(host + path, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: jwt
        },
        body: JSON.stringify(body)
      });
    }
  }, {
    key: "getContext",
    value: function getContext(host, jwt, contextUuid) {
      var params = '?includes[]=outcome_proficiency&includes[]=outcome_calculation_method';
      return this.get(host, jwt, "/api/contexts/".concat(contextUuid).concat(params)).then(checkResponse).then(toJson);
    }
  }, {
    key: "loadOutcomes",
    value: function loadOutcomes(host, jwt) {
      var contextUuid = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : '';
      var roots = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var params = "?excludes[]=scoring_method&depth=".concat(OUTCOME_QUERY_DEPTH);

      if (contextUuid) {
        params += "&".concat(queryString.stringify({
          context_uuid: contextUuid
        }));
      }

      if (roots) {
        params += "&".concat(queryString.stringify({
          roots: roots
        }, {
          arrayFormat: 'bracket'
        }));
      }

      return this.get(host, jwt, "/api/outcomes/tree".concat(params)).then(checkResponse).then(toJson).then(function (json) {
        return json.outcome_tree || json;
      });
    }
  }, {
    key: "getOutcome",
    value: function getOutcome(host, jwt, id) {
      return this.get(host, jwt, "/api/outcomes/".concat(id)).then(checkResponse).then(toJson).then(function (json) {
        return json;
      });
    }
  }, {
    key: "getAlignments",
    value: function getAlignments(host, jwt, alignmentSetId) {
      if (!alignmentSetId) {
        return Promise.resolve([]);
      }

      var params = {
        includes: ['outcomes']
      };
      return this.get(host, jwt, "/api/alignment_sets/".concat(alignmentSetId, "?").concat(queryString.stringify(params))).then(checkResponse).then(toJson).then(function (json) {
        return json.alignment_set || json;
      });
    }
  }, {
    key: "getArtifact",
    value: function getArtifact(host, jwt, artifactType, artifactId) {
      var params = {
        artifact_type: artifactType,
        artifact_id: artifactId
      };
      return this.get(host, jwt, "/api/artifact?".concat(queryString.stringify(params))).then(checkResponse).then(toJson).then(function (json) {
        return json.alignment_set || json;
      });
    }
  }, {
    key: "upsertArtifact",
    value: function upsertArtifact(host, jwt, artifactType, artifactId, contextUuid, outcomeIds) {
      var params = {
        artifact_id: artifactId,
        artifact_type: artifactType,
        context_uuid: contextUuid,
        outcome_ids: outcomeIds
      };
      return this.post(host, jwt, '/api/artifacts', params).then(checkResponse).then(function (response) {
        if (!outcomeIds.length) {
          return Promise.resolve({
            guid: null
          });
        }

        return toJson(response);
      }).then(function (json) {
        return json.alignment_set || json;
      });
    }
  }, {
    key: "createAlignmentSet",
    value: function createAlignmentSet(host, jwt, outcomeIds) {
      if (!outcomeIds.length) {
        return Promise.resolve({
          guid: null
        });
      }

      var params = {
        outcome_ids: outcomeIds
      };
      return this.post(host, jwt, '/api/alignment_sets', params).then(checkResponse).then(toJson).then(function (json) {
        return json.alignment_set || json;
      });
    }
  }, {
    key: "getOutcomeRollups",
    value: function getOutcomeRollups(host, jwt, artifactType, artifactId) {
      var params = {
        artifact_type: artifactType,
        artifact_id: artifactId
      };
      return this.get(host, jwt, "/api/outcome_rollups?".concat(queryString.stringify(params))).then(checkResponse).then(toJson).then(function (json) {
        return json.outcome_rollups || json;
      });
    }
  }, {
    key: "getOutcomeResults",
    value: function getOutcomeResults(host, jwt, artifactType, artifactId, outcomeId, userList) {
      var params = {
        artifact_type: artifactType,
        artifact_id: artifactId,
        outcome_id: outcomeId,
        user_uuid_list: userList.join(',')
      };
      return this.get(host, jwt, "/api/authoritative_results?".concat(queryString.stringify(params))).then(checkResponse).then(toJson).then(function (json) {
        return json.results;
      });
    }
  }, {
    key: "getUsers",
    value: function getUsers(host, jwt, artifactType, artifactId, page) {
      var params = {
        page: page,
        artifact_type: artifactType,
        artifact_id: artifactId
      };
      var response;
      return this.get(host, jwt, "/api/users?".concat(queryString.stringify(params))).then(checkResponse).then(function (resp) {
        return (response = resp).json();
      }) // eslint-disable-line no-return-assign
      .then(function (json) {
        return {
          users: json,
          page: page,
          total: parseInt(response.headers.get('total'), 10),
          perPage: parseInt(response.headers.get('per-page'), 10)
        };
      });
    }
  }, {
    key: "getIndividualResults",
    value: function getIndividualResults(host, jwt, artifactType, artifactId, userUuid) {
      var params = {
        artifact_type: artifactType,
        artifact_id: artifactId,
        user_uuid: userUuid,
        includes: ['outcomes', 'outcome_rollups']
      };
      return this.get(host, jwt, "/api/individual_results?".concat(queryString.stringify(params, {
        arrayFormat: 'bracket'
      }))).then(checkResponse).then(toJson).then(function (json) {
        return json.results;
      });
    }
  }, {
    key: "getFeatures",
    value: function getFeatures(host, jwt) {
      return this.get(host, jwt, '/api/features').then(checkResponse).then(toJson);
    }
  }, {
    key: "listOutcomes",
    value: function listOutcomes(host, jwt, page) {
      var contextUuid = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var artifactId = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var artifactType = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var params = {
        per_page: 10,
        page: page
      };

      if (contextUuid) {
        params['context_uuid'] = contextUuid;
      }

      if (artifactId) {
        params['artifact_id'] = artifactId;
      }

      if (artifactType) {
        params['artifact_type'] = artifactType;
      }

      var total = 0;
      return this.get(host, jwt, "/api/outcomes/list?".concat(queryString.stringify(params))).then(checkResponse).then(function (response) {
        total = getTotal(response);
        return response;
      }).then(toJson).then(function (json) {
        return {
          outcomes: json,
          total: total
        };
      });
    }
  }, {
    key: "getSearchResults",
    value: function getSearchResults(host, jwt, text, page) {
      var contextUuid = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : '';
      var params = {
        text: text,
        page: page
      };

      if (contextUuid) {
        params['context_uuid'] = contextUuid;
      }

      var total = 0;
      return this.get(host, jwt, "/api/outcomes/search?".concat(queryString.stringify(params))).then(checkResponse).then(function (response) {
        total = getTotal(response);
        return response;
      }).then(toJson).then(function (json) {
        return Promise.resolve(_objectSpread({}, json, {
          total: total
        }));
      });
    }
  }]);

  return OutcomesService;
}();

export default OutcomesService;
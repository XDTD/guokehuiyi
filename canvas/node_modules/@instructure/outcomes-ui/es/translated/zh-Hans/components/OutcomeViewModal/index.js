import React from 'react';
import PropTypes from 'prop-types';
import { Button, CloseButton } from '@instructure/ui-buttons';
import { Text } from '@instructure/ui-text';
import { Heading } from '@instructure/ui-heading';
import { Modal } from '@instructure/ui-modal';
import { Focusable } from '@instructure/ui-focusable';
import { View } from '@instructure/ui-view';
import ConnectedOutcomeView from '../../containers/ConnectedOutcomeView';
var ModalHeader = Modal.Header,
    ModalBody = Modal.Body,
    ModalFooter = Modal.Footer;

var OutcomeViewModal = function OutcomeViewModal(props) {
  var header = props.header,
      outcome = props.outcome,
      outcomeResult = props.outcomeResult,
      artifactTypeName = props.artifactTypeName,
      displayMasteryDescription = props.displayMasteryDescription,
      displayMasteryPercentText = props.displayMasteryPercentText,
      scope = props.scope;
  var title = outcome.title,
      description = outcome.description,
      scoringMethod = outcome.scoring_method;
  var scoringTiers = outcome.scoring_method ? outcome.scoring_method.scoring_tiers : [];
  return React.createElement(Modal, {
    open: props.isOpen,
    shouldCloseOnDocumentClick: true,
    onDismiss: function onDismiss() {
      return props.closeAlignment();
    },
    onClose: function onClose() {
      props.closeAlignment();
    },
    transition: "fade",
    size: "fullscreen",
    label: "\u7ED3\u679C",
    zIndex: "9999",
    "data-automation": "outcomeView__modal"
  }, React.createElement(ModalHeader, null, React.createElement(CloseButton, {
    offset: "medium",
    onClick: function onClick() {
      return props.closeAlignment();
    },
    placement: "end",
    variant: "icon",
    "data-automation": "outcomeView__closeButton"
  }, "\u5173\u95ED"), React.createElement(Heading, null, React.createElement(Text, {
    size: "large",
    "data-automation": "outcomeView__header"
  }, header || "\u67E5\u770B\u7ED3\u679C"))), React.createElement(ModalBody, {
    padding: "none"
  }, React.createElement(Focusable, null, function (_ref) {
    var focusVisible = _ref.focusVisible;
    return React.createElement(View, {
      as: "div",
      tabIndex: "0",
      padding: "medium",
      position: "relative",
      focusPosition: "inset",
      withFocusOutline: focusVisible
    }, React.createElement(ConnectedOutcomeView, {
      scope: scope,
      description: description,
      title: title,
      scoringMethod: scoringMethod,
      scoringTiers: scoringTiers,
      artifactTypeName: artifactTypeName,
      displayMasteryDescription: displayMasteryDescription,
      displayMasteryPercentText: displayMasteryPercentText,
      outcomeResult: outcomeResult
    }));
  })), React.createElement(ModalFooter, null, React.createElement(Button, {
    onClick: function onClick() {
      return props.closeAlignment();
    },
    variant: "primary",
    "data-automation": "outcomeView__submitButton"
  }, "\u786E\u5B9A")));
};

OutcomeViewModal.propTypes = {
  outcome: PropTypes.shape({
    label: PropTypes.string.isRequired,
    title: PropTypes.string.isRequired,
    description: PropTypes.string,
    scoring_method: PropTypes.object
  }).isRequired,
  outcomeResult: PropTypes.object,
  closeAlignment: PropTypes.func.isRequired,
  isOpen: PropTypes.bool.isRequired,
  artifactTypeName: PropTypes.string,
  displayMasteryDescription: PropTypes.bool,
  displayMasteryPercentText: PropTypes.bool,
  header: PropTypes.string,
  scope: PropTypes.string.isRequired
};
OutcomeViewModal.defaultProps = {
  outcomeResult: null,
  artifactTypeName: null,
  displayMasteryDescription: false,
  displayMasteryPercentText: false,
  header: null
};
export default OutcomeViewModal;
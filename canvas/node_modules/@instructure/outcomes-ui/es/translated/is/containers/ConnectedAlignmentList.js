import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { bindActionCreators as bindScopedActionCreators } from 'multireducer';
import { compose } from 'redux';
import { connect } from 'react-redux';
import AlignmentList from '../components/AlignmentList';
import WithAlignmentSet from '../components/WithAlignmentSet';
import { getAlignedOutcomes, makeIsOpen } from '../store/alignments/selectors';
import * as contextActions from '../store/context/actions';
import * as alignmentActions from '../store/alignments/actions';
import * as outcomePickerActions from '../store/OutcomePicker/actions';
import ConnectedOutcomePickerModal from './ConnectedOutcomePickerModal';
import ConnectedOutcomeTray from './ConnectedOutcomeTray';

var mapStateToProps = function mapStateToProps(state, ownProps) {
  var scope = ownProps.scope,
      pickerType = ownProps.pickerType;
  return {
    addModal: pickerType === 'tray' ? ConnectedOutcomeTray : ConnectedOutcomePickerModal,
    alignedOutcomes: getAlignedOutcomes(state, scope),
    isOpen: makeIsOpen(state, scope)
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch, ownProps) {
  var scope = ownProps.scope;
  return _objectSpread({}, bindScopedActionCreators(contextActions, dispatch), {}, bindScopedActionCreators(alignmentActions, dispatch, scope), {}, bindScopedActionCreators(outcomePickerActions, dispatch, scope));
};

var ConnectedAlignmentList = compose(connect(mapStateToProps, mapDispatchToProps), WithAlignmentSet)(AlignmentList);
export default ConnectedAlignmentList;
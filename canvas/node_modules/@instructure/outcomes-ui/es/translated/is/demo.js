import "core-js/modules/es.symbol";
import "core-js/modules/es.symbol.description";
import "core-js/modules/es.symbol.async-iterator";
import "core-js/modules/es.symbol.has-instance";
import "core-js/modules/es.symbol.is-concat-spreadable";
import "core-js/modules/es.symbol.iterator";
import "core-js/modules/es.symbol.match";
import "core-js/modules/es.symbol.replace";
import "core-js/modules/es.symbol.search";
import "core-js/modules/es.symbol.species";
import "core-js/modules/es.symbol.split";
import "core-js/modules/es.symbol.to-primitive";
import "core-js/modules/es.symbol.to-string-tag";
import "core-js/modules/es.symbol.unscopables";
import "core-js/modules/es.array.concat";
import "core-js/modules/es.array.copy-within";
import "core-js/modules/es.array.every";
import "core-js/modules/es.array.fill";
import "core-js/modules/es.array.filter";
import "core-js/modules/es.array.find";
import "core-js/modules/es.array.find-index";
import "core-js/modules/es.array.flat";
import "core-js/modules/es.array.flat-map";
import "core-js/modules/es.array.for-each";
import "core-js/modules/es.array.from";
import "core-js/modules/es.array.includes";
import "core-js/modules/es.array.index-of";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.array.join";
import "core-js/modules/es.array.last-index-of";
import "core-js/modules/es.array.map";
import "core-js/modules/es.array.of";
import "core-js/modules/es.array.reduce";
import "core-js/modules/es.array.reduce-right";
import "core-js/modules/es.array.slice";
import "core-js/modules/es.array.some";
import "core-js/modules/es.array.species";
import "core-js/modules/es.array.splice";
import "core-js/modules/es.array.unscopables.flat";
import "core-js/modules/es.array.unscopables.flat-map";
import "core-js/modules/es.array-buffer.constructor";
import "core-js/modules/es.date.to-primitive";
import "core-js/modules/es.function.has-instance";
import "core-js/modules/es.function.name";
import "core-js/modules/es.json.to-string-tag";
import "core-js/modules/es.map";
import "core-js/modules/es.math.acosh";
import "core-js/modules/es.math.asinh";
import "core-js/modules/es.math.atanh";
import "core-js/modules/es.math.cbrt";
import "core-js/modules/es.math.clz32";
import "core-js/modules/es.math.cosh";
import "core-js/modules/es.math.expm1";
import "core-js/modules/es.math.fround";
import "core-js/modules/es.math.hypot";
import "core-js/modules/es.math.imul";
import "core-js/modules/es.math.log10";
import "core-js/modules/es.math.log1p";
import "core-js/modules/es.math.log2";
import "core-js/modules/es.math.sign";
import "core-js/modules/es.math.sinh";
import "core-js/modules/es.math.tanh";
import "core-js/modules/es.math.to-string-tag";
import "core-js/modules/es.math.trunc";
import "core-js/modules/es.number.constructor";
import "core-js/modules/es.number.epsilon";
import "core-js/modules/es.number.is-finite";
import "core-js/modules/es.number.is-integer";
import "core-js/modules/es.number.is-nan";
import "core-js/modules/es.number.is-safe-integer";
import "core-js/modules/es.number.max-safe-integer";
import "core-js/modules/es.number.min-safe-integer";
import "core-js/modules/es.number.parse-float";
import "core-js/modules/es.number.parse-int";
import "core-js/modules/es.number.to-fixed";
import "core-js/modules/es.object.assign";
import "core-js/modules/es.object.define-getter";
import "core-js/modules/es.object.define-setter";
import "core-js/modules/es.object.entries";
import "core-js/modules/es.object.freeze";
import "core-js/modules/es.object.from-entries";
import "core-js/modules/es.object.get-own-property-descriptor";
import "core-js/modules/es.object.get-own-property-descriptors";
import "core-js/modules/es.object.get-own-property-names";
import "core-js/modules/es.object.get-prototype-of";
import "core-js/modules/es.object.is";
import "core-js/modules/es.object.is-extensible";
import "core-js/modules/es.object.is-frozen";
import "core-js/modules/es.object.is-sealed";
import "core-js/modules/es.object.keys";
import "core-js/modules/es.object.lookup-getter";
import "core-js/modules/es.object.lookup-setter";
import "core-js/modules/es.object.prevent-extensions";
import "core-js/modules/es.object.seal";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.object.values";
import "core-js/modules/es.promise";
import "core-js/modules/es.promise.finally";
import "core-js/modules/es.reflect.apply";
import "core-js/modules/es.reflect.construct";
import "core-js/modules/es.reflect.define-property";
import "core-js/modules/es.reflect.delete-property";
import "core-js/modules/es.reflect.get";
import "core-js/modules/es.reflect.get-own-property-descriptor";
import "core-js/modules/es.reflect.get-prototype-of";
import "core-js/modules/es.reflect.has";
import "core-js/modules/es.reflect.is-extensible";
import "core-js/modules/es.reflect.own-keys";
import "core-js/modules/es.reflect.prevent-extensions";
import "core-js/modules/es.reflect.set";
import "core-js/modules/es.reflect.set-prototype-of";
import "core-js/modules/es.regexp.constructor";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.regexp.flags";
import "core-js/modules/es.regexp.to-string";
import "core-js/modules/es.set";
import "core-js/modules/es.string.code-point-at";
import "core-js/modules/es.string.ends-with";
import "core-js/modules/es.string.from-code-point";
import "core-js/modules/es.string.includes";
import "core-js/modules/es.string.iterator";
import "core-js/modules/es.string.match";
import "core-js/modules/es.string.pad-end";
import "core-js/modules/es.string.pad-start";
import "core-js/modules/es.string.raw";
import "core-js/modules/es.string.repeat";
import "core-js/modules/es.string.replace";
import "core-js/modules/es.string.search";
import "core-js/modules/es.string.split";
import "core-js/modules/es.string.starts-with";
import "core-js/modules/es.string.trim";
import "core-js/modules/es.string.trim-end";
import "core-js/modules/es.string.trim-start";
import "core-js/modules/es.string.anchor";
import "core-js/modules/es.string.big";
import "core-js/modules/es.string.blink";
import "core-js/modules/es.string.bold";
import "core-js/modules/es.string.fixed";
import "core-js/modules/es.string.fontcolor";
import "core-js/modules/es.string.fontsize";
import "core-js/modules/es.string.italics";
import "core-js/modules/es.string.link";
import "core-js/modules/es.string.small";
import "core-js/modules/es.string.strike";
import "core-js/modules/es.string.sub";
import "core-js/modules/es.string.sup";
import "core-js/modules/es.typed-array.float32-array";
import "core-js/modules/es.typed-array.float64-array";
import "core-js/modules/es.typed-array.int8-array";
import "core-js/modules/es.typed-array.int16-array";
import "core-js/modules/es.typed-array.int32-array";
import "core-js/modules/es.typed-array.uint8-array";
import "core-js/modules/es.typed-array.uint8-clamped-array";
import "core-js/modules/es.typed-array.uint16-array";
import "core-js/modules/es.typed-array.uint32-array";
import "core-js/modules/es.typed-array.copy-within";
import "core-js/modules/es.typed-array.every";
import "core-js/modules/es.typed-array.fill";
import "core-js/modules/es.typed-array.filter";
import "core-js/modules/es.typed-array.find";
import "core-js/modules/es.typed-array.find-index";
import "core-js/modules/es.typed-array.for-each";
import "core-js/modules/es.typed-array.from";
import "core-js/modules/es.typed-array.includes";
import "core-js/modules/es.typed-array.index-of";
import "core-js/modules/es.typed-array.iterator";
import "core-js/modules/es.typed-array.join";
import "core-js/modules/es.typed-array.last-index-of";
import "core-js/modules/es.typed-array.map";
import "core-js/modules/es.typed-array.of";
import "core-js/modules/es.typed-array.reduce";
import "core-js/modules/es.typed-array.reduce-right";
import "core-js/modules/es.typed-array.reverse";
import "core-js/modules/es.typed-array.set";
import "core-js/modules/es.typed-array.slice";
import "core-js/modules/es.typed-array.some";
import "core-js/modules/es.typed-array.sort";
import "core-js/modules/es.typed-array.subarray";
import "core-js/modules/es.typed-array.to-locale-string";
import "core-js/modules/es.typed-array.to-string";
import "core-js/modules/es.weak-map";
import "core-js/modules/es.weak-set";
import "core-js/modules/web.dom-collections.for-each";
import "core-js/modules/web.dom-collections.iterator";
import "core-js/modules/web.immediate";
import "core-js/modules/web.queue-microtask";
import "core-js/modules/web.url";
import "core-js/modules/web.url.to-json";
import "core-js/modules/web.url-search-params";

var _process, _process$env;

import 'regenerator-runtime/runtime';
import React from 'react';
import { render } from 'react-dom';
import { fromPairs } from 'lodash';
import '@instructure/canvas-theme';
import '@instructure/canvas-high-contrast-theme';
import { Alert } from '@instructure/ui-alerts';
import { Heading } from '@instructure/ui-heading';
import { Checkbox } from '@instructure/ui-checkbox';
import { SimpleSelect } from '@instructure/ui-simple-select';
import { Tabs } from '@instructure/ui-tabs';
import { ApplyTheme } from '@instructure/ui-themeable';
import { OutcomeAlignments, OutcomeCount, OutcomesPerStudentReport, OutcomeList, AlignmentButton } from './index';
var styles = {
  componentId: 'dCZbw',
  template: function template(theme) {
    return "\n\n* {\n  box-sizing: border-box;\n}\n\nhtml {\n  font-size: 1rem;\n}\n\nhtml, body {\n  margin: 0;\n  height: 100%;\n  font-family: sans-serif;\n}\n\n.outcomes-ui__src--root {\n  background: white;\n  color: black;\n  padding: 2rem;\n  margin: 2rem;\n}\n\n.outcomes-ui__src--item {\n  padding-bottom: 1rem;\n}\n\n.outcomes-ui__src--item > div {\n    padding-top: 0.25rem;\n    padding-bottom: 0.25rem;\n  }\n\n.outcomes-ui__src--report {\n  max-width: calc(85vw - 128px);\n}\n\n.outcomes-ui__src--mastery {\n  padding-bottom: 2rem;\n}\n\n#outcomes-ui__src--screenreaderNotifications {\n  height: 1px;\n  width: 1px;\n  clip: rect(0, 0, 0, 0);\n  overflow: hidden;\n}\n";
  },
  'root': 'outcomes-ui__src--root',
  'item': 'outcomes-ui__src--item',
  'report': 'outcomes-ui__src--report',
  'mastery': 'outcomes-ui__src--mastery',
  'screenreaderNotifications': 'outcomes-ui__src--screenreaderNotifications'
};
var themes = ['canvas', 'canvas-high-contrast'];
var root = document.createElement('div');
root.setAttribute('id', 'app');
root.classList.add(styles.root);
document.body.appendChild(root);
var alert = document.createElement('div');
alert.setAttribute('id', 'alert');
document.body.appendChild(alert);

var getLive = function getLive() {
  return document.getElementById('alert-live-region');
};

getLive().setAttribute('role', 'alert');

var screenreaderNotification = function screenreaderNotification(text) {
  render(React.createElement(Alert, {
    screenReaderOnly: true,
    liveRegion: getLive
  }, text), alert);
};

var searchString = window.location.search.slice(1);
var query = fromPairs(searchString.split('&').map(function (kv) {
  return kv.split('=');
}));
var createJwt = query.jwt || process.env.CREATE_TOKEN;
var createKindergartenJwt = query.jwt || process.env.CREATE_KINDERGARTEN_TOKEN;
var createFirstGradeJwt = query.jwt || process.env.CREATE_FIRST_GRADE_TOKEN;
var reportJwt = query.jwt || process.env.REPORT_TOKEN;
var outcomesHost = "http://".concat(query.host || window.location.host);
var _query$artifactType = query.artifactType,
    artifactType = _query$artifactType === void 0 ? 'quizzes.quiz' : _query$artifactType,
    _query$artifactId = query.artifactId,
    artifactId = _query$artifactId === void 0 ? '99' : _query$artifactId;

var DemoAlignment = function DemoAlignment(props) {
  /* eslint-disable no-console, react/prop-types */
  var name = props.name,
      alignmentSetId = props.alignmentSetId,
      artifactType = props.artifactType,
      artifactId = props.artifactId,
      artifactTypeName = props.artifactTypeName,
      contextUuid = props.contextUuid,
      emptySetHeading = props.emptySetHeading,
      displayMasteryDescription = props.displayMasteryDescription,
      displayMasteryPercentText = props.displayMasteryPercentText,
      jwt = props.jwt,
      useAlignmentButton = props.useAlignmentButton;
  return React.createElement("div", {
    className: styles.item,
    "data-automation": "artifact"
  }, React.createElement(Heading, {
    level: "h3"
  }, name, " \xA0", React.createElement(OutcomeCount, {
    alignmentSetId: alignmentSetId,
    artifactType: artifactType,
    artifactId: artifactId,
    contextUuid: contextUuid,
    host: outcomesHost,
    jwt: jwt
  })), React.createElement(OutcomeList, {
    alignmentSetId: alignmentSetId,
    artifactType: artifactType,
    artifactId: artifactId,
    contextUuid: contextUuid,
    host: outcomesHost,
    jwt: jwt,
    emptyText: "No outcomes are aligned"
  }), useAlignmentButton ? React.createElement("div", null, React.createElement("br", null), React.createElement(AlignmentButton, {
    artifactType: artifactType,
    artifactTypeName: artifactTypeName,
    artifactId: artifactId,
    alignmentSetId: alignmentSetId,
    contextUuid: contextUuid,
    host: outcomesHost,
    jwt: jwt,
    liveRegion: getLive,
    screenreaderNotification: screenreaderNotification,
    readOnly: readOnly === 'true'
  })) : React.createElement(OutcomeAlignments, {
    alignmentSetId: alignmentSetId,
    pickerType: currentPicker,
    contextUuid: contextUuid,
    emptySetHeading: emptySetHeading,
    onUpdate: console.log,
    artifactType: artifactType,
    artifactId: artifactId,
    artifactTypeName: artifactTypeName,
    displayMasteryDescription: displayMasteryDescription,
    displayMasteryPercentText: displayMasteryPercentText,
    host: outcomesHost,
    jwt: jwt,
    screenreaderNotification: screenreaderNotification,
    liveRegion: getLive,
    readOnly: readOnly === 'true'
  }));
};

var currentPicker = 'dialog';
var currentTheme = ((_process = process) === null || _process === void 0 ? void 0 : (_process$env = _process.env) === null || _process$env === void 0 ? void 0 : _process$env.DEFAULT_HIGH_CONTRAST) ? 'canvas-high-contrast' : 'canvas';
var readOnly = 'false';
var currentTab = 'alignments';

var reset = function reset() {
  render(React.createElement("div", null), root);
  rerender();
};

var handleThemeChange = function handleThemeChange(_, _ref) {
  var theme = _ref.value;
  currentTheme = theme;
  reset();
};

var handlePickerChange = function handlePickerChange(_, _ref2) {
  var picker = _ref2.value;
  currentPicker = picker;
  reset();
};

var handleReadOnlyChange = function handleReadOnlyChange(_, _ref3) {
  var value = _ref3.value;
  readOnly = value;
  reset();
};

var showRollups = true;

function handleShowRollupsChange() {
  showRollups = !showRollups;
  rerender();
}

var handleTabChange = function handleTabChange(_, _ref4) {
  var id = _ref4.id;
  currentTab = id;
  rerender();
};

function rerender() {
  render(React.createElement(ApplyTheme, {
    theme: ApplyTheme.generateTheme(currentTheme)
  }, React.createElement(Tabs, {
    onRequestTabChange: handleTabChange
  }, React.createElement(Tabs.Panel, {
    id: "alignments",
    renderTitle: "Alignments",
    selected: currentTab === 'alignments'
  }, React.createElement(SimpleSelect, {
    renderLabel: "Picker",
    onChange: handlePickerChange,
    value: currentPicker,
    "data-automation": "demoAlignment__pickerSelect"
  }, React.createElement(SimpleSelect.Option, {
    id: "dialog",
    value: "dialog"
  }, "Dialog Picker"), React.createElement(SimpleSelect.Option, {
    id: "tray",
    value: "tray"
  }, "Tray Picker")), React.createElement(SimpleSelect, {
    renderLabel: "Read only",
    onChange: handleReadOnlyChange,
    value: readOnly
  }, React.createElement(SimpleSelect.Option, {
    id: "true",
    key: "true",
    value: "true"
  }, "true"), React.createElement(SimpleSelect.Option, {
    id: "false",
    key: "false",
    value: "false"
  }, "false")), React.createElement(DemoAlignment, {
    name: "Quiz #99",
    alignmentSetId: "d15f9530-81af-4ab5-9da7-7b49ee1aac0d",
    artifactType: artifactType,
    artifactId: artifactId,
    contextUuid: "dummy_uuid",
    emptySetHeading: "Align Institution outcomes to this quiz.",
    displayMasteryDescription: true,
    displayMasteryPercentText: true,
    artifactTypeName: "Quiz",
    jwt: createJwt
  }), React.createElement(DemoAlignment, {
    alignmentSetId: "",
    name: "Question #100",
    contextUuid: "dummy_uuid",
    artifactType: "quizzes.item",
    artifactId: "100",
    emptySetHeading: "Align Institution outcomes to this question.",
    jwt: createJwt
  }), React.createElement(DemoAlignment, {
    alignmentSetId: "",
    name: "Kindergarten Science Question #101",
    artifactType: "quizzes.item",
    artifactId: "101",
    contextUuid: "K-science",
    emptySetHeading: "Align Institution outcomes to this question.",
    jwt: createKindergartenJwt
  }), React.createElement(DemoAlignment, {
    alignmentSetId: "",
    name: "First Grade Science Question #102",
    artifactType: "quizzes.item",
    artifactId: "102",
    contextUuid: "1-science",
    emptySetHeading: "Align Institution outcomes to this question.",
    jwt: createFirstGradeJwt
  }), React.createElement(DemoAlignment, {
    alignmentSetId: "",
    useAlignmentButton: true,
    name: "Quiz #103",
    artifactType: "quizzes.quiz",
    artifactId: "103",
    contextUuid: "dummy_uuid",
    emptySetHeading: "Align Institution outcomes to this quiz.",
    jwt: createJwt,
    alignmentWidget: AlignmentButton
  })), React.createElement(Tabs.Panel, {
    selected: currentTab === 'report',
    renderTitle: "Report",
    textAlign: "center",
    id: "report"
  }, React.createElement("div", {
    style: {
      backgroundColor: 'lightgrey'
    }
  }, React.createElement(Checkbox, {
    label: "Show Rollups",
    checked: showRollups,
    onChange: handleShowRollupsChange
  }), React.createElement("div", {
    className: styles.report
  }, React.createElement(OutcomesPerStudentReport, {
    artifactType: artifactType,
    artifactId: artifactId,
    host: outcomesHost,
    jwt: reportJwt,
    scope: "report",
    contextUuid: "dummy_uuid",
    showRollups: showRollups
  })))), React.createElement(Tabs.Panel, {
    title: "Theme",
    textAlign: "center",
    id: "theme",
    selected: currentTab === 'theme'
  }, React.createElement(SimpleSelect, {
    renderLabel: "Theme",
    onChange: handleThemeChange,
    value: currentTheme
  }, themes.map(function (themeKey) {
    return React.createElement(SimpleSelect.Option, {
      id: themeKey,
      key: themeKey,
      value: themeKey
    }, themeKey);
  }))))), root);
}

rerender();
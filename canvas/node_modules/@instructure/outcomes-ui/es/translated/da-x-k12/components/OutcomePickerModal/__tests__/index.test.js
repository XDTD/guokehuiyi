import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { shallow, mount } from 'enzyme';
import checkA11y from '../../../test/checkA11y';
import OutcomePickerModal from '../index';
describe('OutcomePickerModal', function () {
  var primaryButtonSelector = 'Button[variant="primary"]';
  var cancelButtonSelector = 'Button[variant="default"]';

  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      outcomePickerState: 'choosing',
      outcomePicker: function outcomePicker() {
        return React.createElement("div", {
          className: "outcomePicker"
        });
      },
      // eslint-disable-line react/display-name
      resetOutcomePicker: sinon.spy(),
      closeOutcomePicker: sinon.spy(),
      loadOutcomePicker: sinon.spy(),
      setFocusedOutcome: sinon.spy(),
      onModalOpen: sinon.spy(),
      onModalClose: sinon.spy(),
      setSearchText: sinon.spy(),
      onUpdate: sinon.spy(),
      anyOutcomeSelected: false,
      saveOutcomePickerAlignments: sinon.stub().returns(Promise.resolve()),
      scope: 'scopeForTest'
    }, props);
  }

  it('renders a modal', function () {
    var wrapper = shallow(React.createElement(OutcomePickerModal, makeProps()));
    expect(wrapper.find('Modal')).to.have.length(1);
  });
  it('renders modal closed by when state is closed', function () {
    var props = makeProps({
      outcomePickerState: 'closed'
    });
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    expect(wrapper.find('Modal').prop('open')).to.be.false;
  });
  it('renders modal open when state not closed', function () {
    var wrapper = shallow(React.createElement(OutcomePickerModal, makeProps()));
    expect(wrapper.find('Modal').prop('open')).to.be.true;
  });
  it('triggers onModalOpen on modal open', function (done) {
    var props = makeProps();
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    wrapper.find('Modal').simulate('open');
    setTimeout(function () {
      expect(props.onModalOpen.calledOnce).to.be.true;
      done();
    }, 1);
  });
  it('closes modal on requestClose', function () {
    var props = makeProps();
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    wrapper.find('Modal').simulate('dismiss');
    expect(props.closeOutcomePicker.calledOnce).to.be.true;
  });
  it('resets modal on via onExited prop', function (done) {
    var props = makeProps();
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    wrapper.find('Modal').prop('onExited')();
    setTimeout(function () {
      expect(props.resetOutcomePicker.calledOnce).to.be.true;
      done();
    }, 1);
  });
  it('calls focus on the trigger element when modal dismissed', function () {
    var props = makeProps({
      trigger: {
        focus: sinon.stub()
      }
    });
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    wrapper.find('Modal').simulate('close');
    expect(props.trigger.focus.called).to.be.true;
  });
  it('shows "Confirm Alignments" when picker in choosing state and an outcome is selected', function () {
    var props = makeProps({
      outcomePickerState: 'choosing',
      anyOutcomeSelected: true
    });
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    expect(wrapper.find(primaryButtonSelector).childAt(0).text()).to.equal('Confirm Alignments');
  });
  it('shows "Done" when picker in choosing state and no outcome is selected', function () {
    var props = makeProps({
      outcomePickerState: 'choosing',
      anyOutcomeSelected: false
    });
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    expect(wrapper.find(primaryButtonSelector).childAt(0).text()).to.equal('Done');
  });
  it('shows "OK" when picker in complete state', function () {
    var props = makeProps({
      outcomePickerState: 'complete'
    });
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    expect(wrapper.find(primaryButtonSelector).childAt(0).text()).to.equal('OK');
  });
  it('has Done and Cancel buttons disabled when picker in loading state', function () {
    var props = makeProps({
      outcomePickerState: 'loading'
    });
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    expect(wrapper.find(primaryButtonSelector).childAt(0).text()).to.equal('Done');
    wrapper.find('ModalFooter Button').forEach(function (btn) {
      expect(btn.prop('disabled')).to.equal(true);
    });
  });
  it('has OK and Cancel buttons disabled when picker in saving state', function () {
    var props = makeProps({
      outcomePickerState: 'saving'
    });
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    expect(wrapper.find(primaryButtonSelector).childAt(0).text()).to.equal('OK');
    wrapper.find('ModalFooter Button').forEach(function (btn) {
      expect(btn.prop('disabled')).to.equal(true);
    });
  });
  it('saves outcome alignments when Confirm Alignments is pressed', function () {
    var props = makeProps({
      outcomePickerState: 'saving'
    });
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    wrapper.find(primaryButtonSelector).simulate('click');
    expect(props.saveOutcomePickerAlignments.calledOnce).to.be.true;
    expect(props.saveOutcomePickerAlignments.calledWith(props.onUpdate)).to.be.true;
  });
  it('closes modal when Confirm Alignments is complete', function (done) {
    var props = makeProps({
      outcomePickerState: 'saving'
    });
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    wrapper.find(primaryButtonSelector).simulate('click');
    setTimeout(function () {
      expect(props.closeOutcomePicker.called).to.be.true;
      done();
    }, 1);
  });
  it('triggers onModalClose on modal close', function (done) {
    var props = makeProps({
      outcomePickerState: 'closed'
    });
    var wrapper = mount(React.createElement(OutcomePickerModal, props));
    wrapper.find('Modal').prop('onClose')();
    setTimeout(function () {
      expect(props.onModalClose.calledOnce).to.be.true;
      done();
    }, 1);
  });
  it('does not save outcome alignments when Cancel is pressed', function () {
    var props = makeProps({
      outcomePickerState: 'saving'
    });
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    wrapper.find(cancelButtonSelector).simulate('click');
    expect(props.saveOutcomePickerAlignments.called).to.be.false;
  });
  it('triggers closeOutcomePicker on closeButton click', function () {
    var props = makeProps({
      outcomePickerState: 'saving'
    });
    var wrapper = shallow(React.createElement(OutcomePickerModal, props));
    wrapper.find(cancelButtonSelector).simulate('click');
    expect(props.closeOutcomePicker.called).to.be.true;
  });
  it('meets a11y standards', function () {
    return checkA11y(React.createElement(OutcomePickerModal, makeProps()));
  });
});
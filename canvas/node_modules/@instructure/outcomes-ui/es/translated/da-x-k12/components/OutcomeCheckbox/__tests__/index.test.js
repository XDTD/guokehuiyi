import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { shallow, mount } from 'enzyme';
import OutcomeCheckbox from '../index';
import checkA11y from '../../../test/checkA11y';
describe('OutcomeCheckbox', function () {
  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      outcome: {
        id: '101',
        label: 'XYZ',
        title: 'The student will make cupcakes',
        description: 'Hello there'
      },
      setFocusedOutcome: sinon.spy(),
      isOutcomeSelected: sinon.spy(),
      selectOutcomeIds: sinon.spy(),
      deselectOutcomeIds: sinon.spy()
    }, props);
  }

  it('renders a checkbox', function () {
    var wrapper = shallow(React.createElement(OutcomeCheckbox, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Checkbox')).to.have.length(1);
  });
  it('renders outcome title in link', function () {
    var props = makeProps();
    var wrapper = mount(React.createElement(OutcomeCheckbox, props));
    var link = wrapper.find('Link');
    expect(link.text()).to.equal('The student will make cupcakes');
  });
  it('renders an OutcomeDescription component', function () {
    var props = makeProps();
    var wrapper = mount(React.createElement(OutcomeCheckbox, props));
    expect(wrapper.find('OutcomeDescription')).to.have.length(1);
  });
  it('will focus an outcome when the title is clicked', function () {
    var props = makeProps();
    var wrapper = mount(React.createElement(OutcomeCheckbox, props));
    var click = wrapper.find('Link').prop('onClick');
    var preventDefault = sinon.stub();
    click({
      preventDefault: preventDefault
    });
    expect(props.setFocusedOutcome.calledOnce).to.be.true;
    expect(preventDefault.calledOnce).to.be.true;
  });
  it('selects the checkbox when isOutcomeSelected', function () {
    var isOutcomeSelected = sinon.stub().withArgs(101).returns(false);
    var props = makeProps({
      isOutcomeSelected: isOutcomeSelected
    });
    var wrapper = shallow(React.createElement(OutcomeCheckbox, props), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Checkbox').prop('checked')).to.equal(false);
  });
  it('does not select the checkbox when not isOutcomeSelected', function () {
    var isOutcomeSelected = sinon.stub().withArgs(101).returns(true);
    var props = makeProps({
      isOutcomeSelected: isOutcomeSelected
    });
    var wrapper = shallow(React.createElement(OutcomeCheckbox, props), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Checkbox').prop('checked')).to.equal(true);
  });
  it('calls selectOutcomeIds when unselected and user clicks', function () {
    var isOutcomeSelected = sinon.stub().withArgs(101).returns(false);
    var props = makeProps({
      isOutcomeSelected: isOutcomeSelected
    });
    var wrapper = shallow(React.createElement(OutcomeCheckbox, props), {
      disableLifecycleMethods: true
    });
    wrapper.find('Checkbox').simulate('change');
    expect(props.selectOutcomeIds.calledWith([101]));
  });
  it('calls deselectOutcomeIds when selected and user clicks', function () {
    var isOutcomeSelected = sinon.stub().withArgs(101).returns(true);
    var props = makeProps({
      isOutcomeSelected: isOutcomeSelected
    });
    var wrapper = shallow(React.createElement(OutcomeCheckbox, props), {
      disableLifecycleMethods: true
    });
    wrapper.find('Checkbox').simulate('change');
    expect(props.deselectOutcomeIds.calledWith([101]));
  });
  it('meets a11y standards', function () {
    return checkA11y(React.createElement(OutcomeCheckbox, makeProps()));
  });
});
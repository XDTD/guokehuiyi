import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import configureStore from 'redux-mock-store';
import thunkMiddleware from 'redux-thunk';
import sinon from 'sinon';
import { Map } from 'immutable';
import serviceMiddleware from '@instructure/redux-service-middleware';
import { wrapAction, wrapDispatch } from 'multireducer';
var mockService = {
  loadOutcomes: sinon.stub().returns(Promise.resolve([])),
  getAlignments: sinon.stub().returns(Promise.resolve([])),
  getContext: sinon.stub().returns(Promise.resolve({})),
  createAlignmentSet: sinon.stub().returns(Promise.resolve({
    guid: 'newguid'
  })),
  outcomePickerState: 'closed'
};
export default function createMockStore() {
  var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Map();
  var outcomesService = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : mockService;
  var scope = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'scopeForTest';
  var baseStore = configureStore([thunkMiddleware, serviceMiddleware({
    outcomes: outcomesService
  })])(state);
  return _objectSpread({}, baseStore, {
    dispatch: wrapDispatch(baseStore.dispatch, scope)
  });
}
export function scopeActions(actions) {
  var scope = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'scopeForTest';
  return Object.keys(actions).reduce(function (set, key) {
    return Object.assign(set, _defineProperty({}, key, function (arg) {
      return wrapAction(actions[key](arg), scope);
    }));
  }, {});
}
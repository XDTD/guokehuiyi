import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import { themeable } from '@instructure/ui-themeable';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { IconButton } from '@instructure/ui-buttons';
import { IconEndSolid, IconSearchLine } from '@instructure/ui-icons';
import { TextInput } from '@instructure/ui-text-input';
import theme from '../theme';
var styles = {
  componentId: 'baFFb',
  template: function template(theme) {
    return "\n\n\n.outcomes-ui__SearchInput--search input[type=search]::-ms-clear {  display: none; width : 0; height: 0; }\n.outcomes-ui__SearchInput--search input[type=search]::-ms-reveal {  display: none; width : 0; height: 0; }\n\n\n.outcomes-ui__SearchInput--search input[type=\"search\"]::-webkit-search-decoration,\n.outcomes-ui__SearchInput--search input[type=\"search\"]::-webkit-search-cancel-button,\n.outcomes-ui__SearchInput--search input[type=\"search\"]::-webkit-search-results-button,\n.outcomes-ui__SearchInput--search input[type=\"search\"]::-webkit-search-results-decoration {\n  display: none;\n}\n";
  },
  'search': 'outcomes-ui__SearchInput--search'
};
var SearchInput = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits(SearchInput, _React$Component);

  function SearchInput() {
    _classCallCheck(this, SearchInput);

    return _possibleConstructorReturn(this, _getPrototypeOf(SearchInput).apply(this, arguments));
  }

  _createClass(SearchInput, [{
    key: "renderClearSearchButton",
    // eslint-disable-next-line no-undef
    value: function renderClearSearchButton() {
      var onClear = this.props.onClear;
      return React.createElement(IconButton, {
        size: "small",
        withBackground: false,
        withBorder: false,
        onClick: onClear,
        screenReaderLabel: "Efase espas rech\xE8h la"
      }, React.createElement(IconEndSolid, {
        size: "x-small"
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          onChange = _this$props.onChange,
          searchText = _this$props.searchText;
      return React.createElement("span", {
        className: styles.search
      }, React.createElement(TextInput, {
        type: "search",
        label: React.createElement(ScreenReaderContent, null, "Rezilta rech\xE8ch"),
        placeholder: "Rezilta Rech\xE8ch",
        value: searchText,
        onChange: onChange,
        size: "medium",
        renderAfterInput: searchText ? this.renderClearSearchButton() : React.createElement(IconSearchLine, {
          size: "x-small"
        })
      }));
    }
  }]);

  SearchInput.displayName = "SearchInput";
  return SearchInput;
}(React.Component), _class2.propTypes = {
  onChange: PropTypes.func.isRequired,
  onClear: PropTypes.func.isRequired,
  searchText: PropTypes.string.isRequired
}, _temp)) || _class);
export { SearchInput as default };
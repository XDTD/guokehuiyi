import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createAction } from 'redux-actions';
import { CALL_SERVICE } from '@instructure/redux-service-middleware';
import { getConfig } from '../config/selectors';
import { SET_OUTCOME_LIST, SET_OUTCOMES, SET_LIST_PAGE, SET_LIST_TOTAL, SET_SELECTED_OUTCOME_IDS } from '../../constants';
import { setOutcomePickerState } from '../OutcomePicker/actions';
import { setError } from '../context/actions';
import { getAlignedOutcomeIds } from '../alignments/selectors';
import { getListPage } from './selectors';
export var setOutcomeList = createAction(SET_OUTCOME_LIST);
export var setOutcomes = createAction(SET_OUTCOMES);
export var setListPage = createAction(SET_LIST_PAGE);
export var setListTotal = createAction(SET_LIST_TOTAL);
export var setSelectedOutcomeIds = createAction(SET_SELECTED_OUTCOME_IDS);
export var getOutcomesList = function getOutcomesList() {
  var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
      page = _ref.page;

  return function (dispatch, getState, _arg, scope) {
    var initialPage = page || getListPage(getState(), scope);

    if (page) {
      dispatch(setListPage(page));
    }

    dispatch(setOutcomePickerState('loading'));

    var _getConfig = getConfig(getState(), scope),
        host = _getConfig.host,
        jwt = _getConfig.jwt,
        contextUuid = _getConfig.contextUuid,
        artifactId = _getConfig.artifactId,
        artifactType = _getConfig.artifactType;

    return dispatch({
      type: CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'listOutcomes',
        args: [host, jwt, initialPage, contextUuid, artifactId, artifactType]
      }
    }).then(function (json) {
      if (getListPage(getState(), scope) === initialPage) {
        dispatch(setOutcomeList(json.outcomes));
        var outcomes = json.outcomes.reduce(function (map, obj) {
          // eslint-disable-next-line no-param-reassign
          map[obj.id] = obj;
          return map;
        }, {});
        dispatch(setOutcomes(_defineProperty({}, contextUuid, outcomes)));
        dispatch(setListTotal(json.total));
        dispatch(setOutcomePickerState('choosing'));
      }

      return Promise.resolve(json.outcomes);
    }).catch(function (e) {
      dispatch(setError(e));
    });
  };
};
export var setInitialSelectedOutcomes = function setInitialSelectedOutcomes() {
  return function (dispatch, getState, _arg, scope) {
    dispatch(setSelectedOutcomeIds(getAlignedOutcomeIds(getState(), scope)));
    return Promise.resolve();
  };
};
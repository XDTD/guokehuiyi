import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
var _default_ht_number = Intl.NumberFormat("ht", { style: "decimal" }).format;
import { Map } from 'immutable';
import { createSelector } from 'reselect';
import createCachedSelector, { LruObjectCache } from 're-reselect';
import { getConfig } from '../config/selectors';

function restrict(state, contextUuid) {
  return state.getIn(['context', contextUuid]) || Map();
}

function getContextUuid(state, scope) {
  return getConfig(state, scope).contextUuid || '';
}

export var isGroup = function isGroup(outcome) {
  return outcome && (outcome.has_children || outcome.child_ids && outcome.child_ids.length > 0);
};
var getContextOutcomes = createSelector(function (state, scope) {
  var uuid = getContextUuid(state, scope);
  return restrict(state, 'outcomes').get(uuid);
}, function (contextOutcomes) {
  return contextOutcomes ? contextOutcomes.toJS() : {};
});
export var hasContextOutcomes = function hasContextOutcomes(state, scope) {
  var contextOutcomes = getContextOutcomes(state, scope);
  return Object.keys(contextOutcomes).length > 0;
};
export var getOutcome = createCachedSelector(function (state, scope, id) {
  var uuid = getContextUuid(state, scope);
  return restrict(state, 'outcomes').getIn([uuid, id.toString()]);
}, function (outcome) {
  return outcome ? outcome.toJS() : null;
})({
  keySelector: function keySelector(state, scope, id) {
    return "".concat(getContextUuid(state, scope), "#").concat(id);
  },
  cacheObject: new LruObjectCache({
    cacheSize: 50
  })
});
export function isOutcomeGroup(state, scope, id) {
  var outcome = getOutcome(state, scope, id);
  return isGroup(outcome);
}
export var getRootOutcomeIds = createSelector(function (state, scope) {
  var uuid = getContextUuid(state, scope);
  return restrict(state, 'rootOutcomeIds').get(uuid);
}, function (ids) {
  return ids ? ids.toJS() : [];
});
export var hasRootOutcomes = function hasRootOutcomes(state, scope) {
  var rootIds = getRootOutcomeIds(state, scope);
  return rootIds.length > 0;
};
export var getContext = function getContext(state, contextUuid) {
  var _state$getIn;

  return (_state$getIn = state.getIn(['context', 'contexts', contextUuid])) === null || _state$getIn === void 0 ? void 0 : _state$getIn.toJS();
};
export var getContextByScope = createSelector(function (state) {
  return state;
}, getContextUuid, getContext);
export var makeGetOutcomeSummary = createSelector([getContextOutcomes], function (outcomes) {
  return function (id) {
    return getCollectionDetails(outcomes, id).descriptor;
  };
});
export var getCollectionData = createSelector(getContextOutcomes, function (outcomes) {
  if (outcomes.length === 0) {
    return; // return null so tree doesnt try to render an empty object
  }

  var collections = {};

  for (var _i = 0, _Object$keys = Object.keys(outcomes); _i < _Object$keys.length; _i++) {
    var id = _Object$keys[_i];

    // eslint-disable-line no-restricted-syntax
    if (!isCollectionId(outcomes, id)) {
      continue; // eslint-disable-line no-continue
    }

    collections[id] = getCollectionDetails(outcomes, id); // eslint-disable-line immutable/no-mutation
  }

  return collections;
});

var isCollectionId = function isCollectionId(outcomes, id) {
  var outcome = outcomes[id];
  return outcome && (outcome.has_children || outcome.child_ids && outcome.child_ids.length > 0);
};

var getGroupText = function getGroupText(count) {
  var _s, _n;

  if (!(count > 0)) {
    return;
  }

  return _default_ht_number(count) + " Gwoup";
};

var getOutcomeText = function getOutcomeText(count) {
  var _s2, _n2;

  if (!(count > 0)) {
    return;
  }

  return _default_ht_number(count) + " Outcomes";
};

export var getDescriptor = function getDescriptor(groupCount, outcomeCount) {
  var groupText = getGroupText(groupCount);
  var outcomeText = getOutcomeText(outcomeCount);

  if (groupText && outcomeText) {
    return "".concat(groupText, " | ").concat(outcomeText);
  } else if (groupText) {
    return groupText;
  } else if (outcomeText) {
    return outcomeText;
  }

  return '';
};

var getCollectionDetails = function getCollectionDetails(outcomes, id) {
  var outcome = outcomes[id.toString()];
  var childIds = outcome.child_ids || [];
  var subcollections = childIds.filter(function (id) {
    return isCollectionId(outcomes, id);
  });
  var groupCount = subcollections.length;
  var outcomeCount = childIds.length - groupCount;
  return _objectSpread({}, outcome, {
    name: outcome.title,
    collections: subcollections,
    descriptor: getDescriptor(groupCount, outcomeCount)
  });
};

export var getChildrenToLoad = function getChildrenToLoad(state, scope, id) {
  var outcome = getOutcome(state, scope, id);

  if (!outcome || outcome.is_partial) {
    return [id];
  }

  if (!outcome.child_ids) {
    return [];
  }

  return outcome.child_ids.filter(function (id) {
    var o = getOutcome(state, scope, id);
    return o.is_partial && o.has_children;
  });
};
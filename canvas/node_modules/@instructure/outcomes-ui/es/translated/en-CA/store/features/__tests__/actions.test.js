import { expect } from 'chai';
import { Map } from 'immutable';
import sinon from 'sinon';
import * as constants from '../../../constants';
import createMockStore, { scopeActions } from '../../../test/createMockStore';
import * as actions from '../actions';
var scopedActions = scopeActions(actions);
var response = ['feature_1', 'feature_2'];
describe('features/actions', function () {
  describe('setFeatures', function () {
    it('creates an action', function () {
      var action = actions.setFeatures(['feature_1']);
      expect(action.type).to.equal(constants.SET_FEATURES);
      expect(action.payload).to.deep.equal(['feature_1']);
    });
  });
  describe('loadFeatures', function () {
    describe('with existing feature flags', function () {
      var getFeaturesStub;
      beforeEach(function () {
        getFeaturesStub = sinon.stub(constants, 'getFeatureFlags').returns(['feature_1', 'feature_2']);
      });
      afterEach(function () {
        getFeaturesStub.restore();
      });
      it('calls outcome service to load features', function () {
        var service = {
          getFeatures: sinon.stub().returns(Promise.resolve(response))
        };
        var store = createMockStore(Map(), service);
        return store.dispatch(actions.loadFeatures()).then(function () {
          expect(service.getFeatures.calledOnce).to.be.true;
          return null;
        });
      });
      it('dispatches setFeatures on outcome service success', function () {
        var service = {
          getFeatures: sinon.stub().returns(Promise.resolve(response))
        };
        var store = createMockStore(Map(), service);
        return store.dispatch(actions.loadFeatures()).then(function () {
          expect(store.getActions()).to.have.length(2);
          expect(store.getActions()).to.deep.include(scopedActions.setFeatures(['feature_1', 'feature_2']));
          return null;
        });
      });
      it('dispatches setError on outcome service failure', function () {
        var error = {
          message: 'foo bar baz'
        };
        var service = {
          getFeatures: sinon.stub().returns(Promise.reject(error))
        };
        var store = createMockStore(Map(), service);
        return store.dispatch(actions.loadFeatures()).then(function () {
          expect(store.getActions()).to.have.length(2);
          expect(store.getActions()[1]).to.deep.equal(scopedActions.setError(error));
          return null;
        });
      });
    });
    describe('with no existing feature flags', function () {
      var getFeaturesStub;
      beforeEach(function () {
        getFeaturesStub = sinon.stub(constants, 'getFeatureFlags').returns([]);
      });
      afterEach(function () {
        getFeaturesStub.restore();
      });
      it('does not call the outcome service to load features', function () {
        var service = {
          getFeatures: sinon.stub().returns(Promise.resolve(response))
        };
        var store = createMockStore(Map(), service);
        return store.dispatch(actions.loadFeatures()).then(function () {
          expect(service.getFeatures.calledOnce).to.be.false;
          return null;
        });
      });
    });
  });
});
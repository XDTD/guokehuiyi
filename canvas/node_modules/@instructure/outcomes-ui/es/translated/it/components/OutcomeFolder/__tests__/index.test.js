import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { shallow } from 'enzyme';
import OutcomeFolder from '../index';
import checkA11y from '../../../test/checkA11y';
describe('OutcomeFolder', function () {
  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      outcome: {
        id: '101',
        label: 'XYZ',
        title: 'The student will make cupcakes'
      },
      clickable: true,
      getOutcomeSummary: sinon.spy(),
      setActiveCollection: sinon.spy(),
      toggleExpandedIds: sinon.spy()
    }, props);
  }

  it('will set the active collection and expand when the title is clicked', function () {
    var props = makeProps();
    var wrapper = shallow(React.createElement(OutcomeFolder, props), {
      disableLifecycleMethods: true
    });
    var click = wrapper.find('Link').prop('onClick');
    click();
    expect(props.setActiveCollection.calledOnce).to.be.true;
    expect(props.toggleExpandedIds.calledOnce).to.be.true;
  });
  it('will set ensure the activeCollection is expanded before setting a new one', function () {
    var props = makeProps({
      activeCollectionId: '1'
    });
    var wrapper = shallow(React.createElement(OutcomeFolder, props), {
      disableLifecycleMethods: true
    });
    var click = wrapper.find('Link').prop('onClick');
    click();
    expect(props.toggleExpandedIds.calledWith({
      id: '1',
      forceOpen: true
    })).to.be.true;
  });
  it('will make titles unclickable if clickable set to false', function () {
    var props = makeProps({
      clickable: false
    });
    var wrapper = shallow(React.createElement(OutcomeFolder, props), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Link')).to.have.length(0);
  });
  it('meets a11y standards', function () {
    return checkA11y(React.createElement(OutcomeFolder, makeProps()));
  });
});
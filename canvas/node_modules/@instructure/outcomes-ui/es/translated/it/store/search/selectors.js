import { Map } from 'immutable';
import { createSelectorCreator, defaultMemoize } from 'reselect';
import createCachedSelector from 're-reselect';
import { isEqual } from 'lodash';
import { getAnyOutcome } from '../alignments/selectors';
var customDeepComparisonSelector = createSelectorCreator(defaultMemoize, isEqual);

var getSearch = function getSearch(state, scope) {
  return state.getIn([scope, 'OutcomePicker', 'search']) || Map();
};

export var getSearchEntries = createCachedSelector(function (state, scope) {
  var entries = getSearch(state, scope).get('entries');
  entries = entries ? entries.toJS() : [];
  return entries.map(function (entry) {
    return getAnyOutcome(state, scope, entry.id);
  });
}, function (entries) {
  return entries;
})(function (_state, scope) {
  return scope;
}, {
  // Deep comparison: https://github.com/toomuchdesign/re-reselect/issues/31
  selectorCreator: customDeepComparisonSelector
});
export var getSearchText = function getSearchText(state, scope) {
  return getSearch(state, scope).get('searchText');
};
export var getIsSearchLoading = function getIsSearchLoading(state, scope) {
  return getSearch(state, scope).get('isLoading');
};

var pagination = function pagination(state, scope) {
  return getSearch(state, scope).get('pagination') || Map();
};

export var getSearchPage = function getSearchPage(state, scope) {
  return pagination(state, scope).get('page');
};
export var getSearchTotal = function getSearchTotal(state, scope) {
  return pagination(state, scope).get('total');
};
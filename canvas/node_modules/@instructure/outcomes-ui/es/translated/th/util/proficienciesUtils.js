export var contextConfiguredWithProficiencies = function contextConfiguredWithProficiencies(context) {
  return !!((context === null || context === void 0 ? void 0 : context.outcome_proficiency) && (context === null || context === void 0 ? void 0 : context.outcome_calculation_method));
};

var getMaxPoints = function getMaxPoints(outcomeProficiencyRatings) {
  var _outcomeProficiencyRa;

  return (_outcomeProficiencyRa = outcomeProficiencyRatings.sort(function (r1, r2) {
    return r1.points - r2.points;
  }).reverse()[0]) === null || _outcomeProficiencyRa === void 0 ? void 0 : _outcomeProficiencyRa.points;
};

export var getMasteryPercent = function getMasteryPercent(context) {
  var _context$outcome_prof, _outcomeProficiencyRa2;

  var outcomeProficiencyRatings = (context === null || context === void 0 ? void 0 : (_context$outcome_prof = context.outcome_proficiency) === null || _context$outcome_prof === void 0 ? void 0 : _context$outcome_prof.outcome_proficiency_ratings) || [];
  var masteryPoints = (_outcomeProficiencyRa2 = outcomeProficiencyRatings.find(function (r) {
    return r.mastery;
  })) === null || _outcomeProficiencyRa2 === void 0 ? void 0 : _outcomeProficiencyRa2.points;
  var maxPoints = getMaxPoints(outcomeProficiencyRatings);

  if (masteryPoints !== void 0 && ![0, void 0].includes(maxPoints)) {
    return masteryPoints / maxPoints;
  }
};
export var getScoringMethodFromContext = function getScoringMethodFromContext(context) {
  var _context$outcome_calc = context.outcome_calculation_method,
      calculation_method = _context$outcome_calc.calculation_method,
      calculation_int = _context$outcome_calc.calculation_int,
      outcome_proficiency_ratings = context.outcome_proficiency.outcome_proficiency_ratings;
  var algorithm_data = {};

  if (calculation_method === 'decaying_average') {
    algorithm_data.decaying_average_percent = calculation_int / 100.0;
  } else if (calculation_method === 'n_mastery') {
    algorithm_data.n_mastery_count = calculation_int;
  }

  return {
    algorithm: context.outcome_calculation_method.calculation_method,
    algorithm_data: algorithm_data,
    mastery_percent: getMasteryPercent(context),
    points_possible: getMaxPoints(outcome_proficiency_ratings)
  };
};

var translateDefaultRatingDescriptions = function translateDefaultRatingDescriptions(description) {
  switch (description) {
    case 'DEFAULT_EXCEEDS_MASTERY':
      return "\u0E2A\u0E39\u0E07\u0E01\u0E27\u0E48\u0E32\u0E40\u0E01\u0E13\u0E11\u0E4C\u0E04\u0E27\u0E32\u0E21\u0E40\u0E0A\u0E35\u0E48\u0E22\u0E27\u0E0A\u0E32\u0E0D";

    case 'DEFAULT_MASTERY':
      return "\u0E04\u0E27\u0E32\u0E21\u0E40\u0E0A\u0E35\u0E48\u0E22\u0E27\u0E0A\u0E32\u0E0D";

    case 'DEFAULT_NEAR_MASTERY':
      return "\u0E43\u0E01\u0E25\u0E49\u0E40\u0E04\u0E35\u0E22\u0E07\u0E23\u0E30\u0E14\u0E31\u0E1A\u0E04\u0E27\u0E32\u0E21\u0E40\u0E0A\u0E35\u0E48\u0E22\u0E27\u0E02\u0E32\u0E0D";

    case 'DEFAULT_BELOW_MASTERY':
      return "\u0E15\u0E48\u0E33\u0E01\u0E27\u0E48\u0E32\u0E40\u0E01\u0E13\u0E11\u0E4C\u0E1C\u0E39\u0E49\u0E40\u0E0A\u0E35\u0E48\u0E22\u0E27\u0E0A\u0E32\u0E0D";

    case 'DEFAULT_NO_EVIDENCE':
      return "\u0E44\u0E21\u0E48\u0E21\u0E35\u0E2A\u0E34\u0E48\u0E07\u0E22\u0E37\u0E19\u0E22\u0E31\u0E19";

    default:
      return description;
  }
};

export var getScoringTiersFromContext = function getScoringTiersFromContext(context) {
  var _context$outcome_prof2;

  var outcomeProficiencyRatings = context === null || context === void 0 ? void 0 : (_context$outcome_prof2 = context.outcome_proficiency) === null || _context$outcome_prof2 === void 0 ? void 0 : _context$outcome_prof2.outcome_proficiency_ratings;

  if (!outcomeProficiencyRatings) {
    return;
  }

  var maxPoints = getMaxPoints(outcomeProficiencyRatings);
  return outcomeProficiencyRatings.map(function (rating) {
    return {
      description: translateDefaultRatingDescriptions(rating.description),
      percent: rating.points / maxPoints
    };
  });
};
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { Component } from 'react';
import PropTypes from 'prop-types';
import { getFeatureFlags } from '../constants';

var IfFeature = /*#__PURE__*/function (_Component) {
  _inherits(IfFeature, _Component);

  function IfFeature() {
    _classCallCheck(this, IfFeature);

    return _possibleConstructorReturn(this, _getPrototypeOf(IfFeature).apply(this, arguments));
  }

  _createClass(IfFeature, [{
    key: "render",
    value: function render() {
      if (this.invalidFeature) {
        throw new Error("".concat(this.props.name, " not listed as a feature flag in constants.js!"));
      }

      if (!this.isOn) {
        return null;
      }

      return this.props.children;
    }
  }, {
    key: "invalidFeature",
    get: function get() {
      return !getFeatureFlags().includes(this.props.name);
    }
  }, {
    key: "isOn",
    get: function get() {
      return this.props.features.includes(this.props.name);
    }
  }]);

  IfFeature.displayName = "IfFeature";
  return IfFeature;
}(Component);

IfFeature.propTypes = {
  children: PropTypes.node,
  features: PropTypes.arrayOf(PropTypes.string).isRequired,
  name: PropTypes.string.isRequired
};
IfFeature.defaultProps = {
  children: null
};
export { IfFeature as default };
import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { mount } from 'enzyme';
import WithAlignmentSet from '../WithAlignmentSet';
describe('WithAlignmentSet', function () {
  var Dummy = function Dummy(props) {
    return React.createElement("div", null, props.text);
  }; // eslint-disable-line react/prop-types


  var AlignedDummy = WithAlignmentSet(Dummy);

  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      loadAlignments: sinon.spy(),
      alignmentSetId: 'xxxooo'
    }, props);
  }

  it('renders the inner component with props', function () {
    var wrapper = mount(React.createElement(AlignedDummy, makeProps({
      text: 'foo'
    })));
    expect(wrapper.text()).to.match(/foo/);
  });
  it('loads alignments on mount', function () {
    var props = makeProps();
    mount(React.createElement(AlignedDummy, props));
    expect(props.loadAlignments.calledOnce).to.be.true;
    expect(props.loadAlignments.calledWith('xxxooo')).to.be.true;
  });
});
import { expect } from 'chai';
import { fromJS } from 'immutable';
import { SET_ALIGNMENTS, VIEW_ALIGNMENT, CLOSE_ALIGNMENT, UPDATE_ALIGNMENT } from '../../../constants';
import reducer from '../reducers';
describe('alignments/reducers', function () {
  var reduce = function reduce(state, type, payload) {
    return reducer(state, {
      type: type,
      payload: payload
    });
  };

  var state = fromJS({
    alignmentSetId: 'originalguid',
    alignedOutcomes: [{
      id: '2'
    }, {
      id: '3'
    }],
    openAlignmentId: 10
  });
  describe('alignedOutcomes', function () {
    it('is updated by SET_ALIGNMENTS', function () {
      var newAlignments = {
        guid: 'imaguid',
        outcomes: [{
          id: '1'
        }, {
          id: '2'
        }, {
          id: '3'
        }]
      };
      var newState = reduce(state, SET_ALIGNMENTS, newAlignments);
      expect(newState.get('alignedOutcomes').toJS()).to.deep.equal(newAlignments.outcomes);
    });
    it('is updated by UPDATE_ALIGNMENT', function () {
      var outcome = {
        id: '3',
        scoring_method: 'boom'
      };
      var newState = reduce(state, UPDATE_ALIGNMENT, {
        outcome: outcome
      });
      expect(newState.getIn(['alignedOutcomes', 1]).toJS()).to.deep.equal(outcome);
    });
  });
  describe('openAlignmentId', function () {
    it('is set by VIEW_ALIGNMENT', function () {
      var newState = reduce(state, VIEW_ALIGNMENT, 99);
      expect(newState.get('openAlignmentId')).to.equal(99);
    });
    it('is cleared by CLOSE_ALIGNMENT', function () {
      var newState = reduce(state, CLOSE_ALIGNMENT, null);
      expect(newState.get('openAlignmentId')).to.equal(null);
    });
  });
  describe('alignmentSetId', function () {
    it('is updated by SET_ALIGNMENTS', function () {
      var newAlignmentSet = {
        guid: 'iamgroot',
        outcomes: [{
          id: '5'
        }]
      };
      var newState = reduce(state, SET_ALIGNMENTS, newAlignmentSet);
      expect(newState.get('alignmentSetId')).to.deep.equal(newAlignmentSet.guid);
    });
  });
});
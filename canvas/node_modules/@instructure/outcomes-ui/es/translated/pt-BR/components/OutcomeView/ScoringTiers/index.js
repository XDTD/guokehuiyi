import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

var _default_ptBR_number = Intl.NumberFormat("pt-BR", { style: "decimal" }).format,
    _dec,
    _class,
    _class2,
    _temp;

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { IconStarSolid, IconEmptyLine } from '@instructure/ui-icons';
import { Text } from '@instructure/ui-text';
import { Pill } from '@instructure/ui-pill';
import { themeable } from '@instructure/ui-themeable';
import { outcomeResultShape, scoringMethodShape, scoringTierShape } from '../../../store/shapes';
import convertToPoints from '../convertToPoints';
import theme from '../../theme';
var styles = {
  componentId: 'bCFPW',
  template: function template(theme) {
    return "\n\n.outcomes-ui__ScoringTiers--score {\n  border: 1px solid #ccc;\n  color: #888;\n  border-radius: 100%;\n  width: 2.25rem;\n  height: 2.25rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-left: 0.1rem;\n  margin-right: 1.0rem;\n}\n\n.outcomes-ui__ScoringTiers--description {\n  flex: 1;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.outcomes-ui__ScoringTiers--mastery {\n  margin-top: 0.25rem;\n}\n\n.outcomes-ui__ScoringTiers--rating {\n  display: flex;\n  margin-bottom: 0.5rem;\n}\n\n.outcomes-ui__ScoringTiers--scoringTier {\n  margin-bottom: 1.0rem;\n}\n\n.outcomes-ui__ScoringTiers--masteryCount {\n  font-weight: bold;\n  margin-left: 3.5rem;\n}\n\n.outcomes-ui__ScoringTiers--gap:not(:empty) {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 1rem;\n  margin-left: 3.5rem;\n}\n\n.outcomes-ui__ScoringTiers--pill {\n  display: flex;\n  align-items: center;\n  font-size: 1.2rem;\n}\n\n.outcomes-ui__ScoringTiers--pill.outcomes-ui__ScoringTiers--mastery {\n  color: ".concat(theme.masteryColor || 'inherit', ";\n}\n\n.outcomes-ui__ScoringTiers--pill.outcomes-ui__ScoringTiers--average {\n  color: ").concat(theme.averageColor || 'inherit', "\n}\n\n.outcomes-ui__ScoringTiers--pill:not(:last-child) {\n  margin-bottom: 0.75rem;\n}\n");
  },
  'score': 'outcomes-ui__ScoringTiers--score',
  'description': 'outcomes-ui__ScoringTiers--description',
  'mastery': 'outcomes-ui__ScoringTiers--mastery',
  'rating': 'outcomes-ui__ScoringTiers--rating',
  'scoringTier': 'outcomes-ui__ScoringTiers--scoringTier',
  'masteryCount': 'outcomes-ui__ScoringTiers--masteryCount',
  'gap': 'outcomes-ui__ScoringTiers--gap',
  'pill': 'outcomes-ui__ScoringTiers--pill',
  'average': 'outcomes-ui__ScoringTiers--average'
};

var valueBetweenTiers = function valueBetweenTiers(value, upperTier, lowerTier) {
  if (upperTier && value > upperTier.percent) {
    return false;
  }

  if (lowerTier && value <= lowerTier.percent) {
    return false;
  }

  return true;
};

var renderTier = function renderTier(scoringMethod, tier) {
  var _s, _n, _i;

  return React.createElement("div", {
    key: tier.id,
    className: styles.scoringTier,
    "data-automation": "outcomeView__scoringTier"
  }, React.createElement("div", {
    className: styles.rating
  }, React.createElement("div", {
    className: styles.score,
    "data-automation": "outcomeView__score"
  }, React.createElement(Text, {
    size: "medium"
  }, convertToPoints(tier.percent, scoringMethod))), React.createElement("div", {
    className: styles.description,
    "data-automation": "outcomeView__description"
  }, React.createElement(Text, {
    size: "small"
  }, tier.description))), tier.count != null && React.createElement("div", {
    className: styles.masteryCount,
    "data-automation": "outcomeView__masteryCount"
  }, React.createElement(Text, {
    size: "small"
  }, (_s = tier.count, _n = +_s, (_i = Math.floor(Math.abs(+_s)), 0 <= _i && _i <= 1 ? "1 Aluno" : _default_ptBR_number(tier.count) + " Alunos")))));
};

var ScorePill = function ScorePill(_ref) {
  var _classNames;

  var className = _ref.className,
      icon = _ref.icon,
      text = _ref.text,
      variant = _ref.variant;
  var outerStyle = classNames((_classNames = {}, _defineProperty(_classNames, styles.pill, true), _defineProperty(_classNames, className, true), _classNames));
  return React.createElement("span", {
    className: outerStyle,
    "data-automation": "outcomeView__".concat(variant, "Pill")
  }, icon, "\xA0", React.createElement(Pill, {
    text: text,
    variant: variant
  }));
}; // eslint-disable-next-line immutable/no-mutation


ScorePill.propTypes = {
  className: PropTypes.string.isRequired,
  icon: PropTypes.node.isRequired,
  text: PropTypes.string.isRequired,
  variant: PropTypes.string.isRequired
};

var renderGap = function renderGap(scoringMethod, outcomeResult, upperTier, lowerTier) {
  var mastery = scoringMethod.mastery_percent;
  var average = outcomeResult ? outcomeResult.averageScore : null;
  var components = [valueBetweenTiers(mastery, upperTier, lowerTier) && React.createElement(ScorePill, {
    key: "mastery",
    text: "Mastery ".concat(convertToPoints(mastery, scoringMethod), " pts"),
    className: styles.mastery,
    variant: "success",
    icon: React.createElement(IconStarSolid, {
      "data-automation": "outcomeView__masteryStar"
    })
  })];

  if (average !== null) {
    components.push(valueBetweenTiers(average, upperTier, lowerTier) && React.createElement(ScorePill, {
      key: "average",
      text: "Avg. Score ".concat(convertToPoints(average, scoringMethod), " pts"),
      className: styles.average,
      variant: "primary",
      icon: React.createElement(IconEmptyLine, null)
    }));
  }

  return React.createElement("div", {
    className: styles.gap
  }, average !== null && average <= mastery ? components : components.reverse());
};

var ScoringTiers = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits(ScoringTiers, _React$Component);

  function ScoringTiers() {
    _classCallCheck(this, ScoringTiers);

    return _possibleConstructorReturn(this, _getPrototypeOf(ScoringTiers).apply(this, arguments));
  }

  _createClass(ScoringTiers, [{
    key: "render",
    // eslint-disable-next-line no-undef
    value: function render() {
      var _this$props = this.props,
          outcomeResult = _this$props.outcomeResult,
          scoringTiers = _this$props.scoringTiers,
          scoringMethod = _this$props.scoringMethod;
      return React.createElement("div", {
        "data-automation": "outcomeView__scoringTiers"
      }, renderGap.apply(void 0, [scoringMethod, outcomeResult, null].concat(_toConsumableArray(scoringTiers.slice(0, 1)))), scoringTiers.map(function (tier, i) {
        return [renderTier(scoringMethod, tier), renderGap.apply(void 0, [scoringMethod, outcomeResult].concat(_toConsumableArray(scoringTiers.slice(i, i + 2))))];
      }));
    }
  }]);

  ScoringTiers.displayName = "ScoringTiers";
  return ScoringTiers;
}(React.Component), _class2.propTypes = {
  scoringTiers: PropTypes.arrayOf(scoringTierShape).isRequired,
  scoringMethod: scoringMethodShape.isRequired,
  outcomeResult: outcomeResultShape
}, _class2.defaultProps = {
  outcomeResult: null
}, _temp)) || _class);
export { ScoringTiers as default };
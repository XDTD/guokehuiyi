import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import { Text } from '@instructure/ui-text';
import { IconOutcomesLine } from '@instructure/ui-icons';
import { themeable } from '@instructure/ui-themeable';
import theme from '../theme';
var styles = {
  componentId: 'bDQTN',
  template: function template(theme) {
    return "\n\n.outcomes-ui__OutcomeLabels--line {\n  display: flex;\n}\n\n.outcomes-ui__OutcomeLabels--text {\n  padding-left: ".concat(theme.outcomeLabelsSpacing || 'inherit', ";\n}\n\n.outcomes-ui__OutcomeLabels--pill {\n  display: inline-block;\n  float: left;\n  max-width: 12rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n[dir=\"ltr\"] .outcomes-ui__OutcomeLabels--pill {\n  float: left;\n}\n\n[dir=\"rtl\"] .outcomes-ui__OutcomeLabels--pill {\n  float: left;\n}\n\n.outcomes-ui__OutcomeLabels--comma {\n  float: left;\n  width: 0.5rem;\n}\n\n[dir=\"ltr\"] .outcomes-ui__OutcomeLabels--comma {\n  float: left;\n}\n\n[dir=\"rtl\"] .outcomes-ui__OutcomeLabels--comma {\n  float: left;\n}\n");
  },
  'line': 'outcomes-ui__OutcomeLabels--line',
  'text': 'outcomes-ui__OutcomeLabels--text',
  'pill': 'outcomes-ui__OutcomeLabels--pill',
  'comma': 'outcomes-ui__OutcomeLabels--comma'
};

var wrap = function wrap(str, includeComma) {
  return React.createElement("span", null, React.createElement("span", {
    className: styles.pill
  }, str), includeComma && React.createElement("span", {
    className: styles.comma
  }, ","));
};

var OutcomeLabels = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits(OutcomeLabels, _React$Component);

  function OutcomeLabels() {
    _classCallCheck(this, OutcomeLabels);

    return _possibleConstructorReturn(this, _getPrototypeOf(OutcomeLabels).apply(this, arguments));
  }

  _createClass(OutcomeLabels, [{
    key: "render",
    // eslint-disable-next-line no-undef
    value: function render() {
      var _this$props = this.props,
          outcomes = _this$props.outcomes,
          emptyText = _this$props.emptyText;
      return React.createElement("div", {
        className: styles.line,
        "data-automation": "outcomeLabel__alignedOutcomes"
      }, React.createElement(Text, {
        size: "medium"
      }, React.createElement(IconOutcomesLine, null)), React.createElement(Text, {
        size: "small"
      }, React.createElement("div", {
        className: styles.text
      }, outcomes.length === 0 ? emptyText : outcomes.map(function (o, i) {
        return wrap(o.title, i < outcomes.length - 1);
      }))));
    }
  }]);

  OutcomeLabels.displayName = "OutcomeLabels";
  return OutcomeLabels;
}(React.Component), _class2.propTypes = {
  outcomes: PropTypes.array.isRequired,
  emptyText: PropTypes.string.isRequired
}, _temp)) || _class);
export { OutcomeLabels as default };
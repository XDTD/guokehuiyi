import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { render, shallow, mount } from 'enzyme';
import { IconOutcomesLine } from '@instructure/ui-icons';
import OutcomeTags from '../index';
import checkA11y from '../../../test/checkA11y';
describe('OutcomeTags', function () {
  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var deselectOutcomeIds = sinon.stub();
    var outcomes = [{
      id: '1',
      label: 'ABC',
      title: 'Title1'
    }, {
      id: '2',
      label: 'DEF',
      title: 'Title2'
    }, {
      id: '3',
      label: 'GHI',
      title: 'Title3'
    }];
    return Object.assign({
      outcomes: outcomes,
      deselectOutcomeIds: deselectOutcomeIds
    }, props);
  }

  it('renders an icon', function () {
    var wrapper = shallow(React.createElement(OutcomeTags, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find(IconOutcomesLine)).to.have.length(1);
  });
  it('renders tags for each outcome', function () {
    var wrapper = shallow(React.createElement(OutcomeTags, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Tag')).to.have.length(3);
  });
  it('removes alignment when tag is clicked', function () {
    var props = makeProps();
    var wrapper = mount(React.createElement(OutcomeTags, props));
    wrapper.find('Tag').first().simulate('click');
    expect(props.deselectOutcomeIds.calledOnce).to.be.true;
    expect(props.deselectOutcomeIds.calledWith(['1'])).to.be.true;
  });
  it('renders outcome titles', function () {
    var wrapper = render(React.createElement(OutcomeTags, makeProps()));
    var text = wrapper.text();
    expect(text.match(/Title1/)).to.be.truthy;
    expect(text.match(/Title2/)).to.be.truthy;
    expect(text.match(/Title3/)).to.be.truthy;
  });
  it('does not render outcome labels', function () {
    var wrapper = render(React.createElement(OutcomeTags, makeProps()));
    var text = wrapper.text();
    expect(text.match(/ABC/)).to.be.falsey;
    expect(text.match(/DEF/)).to.be.falsey;
    expect(text.match(/GHI/)).to.be.falsey;
  });
  it('renders default text when outcome list empty', function () {
    var props = makeProps({
      outcomes: []
    });
    var wrapper = render(React.createElement(OutcomeTags, props));
    expect(wrapper.text().match(/No Outcomes are currently selected/)).to.be.truthy;
  });
  it('focuses on the prior tag when current tag deleted', function (done) {
    var wrapper = mount(React.createElement(OutcomeTags, makeProps()));
    var focusInput = sinon.spy(wrapper.instance(), 'focusInput');
    setTimeout(function () {
      var last = wrapper.find('Tag').at(2);
      var previous = wrapper.find('Tag').at(1);
      var focus = sinon.spy(previous.find('button').instance(), 'focus');
      var remove = last.prop('onClick');
      remove();
      setTimeout(function () {
        expect(focus.calledOnce).to.be.true;
        expect(focusInput.calledOnce).to.be.true;
        done();
      }, 1);
    }, 1);
  });
  it('focuses on the next tag when the first tag is deleted', function (done) {
    var wrapper = mount(React.createElement(OutcomeTags, makeProps()));
    var focusInput = sinon.spy(wrapper.instance(), 'focusInput');
    setTimeout(function () {
      var first = wrapper.find('Tag').at(0);
      var next = wrapper.find('Tag').at(1);
      var focus = sinon.spy(next.find('button').instance(), 'focus');
      var remove = first.prop('onClick');
      remove();
      setTimeout(function () {
        expect(focus.calledOnce).to.be.true;
        expect(focusInput.calledOnce).to.be.true;
        done();
      }, 1);
    }, 1);
  });
  it('focuses on empty results div when all tags are deleted', function (done) {
    var wrapper = mount(React.createElement(OutcomeTags, makeProps()));
    setTimeout(function () {
      [0, 1, 2].forEach(function (tagIndex) {
        var tag = wrapper.find('Tag').at(tagIndex);
        var remove = tag.prop('onClick');
        remove();
      });
      setTimeout(function () {
        expect(document.activeElement.tabIndex).to.equal(-1);
        done();
      }, 1);
    }, 1);
  });
  it('meets a11y standards', function () {
    return checkA11y(React.createElement(OutcomeTags, makeProps()));
  });
});
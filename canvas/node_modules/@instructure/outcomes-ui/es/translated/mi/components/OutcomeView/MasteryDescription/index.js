import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";

var _percent_mi_number = Intl.NumberFormat("mi", { style: "percent" }).format,
    _default_mi_number = Intl.NumberFormat("mi", { style: "decimal" }).format,
    _dec,
    _class,
    _class2,
    _temp;

import React from 'react';
import PropTypes from 'prop-types';
import { Text } from '@instructure/ui-text';
import { Spinner } from '@instructure/ui-spinner';
import { themeable } from '@instructure/ui-themeable';
import { scoringMethodShape } from '../../../store/shapes';
import theme from '../../theme';
var styles = {
  componentId: 'IalyE',
  template: function template(theme) {
    return "\n\n.outcomes-ui__MasteryDescription--scoreMastery {\n  background-color: #F5F5F5;\n  border: solid 1px #999999;\n  border-radius: 0.25rem;\n  margin-top: 2rem;\n  padding: 1.0rem 1.0rem;\n}\n\n.outcomes-ui__MasteryDescription--scoreMasteryText {\n  margin-top: 1rem;\n}\n";
  },
  'scoreMastery': 'outcomes-ui__MasteryDescription--scoreMastery',
  'scoreMasteryText': 'outcomes-ui__MasteryDescription--scoreMasteryText'
};

var scoringText = function scoringText(scoringMethod) {
  switch (scoringMethod.algorithm) {
    case 'decaying_average':
      return "I tatautia te Hingana e te heke Haere Toharite Ng\u0101 kaute o mua nei ko te " + _percent_mi_number(scoringMethod.algorithm_data.decaying_average_percent) + " o te hingana taumaha, toharite o \u0113tahi atu hua katoa kaute ko te  " + _percent_mi_number(1.0 - scoringMethod.algorithm_data.decaying_average_percent) + " te taumaha. Mehemea kotahi anake te hua, ka whakahokia te kaute kotahi.";

    case 'n_mastery':
      return "Te hingana kua tautuhia e te n Maha o ng\u0101 W\u0101 Me whakatutuki te hingana i te iti rawa " + _default_mi_number(scoringMethod.algorithm_data.n_mastery_count) + " ng\u0101 w\u0101.  Ng\xE4 kaute i runga i te hinganga ka toharitetia ki te t\u0101tai i te kaute whakamutunga.";

    case 'highest':
      return "Ka tatautia te Mana e te kaute Teitei E whak\u0101tu ana te kaute mana i te aromatawai k\u014Deke o te kaute teitei.";

    case 'latest':
      return "Ka tatautia te Mana e te kaute Tomua tonu nei E whak\u0101tu ana te kaute mana i te aromatawai k\u014Deke o n\u0101ianei.";

    default:
      return '';
  }
};

var masteryText = function masteryText(masteryPercent, artifactTypeName) {
  return "Na roto i te whakah\u0101ngai i ki t\u0113nei " + artifactTypeName + " ki te tatau \u0101konga i runga " + _percent_mi_number(masteryPercent) + " ka tutuki te hinganga";
};

var MasteryDescription = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits(MasteryDescription, _React$Component);

  function MasteryDescription() {
    _classCallCheck(this, MasteryDescription);

    return _possibleConstructorReturn(this, _getPrototypeOf(MasteryDescription).apply(this, arguments));
  }

  _createClass(MasteryDescription, [{
    key: "render",
    // eslint-disable-next-line no-undef
    value: function render() {
      var _this$props = this.props,
          artifactTypeName = _this$props.artifactTypeName,
          displayMasteryPercentText = _this$props.displayMasteryPercentText,
          scoringMethod = _this$props.scoringMethod;

      if (!scoringMethod) {
        return React.createElement(Spinner, {
          renderTitle: "E tukuake ana"
        });
      }

      return React.createElement("div", {
        className: styles.scoreMastery,
        "data-automation": "outcomeView__scoreMethodDescription"
      }, React.createElement("div", null, React.createElement(Text, {
        size: "small"
      }, scoringText(scoringMethod))), displayMasteryPercentText && artifactTypeName && React.createElement("div", {
        className: styles.scoreMasteryText
      }, React.createElement(Text, {
        size: "small"
      }, masteryText(scoringMethod.mastery_percent, artifactTypeName))));
    }
  }]);

  MasteryDescription.displayName = "MasteryDescription";
  return MasteryDescription;
}(React.Component), _class2.propTypes = {
  artifactTypeName: PropTypes.string,
  displayMasteryPercentText: PropTypes.bool.isRequired,
  scoringMethod: scoringMethodShape
}, _class2.defaultProps = {
  artifactTypeName: null,
  scoringMethod: null
}, _temp)) || _class);
export { MasteryDescription as default };
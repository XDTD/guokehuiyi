import { expect } from 'chai';
import { fromJS, Set } from 'immutable';
import { SET_OUTCOME_PICKER_STATE, SELECT_OUTCOME_IDS, UNSELECT_OUTCOME_IDS, SET_SELECTED_OUTCOME_IDS, SET_ACTIVE_COLLECTION_ID, RESET_OUTCOME_PICKER } from '../../../constants';
import * as actions from '../actions';
import reducer from '../reducers';
describe('OutcomePicker/reducers', function () {
  var state = fromJS({
    focusedOutcome: null,
    selected: Set(['1', '2', '3']),
    state: 'testing',
    scope: 'scopeForTest'
  });

  var reduce = function reduce(state, type, payload) {
    return reducer(state, {
      type: type,
      payload: payload
    });
  };

  describe('state (outcomePickerState)', function () {
    it('is set by SET_OUTCOME_PICKER_STATE', function () {
      var newState = reduce(state, SET_OUTCOME_PICKER_STATE, 'monkey');
      expect(newState.get('state')).to.equal('monkey');
    });
  });
  describe('focusedOutcome', function () {
    it('is set by setFocusedOutcomeAction', function () {
      var next = reducer(state, actions.setFocusedOutcomeAction('rhino'));
      expect(next.get('focusedOutcome')).to.equal('rhino');
    });
  });
  describe('selected', function () {
    describe('adds ids on SELECT_OUTCOME_IDS', function () {
      it('when distinct', function () {
        var newState = reduce(state, SELECT_OUTCOME_IDS, [4, 5]);
        expect(newState.get('selected').toJS().sort()).to.deep.equal(['1', '2', '3', '4', '5']);
      });
      it('when not distinct', function () {
        var newState = reduce(state, SELECT_OUTCOME_IDS, [1, 2, 5]);
        expect(newState.get('selected').toJS().sort()).to.deep.equal(['1', '2', '3', '5']);
      });
    });
    describe('removes ids on UNSELECT_OUTCOME_IDS', function () {
      it('when present', function () {
        var newState = reduce(state, UNSELECT_OUTCOME_IDS, ['1', '2']);
        expect(newState.get('selected').toJS()).to.deep.equal(['3']);
      });
      it('when absent', function () {
        var newState = reduce(state, UNSELECT_OUTCOME_IDS, ['3', '4']);
        expect(newState.get('selected').toJS().sort()).to.deep.equal(['1', '2']);
      });
    });
    it('replaces ids on SET_SELECTED_OUTCOME_IDS', function () {
      var newState = reduce(state, SET_SELECTED_OUTCOME_IDS, ['2', '5']);
      expect(newState.get('selected').toJS().sort()).to.deep.equal(['2', '5']);
    });
  });
  describe('activeCollection', function () {
    it('is set by SET_ACTIVE_COLLECTION_ID', function () {
      var newState = reduce(state, SET_ACTIVE_COLLECTION_ID, '1701');
      expect(newState.get('activeCollection')).to.equal('1701');
    });
  });
  describe('expandedIds', function () {
    it('is set by toggleExpandedIds', function () {
      var next = reducer(state, actions.toggleExpandedIds({
        id: 1
      }));
      expect(next.get('expandedIds').toJS()).to.deep.equal(['1']);
    });
    it('properly adds and removes ids from the set', function () {
      var firstState = reducer(state, actions.toggleExpandedIds({
        id: 1
      }));
      var secondState = reducer(firstState, actions.toggleExpandedIds({
        id: 2
      }));
      expect(secondState.get('expandedIds').toJS()).to.deep.equal(['1', '2']);
      var thirdState = reducer(secondState, actions.toggleExpandedIds({
        id: 1
      }));
      expect(thirdState.get('expandedIds').toJS()).to.deep.equal(['2']);
    });
    it('does not remove an id if collection is forced open', function () {
      var firstState = reducer(state, actions.toggleExpandedIds({
        id: 1
      }));
      var secondState = reducer(firstState, actions.toggleExpandedIds({
        id: 1,
        forceOpen: true
      }));
      expect(secondState.get('expandedIds').toJS()).to.deep.equal(['1']);
    });
  });
  describe('when action type is RESET_OUTCOME_PICKER ', function () {
    it('resets state to default', function () {
      var newState = reduce(state, RESET_OUTCOME_PICKER, 'scopeForTest');
      expect(newState.get('state')).to.equal('closed'); // eslint-disable-line no-console

      expect(newState.get('selected').toJS()).to.deep.equal([]);
    });
  });
});
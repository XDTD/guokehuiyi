import { Map, List } from 'immutable';
import { createSelector } from 'reselect';
import createCachedSelector from 're-reselect';
import { getOutcome } from '../context/selectors';

var restrict = function restrict(state, scope) {
  return state.getIn([scope, 'alignments']) || Map();
};

var alignedOutcomes = function alignedOutcomes(state, scope) {
  return restrict(state, scope).get('alignedOutcomes') || List();
};

var openAlignmentId = function openAlignmentId(state, scope) {
  return restrict(state, scope).get('openAlignmentId');
};

export var getAlignedOutcomes = createCachedSelector(alignedOutcomes, function (alignedOutcomes) {
  return alignedOutcomes.toJS().sort(function (a, b) {
    var titleA = a && a.title || 'ZZZZZZZZZZZZ'; // treat null as really large

    var titleB = b && b.title || 'ZZZZZZZZZZZZ'; // treat null as really large

    return titleA.localeCompare(titleB);
  });
})(function (_state, scope) {
  return scope;
});
export var getAlignedOutcomeIds = createSelector(getAlignedOutcomes, function (outcomes) {
  return outcomes.map(function (o) {
    return o.id;
  });
});
export function getAlignedOutcomeCount(state, scope) {
  if (state && restrict(state, scope).get('alignedOutcomes')) {
    return restrict(state, scope).get('alignedOutcomes').size;
  }

  return 0;
}
export var getAlignedOutcome = createSelector(function (state, scope, id) {
  return getAlignedOutcomes(state, scope).find(function (o) {
    return o.id === id;
  });
}, function (outcome) {
  return outcome;
});
export function getAnyOutcome(state, scope, id) {
  return getAlignedOutcome(state, scope, id) || getOutcome(state, scope, id);
}
export function getOutcomeAlignmentSetId(state, scope) {
  return restrict(state, scope).get('alignmentSetId');
}
export var makeIsOpen = createCachedSelector(openAlignmentId, function (openAlignments) {
  return function (id) {
    return openAlignments === id;
  };
})(function (_state, scope) {
  return scope;
});
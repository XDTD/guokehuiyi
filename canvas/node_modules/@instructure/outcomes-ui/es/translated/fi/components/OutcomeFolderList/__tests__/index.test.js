import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { shallow } from 'enzyme';
import OutcomeFolderList from '../index';
import checkA11y from '../../../test/checkA11y';
describe('OutcomeFolderList', function () {
  var outcomes = [{
    id: '1',
    label: 'ABC',
    title: 'Title1'
  }, {
    id: '2',
    label: 'DEF',
    title: 'Title2'
  }, {
    id: '3',
    label: 'GHI',
    title: 'Title3'
  }];

  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      outcomes: outcomes,
      getOutcomeSummary: sinon.spy(),
      setActiveCollection: sinon.spy()
    }, props);
  }

  it('renders an empty div if there are no ids', function () {
    var wrapper = shallow(React.createElement(OutcomeFolderList, makeProps({
      ids: []
    })), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('OutcomeFolder')).not.to.be.present;
  });
  it('renders a folder for each outcome', function () {
    var wrapper = shallow(React.createElement(OutcomeFolderList, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('OutcomeFolder')).to.have.length(3);
  });
  it('passes the right args to each checkbox', function () {
    var props = makeProps();
    var wrapper = shallow(React.createElement(OutcomeFolderList, props), {
      disableLifecycleMethods: true
    });
    var folder = wrapper.find('OutcomeFolder').first();
    expect(folder.prop('outcome')).to.deep.equal({
      id: '1',
      label: 'ABC',
      title: 'Title1'
    });
    expect(folder.prop('setActiveCollection')).to.equal(props.setActiveCollection);
  });
  it('meets a11y standards', function () {
    return checkA11y(React.createElement(OutcomeFolderList, makeProps()));
  });
});
import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { mount, shallow } from 'enzyme';
import { IconOutcomesLine } from '@instructure/ui-icons';
import Alignment from '../index';
import checkA11y from '../../../test/checkA11y';
describe('Alignment', function () {
  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      outcome: {
        id: '1',
        label: 'FOO',
        title: 'User can foo a bar'
      },
      closeAlignment: sinon.spy(),
      viewAlignment: sinon.spy(),
      removeAlignment: sinon.spy(),
      isOpen: false,
      readOnly: false
    }, props);
  }

  it('includes an icon', function () {
    var wrapper = shallow(React.createElement(Alignment, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find(IconOutcomesLine)).to.have.length(1);
  });
  it('includes a delete button', function () {
    var props = makeProps();
    var wrapper = shallow(React.createElement(Alignment, props), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Button')).to.have.length(1);
  });
  it('does not include a delete button if readOnly', function () {
    var props = makeProps({
      readOnly: true
    });
    var wrapper = shallow(React.createElement(Alignment, props), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Button')).to.have.length(0);
  });
  it('calls removeAlignment when delete is clicked', function () {
    var props = makeProps();
    var wrapper = shallow(React.createElement(Alignment, props), {
      disableLifecycleMethods: true
    });
    var remove = wrapper.find('Button');
    remove.simulate('click');
    expect(props.removeAlignment.calledOnce).to.be.true;
  });
  it('calls viewAlignment when the title is clicked', function () {
    var props = makeProps();
    var wrapper = shallow(React.createElement(Alignment, props), {
      disableLifecycleMethods: true
    });
    var link = wrapper.find('Link');
    link.simulate('click');
    expect(props.viewAlignment.calledOnce).to.be.true;
  });
  it('renders outcome title in link', function () {
    var props = makeProps();
    var wrapper = mount(React.createElement(Alignment, props));
    var link = wrapper.find('Link');
    expect(link.text()).to.equal('User can foo a bar');
  });
  it('meets a11y standards', function () {
    return checkA11y(React.createElement(Alignment, makeProps()), {
      ignores: ['listitem']
    });
  });
});
import { expect } from 'chai';
import { List, fromJS } from 'immutable';
import { hasContextOutcomes, getOutcome, isOutcomeGroup, makeGetOutcomeSummary, getRootOutcomeIds, getCollectionData, getDescriptor, getChildrenToLoad, hasRootOutcomes, getContext, getContextByScope } from '../selectors';
describe('context/selectors', function () {
  var scope = 'scopeForTest';
  var state = fromJS({
    scopeForTest: {
      config: {
        contextUuid: 'course_100'
      }
    },
    context: {
      outcomes: {
        course_100: {
          1: {
            id: 1,
            label: 'l1',
            title: 't1',
            child_ids: ['2', '3']
          },
          2: {
            id: 2,
            label: 'l2',
            title: 't2',
            child_ids: ['4']
          },
          3: {
            id: 3,
            label: 'l3',
            title: 't3',
            child_ids: []
          },
          4: {
            id: 4,
            label: 'l4',
            title: 't4'
          }
        }
      },
      contexts: {
        course_100: {
          loading: false,
          data: {
            id: 1
          }
        }
      },
      rootOutcomeIds: {
        course_100: [1]
      }
    }
  });
  describe('getContext', function () {
    it('returns context when outcomes exist', function () {
      expect(getContext(state, 'course_100').data.id).to.be.equal(1);
    });
    it('returns undefined when does not exists', function () {
      expect(getContext(state, 'course_101')).to.be.undefined;
    });
  });
  describe('getContextByScope', function () {
    it('returns context when outcomes exist', function () {
      expect(getContextByScope(state, scope).data.id).to.be.equal(1);
    });
    it('returns undefined when does not exists', function () {
      expect(getContextByScope(state, 'any_scope')).to.be.undefined;
    });
  });
  describe('hasContextOutcomes', function () {
    it('returns true when outcomes exist', function () {
      expect(hasContextOutcomes(state, scope)).to.equal(true);
    });
    it('returns false when empty', function () {
      var newState = state.setIn(['context', 'outcomes'], List());
      expect(hasContextOutcomes(newState, scope)).to.equal(false);
    });
    it('returns false when unset', function () {
      var newState = state.deleteIn(['context', 'outcomes']);
      expect(hasContextOutcomes(newState, scope)).to.equal(false);
    });
  });
  describe('hasRootOutcomes', function () {
    it('returns true when outcomes exist', function () {
      expect(hasRootOutcomes(state, scope)).to.equal(true);
    });
    it('returns false when empty', function () {
      var newState = state.setIn(['context', 'rootOutcomeIds', 'course_100'], List());
      expect(hasRootOutcomes(newState, scope)).to.equal(false);
    });
    it('returns false when unset', function () {
      var newState = state.deleteIn(['context', 'rootOutcomeIds']);
      expect(hasRootOutcomes(newState, scope)).to.equal(false);
    });
  });
  describe('getOutcome', function () {
    it('retrieves the correct value', function () {
      expect(getOutcome(state, scope, '3')).to.have.property('id', 3);
    });
    it('returns null if not present', function () {
      expect(getOutcome(state, scope, '10')).to.be.null;
    });
  });
  describe('getRootOutcomeIds', function () {
    it('retrieves the correct value', function () {
      expect(getRootOutcomeIds(state, scope)).to.deep.equal([1]);
    });
    it('returns [] if not present', function () {
      var newState = state.deleteIn(['context', 'rootOutcomeIds', 'course_100']);
      expect(getRootOutcomeIds(newState, scope)).to.deep.equal([]);
    });
  });
  describe('isOutcomeGroup', function () {
    it('returns true for outcome groups', function () {
      expect(isOutcomeGroup(state, scope, '1')).to.be.ok;
    });
    it('returns false if not present', function () {
      expect(isOutcomeGroup(state, scope, '5')).to.not.be.ok;
    });
    it('returns false for non-outcome groups', function () {
      expect(isOutcomeGroup(state, scope, '3')).to.not.be.ok;
      expect(isOutcomeGroup(state, scope, '4')).to.not.be.ok;
    });
  });
  describe('makeGetOutcomeSummary', function () {
    it('returns the correct summary', function () {
      expect(makeGetOutcomeSummary(state, scope)('1')).to.equal('1 Group | 1 Outcome');
    });
  });
  describe('getCollectionData', function () {
    it('returns collections', function () {
      var collections = getCollectionData(state, scope);
      expect(collections).to.be.present;
      expect(Object.keys(collections).length).to.equal(2);
    });
    it('returns proper collection and subCollection data', function () {
      var collections = getCollectionData(state, scope);
      var subCollectionId = collections['1'].collections[0];
      expect(collections['1'].name).to.equal('t1');
      expect(collections[subCollectionId].name).to.equal('t2');
    });
    it('caches its result', function () {
      var collections = getCollectionData(state, scope);
      var collections2 = getCollectionData(state, scope);
      expect(collections).to.equal(collections2);
    });
    it('updates its cache if the outcomes change', function () {
      var collections = getCollectionData(state, scope);
      var newState = state.deleteIn(['context', 'outcomes', 'course_100', '4']);
      var collections2 = getCollectionData(newState, scope);
      expect(collections).not.to.equal(collections2);
    });
  });
  describe('getDescriptor', function () {
    describe('with groups and outcomes', function () {
      it('returns a properly formatted string', function () {
        expect(getDescriptor(2, 3)).to.equal('2 Groups | 3 Outcomes');
      });
    });
    describe('with only groups', function () {
      it('returns a properly formatted string', function () {
        expect(getDescriptor(1, 0)).to.equal('1 Group');
      });
    });
    describe('with only outcomes', function () {
      it('returns a properly formatted string', function () {
        expect(getDescriptor(0, 1)).to.equal('1 Outcome');
      });
    });
    describe('with no groups or outcomes', function () {
      it('returns a properly formatted string', function () {
        expect(getDescriptor(0, 0)).to.equal('');
      });
    });
  });
  describe('getChildrenToLoad', function () {
    var partialState = state.setIn(['context', 'outcomes', 'course_100'], fromJS({
      5: {
        id: 5,
        label: 'l5',
        title: 't5',
        has_children: true,
        child_ids: ['6', '7', '8']
      },
      6: {
        id: 6,
        label: 'l6',
        title: 't6',
        has_children: true,
        is_partial: true
      },
      7: {
        id: 7,
        label: 'l7',
        title: 't7',
        has_children: false,
        is_partial: true
      },
      8: {
        id: 8,
        label: 'l8',
        title: 't8',
        has_children: true
      },
      9: {
        id: 9,
        label: 'l9',
        title: 't9'
      }
    }));
    it('returns an empty array if using the old state', function () {
      ['1', '2', '3', '4'].forEach(function (id) {
        expect(getChildrenToLoad(state, scope, id)).to.deep.equal([]);
      });
    });
    it('returns the given id if the outcome is not in state', function () {
      var newState = partialState.deleteIn(['context', 'outcomes', 'course_100', '5']);
      expect(getChildrenToLoad(newState, scope, '5')).to.deep.equal(['5']);
    });
    it('returns the given id if the outcome is not fully loaded', function () {
      var newState = partialState.setIn(['context', 'outcomes', 'course_100', '5', 'is_partial'], true);
      expect(getChildrenToLoad(newState, scope, '5')).to.deep.equal(['5']);
    });
    it('returns the child ids which are groups and which are not fully loaded', function () {
      expect(getChildrenToLoad(partialState, scope, '5')).to.deep.equal(['6']);
    });
    it('returns an empty array if the outcome is not a group', function () {
      expect(getChildrenToLoad(partialState, scope, '9')).to.deep.equal([]);
    });
  });
});
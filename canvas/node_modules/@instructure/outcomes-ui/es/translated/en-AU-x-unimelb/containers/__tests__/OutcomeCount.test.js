import { expect } from 'chai';
import React from 'react';
import { mount } from 'enzyme';
import createMockStore from '../../test/createMockStore';
import AlignmentCount from '../../components/AlignmentCount';
import OutcomeCount from '../OutcomeCount';
describe('OutcomeCount', function () {
  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var store = createMockStore();
    return Object.assign({
      store: store,
      alignmentSetId: '',
      artifactType: 'foo',
      artifactId: '1',
      host: 'http://foo.outcomes.foo',
      jwt: 'secretfoo'
    }, props);
  }

  it('renders', function () {
    var wrapper = mount(React.createElement("div", {
      id: "app"
    }, React.createElement(OutcomeCount, makeProps())));
    expect(wrapper.find(AlignmentCount)).to.have.length(1);
  });
  it('sets the scope', function () {
    var props = makeProps();
    var wrapper = mount(React.createElement("div", {
      id: "app"
    }, React.createElement(OutcomeCount, props)));
    expect(wrapper.find(AlignmentCount).prop('scope')).to.equal('foo:::1');
  });
  it('uses proper fallbacks if store not passed in props', function () {
    var props = {
      artifactType: 'foo',
      artifactId: '1',
      host: '',
      jwt: '',
      alignmentSetId: ''
    };
    var wrapper = mount(React.createElement("div", {
      id: "app"
    }, React.createElement(OutcomeCount, props)));
    expect(wrapper.find(AlignmentCount).prop('scope')).to.equal('foo:::1');
  });
});
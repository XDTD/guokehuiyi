import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { handleActions } from 'redux-actions';
import { combineReducers } from 'redux-immutable';
import { Set } from 'immutable';
import { RESET_OUTCOME_PICKER } from '../../constants';
import { setFocusedOutcomeAction, toggleExpandedIds } from './actions';
import search from '../search/reducers';
import tray from '../OutcomeTray/reducers';
var focusedOutcome = handleActions(_defineProperty({}, setFocusedOutcomeAction, function (state, action) {
  return action.payload;
}), null);
var expandedIds = handleActions(_defineProperty({}, toggleExpandedIds, function (state, action) {
  if (state.has(action.payload.id.toString()) && !action.payload.forceOpen) {
    return state.delete(action.payload.id.toString());
  } else {
    return state.add(action.payload.id.toString());
  }
}), Set());
var selected = handleActions({
  SELECT_OUTCOME_IDS: function SELECT_OUTCOME_IDS(state, action) {
    return state.union(action.payload.map(function (id) {
      return id.toString();
    }));
  },
  UNSELECT_OUTCOME_IDS: function UNSELECT_OUTCOME_IDS(state, action) {
    return state.subtract(action.payload.map(function (id) {
      return id.toString();
    }));
  },
  SET_SELECTED_OUTCOME_IDS: function SET_SELECTED_OUTCOME_IDS(state, action) {
    return Set(action.payload);
  }
}, Set());
var activeCollection = handleActions({
  SET_ACTIVE_COLLECTION_ID: function SET_ACTIVE_COLLECTION_ID(state, action) {
    return action.payload;
  }
}, null);
var state = handleActions({
  SET_OUTCOME_PICKER_STATE: function SET_OUTCOME_PICKER_STATE(state, action) {
    return action.payload;
  }
}, 'closed');
var OutcomePickerReducer = combineReducers({
  state: state,
  selected: selected,
  focusedOutcome: focusedOutcome,
  activeCollection: activeCollection,
  expandedIds: expandedIds,
  search: search,
  tray: tray
});
export default (function (state, action) {
  return action.type === RESET_OUTCOME_PICKER // When the reducer receives a close action, reset
  // the state of the picker to default values
  ? OutcomePickerReducer(void 0, action) : OutcomePickerReducer(state, action);
});
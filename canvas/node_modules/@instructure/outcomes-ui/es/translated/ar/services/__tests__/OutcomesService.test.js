import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";

/* eslint-disable promise/always-return */
import { expect } from 'chai';
import fetchMock from 'fetch-mock';
import OutcomesService from '../OutcomesService';
describe('OutcomesService', function () {
  var host = 'http://outcomes.docker';
  var jwt = 'wonderland';
  var subject = new OutcomesService();
  afterEach(function () {
    fetchMock.restore();
  });

  var mockGet = function mockGet(path, response) {
    fetchMock.getOnce(host + path, response);
  };

  describe('loadOutcomes', function () {
    it('resolves with normalized json on success', function () {
      var serverResponse = {
        outcome_tree: {
          root_ids: [1, 2],
          outcomes: [{
            id: 1,
            child_ids: []
          }, {
            id: 2,
            child_ids: [3]
          }, {
            id: 3,
            child_ids: [4]
          }, {
            id: 4,
            child_ids: []
          }]
        }
      };
      mockGet('/api/outcomes/tree?excludes[]=scoring_method&depth=2', serverResponse);
      return subject.loadOutcomes(host, jwt).then(function (result) {
        expect(result).to.deep.equal(serverResponse.outcome_tree);
      });
    });
    it('uses correct query', function () {
      fetchMock.getOnce(function (url, opts) {
        expect(url).to.match(/\/outcomes\/tree\?excludes\[\]=scoring_method&depth=2&context_uuid=alphabeta$/);
        return true;
      }, []);
      return subject.loadOutcomes(host, jwt, 'alphabeta');
    });
    it('supports specifying roots', function () {
      fetchMock.getOnce(function (url, opts) {
        expect(url).to.match(/roots\[\]=4&roots\[\]=5/);
        return true;
      }, []);
      return subject.loadOutcomes(host, jwt, 'alphabeta', [4, 5]);
    });
    it('rejects on error', function () {
      mockGet('/api/outcomes/tree?excludes[]=scoring_method&depth=2', 500);
      return subject.loadOutcomes(host, jwt).catch(function (err) {
        expect(err).to.have.property('status', 500);
      });
    });
  });
  describe('getOutcome', function () {
    it('uses correct query', function () {
      fetchMock.getOnce(function (url, opts) {
        expect(url).to.match(/\/outcomes\/1$/);
        return true;
      }, []);
      return subject.getOutcome(host, jwt, '1');
    });
    it('resolves with json on success', function () {
      var outcome = {
        id: 1,
        scoring_method: {}
      };
      mockGet('/api/outcomes/1', outcome);
      return subject.getOutcome(host, jwt, '1').then(function (result) {
        expect(result).to.deep.equal(outcome);
      });
    });
    it('rejects on error', function () {
      mockGet('/api/outcomes/1', 500);
      return subject.getOutcome(host, jwt, '1').catch(function (err) {
        expect(err).to.have.property('status', 500);
      });
    });
  });
  describe('getAlignments', function () {
    it('uses correct query', function () {
      fetchMock.getOnce(function (url, opts) {
        expect(url).to.match(/\/alignment_sets\/foo\?includes=outcomes$/);
        return true;
      }, []);
      return subject.getAlignments(host, jwt, 'foo');
    });
    it('resolves with json on success', function () {
      var alignments = {
        alignment_set: {
          guid: 'xyz',
          alignments: [{
            id: 1,
            outcome_id: 10
          }, {
            id: 2,
            outcome_id: 20
          }]
        }
      };
      mockGet('/api/alignment_sets/baz?includes=outcomes', alignments);
      return subject.getAlignments(host, jwt, 'baz').then(function (result) {
        expect(result).to.deep.equal(alignments.alignment_set);
      });
    });
    it('rejects on error', function () {
      mockGet('/api/alignment_sets/foo?includes=outcomes', 500);
      return subject.getAlignments(host, jwt, 'foo').catch(function (err) {
        expect(err).to.have.property('status', 500);
      });
    });
  });
  describe('getArtifact', function () {
    var artifact = {
      artifact_id: '1',
      artifact_type: 'quizzes.quiz',
      alignment_set: {
        guid: 'xyz',
        outcomes: [{
          id: 1,
          outcome_id: 10
        }, {
          id: 2,
          outcome_id: 20
        }]
      }
    };
    it('uses correct query', function () {
      fetchMock.getOnce(function (url, opts) {
        expect(url).to.match(/\/artifact\?artifact_id=1&artifact_type=quizzes.quiz$/);
        return true;
      }, []);
      return subject.getArtifact(host, jwt, artifact.artifact_type, artifact.artifact_id);
    });
    it('resolves with json on success', function () {
      mockGet('/api/artifact?artifact_id=1&artifact_type=quizzes.quiz', artifact);
      return subject.getArtifact(host, jwt, artifact.artifact_type, artifact.artifact_id).then(function (result) {
        expect(result).to.deep.equal(artifact.alignment_set);
      });
    });
    it('rejects on error', function () {
      mockGet('/api/artifact?artifact_id=1&artifact_type=quizzes.quiz', 500);
      return subject.getArtifact(host, jwt, artifact.artifact_type, artifact.artifact_id).catch(function (err) {
        expect(err).to.have.property('status', 500);
      });
    });
  });
  describe('upsertArtifact', function () {
    it('posts data in correct format', function () {
      fetchMock.postOnce(function (_url, opts) {
        var body = JSON.parse(opts.body);
        expect(body).to.deep.equal({
          artifact_type: 'type',
          artifact_id: 'id',
          context_uuid: 'context',
          outcome_ids: [44, 99]
        });
        return true;
      }, {});
      return subject.upsertArtifact(host, jwt, 'type', 'id', 'context', [44, 99]);
    });
    it('resolves on success', function () {
      var payload = {
        artifactId: '1',
        artifactType: 'quizzes.quiz',
        contextUuid: 'context_uuid',
        outcomeIds: ['1', '2']
      };
      var response = {
        alignment_set: {
          guid: 'foo',
          outcomes: [{
            id: 1,
            outcome_id: 10
          }, {
            id: 2,
            outcome_id: 20
          }]
        }
      };
      fetchMock.postOnce('http://outcomes.docker/api/artifacts', {
        status: 201,
        body: _objectSpread({}, response)
      });
      return subject.upsertArtifact(host, jwt, payload.artifactType, payload.artifactId, payload.contextUuid, payload.outcomeIds).then(function (result) {
        return expect(result).to.deep.equal(response.alignment_set);
      });
    });
    it('rejects on error', function () {
      fetchMock.postOnce('http://outcomes.docker/api/artifacts', 500);
      return subject.upsertArtifact(host, jwt, 'type', 'id', 'context', [1, 2, 3]).catch(function (err) {
        return expect(err).to.have.property('status', 500);
      });
    });
    it('resolves with an empty guid when there are no outcomes', function () {
      var payload = {
        artifactType: 'quizzes.quiz',
        artifactId: '1',
        contextUuid: 'context_uuid',
        outcomeIds: []
      };
      fetchMock.postOnce('http://outcomes.docker/api/artifacts', {
        status: 201,
        body: {} // a delete (caused by having no outcomeIds) returns nothing

      });
      return subject.upsertArtifact(host, jwt, payload.artifactType, payload.artifactId, payload.contextUuid, payload.outcomeIds).then(function (result) {
        return expect(result).to.deep.equal({
          guid: null
        });
      });
    });
  });
  describe('createAlignmentSet', function () {
    it('posts data in correct format', function () {
      fetchMock.postOnce(function (url, opts) {
        var body = JSON.parse(opts.body);
        expect(body).to.deep.equal({
          outcome_ids: [44, 99]
        });
        return true;
      }, {});
      return subject.createAlignmentSet(host, jwt, [44, 99]);
    });
    it('resolves on success', function () {
      fetchMock.postOnce('http://outcomes.docker/api/alignment_sets', {
        status: 201,
        body: {
          alignment_set: {
            guid: 'foo'
          }
        }
      });
      return subject.createAlignmentSet(host, jwt, [1, 2, 3]).then(function (result) {
        expect(result).to.deep.equal({
          guid: 'foo'
        });
      });
    });
    it('resolves on empty alignment set', function () {
      return subject.createAlignmentSet(host, jwt, []).then(function (result) {
        expect(result).to.deep.equal({
          guid: null
        });
      });
    });
    it('rejects on error', function () {
      fetchMock.postOnce('http://outcomes.docker/api/alignment_sets', 500);
      return subject.createAlignmentSet(host, jwt, [1, 2, 3]).catch(function (err) {
        expect(err).to.have.property('status', 500);
      });
    });
  });
  describe('getOutcomeRollups', function () {
    it('uses correct query', function () {
      fetchMock.getOnce(function (url, opts) {
        expect(url).to.match(/\/outcome_rollups\?artifact_id=21&artifact_type=quiz$/);
        return true;
      }, []);
      return subject.getOutcomeRollups(host, jwt, 'quiz', 21);
    });
    it('resolves with json on success', function () {
      var rollups = {
        outcome_rollups: [{
          count: 100,
          mastery_count: 11,
          outcome: {
            id: 2848,
            guid: '7DE656A0-7440-11DF-93FA-01FD9CFF4B22',
            title: 'Read grade-level text with purpose and understanding.',
            parent_id: 2257,
            position: 0,
            created_at: '2017-05-09T20:46:26.411Z',
            updated_at: '2017-05-09T20:46:26.411Z',
            label: 'CCSS.ELA-Literacy.RF.1.4.a',
            description: 'Read grade-level text with purpose and understanding.'
          }
        }]
      };
      fetchMock.getOnce('http://outcomes.docker/api/outcome_rollups?artifact_id=16&artifact_type=quiz', rollups);
      return subject.getOutcomeRollups(host, jwt, 'quiz', 16).then(function (result) {
        expect(result).to.deep.equal(rollups.outcome_rollups);
      });
    });
    it('rejects on error', function () {
      fetchMock.getOnce('http://outcomes.docker/api/outcome_rollups?artifact_id=50&artifact_type=quiz', 400);
      return subject.getOutcomeRollups(host, jwt, 'quiz', 50).catch(function (err) {
        expect(err).to.have.property('status', 400);
      });
    });
  });
  describe('getOutcomeResults', function () {
    it('resolves with json on success', function () {
      var results = {
        results: [{
          user_uuid: 'bc5c4f0e-bfbb-46a7-98f3-1ee8c86a1c6f',
          points: 30.0,
          points_possible: 40.0
        }, {
          user_uuid: '560fddd9-9b16-4e3a-969c-2f095e7afc78',
          points: 80.0,
          points_possible: 100.0
        }]
      };
      var userList = results.results.map(function (user) {
        return user.user_uuid;
      });
      /* eslint-disable max-len */

      fetchMock.getOnce(/http:\/\/outcomes.docker\/api\/authoritative_results\?artifact_id=16&artifact_type=quiz&outcome_id=1985&user_uuid_list=.*/, results);
      return subject.getOutcomeResults(host, jwt, 'quiz', 16, 1985, userList).then(function (result) {
        expect(result).to.deep.equal(results.results);
      });
    });
    it('rejects on error', function () {
      fetchMock.getOnce(/http:\/\/outcomes.docker\/api\/authoritative_results\?artifact_id=16&artifact_type=quiz&outcome_id=1985&user_uuid_list=.*/, 400);
      return subject.getOutcomeResults(host, jwt, 'quiz', 16, 1985, []).catch(function (err) {
        expect(err).to.have.property('status', 400);
      });
    });
  });
  describe('getUsers', function () {
    it('uses correct query', function () {
      fetchMock.getOnce(function (url, opts) {
        expect(url).to.match(/\/users\?artifact_id=21&artifact_type=quiz$/);
        return true;
      }, []);
      return subject.getUsers(host, jwt, 'quiz', 21);
    });
    it('resolves with json and page info on success', function () {
      var page = 1;
      var perPage = 50;
      var total = 499;
      var results = [{
        uuid: 'bc5c4f0e-bfbb-46a7-98f3-1ee8c86a1c6f'
      }, {
        uuid: '560fddd9-9b16-4e3a-969c-2f095e7afc78'
      }];
      var response = {
        body: results,
        headers: {
          'Per-Page': perPage,
          Total: total
        }
      };
      var expected = {
        users: results,
        page: page,
        perPage: perPage,
        total: total
      };
      fetchMock.getOnce('http://outcomes.docker/api/users?artifact_id=16&artifact_type=quiz&page=1', response);
      return subject.getUsers(host, jwt, 'quiz', 16, page).then(function (result) {
        expect(result).to.deep.equal(expected);
      });
    });
    it('rejects on error', function () {
      fetchMock.getOnce('http://outcomes.docker/api/users?artifact_id=16&artifact_type=quiz&page=1', 400);
      return subject.getUsers(host, jwt, 'quiz', 16, 1).catch(function (err) {
        expect(err).to.have.property('status', 400);
      });
    });
  });
  describe('getIndividualResults', function () {
    it('uses correct query', function () {
      fetchMock.getOnce(function (url, opts) {
        expect(url).to.match(/\/individual_results\?artifact_id=21&artifact_type=quiz&includes\[\]=outcomes&includes\[\]=outcome_rollups&user_uuid=userId$/);
        return true;
      }, []);
      return subject.getIndividualResults(host, jwt, 'quiz', 21, 'userId');
    });
    it('resolves with json and page info on success', function () {
      var results = {
        results: []
      };
      var response = {
        body: results
      };
      fetchMock.getOnce('http://outcomes.docker/api/individual_results?artifact_id=21&artifact_type=quiz&includes[]=outcomes&includes[]=outcome_rollups&user_uuid=userId', response);
      return subject.getIndividualResults(host, jwt, 'quiz', 21, 'userId').then(function (result) {
        expect(result).to.deep.equal([]);
      });
    });
    it('rejects on error', function () {
      fetchMock.getOnce('http://outcomes.docker/api/individual_results?artifact_id=21&artifact_type=quiz&includes[]=outcomes&includes[]=outcome_rollups&user_uuid=userId', 400);
      return subject.getIndividualResults(host, jwt, 'quiz', 21, 'userId').catch(function (err) {
        expect(err).to.have.property('status', 400);
      });
    });
  });
  describe('getSearchResults', function () {
    it('uses correct query', function () {
      fetchMock.getOnce(function (url, opts) {
        expect(url).to.match(/\/outcomes\/search\?context_uuid=def&page=999&text=abc$/);
        return true;
      }, []);
      return subject.getSearchResults(host, jwt, 'abc', 999, 'def');
    });
    it('resolves with json on success', function () {
      var body = {
        matches: [{
          id: 1
        }],
        outcomes: [{
          id: 1,
          title: 'abc',
          label: '123'
        }, {
          id: 2,
          title: 'foo',
          label: 'bar'
        }]
      };
      var headers = {
        total: 101
      };
      mockGet('/api/outcomes/search?context_uuid=def&page=999&text=abc', {
        body: body,
        headers: headers
      });
      return subject.getSearchResults(host, jwt, 'abc', 999, 'def').then(function (result) {
        expect(result).to.deep.equal(_objectSpread({}, body, {
          total: 101
        }));
      });
    });
    it('rejects on error', function () {
      mockGet('/api/outcomes/search?context_uuid=def&page=999&text=abc', 500);
      return subject.getSearchResults(host, jwt, 'abc', 999, 'def').catch(function (err) {
        expect(err).to.have.property('status', 500);
      });
    });
  });
  describe('listOutcomes', function () {
    it('uses correct query', function () {
      fetchMock.getOnce(function (url, opts) {
        var exp_url = /\/outcomes\/list\?artifact_id=103&artifact_type=quizzes\.quiz&context_uuid=def&page=999&per_page=10$/;
        expect(url).to.match(exp_url);
        return true;
      }, []);
      return subject.listOutcomes(host, jwt, 999, 'def', '103', 'quizzes.quiz');
    });
    it('resolves with json on success', function () {
      var body = [{
        id: 1,
        title: 'abc',
        label: '123'
      }, {
        id: 2,
        title: 'foo',
        label: 'bar'
      }];
      var headers = {
        total: 101
      };
      var url = '/api/outcomes/list?context_uuid=def&page=999&per_page=10';
      mockGet(url, {
        body: body,
        headers: headers
      });
      return subject.listOutcomes(host, jwt, 999, 'def').then(function (result) {
        expect(result).to.deep.equal({
          outcomes: body,
          total: 101
        });
      });
    });
    it('rejects on error', function () {
      var url = '/api/outcomes/list?artifact_id=103&artifact_type=quizzes.quiz&context_uuid=def&page=999&per_page=10';
      mockGet(url, 500);
      return subject.listOutcomes(host, jwt, 999, 'def', '103', 'quizzes.quiz').catch(function (err) {
        expect(err).to.have.property('status', 500);
      });
    });
    it('resolves with json on success when artifact is specified', function () {
      var body = [{
        id: 1,
        title: 'abc',
        label: '123'
      }, {
        id: 2,
        title: 'foo',
        label: 'bar'
      }];
      var headers = {
        total: 101
      };
      var url = '/api/outcomes/list?artifact_id=103&artifact_type=quizzes.quiz&context_uuid=def&page=999&per_page=10';
      mockGet(url, {
        body: body,
        headers: headers
      });
      return subject.listOutcomes(host, jwt, 999, 'def', '103', 'quizzes.quiz').then(function (result) {
        expect(result).to.deep.equal({
          outcomes: body,
          total: 101
        });
      });
    });
  });
});
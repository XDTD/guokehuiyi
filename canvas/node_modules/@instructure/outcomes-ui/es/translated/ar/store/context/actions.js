import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createAction } from 'redux-actions';
import { CALL_SERVICE } from '@instructure/redux-service-middleware';
import { SET_ERROR, SET_OUTCOMES, SET_ROOT_OUTCOME_IDS, SET_CONTEXT, SET_SCORING_METHOD } from '../../constants';
import { hasRootOutcomes, getChildrenToLoad, getContext } from './selectors';
import { getConfig } from '../config/selectors';
export var setContext = createAction(SET_CONTEXT);
export var setOutcomes = createAction(SET_OUTCOMES);
export var setRootOutcomeIds = createAction(SET_ROOT_OUTCOME_IDS);
export var setError = createAction(SET_ERROR);
export var setScoringMethod = createAction(SET_SCORING_METHOD);
export var loadContext = function loadContext(host, jwt, contextUuid) {
  return function (dispatch, getState) {
    if (getContext(getState(), contextUuid)) {
      return Promise.resolve();
    }

    dispatch(setContext(_defineProperty({}, contextUuid, {
      loading: true
    })));
    return dispatch({
      type: CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'getContext',
        args: [host, jwt, contextUuid]
      }
    }).then(function (json) {
      return dispatch(setContext(_defineProperty({}, contextUuid, {
        loading: false,
        data: json
      })));
    }).catch(function (e) {
      return dispatch(setError(e));
    });
  };
};
export var loadRootOutcomes = function loadRootOutcomes() {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig = getConfig(getState(), scope),
        contextUuid = _getConfig.contextUuid;

    if (hasRootOutcomes(getState(), scope)) {
      return Promise.resolve();
    }

    return dispatch(loadOutcomes(null)).then(function (json) {
      Object.assign(json.outcomes, {
        root: {
          id: 'root',
          title: "\u0627\u0644\u0635\u0641\u062D\u0629 \u0627\u0644\u0631\u0626\u064A\u0633\u064A\u0629",
          description: "\u0645\u062C\u0645\u0648\u0639\u0627\u062A \u0648\u0646\u062A\u0627\u0626\u062C \u0645\u0633\u062A\u0648\u0649 \u0627\u0644\u0635\u0641\u062D\u0629 \u0627\u0644\u0631\u0626\u064A\u0633\u064A\u0629",
          child_ids: json.root_ids.map(function (id) {
            return id.toString();
          })
        }
      });
      dispatch(setOutcomes(_defineProperty({}, contextUuid, json.outcomes)));
      dispatch(setRootOutcomeIds(_defineProperty({}, contextUuid, json.root_ids)));
      return Promise.resolve();
    }).catch(function (e) {
      dispatch(setError(e));
    });
  };
};
export var loadMoreOutcomes = function loadMoreOutcomes(id) {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig2 = getConfig(getState(), scope),
        contextUuid = _getConfig2.contextUuid;

    var idsToLoad = getChildrenToLoad(getState(), scope, id);

    if (idsToLoad.length === 0) {
      return Promise.resolve();
    }

    return dispatch(loadOutcomes(idsToLoad)).then(function (json) {
      dispatch(setOutcomes(_defineProperty({}, contextUuid, json.outcomes)));
      return Promise.resolve();
    }).catch(function (e) {
      dispatch(setError(e));
    });
  };
};

var loadOutcomes = function loadOutcomes(ids) {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig3 = getConfig(getState(), scope),
        host = _getConfig3.host,
        jwt = _getConfig3.jwt,
        contextUuid = _getConfig3.contextUuid;

    return dispatch({
      type: CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'loadOutcomes',
        args: [host, jwt, contextUuid, ids]
      }
    }).then(function (json) {
      return Promise.resolve(json);
    });
  };
};
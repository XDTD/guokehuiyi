import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { List, Map, fromJS } from 'immutable';
import { handleActions } from 'redux-actions';
import { combineReducers } from 'redux-immutable';
import { setPage, setPageData, setUsers, setReportOutcomes, setRollups, setResults, setLoading } from './actions';
var users = handleActions(_defineProperty({}, setUsers, function (state, action) {
  return fromJS(action.payload);
}), List());
var page = handleActions(_defineProperty({}, setPage, function (state, action) {
  return fromJS(action.payload);
}), fromJS({
  number: void 0
}));
var pageData = handleActions(_defineProperty({}, setPageData, function (state, action) {
  return fromJS(action.payload);
}), Map());
var outcomes = handleActions(_defineProperty({}, setReportOutcomes, function (state, action) {
  return fromJS(action.payload);
}), Map());
var rollups = handleActions(_defineProperty({}, setRollups, function (state, action) {
  return fromJS(action.payload);
}), List());
var loading = handleActions(_defineProperty({}, setLoading, function (state, action) {
  return fromJS(action.payload);
}), false);
var results = handleActions(_defineProperty({}, setResults, function (state, action) {
  var _action$payload = action.payload,
      outcomeId = _action$payload.outcomeId,
      results = _action$payload.results;
  var resultMap = results.map(function (_ref) {
    var userId = _ref.user_uuid,
        percentScore = _ref.percent_score,
        points = _ref.points,
        pointsPossible = _ref.points_possible;
    var ungulated = fromJS({
      userId: userId,
      percentScore: percentScore,
      points: points,
      pointsPossible: pointsPossible
    });
    return [userId.toString(), ungulated];
  });
  return state.set(outcomeId, Map(resultMap));
}), Map());
var openReportAlignmentId = handleActions({
  VIEW_REPORT_ALIGNMENT: function VIEW_REPORT_ALIGNMENT(state, action) {
    return action.payload;
  },
  CLOSE_REPORT_ALIGNMENT: function CLOSE_REPORT_ALIGNMENT() {
    return null;
  }
}, null);
export default combineReducers({
  page: page,
  pageData: pageData,
  users: users,
  outcomes: outcomes,
  results: results,
  rollups: rollups,
  openReportAlignmentId: openReportAlignmentId,
  loading: loading
});
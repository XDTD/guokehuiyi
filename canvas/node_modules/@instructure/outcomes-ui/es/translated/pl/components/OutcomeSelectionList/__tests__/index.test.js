import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { mount, shallow } from 'enzyme';
import OutcomeSelectionList from '../index';
import checkA11y from '../../../test/checkA11y';
describe('OutcomeSelectionList', function () {
  function selectedIds(ids) {
    var isOutcomeSelected = sinon.stub();
    isOutcomeSelected.returns(false);
    ids.forEach(function (id) {
      isOutcomeSelected.withArgs(id).returns(true);
    });
    return isOutcomeSelected;
  }

  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var outcomes = [{
      id: '1',
      label: 'ABC',
      title: 'Title1'
    }, {
      id: '2',
      label: 'DEF',
      title: 'Title2'
    }, {
      id: '3',
      label: 'GHI',
      title: 'Title3'
    }];
    return Object.assign({
      outcomes: outcomes,
      setFocusedOutcome: sinon.spy(),
      isOutcomeSelected: selectedIds([]),
      selectOutcomeIds: sinon.spy(),
      deselectOutcomeIds: sinon.spy()
    }, props);
  }

  it('renders an empty element if no active ids', function () {
    var wrapper = shallow(React.createElement(OutcomeSelectionList, makeProps({
      activeChildrenIds: []
    })), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('OutcomeCheckbox')).not.to.be.present;
  });
  it('renders a checkbox for each outcome', function () {
    var wrapper = shallow(React.createElement(OutcomeSelectionList, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('OutcomeCheckbox')).to.have.length(3);
  });
  it('passes the right args to each checkbox', function () {
    var wrapper = shallow(React.createElement(OutcomeSelectionList, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('OutcomeCheckbox').first().prop('outcome')).to.deep.equal({
      id: '1',
      label: 'ABC',
      title: 'Title1'
    });
  });
  it('renders a select all checkbox', function () {
    var wrapper = shallow(React.createElement(OutcomeSelectionList, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Checkbox[value="selectAll"]')).to.have.length(1);
  });
  it('renders select all as unchecked when no outcomes selected', function () {
    var wrapper = shallow(React.createElement(OutcomeSelectionList, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Checkbox[value="selectAll"]').prop('checked')).to.be.false;
  });
  it('renders select all as unchecked when not all outcomes selected', function () {
    var props = makeProps({
      isOutcomeSelected: selectedIds(['1', '3'])
    });
    var wrapper = shallow(React.createElement(OutcomeSelectionList, props), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Checkbox[value="selectAll"]').prop('checked')).to.be.false;
  });
  it('renders select all as checked when all outcomes selected', function () {
    var props = makeProps({
      isOutcomeSelected: selectedIds(['1', '2', '3'])
    });
    var wrapper = shallow(React.createElement(OutcomeSelectionList, props), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Checkbox[value="selectAll"]').prop('checked')).to.be.true;
  });
  it('renders select all checkbox as "Select all" when not all outcomes selected', function () {
    var props = makeProps({
      isOutcomeSelected: selectedIds(['1', '3'])
    });
    var wrapper = mount(React.createElement(OutcomeSelectionList, props));
    expect(wrapper.find('Text').at(0).text()).to.equal('Select all');
  });
  it('renders select all checkbox as "Deselect all" when all outcomes selected', function () {
    var props = makeProps({
      isOutcomeSelected: selectedIds(['1', '2', '3'])
    });
    var wrapper = mount(React.createElement(OutcomeSelectionList, props));
    expect(wrapper.find('Text').at(0).text()).to.equal('Deselect all');
  });
  it('calls select function on all outcomes when select all is unchecked and clicked', function () {
    var props = makeProps({
      isOutcomeSelected: selectedIds(['1', '3'])
    });
    var wrapper = shallow(React.createElement(OutcomeSelectionList, props), {
      disableLifecycleMethods: true
    });
    wrapper.find('Checkbox[value="selectAll"]').simulate('change');
    expect(props.selectOutcomeIds.calledWith(['1', '2', '3']));
  });
  it('calls unselect function on all outcomes when select all is checked and clicked', function () {
    var props = makeProps({
      isOutcomeSelected: selectedIds(['1', '2', '3'])
    });
    var wrapper = shallow(React.createElement(OutcomeSelectionList, props), {
      disableLifecycleMethods: true
    });
    wrapper.find('Checkbox[value="selectAll"]').simulate('change');
    expect(props.deselectOutcomeIds.calledWith(['1', '2', '3']));
  });
  it('meets a11y standards', function () {
    return checkA11y(React.createElement(OutcomeSelectionList, makeProps()));
  });
});
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import t from 'format-message';
import { IconButton } from '@instructure/ui-buttons';
import { Text } from '@instructure/ui-text';
import { IconTrashLine } from '@instructure/ui-icons';
import { themeable } from '@instructure/ui-themeable';
import OutcomeDescription from '../../OutcomeDescription';
import { outcomeShape } from '../../../store/shapes';
import theme from '../../theme';
var styles = {
  componentId: 'fztAm',
  template: function template(theme) {
    return "\n\n.outcomes-ui__AlignmentItem--deleteButton {\n  flex: 0 0 1rem;\n}\n\n.outcomes-ui__AlignmentItem--outcomeTitle {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n";
  },
  'deleteButton': 'outcomes-ui__AlignmentItem--deleteButton',
  'outcomeTitle': 'outcomes-ui__AlignmentItem--outcomeTitle'
};
var AlignmentItem = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits(AlignmentItem, _React$Component);

  function AlignmentItem() {
    _classCallCheck(this, AlignmentItem);

    return _possibleConstructorReturn(this, _getPrototypeOf(AlignmentItem).apply(this, arguments));
  }

  _createClass(AlignmentItem, [{
    key: "focus",
    value: function focus() {
      this.focusLink.focus();
    }
  }, {
    key: "renderDeleteButton",
    value: function renderDeleteButton() {
      var _this = this;

      var _this$props = this.props,
          outcome = _this$props.outcome,
          removeAlignment = _this$props.removeAlignment,
          readOnly = _this$props.readOnly;

      if (!readOnly) {
        return React.createElement("span", {
          className: styles.deleteButton,
          "data-automation": "outcomeAlignmentItem__delete"
        }, React.createElement(IconButton, {
          withBackground: false,
          withBorder: false,
          screenReaderLabel: t("Remove ".concat(outcome.title)),
          elementRef: function elementRef(link) {
            _this.focusLink = link;
          } // eslint-disable-line immutable/no-mutation
          ,
          onClick: removeAlignment
        }, React.createElement(IconTrashLine, null)));
      }
    }
  }, {
    key: "render",
    value: function render() {
      var outcome = this.props.outcome;
      return React.createElement(React.Fragment, null, React.createElement(Text, {
        size: "small"
      }, outcome.label), React.createElement("div", {
        className: styles.outcomeTitle,
        "data-automation": "outcomeAlignmentItem__title"
      }, React.createElement(Text, {
        weight: "bold",
        size: "small"
      }, outcome.title), this.renderDeleteButton()), React.createElement(OutcomeDescription, {
        description: outcome.description
      }));
    }
  }]);

  AlignmentItem.displayName = "AlignmentItem";
  return AlignmentItem;
}(React.Component), _class2.propTypes = {
  outcome: outcomeShape.isRequired,
  removeAlignment: PropTypes.func.isRequired,
  readOnly: PropTypes.bool.isRequired
}, _class2.defaultProps = {
  readOnly: false
}, _temp)) || _class);
export { AlignmentItem as default };
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";

var _percent_fr_number = Intl.NumberFormat("fr", { style: "percent" }).format,
    _default_fr_number = Intl.NumberFormat("fr", { style: "decimal" }).format,
    _dec,
    _class,
    _class2,
    _temp;

import React from 'react';
import PropTypes from 'prop-types';
import { Text } from '@instructure/ui-text';
import { Spinner } from '@instructure/ui-spinner';
import { themeable } from '@instructure/ui-themeable';
import { scoringMethodShape } from '../../../store/shapes';
import theme from '../../theme';
var styles = {
  componentId: 'IalyE',
  template: function template(theme) {
    return "\n\n.outcomes-ui__MasteryDescription--scoreMastery {\n  background-color: #F5F5F5;\n  border: solid 1px #999999;\n  border-radius: 0.25rem;\n  margin-top: 2rem;\n  padding: 1.0rem 1.0rem;\n}\n\n.outcomes-ui__MasteryDescription--scoreMasteryText {\n  margin-top: 1rem;\n}\n";
  },
  'scoreMastery': 'outcomes-ui__MasteryDescription--scoreMastery',
  'scoreMasteryText': 'outcomes-ui__MasteryDescription--scoreMasteryText'
};

var scoringText = function scoringText(scoringMethod) {
  switch (scoringMethod.algorithm) {
    case 'decaying_average':
      return "Ma\xEEtrise calcul\xE9e par moyenne d\xE9clinante. Le plus r\xE9cent compte pour " + _percent_fr_number(scoringMethod.algorithm_data.decaying_average_percent) + " du coefficient de ma\xEEtrise, la moyenne de tous les autres r\xE9sultats compte pour " + _percent_fr_number(1.0 - scoringMethod.algorithm_data.decaying_average_percent) + " du coefficient. S\u2019il n\u2019existe qu\u2019un seul r\xE9sultat, cet unique score sera retourn\xE9.";

    case 'n_mastery':
      return "Ma\xEEtrise calcul\xE9e par nombre de fois n. La ma\xEEtrise doit \xEAtre atteinte au moins " + _default_fr_number(scoringMethod.algorithm_data.n_mastery_count) + " fois.  La moyenne des scores au dessus du niveau de ma\xEEtrise sera calcul\xE9e pour d\xE9terminer le score final.";

    case 'highest':
      return "Ma\xEEtrise calcul\xE9e par score le plus haut Le score de ma\xEEtrise correspond au plus haut score obtenu dans une \xE9valuation not\xE9e.";

    case 'latest':
      return "Ma\xEEtrise calcul\xE9e par dernier score Le score de ma\xEEtrise correspond \xE0 l\u2019\xE9valuation not\xE9e la plus r\xE9cente.";

    default:
      return '';
  }
};

var masteryText = function masteryText(masteryPercent, artifactTypeName) {
  return "En s'alignant avec le " + artifactTypeName + ", si l'\xE9l\xE8ve atteint un score sup\xE9rieur \xE0 " + _percent_fr_number(masteryPercent) + " il atteindra le niveau de ma\xEEtrise.";
};

var MasteryDescription = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits(MasteryDescription, _React$Component);

  function MasteryDescription() {
    _classCallCheck(this, MasteryDescription);

    return _possibleConstructorReturn(this, _getPrototypeOf(MasteryDescription).apply(this, arguments));
  }

  _createClass(MasteryDescription, [{
    key: "render",
    // eslint-disable-next-line no-undef
    value: function render() {
      var _this$props = this.props,
          artifactTypeName = _this$props.artifactTypeName,
          displayMasteryPercentText = _this$props.displayMasteryPercentText,
          scoringMethod = _this$props.scoringMethod;

      if (!scoringMethod) {
        return React.createElement(Spinner, {
          renderTitle: "En cours de chargement"
        });
      }

      return React.createElement("div", {
        className: styles.scoreMastery,
        "data-automation": "outcomeView__scoreMethodDescription"
      }, React.createElement("div", null, React.createElement(Text, {
        size: "small"
      }, scoringText(scoringMethod))), displayMasteryPercentText && artifactTypeName && React.createElement("div", {
        className: styles.scoreMasteryText
      }, React.createElement(Text, {
        size: "small"
      }, masteryText(scoringMethod.mastery_percent, artifactTypeName))));
    }
  }]);

  MasteryDescription.displayName = "MasteryDescription";
  return MasteryDescription;
}(React.Component), _class2.propTypes = {
  artifactTypeName: PropTypes.string,
  displayMasteryPercentText: PropTypes.bool.isRequired,
  scoringMethod: scoringMethodShape
}, _class2.defaultProps = {
  artifactTypeName: null,
  scoringMethod: null
}, _temp)) || _class);
export { MasteryDescription as default };
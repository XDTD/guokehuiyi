import { createAction } from 'redux-actions';
import { CALL_SERVICE } from '@instructure/redux-service-middleware';
import { SET_ALIGNMENTS, VIEW_ALIGNMENT, CLOSE_ALIGNMENT, UPDATE_ALIGNMENT } from '../../constants';
import { getAlignedOutcomeIds, getAlignedOutcome, getOutcomeAlignmentSetId } from './selectors';
import { getConfig } from '../config/selectors';
import { setError } from '../context/actions';
/*
 * action creators
 */

export var setAlignments = createAction(SET_ALIGNMENTS);
export var viewAlignmentAction = createAction(VIEW_ALIGNMENT);
export var closeAlignment = createAction(CLOSE_ALIGNMENT);
export var updateAlignment = createAction(UPDATE_ALIGNMENT);
export var viewAlignment = function viewAlignment(outcomeId) {
  return function (dispatch, getState, _arg, scope) {
    var outcome = getAlignedOutcome(getState(), scope, outcomeId);
    dispatch(viewAlignmentAction(outcomeId));

    if (outcome && outcome.scoring_method) {
      return Promise.resolve();
    }

    var _getConfig = getConfig(getState(), scope),
        host = _getConfig.host,
        jwt = _getConfig.jwt;

    return dispatch({
      type: CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'getOutcome',
        args: [host, jwt, outcomeId]
      }
    }).then(function (json) {
      return dispatch(updateAlignment({
        outcome: json
      }));
    });
  };
};
export var updateAlignments = function updateAlignments(guid, outcomes, updateCallback) {
  return function (dispatch) {
    dispatch(setAlignments({
      guid: guid,
      outcomes: outcomes
    }));

    if (updateCallback) {
      updateCallback({
        guid: guid,
        outcomes: outcomes
      });
    }

    return Promise.resolve();
  };
};
export var loadAlignments = function loadAlignments(alignmentSetId, updateCallback) {
  return function (dispatch, getState, _arg, scope) {
    if (alignmentSetId && getOutcomeAlignmentSetId(getState(), scope) === alignmentSetId) {
      return Promise.resolve();
    }

    var _getConfig2 = getConfig(getState(), scope),
        host = _getConfig2.host,
        jwt = _getConfig2.jwt;

    return dispatch(clearAlignmentSet()).then(function () {
      return dispatch({
        type: CALL_SERVICE,
        payload: {
          service: 'outcomes',
          method: 'getAlignments',
          args: [host, jwt, alignmentSetId]
        }
      });
    }).then(function (json) {
      return dispatch(updateAlignments(json.guid, json.outcomes, updateCallback));
    }).catch(function (e) {
      return dispatch(setError(e));
    });
  };
};
export var removeAlignment = function removeAlignment(alignmentId, updateCallback) {
  var shouldUpdateArtifact = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  return function (dispatch, getState, _arg, scope) {
    var newIds = getAlignedOutcomeIds(getState(), scope).filter(function (id) {
      return id !== alignmentId;
    });

    if (newIds.length === 0 && !shouldUpdateArtifact) {
      return dispatch(clearAlignmentSet(updateCallback));
    }

    var updateAlignmentFunc = shouldUpdateArtifact ? upsertArtifact : createAlignmentSet;
    return dispatch(updateAlignmentFunc(newIds)).then(function (response) {
      var newOutcomes = newIds.map(function (id) {
        return getAlignedOutcome(getState(), scope, id);
      });
      dispatch(updateAlignments(response.guid, newOutcomes, updateCallback));
    }).catch(function (e) {
      return dispatch(setError(e));
    });
  };
};
export var createAlignmentSet = function createAlignmentSet(outcomeIds) {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig3 = getConfig(getState(), scope),
        host = _getConfig3.host,
        jwt = _getConfig3.jwt;

    return dispatch({
      type: CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'createAlignmentSet',
        args: [host, jwt, outcomeIds]
      }
    });
  };
};
export var clearAlignmentSet = function clearAlignmentSet(updateCallback) {
  return function (dispatch) {
    dispatch(updateAlignments(null, [], updateCallback));
    return Promise.resolve();
  };
};
export var loadArtifact = function loadArtifact() {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig4 = getConfig(getState(), scope),
        host = _getConfig4.host,
        jwt = _getConfig4.jwt,
        artifactType = _getConfig4.artifactType,
        artifactId = _getConfig4.artifactId;

    return dispatch(clearAlignmentSet()).then(function () {
      return dispatch({
        type: CALL_SERVICE,
        payload: {
          service: 'outcomes',
          method: 'getArtifact',
          args: [host, jwt, artifactType, artifactId]
        }
      });
    }).then(function (json) {
      return dispatch(updateAlignments(json.guid, json.outcomes));
    }).catch(function (e) {
      return dispatch(setError(e));
    });
  };
};
export var upsertArtifact = function upsertArtifact(outcomeIds) {
  return function (dispatch, getState, _arg, scope) {
    var _getConfig5 = getConfig(getState(), scope),
        host = _getConfig5.host,
        jwt = _getConfig5.jwt,
        artifactType = _getConfig5.artifactType,
        artifactId = _getConfig5.artifactId,
        contextUuid = _getConfig5.contextUuid;

    return dispatch({
      type: CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'upsertArtifact',
        args: [host, jwt, artifactType, artifactId, contextUuid, outcomeIds]
      }
    });
  };
};
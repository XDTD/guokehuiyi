import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createAction } from 'redux-actions';
import { CALL_SERVICE } from '@instructure/redux-service-middleware';
import { getConfig } from '../config/selectors';
import { getSearchText, getSearchPage } from './selectors';
import { SET_SEARCH_TEXT, SET_SEARCH_LOADING, SET_SEARCH_ENTRIES, SET_SEARCH_PAGE, SET_SEARCH_TOTAL } from '../../constants';
import { setOutcomes } from '../context/actions';
import debounceLatestPromise from '../../util/debouceLatestPromise';
export var setSearchText = createAction(SET_SEARCH_TEXT);
export var setSearchLoading = createAction(SET_SEARCH_LOADING);
export var setSearchEntries = createAction(SET_SEARCH_ENTRIES);
export var setSearchPage = createAction(SET_SEARCH_PAGE);
export var setSearchTotal = createAction(SET_SEARCH_TOTAL);
var getSearchResultsDebounced = debounceLatestPromise(function (dispatch) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return dispatch(searchOutcomes.apply(void 0, args));
}, 250);

var getSearchResultsAction = function getSearchResultsAction() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return function (dispatch) {
    return getSearchResultsDebounced.apply(void 0, [dispatch].concat(args));
  };
};

export var searchOutcomes = function searchOutcomes(_ref) {
  var text = _ref.text,
      page = _ref.page;
  return function (dispatch, getState, _arg, scope) {
    var initialText = text || getSearchText(getState(), scope);
    var initialPage = page || getSearchPage(getState(), scope);

    var _getConfig = getConfig(getState(), scope),
        host = _getConfig.host,
        jwt = _getConfig.jwt,
        contextUuid = _getConfig.contextUuid;

    return dispatch({
      type: CALL_SERVICE,
      payload: {
        service: 'outcomes',
        method: 'getSearchResults',
        args: [host, jwt, initialText, initialPage, contextUuid]
      }
    }).then(function (json) {
      if (getSearchText(getState(), scope) === initialText && getSearchPage(getState(), scope) === initialPage) {
        dispatch(setOutcomes(_defineProperty({}, contextUuid, json.outcomes)));
        dispatch(setSearchEntries(json.matches));
        dispatch(setSearchTotal(json.total));
        dispatch(setSearchLoading(false));
      }

      return Promise.resolve();
    });
  };
};
export var updateSearchText = function updateSearchText(text) {
  return function (dispatch, _getState, _arg, _scope) {
    dispatch(setSearchText(text));
    dispatch(setSearchPage(1));
    dispatch(setSearchTotal(null));

    if (text) {
      dispatch(setSearchLoading(true));
      dispatch(getSearchResultsAction({
        text: text,
        page: 1
      }));
    }
  };
};
export var updateSearchPage = function updateSearchPage(page) {
  return function (dispatch, _getState, _arg, _scope) {
    dispatch(setSearchLoading(true));
    dispatch(setSearchPage(page));
    dispatch(getSearchResultsAction({
      page: page
    }));
  };
};
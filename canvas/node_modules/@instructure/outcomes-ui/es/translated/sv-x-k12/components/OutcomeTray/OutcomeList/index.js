import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React from 'react';
import PropTypes from 'prop-types';
import { Spinner } from '@instructure/ui-spinner';
import { Flex } from '@instructure/ui-flex';
import OutcomeCheckbox from '../../OutcomeCheckbox';
import Pagination from '../../Pagination';
export var RESULTS_PER_PAGE = 10;

var OutcomeList = /*#__PURE__*/function (_React$Component) {
  _inherits(OutcomeList, _React$Component);

  function OutcomeList() {
    _classCallCheck(this, OutcomeList);

    return _possibleConstructorReturn(this, _getPrototypeOf(OutcomeList).apply(this, arguments));
  }

  _createClass(OutcomeList, [{
    key: "renderList",
    value: function renderList() {
      var _this$props = this.props,
          outcomes = _this$props.outcomes,
          setFocusedOutcome = _this$props.setFocusedOutcome,
          isOutcomeSelected = _this$props.isOutcomeSelected,
          selectOutcomeIds = _this$props.selectOutcomeIds,
          deselectOutcomeIds = _this$props.deselectOutcomeIds;
      return outcomes.map(function (outcome) {
        return React.createElement("div", {
          key: outcome.id
        }, React.createElement(OutcomeCheckbox, {
          outcome: outcome,
          setFocusedOutcome: setFocusedOutcome,
          isOutcomeSelected: isOutcomeSelected,
          selectOutcomeIds: selectOutcomeIds,
          deselectOutcomeIds: deselectOutcomeIds
        }));
      });
    }
  }, {
    key: "renderLoading",
    value: function renderLoading() {
      return React.createElement(Flex, {
        justifyItems: "center"
      }, React.createElement(Flex.Item, {
        padding: "small"
      }, React.createElement(Spinner, {
        renderTitle: "L\xE4ser in"
      })));
    }
  }, {
    key: "renderPagination",
    value: function renderPagination() {
      var _this$props2 = this.props,
          listPage = _this$props2.listPage,
          listTotal = _this$props2.listTotal,
          getOutcomesList = _this$props2.getOutcomesList;
      return React.createElement(Pagination, {
        page: listPage,
        updatePage: function updatePage(page) {
          return getOutcomesList({
            page: page
          });
        },
        numPages: Math.ceil(listTotal / RESULTS_PER_PAGE)
      });
    }
  }, {
    key: "render",
    value: function render() {
      var isLoading = this.props.isLoading;
      return React.createElement(Flex, {
        height: "100%",
        width: "100%",
        padding: "none none none none",
        alignItems: "stretch",
        direction: "column"
      }, React.createElement(Flex.Item, {
        shouldGrow: true
      }, isLoading ? this.renderLoading() : this.renderList()), React.createElement(Flex.Item, null, !isLoading && this.renderPagination()));
    }
  }]);

  OutcomeList.displayName = "OutcomeList";
  return OutcomeList;
}(React.Component);

OutcomeList.propTypes = {
  outcomes: PropTypes.array.isRequired,
  setFocusedOutcome: PropTypes.func.isRequired,
  isOutcomeSelected: PropTypes.func.isRequired,
  selectOutcomeIds: PropTypes.func.isRequired,
  deselectOutcomeIds: PropTypes.func.isRequired,
  getOutcomesList: PropTypes.func.isRequired,
  isLoading: PropTypes.bool.isRequired,
  listPage: PropTypes.number.isRequired,
  listTotal: PropTypes.number
};
OutcomeList.defaultProps = {
  listTotal: null
};
export { OutcomeList as default };
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import React from 'react';
import PropTypes from 'prop-types';
import { View } from '@instructure/ui-view';
import { TreeBrowser } from '@instructure/ui-tree-browser';

var OutcomeBrowser = function OutcomeBrowser(props) {
  if (!props.collections) {
    return null;
  }

  var collections = props.collections,
      setActiveCollection = props.setActiveCollection,
      rootOutcomeIds = props.rootOutcomeIds,
      expandedIds = props.expandedIds,
      toggleExpandedIds = props.toggleExpandedIds;

  var handleSelect = function handleSelect(id) {
    setActiveCollection(id);
    toggleExpandedIds({
      id: id
    });
  };

  var defaultExpanded = rootOutcomeIds.length === 1 ? rootOutcomeIds : [];

  var renderRootLevel = function renderRootLevel() {
    var showRoot = false;
    rootOutcomeIds.forEach(function (id) {
      if (!collections[id]) {
        showRoot = true;
      }
    });
    return showRoot;
  };

  return React.createElement(View, {
    as: "div",
    margin: "xx-small"
  }, React.createElement(TreeBrowser, {
    collections: collections,
    rootId: rootOutcomeIds.length > 0 ? 'root' : void 0,
    showRootCollection: renderRootLevel(),
    items: {},
    onCollectionClick: handleSelect,
    expanded: [].concat(_toConsumableArray(defaultExpanded), _toConsumableArray(expandedIds))
  }));
}; // eslint-disable-next-line immutable/no-mutation


OutcomeBrowser.propTypes = {
  collections: PropTypes.object.isRequired,
  setActiveCollection: PropTypes.func.isRequired,
  rootOutcomeIds: PropTypes.array.isRequired,
  expandedIds: PropTypes.array.isRequired,
  toggleExpandedIds: PropTypes.func.isRequired
};
export default OutcomeBrowser;
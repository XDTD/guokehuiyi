import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import { AccessibleContent } from '@instructure/ui-a11y-content';
import { Button } from '@instructure/ui-buttons';
import { Text } from '@instructure/ui-text';
import { IconOutcomesLine, IconPlusLine } from '@instructure/ui-icons';
import { List } from '@instructure/ui-list';
import { themeable } from '@instructure/ui-themeable';
import OutcomePickerModal from '../OutcomePickerModal';
import AlignmentItem from './AlignmentItem';
import AlignmentCount from '../AlignmentCount';
import { outcomeShape } from '../../store/shapes';
import theme from '../theme';
var styles = {
  componentId: 'bKqnu',
  template: function template(theme) {
    return "\n\n.outcomes-ui__AlignmentButton--spacing {\n  padding-right: ".concat(theme.outcomeLabelsSpacing || 'inherit', ";\n}\n\n.outcomes-ui__AlignmentButton--line {\n  display: flex;\n}\n\n.outcomes-ui__AlignmentButton--button {\n  margin-top: 1rem;\n}\n");
  },
  'spacing': 'outcomes-ui__AlignmentButton--spacing',
  'line': 'outcomes-ui__AlignmentButton--line',
  'button': 'outcomes-ui__AlignmentButton--button'
};
var AlignmentButton = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits(AlignmentButton, _React$Component);

  function AlignmentButton() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, AlignmentButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AlignmentButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.renderHeader = function () {
      var _this$props = _this.props,
          readOnly = _this$props.readOnly,
          alignedOutcomes = _this$props.alignedOutcomes;

      if (!readOnly || alignedOutcomes.length) {
        return React.createElement("div", {
          className: styles.line,
          "data-automation": "outcomeLabel__alignedOutcomes"
        }, React.createElement(Text, {
          size: "medium"
        }, React.createElement("div", {
          className: styles.spacing
        }, React.createElement(IconOutcomesLine, null))), React.createElement(Text, {
          size: "medium"
        }, React.createElement("div", {
          className: styles.spacing
        }, "Alinhar resultados", " \xA0", React.createElement(AlignmentCount, {
          count: alignedOutcomes.length
        }))));
      }
    };

    _this.renderAlignmentList = function () {
      var _this$props2 = _this.props,
          alignedOutcomes = _this$props2.alignedOutcomes,
          readOnly = _this$props2.readOnly;
      return React.createElement(List, {
        isUnstyled: true,
        margin: "small 0",
        delimiter: "solid"
      }, alignedOutcomes.map(function (outcome, index) {
        return React.createElement(List.Item, {
          margin: "small 0",
          key: outcome.id
        }, React.createElement(AlignmentItem, {
          removeAlignment: function removeAlignment() {
            return _this.handleRemoveAlignment(outcome, index);
          },
          ref: function ref(o) {
            _this["position".concat(index)] = o;
          } // eslint-disable-line immutable/no-mutation
          ,
          outcome: outcome,
          readOnly: readOnly
        }));
      }));
    };

    _this.renderTray = function () {
      var _this$props3 = _this.props,
          pickerProps = _this$props3.pickerProps,
          scope = _this$props3.scope,
          OutcomeTray = _this$props3.tray,
          liveRegion = _this$props3.liveRegion,
          screenreaderNotification = _this$props3.screenreaderNotification;
      return React.createElement(OutcomeTray, Object.assign({
        screenreaderNotification: screenreaderNotification,
        liveRegion: liveRegion,
        scope: scope,
        shouldModifyArtifact: true
      }, pickerProps));
    };

    _this.renderButton = function () {
      var _this$props4 = _this.props,
          openOutcomePicker = _this$props4.openOutcomePicker,
          readOnly = _this$props4.readOnly;

      if (!readOnly) {
        return React.createElement("div", {
          className: styles.button
        }, React.createElement(Button, {
          ref: function ref(d) {
            _this.align = d;
          } // eslint-disable-line immutable/no-mutation
          ,
          icon: IconPlusLine,
          onClick: openOutcomePicker,
          "data-automation": "alignmentButton__button"
        }, React.createElement(AccessibleContent, {
          alt: "Alinhar resultados"
        }, "Resultado")));
      }
    };

    return _this;
  }

  _createClass(AlignmentButton, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(oldProps) {
      var alignedOutcomes = this.props.alignedOutcomes;

      if (oldProps.alignedOutcomes.length && !alignedOutcomes.length) {
        if (this.align) {
          this.align.focus();
        }
      }
    }
  }, {
    key: "handleRemoveAlignment",
    value: function handleRemoveAlignment(removedOutcome, index) {
      var _this$props5 = this.props,
          removeAlignment = _this$props5.removeAlignment,
          onUpdate = _this$props5.onUpdate,
          alignedOutcomes = _this$props5.alignedOutcomes;
      removeAlignment(removedOutcome.id, onUpdate, true);
      this.props.screenreaderNotification(removedOutcome.label + " Alinhamento removido");
      var priorListItem = this["position".concat(index - 1)];

      if (priorListItem) {
        priorListItem.focus();
      } else if (alignedOutcomes.length > 0) {
        var nextListItem = this["position".concat(index + 1)];

        if (nextListItem) {
          nextListItem.focus();
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(React.Fragment, null, this.renderHeader(), this.renderAlignmentList(), this.renderButton(), this.renderTray());
    }
  }]);

  AlignmentButton.displayName = "AlignmentButton";
  return AlignmentButton;
}(React.Component), _class2.propTypes = {
  alignedOutcomes: PropTypes.arrayOf(outcomeShape).isRequired,
  pickerProps: PropTypes.object,
  scope: PropTypes.string.isRequired,
  tray: PropTypes.elementType.isRequired,
  openOutcomePicker: PropTypes.func.isRequired,
  removeAlignment: PropTypes.func.isRequired,
  onUpdate: PropTypes.func,
  screenreaderNotification: PropTypes.func,
  liveRegion: OutcomePickerModal.propTypes.liveRegion,
  readOnly: PropTypes.bool.isRequired
}, _class2.defaultProps = {
  alignedOutcomes: [],
  pickerProps: {},
  onUpdate: null,
  screenreaderNotification: null,
  liveRegion: null,
  readOnly: false
}, _temp)) || _class);
export { AlignmentButton as default };
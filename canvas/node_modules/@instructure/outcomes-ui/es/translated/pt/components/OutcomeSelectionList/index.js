import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import { Checkbox } from '@instructure/ui-checkbox';
import { Text } from '@instructure/ui-text';
import { themeable } from '@instructure/ui-themeable';
import OutcomeCheckbox from '../OutcomeCheckbox';
import { outcomeShape } from '../../store/shapes';
import theme from '../theme';
var styles = {
  componentId: 'fOGbT',
  template: function template(theme) {
    return "\n\n.outcomes-ui__OutcomeSelectionList--picker {\n  padding-left: 1rem;\n}\n\n.outcomes-ui__OutcomeSelectionList--checkbox {\n  padding: ".concat(theme.outcomePickerItemPadding || 'inherit', ";\n}\n\n.outcomes-ui__OutcomeSelectionList--checkboxLabel {\n  padding-left: 0.5rem;\n}\n");
  },
  'picker': 'outcomes-ui__OutcomeSelectionList--picker',
  'checkbox': 'outcomes-ui__OutcomeSelectionList--checkbox',
  'checkboxLabel': 'outcomes-ui__OutcomeSelectionList--checkboxLabel'
};
var OutcomeSelectionList = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits(OutcomeSelectionList, _React$Component);

  function OutcomeSelectionList() {
    _classCallCheck(this, OutcomeSelectionList);

    return _possibleConstructorReturn(this, _getPrototypeOf(OutcomeSelectionList).apply(this, arguments));
  }

  _createClass(OutcomeSelectionList, [{
    key: "allSelected",
    // eslint-disable-next-line no-undef
    value: function allSelected() {
      var _this$props = this.props,
          outcomes = _this$props.outcomes,
          isOutcomeSelected = _this$props.isOutcomeSelected;
      return outcomes.every(function (o) {
        return isOutcomeSelected(o.id);
      });
    }
  }, {
    key: "toggleAllSelected",
    value: function toggleAllSelected() {
      var _this$props2 = this.props,
          deselectOutcomeIds = _this$props2.deselectOutcomeIds,
          selectOutcomeIds = _this$props2.selectOutcomeIds,
          outcomes = _this$props2.outcomes;
      var ids = outcomes.map(function (o) {
        return o.id;
      });

      if (this.allSelected()) {
        deselectOutcomeIds(ids);
      } else {
        selectOutcomeIds(ids);
      }
    }
  }, {
    key: "selectAllText",
    value: function selectAllText() {
      if (this.allSelected()) {
        return "Desmarcar todos";
      } else {
        return "Selecionar tudo";
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props3 = this.props,
          outcomes = _this$props3.outcomes,
          setFocusedOutcome = _this$props3.setFocusedOutcome;

      if (outcomes.length === 0) {
        return React.createElement("div", null);
      }

      return React.createElement("div", {
        className: styles.picker,
        "data-automation": "outcomeSelectionList__picker"
      }, React.createElement("div", {
        className: styles.checkbox
      }, React.createElement(Checkbox, {
        value: "selectAll",
        checked: this.allSelected(),
        onChange: function onChange() {
          return _this.toggleAllSelected();
        },
        label: React.createElement("div", {
          className: styles.checkboxLabel
        }, React.createElement(Text, {
          size: "small"
        }, this.selectAllText()))
      })), outcomes.map(function (o) {
        return React.createElement("div", {
          key: o.id
        }, React.createElement(OutcomeCheckbox, Object.assign({
          outcome: o,
          setFocusedOutcome: setFocusedOutcome
        }, _this.props)));
      }));
    }
  }]);

  OutcomeSelectionList.displayName = "OutcomeSelectionList";
  return OutcomeSelectionList;
}(React.Component), _class2.propTypes = {
  setFocusedOutcome: PropTypes.func.isRequired,
  isOutcomeSelected: PropTypes.func.isRequired,
  selectOutcomeIds: PropTypes.func.isRequired,
  deselectOutcomeIds: PropTypes.func.isRequired,
  outcomes: PropTypes.arrayOf(outcomeShape).isRequired
}, _temp)) || _class);
export { OutcomeSelectionList as default };
import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { shallow, mount } from 'enzyme';
import HeaderDetails from '../index';
var styles = {
  componentId: 'ffgIr',
  template: function template(theme) {
    return "\n\n.outcomes-ui__HeaderDetails--numQuestions {\n  box-sizing: border-box;\n  height: 1.5rem;\n  text-align: left;\n}\n\n[dir=\"ltr\"] .outcomes-ui__HeaderDetails--numQuestions {\n  text-align: left;\n}\n\n[dir=\"rtl\"] .outcomes-ui__HeaderDetails--numQuestions {\n  text-align: left;\n}\n\n.outcomes-ui__HeaderDetails--masteryBarDetails {\n  display: flex;\n  justify-content: space-between;\n}\n";
  },
  'numQuestions': 'outcomes-ui__HeaderDetails--numQuestions',
  'masteryBarDetails': 'outcomes-ui__HeaderDetails--masteryBarDetails'
};
import checkA11y from '../../../../test/checkA11y';
describe('OutcomesPerStudent/HeaderDetails', function () {
  function makeProps(props) {
    return Object.assign({
      outcomeResult: {
        outcome: {
          id: '1',
          label: 'FOO'
        },
        count: 10,
        mastery_count: 5,
        childArtifactCount: 12
      },
      viewReportAlignment: sinon.spy(),
      getReportOutcome: sinon.stub().returns({
        id: '1',
        label: 'FOO',
        title: 'bar'
      }),
      isOpen: false,
      closeReportAlignment: sinon.spy(),
      showRollups: true
    }, props);
  }

  it('includes a progress bar', function () {
    var wrapper = shallow(React.createElement(HeaderDetails, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('ProgressBar')).to.have.length(1);
  });
  it('hides the progress bar when rollups are hidden', function () {
    var wrapper = shallow(React.createElement(HeaderDetails, makeProps({
      showRollups: false
    })), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('ProgressBar')).to.have.length(0);
  });
  it('includes the rollup summary', function () {
    var wrapper = shallow(React.createElement(HeaderDetails, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find(".".concat(styles.masteryBarDetails)).find('Text')).to.have.length(2);
  });
  it('hides the rollup summary when rollups are hidden', function () {
    var wrapper = shallow(React.createElement(HeaderDetails, makeProps({
      showRollups: false
    })), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find(".".concat(styles.masteryBarDetails))).to.have.length(0);
  });
  it('does include tooltip', function () {
    var withUsesBank = {
      outcomeResult: {
        outcome: {
          id: '1',
          label: 'FOO'
        },
        count: 10,
        mastery_count: 5,
        childArtifactCount: 12,
        usesBank: true
      }
    };
    var wrapper = shallow(React.createElement(HeaderDetails, makeProps(withUsesBank)), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Tooltip')).to.have.length(1);
  });
  it('does not include tooltip', function () {
    var wrapper = shallow(React.createElement(HeaderDetails, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Tooltip')).to.have.length(0);
  });
  it('includes the count of aligned items', function () {
    var wrapper = mount(React.createElement(HeaderDetails, makeProps()));
    expect(wrapper.text()).to.match(/12 Questions/);
  });
  it('does not include the count of aligned items if not specified', function () {
    var props = makeProps();
    props.outcomeResult.childArtifactCount = null; // eslint-disable-line immutable/no-mutation

    var wrapper = mount(React.createElement(HeaderDetails, props));
    expect(wrapper.text()).not.to.match(/Questions/);
  });
  it('meets a11y standards', function () {
    return checkA11y(React.createElement(HeaderDetails, makeProps()));
  });
});
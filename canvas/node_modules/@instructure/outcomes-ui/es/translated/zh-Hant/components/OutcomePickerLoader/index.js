import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React from 'react';
import PropTypes from 'prop-types';
import { Spinner } from '@instructure/ui-spinner';
import { Flex } from '@instructure/ui-flex';

var OutcomePickerLoader = /*#__PURE__*/function (_React$Component) {
  _inherits(OutcomePickerLoader, _React$Component);

  function OutcomePickerLoader() {
    _classCallCheck(this, OutcomePickerLoader);

    return _possibleConstructorReturn(this, _getPrototypeOf(OutcomePickerLoader).apply(this, arguments));
  }

  _createClass(OutcomePickerLoader, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var loadOutcomePicker = this.props.loadOutcomePicker;
      loadOutcomePicker();
    }
  }, {
    key: "render",
    value: function render() {
      switch (this.props.outcomePickerState) {
        case 'loading':
          return React.createElement(Flex, {
            justifyItems: "center"
          }, React.createElement(Flex.Item, {
            padding: "small"
          }, React.createElement(Spinner, {
            renderTitle: "\u6B63\u5728\u8F09\u5165"
          })));

        case 'choosing':
          {
            var OutcomePicker = this.props.outcomePicker;
            return React.createElement(OutcomePicker, {
              scope: this.props.scope,
              artifactTypeName: this.props.artifactTypeName,
              displayMasteryDescription: this.props.displayMasteryDescription,
              displayMasteryPercentText: this.props.displayMasteryPercentText,
              setFocusedOutcome: this.props.setFocusedOutcome,
              screenreaderNotification: this.props.screenreaderNotification
            });
          }

        case 'saving':
          return React.createElement(Flex, {
            justifyItems: "center"
          }, React.createElement(Flex.Item, {
            padding: "small"
          }, React.createElement(Spinner, {
            renderTitle: "\u6B63\u5728\u4FDD\u5B58"
          })));

        case 'complete':
          return React.createElement("div", null, "\u5B8C\u6210");

        case 'closed':
        default:
          return React.createElement("div", null);
      }
    }
  }]);

  OutcomePickerLoader.displayName = "OutcomePickerLoader";
  return OutcomePickerLoader;
}(React.Component);

OutcomePickerLoader.propTypes = {
  loadOutcomePicker: PropTypes.func.isRequired,
  setFocusedOutcome: PropTypes.func.isRequired,
  outcomePickerState: PropTypes.string.isRequired,
  outcomePicker: PropTypes.func.isRequired,
  scope: PropTypes.string.isRequired,
  artifactTypeName: PropTypes.string,
  displayMasteryDescription: PropTypes.bool,
  displayMasteryPercentText: PropTypes.bool,
  screenreaderNotification: PropTypes.func
};
OutcomePickerLoader.defaultProps = {
  artifactTypeName: null,
  displayMasteryDescription: false,
  displayMasteryPercentText: false,
  screenreaderNotification: null
};
export { OutcomePickerLoader as default };
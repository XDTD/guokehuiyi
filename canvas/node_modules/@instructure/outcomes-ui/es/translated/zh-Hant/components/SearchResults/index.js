import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
var _default_zhHant_number = Intl.NumberFormat("zh-Hant", { style: "decimal" }).format;
import React from 'react';
import PropTypes from 'prop-types';
import { Text } from '@instructure/ui-text';
import { Flex } from '@instructure/ui-flex';
import { View } from '@instructure/ui-view';
import { Spinner } from '@instructure/ui-spinner';
import isEqual from 'lodash/isEqual';
import OutcomeCheckbox from '../OutcomeCheckbox';
import Pagination from '../Pagination';
export var RESULTS_PER_PAGE = 10;

var SearchResults = /*#__PURE__*/function (_React$Component) {
  _inherits(SearchResults, _React$Component);

  function SearchResults() {
    _classCallCheck(this, SearchResults);

    return _possibleConstructorReturn(this, _getPrototypeOf(SearchResults).apply(this, arguments));
  }

  _createClass(SearchResults, [{
    key: "componentDidUpdate",
    // eslint-disable-next-line no-undef
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props,
          isSearchLoading = _this$props.isSearchLoading,
          searchPage = _this$props.searchPage,
          screenreaderNotification = _this$props.screenreaderNotification;

      if (screenreaderNotification) {
        if (!isSearchLoading && prevProps.isSearchLoading) {
          screenreaderNotification("\u5DF2\u66F4\u65B0\u9801\u9762 " + searchPage + " \u7684\u7D50\u679C\uFF0C\u5171 " + this.getPageCount() + " \u9801");
          screenreaderNotification(this.getResultCountText());
        }

        if (!isEqual(searchPage, prevProps.searchPage)) {
          screenreaderNotification("\u6B63\u5728\u8F09\u5165\u9801\u9762 " + searchPage);
        }
      }
    }
  }, {
    key: "renderEntries",
    value: function renderEntries() {
      var _this$props2 = this.props,
          setFocusedOutcome = _this$props2.setFocusedOutcome,
          isOutcomeSelected = _this$props2.isOutcomeSelected,
          selectOutcomeIds = _this$props2.selectOutcomeIds,
          deselectOutcomeIds = _this$props2.deselectOutcomeIds,
          searchEntries = _this$props2.searchEntries;
      return searchEntries.map(function (outcome) {
        return React.createElement("div", {
          key: outcome.id,
          "data-automation": "searchResults__outcomeResult"
        }, React.createElement(OutcomeCheckbox, {
          outcome: outcome,
          setFocusedOutcome: setFocusedOutcome,
          isOutcomeSelected: isOutcomeSelected,
          selectOutcomeIds: selectOutcomeIds,
          deselectOutcomeIds: deselectOutcomeIds
        }));
      });
    }
  }, {
    key: "getPageCount",
    value: function getPageCount() {
      var searchTotal = this.props.searchTotal;
      return Math.ceil(searchTotal / RESULTS_PER_PAGE);
    }
  }, {
    key: "renderPagination",
    value: function renderPagination() {
      var _this$props3 = this.props,
          searchPage = _this$props3.searchPage,
          updateSearchPage = _this$props3.updateSearchPage;
      return React.createElement(Pagination, {
        page: searchPage,
        updatePage: updateSearchPage,
        numPages: this.getPageCount()
      });
    }
  }, {
    key: "getResultCountText",
    value: function getResultCountText() {
      var _s, _n;

      var searchTotal = this.props.searchTotal;
      return _s = searchTotal, _n = +_s, _n === 0 ? "\u641C\u7D22\u7121\u8FD4\u56DE\u7D50\u679C" : (_default_zhHant_number(searchTotal) + " \u7D50\u679C");
    }
  }, {
    key: "renderResults",
    value: function renderResults() {
      var searchEntries = this.props.searchEntries;
      return React.createElement(View, null, searchEntries.length > 0 && React.createElement(View, {
        "data-automation": "searchResults__resultsList",
        display: "block",
        padding: "small none none none"
      }, this.renderEntries()));
    }
  }, {
    key: "renderHeader",
    value: function renderHeader() {
      var searchTotal = this.props.searchTotal;
      return searchTotal !== null && React.createElement(View, null, React.createElement(Text, {
        size: "small",
        "data-automation": "searchResults__resultsCount"
      }, this.getResultCountText()));
    }
  }, {
    key: "renderLoading",
    value: function renderLoading() {
      return React.createElement(Flex, {
        justifyItems: "center"
      }, React.createElement(Flex.Item, {
        padding: "small"
      }, React.createElement(Spinner, {
        renderTitle: "\u6B63\u5728\u52A0\u8F09\u641C\u7D22\u7D50\u679C"
      })));
    }
  }, {
    key: "render",
    value: function render() {
      var isSearchLoading = this.props.isSearchLoading;
      return React.createElement(Flex, {
        height: "100%",
        width: "100%",
        padding: "small none none none",
        alignItems: "stretch",
        direction: "column"
      }, React.createElement(Flex.Item, {
        shouldGrow: true
      }, this.renderHeader(), isSearchLoading ? this.renderLoading() : this.renderResults()), React.createElement(Flex.Item, null, !isSearchLoading && this.renderPagination()));
    }
  }]);

  SearchResults.displayName = "SearchResults";
  return SearchResults;
}(React.Component);

SearchResults.propTypes = {
  isSearchLoading: PropTypes.bool.isRequired,
  searchEntries: PropTypes.array.isRequired,
  searchPage: PropTypes.number.isRequired,
  searchTotal: PropTypes.number,
  updateSearchPage: PropTypes.func.isRequired,
  setFocusedOutcome: PropTypes.func.isRequired,
  isOutcomeSelected: PropTypes.func.isRequired,
  selectOutcomeIds: PropTypes.func.isRequired,
  deselectOutcomeIds: PropTypes.func.isRequired,
  screenreaderNotification: PropTypes.func
};
SearchResults.defaultProps = {
  screenreaderNotification: null,
  searchTotal: null
};
export default SearchResults;
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";

/* eslint-disable promise/always-return */
import { expect } from 'chai';
import { fromJS } from 'immutable';
import sinon from 'sinon';
import createMockStore, { scopeActions } from '../../../test/createMockStore';
import * as actions from '../actions';
import { setError } from '../../../store/context/actions';
import { setOutcomePickerState } from '../../../store/OutcomePicker/actions';
var scopedActions = scopeActions(_objectSpread({}, actions, {
  setError: setError,
  setOutcomePickerState: setOutcomePickerState
}));
describe('OutcomeTray/actions', function () {
  var state = fromJS({
    scopeForTest: {
      OutcomePicker: {
        tray: {
          pagination: {
            page: 1,
            total: null
          },
          list: [],
          selected: ['2', '3', '4']
        }
      }
    }
  });
  var outcomes = [{
    id: '1',
    name: 'red'
  }, {
    id: '2',
    name: 'blue'
  }];
  var response = {
    outcomes: outcomes,
    total: 2
  };
  var service = {
    listOutcomes: sinon.stub().returns(Promise.resolve(response))
  };
  afterEach(function () {
    return service.listOutcomes.resetHistory();
  });
  describe('getOutcomesList', function () {
    it('dispatches state change to loading', function () {
      var store = createMockStore(state, service);
      return store.dispatch(actions.getOutcomesList()).then(function () {
        expect(store.getActions()[0]).to.deep.equal(scopedActions.setOutcomePickerState('loading'));
      });
    });
    it('dispatches listOutcomes', function () {
      var store = createMockStore(state, service);
      return store.dispatch(actions.getOutcomesList()).then(function () {
        return expect(service.listOutcomes.calledOnce).to.be.true;
      });
    });
    it('dispatches in correct order', function () {
      var store = createMockStore(state, service);
      return store.dispatch(actions.getOutcomesList()).then(function () {
        expect(store.getActions()[2]).to.deep.equal(scopedActions.setOutcomeList(outcomes));
        expect(store.getActions()[3]).to.deep.equal(scopedActions.setOutcomes(_defineProperty({}, void 0, {
          '1': outcomes[0],
          '2': outcomes[1]
        })));
        expect(store.getActions()[4]).to.deep.equal(scopedActions.setListTotal(response.total));
        expect(store.getActions()[5]).to.deep.equal(scopedActions.setOutcomePickerState('choosing'));
      });
    });
    it('dispatches setPage if a page is provided', function () {
      var store = createMockStore(state, service);
      return store.dispatch(actions.getOutcomesList({
        page: 2
      })).then(function () {
        return expect(store.getActions()[0]).to.deep.equal(scopedActions.setListPage(2));
      });
    });
    it('dispatches setError on listOutcomes failure', function () {
      var error = {
        message: 'foo bar baz'
      };
      var service = {
        listOutcomes: sinon.stub().returns(Promise.reject(error))
      };
      var store = createMockStore(state, service);
      return store.dispatch(actions.getOutcomesList()).then(function () {
        expect(store.getActions()).to.have.length(3);
        expect(store.getActions()[2]).to.deep.equal(scopedActions.setError(error));
      });
    });
  });
  describe('setInitialSelectedOutcomes', function () {
    var alignedOutcomes = [{
      id: '1'
    }, {
      id: '999'
    }];
    var alignmentState = state.setIn(['scopeForTest', 'alignments', 'alignedOutcomes'], fromJS(alignedOutcomes));
    it('dispatches setSelectedOutcomeIds', function () {
      var store = createMockStore(alignmentState, service);
      return store.dispatch(actions.setInitialSelectedOutcomes()).then(function () {
        expect(store.getActions()).to.have.length(1);
        expect(store.getActions()[0]).to.deep.equal(scopedActions.setSelectedOutcomeIds(['1', '999']));
        expect(store.getActions()[0].payload).to.deep.equal(['1', '999']);
      });
    });
  });
});
import { Map } from 'immutable';

function restrict(state, scope) {
  return state.getIn([scope, 'report']) || Map();
}

export function getPageCount(state, scope) {
  if (state) {
    var pageData = restrict(state, scope).get('pageData');

    if (pageData) {
      var _pageData$toJS = pageData.toJS(),
          total = _pageData$toJS.total,
          perPage = _pageData$toJS.perPage;

      return Math.ceil(total / perPage);
    }
  }

  return null;
}
export function getLoading(state, scope) {
  return state && restrict(state, scope).get('loading');
}
export function getPageNumber(state, scope) {
  return state && restrict(state, scope).getIn(['page', 'number']);
}
export function getPageLoading(state, scope) {
  return state && restrict(state, scope).getIn(['page', 'loading'], false);
}
export function getUsers(state, scope) {
  var users = state && restrict(state, scope).get('users');
  return users ? users.toJS() : [];
}
export function getRollups(state, scope) {
  var rollups = state && restrict(state, scope).get('rollups');
  return rollups ? rollups.toJS() : [];
}
export function getScore(state, scope, outcomeId, userId) {
  var score = state && restrict(state, scope).getIn(['results', outcomeId, userId]);
  return score ? score.toJS() : null;
}
export function isOpen(state, scope, outcomeId) {
  return restrict(state, scope).get('openReportAlignmentId') === outcomeId;
}
export function getReportOutcome(state, scope, outcomeId) {
  var outcome = restrict(state, scope).getIn(['outcomes', outcomeId]);
  return outcome ? outcome.toJS() : null;
}
export function hasAnyOutcomes(state, scope) {
  return state && restrict(state, scope).getIn(['outcomes']).size > 0;
}
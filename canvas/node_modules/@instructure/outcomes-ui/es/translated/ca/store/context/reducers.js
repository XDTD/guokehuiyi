import { handleActions } from 'redux-actions';
import { combineReducers } from 'redux-immutable';
import { Map, fromJS } from 'immutable';
var outcomes = handleActions({
  SET_OUTCOMES: function SET_OUTCOMES(state, action) {
    return state.mergeDeep(fromJS(action.payload));
  },
  SET_SCORING_METHOD: function SET_SCORING_METHOD(state, action) {
    return state.setIn([action.payload.context_uuid, action.payload.id, 'scoring_method'], fromJS(action.payload.scoring_method));
  }
}, Map());
var contexts = handleActions({
  SET_CONTEXT: function SET_CONTEXT(state, action) {
    return state.merge(fromJS(action.payload));
  }
}, Map());
var rootOutcomeIds = handleActions({
  SET_ROOT_OUTCOME_IDS: function SET_ROOT_OUTCOME_IDS(state, action) {
    return state.merge(fromJS(action.payload));
  }
}, Map());
export default combineReducers({
  outcomes: outcomes,
  rootOutcomeIds: rootOutcomeIds,
  contexts: contexts
});
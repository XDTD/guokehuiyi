import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { expect } from 'chai';
import React from 'react';
import { mount, shallow } from 'enzyme';
import OutcomeView from '../index';
import MasteryCounts from '../MasteryCounts';
import MasteryDescription from '../MasteryDescription';
import ScoringTiers from '../ScoringTiers';
import checkA11y from '../../../test/checkA11y';

var sharedSpecs = function sharedSpecs(makeProps) {
  it('includes the title and description', function () {
    var wrapper = mount(React.createElement(OutcomeView, makeProps()));
    var text = wrapper.text();
    expect(text).to.match(/The rain in spain stays mainly\.\.\./);
    expect(text).to.match(/My description/);
  });
  it('sanitizes the description', function () {
    var props = makeProps({
      description: 'The <blink>rain in Spain'
    });
    var wrapper = mount(React.createElement(OutcomeView, props));
    expect(wrapper.html()).to.include('</blink>');
  });
  it('includes counts if outcome result is defined', function () {
    var props = makeProps({
      outcomeResult: {
        count: 100,
        masteryCount: 50
      }
    });
    var wrapper = shallow(React.createElement(OutcomeView, props), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find(MasteryCounts)).to.have.length(1);
  });
  it('does not display scoring tiers if tiers not defined', function () {
    var props = makeProps({
      scoringTiers: null
    });
    var wrapper = shallow(React.createElement(OutcomeView, props), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find(ScoringTiers)).to.have.length(0);
  });
  it('meets a11y standards', function () {
    return checkA11y(React.createElement(OutcomeView, makeProps()));
  });
};

describe('OutcomeView', function () {
  var scoringMethod = {
    id: 1,
    description: 'Some Method',
    points_possible: 5,
    mastery_percent: 0.6,
    algorithm: 'highest',
    algorithm_data: {}
  };
  var defaultProps = {
    description: 'My description',
    label: 'Foo',
    title: 'The rain in spain stays mainly...',
    scoringMethod: scoringMethod,
    scoringTiers: [{
      id: 1,
      description: 'Cri 1',
      percent: 1.0
    }, {
      id: 2,
      description: 'Cri 2',
      percent: 0.6
    }, {
      id: 3,
      description: 'Cri 3',
      percent: 0.22222222
    }]
  };

  var makeProps = function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return _objectSpread({}, defaultProps, {}, props);
  };

  sharedSpecs(makeProps);
  describe('context without proficiency data', function () {
    sharedSpecs(function () {
      var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      return makeProps(_objectSpread({
        context: {
          id: 1
        }
      }, props));
    });
  });
  it('does not include counts if outcome result not defined', function () {
    var wrapper = shallow(React.createElement(OutcomeView, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find(MasteryCounts)).to.have.length(0);
  });
  it('renders mastery description if displayMasteryDescription is true and no artifactTypeName provided', function () {
    var props = makeProps({
      displayMasteryDescription: true
    });
    var wrapper = shallow(React.createElement(OutcomeView, props), {
      disableLifecycleMethods: true
    });
    var scoreMastery = wrapper.find(MasteryDescription);
    expect(scoreMastery.length).to.equal(1);
  });
  it('does not render mastery description if displayMasteryDescription is false', function () {
    var props = makeProps({
      displayMasteryDescription: false
    });
    var wrapper = shallow(React.createElement(OutcomeView, props), {
      disableLifecycleMethods: true
    });
    var scoreMastery = wrapper.find(MasteryDescription);
    expect(scoreMastery.length).to.equal(0);
  });
  it('displays scoring tiers if scoring method and tiers defined', function () {
    var wrapper = shallow(React.createElement(OutcomeView, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find(ScoringTiers)).to.have.length(1);
  });
  describe('with context configured with proficiency', function () {
    var context = {
      id: 1,
      outcome_proficiency: {
        outcome_proficiency_ratings: [{
          color: 'FF00FF',
          mastery: false,
          points: 5.0,
          description: 'Exceeds Expectations'
        }, {
          color: 'FF00FF',
          mastery: true,
          points: 3.0,
          description: 'Meets Expectations.'
        }, {
          color: 'FF00FF',
          mastery: false,
          points: 0.0,
          description: 'Does Not Meet Expectations'
        }]
      },
      outcome_calculation_method: {
        calculation_method: 'highest',
        calculation_int: null
      }
    };

    var runWithContextSpecs = function runWithContextSpecs(makeProps) {
      sharedSpecs(makeProps);
      it('does not render mastery description if displayMasteryDescription is true and no artifactTypeName provided', function () {
        var props = makeProps({
          displayMasteryDescription: true
        });
        var wrapper = shallow(React.createElement(OutcomeView, props), {
          disableLifecycleMethods: true
        });
        var scoreMastery = wrapper.find(MasteryDescription);
        expect(scoreMastery.length).to.equal(0);
      });
      it('does not display scoring tiers', function () {
        var wrapper = shallow(React.createElement(OutcomeView, makeProps()), {
          disableLifecycleMethods: true
        });
        expect(wrapper.find(ScoringTiers)).to.have.length(0);
      });
      it('displays scoring tiers if outcomeResult is defined', function () {
        var props = makeProps({
          outcomeResult: {
            count: 100,
            masteryCount: 50
          }
        });
        var wrapper = shallow(React.createElement(OutcomeView, props), {
          disableLifecycleMethods: true
        });
        expect(wrapper.find(ScoringTiers)).to.have.length(1);
      });
      it('passes prop.scoringTiers to <ScoringTiers /> if defined', function () {
        var props = makeProps({
          outcomeResult: {
            count: 100,
            masteryCount: 50
          },
          scoringTiers: defaultProps.scoringTiers
        });
        var wrapper = shallow(React.createElement(OutcomeView, props), {
          disableLifecycleMethods: true
        });
        expect(wrapper.find(ScoringTiers).prop('scoringTiers')).to.deep.equal(defaultProps.scoringTiers);
      });
      it('renders mastery description if displayMasteryDescription is true, no artifactTypeName provided and outcomeResult defined', function () {
        var props = makeProps({
          displayMasteryDescription: true,
          outcomeResult: {
            count: 100,
            masteryCount: 50
          }
        });
        var wrapper = shallow(React.createElement(OutcomeView, props), {
          disableLifecycleMethods: true
        });
        var scoreMastery = wrapper.find(MasteryDescription);
        expect(scoreMastery.length).to.equal(1);
      });
    };

    describe('without scoringTiers and scoringMethod from props', function () {
      runWithContextSpecs(function () {
        var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        return makeProps(_objectSpread({
          context: context,
          scoringTiers: null,
          scoringMethod: null
        }, props));
      });
    });
    describe('with scoringTiers and scoringMethod from props', function () {
      runWithContextSpecs(function () {
        var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        return makeProps(_objectSpread({
          context: context
        }, props));
      });
    });
  });
});
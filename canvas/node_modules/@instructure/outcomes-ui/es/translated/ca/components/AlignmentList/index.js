import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import { Billboard } from '@instructure/ui-billboard';
import { Button } from '@instructure/ui-buttons';
import { IconPlusLine } from '@instructure/ui-icons';
import { themeable } from '@instructure/ui-themeable';
import Alignment from '../Alignment';
import theme from '../theme';
var styles = {
  componentId: 'sJofx',
  template: function template(theme) {
    return "\n\n.outcomes-ui__AlignmentList--header {\n  background-color: #BBBBBB;\n  border: solid 1px #999999;\n  border-radius: 5px;\n  padding: 10px 20px;\n}\n\n.outcomes-ui__AlignmentList--list {\n  list-style: none;\n  padding-left: 0;\n  border: solid 1px #BBBBBB;\n  border-radius: 5px;\n}\n\n.outcomes-ui__AlignmentList--list > li {\n  padding: 10px 20px;\n}\n\n.outcomes-ui__AlignmentList--list > li + li {\n  border-top: dashed 1px #BBBBBB;\n}\n\n.outcomes-ui__AlignmentList--addOutcome {\n  text-align: center;\n}\n\n[dir=\"ltr\"] .outcomes-ui__AlignmentList--addOutcome {\n  text-align: center;\n}\n\n[dir=\"rtl\"] .outcomes-ui__AlignmentList--addOutcome {\n  text-align: center;\n}\n\n.outcomes-ui__AlignmentList--addOutcome button {\n  padding: 0;\n}\n";
  },
  'header': 'outcomes-ui__AlignmentList--header',
  'list': 'outcomes-ui__AlignmentList--list',
  'addOutcome': 'outcomes-ui__AlignmentList--addOutcome'
};

var Clipboard = function Clipboard(props) {
  return React.createElement("svg", Object.assign({
    width: "70",
    height: "96",
    viewBox: "0 0 70 96",
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink"
  }, props), React.createElement("title", null, "ClipBoard"), React.createElement("defs", null, React.createElement("path", {
    id: "a",
    d: "M0 96h70V0H0z"
  })), React.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, React.createElement("path", {
    d: "M65 95H5a4 4 0 0 1-4-4V22a4 4 0 0 1 4-4h60a4 4 0 0 1 4 4v69a4 4 0 0 1-4 4z",
    fill: "#F7F8F7"
  }), React.createElement("path", {
    d: "M65 95H5a4 4 0 0 1-4-4V22a4 4 0 0 1 4-4h60a4 4 0 0 1 4 4v69a4 4 0 0 1-4 4z",
    stroke: "#3F5463",
    strokeWidth: "2"
  }), React.createElement("mask", {
    id: "b",
    fill: "#fff"
  }, React.createElement("use", {
    xlinkHref: "#a"
  })), React.createElement("path", {
    fill: "#FFF",
    mask: "url(#b)",
    d: "M9 46h13V33H9z"
  }), React.createElement("path", {
    stroke: "#3F5463",
    strokeWidth: "2",
    mask: "url(#b)",
    d: "M9 46h13V33H9z"
  }), React.createElement("path", {
    fill: "#3F5463",
    mask: "url(#b)",
    d: "M28 36h23v-3H28zM28 46h14v-3H28zM28 41h31v-3H28z"
  }), React.createElement("path", {
    stroke: "#00B517",
    strokeWidth: "2",
    mask: "url(#b)",
    d: "M12 39l3 2.655 4.398-5.265"
  }), React.createElement("path", {
    fill: "#FFF",
    mask: "url(#b)",
    d: "M9 67h13V54H9z"
  }), React.createElement("path", {
    stroke: "#3F5463",
    strokeWidth: "2",
    mask: "url(#b)",
    d: "M9 67h13V54H9z"
  }), React.createElement("path", {
    fill: "#3F5463",
    mask: "url(#b)",
    d: "M28 57h23v-3H28zM28 77h23v-3H28zM28 67h14v-3H28zM28 62h31v-3H28z"
  }), React.createElement("path", {
    stroke: "#00B517",
    strokeWidth: "2",
    mask: "url(#b)",
    d: "M12 60l3 2.655 4.398-5.265"
  }), React.createElement("path", {
    fill: "#FFF",
    mask: "url(#b)",
    d: "M9 87h13V74H9z"
  }), React.createElement("path", {
    stroke: "#3F5463",
    strokeWidth: "2",
    mask: "url(#b)",
    d: "M9 87h13V74H9z"
  }), React.createElement("path", {
    fill: "#3F5463",
    mask: "url(#b)",
    d: "M28 87h14v-3H28zM28 82h31v-3H28z"
  }), React.createElement("path", {
    stroke: "#00B517",
    strokeWidth: "2",
    mask: "url(#b)",
    d: "M12 80l3 2.655 4.398-5.265"
  }), React.createElement("path", {
    d: "M55.874 25H14.126a2 2 0 0 1-1.816-2.838L17 12h36l4.69 10.162A2 2 0 0 1 55.874 25",
    fill: "#C0C6CB",
    mask: "url(#b)"
  }), React.createElement("path", {
    d: "M55.874 25H14.126a2 2 0 0 1-1.816-2.838L17 12h36l4.69 10.162A2 2 0 0 1 55.874 25z",
    stroke: "#3F5463",
    strokeWidth: "2",
    mask: "url(#b)"
  }), React.createElement("path", {
    d: "M35 1C24 1 24 12 24 12h22S44.667 1 35 1",
    fill: "#E5E8EA",
    mask: "url(#b)"
  }), React.createElement("path", {
    d: "M35 1C24 1 24 12 24 12h22S44.667 1 35 1z",
    stroke: "#3F5463",
    strokeWidth: "2",
    mask: "url(#b)"
  }), React.createElement("path", {
    d: "M36.667 6.551a2 2 0 1 1-4 .002 2 2 0 0 1 4-.002",
    fill: "#3F5463",
    mask: "url(#b)"
  })));
};

import OutcomePickerModal from '../OutcomePickerModal';
var AlignmentList = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits(AlignmentList, _React$Component);

  function AlignmentList() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, AlignmentList);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AlignmentList)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.handleModalOpen = function () {
      _this.props.openOutcomePicker();
    };

    _this.triggerButton = function () {
      // eslint-disable-next-line react/no-find-dom-node
      var r = ReactDOM.findDOMNode(_this.triggerRoot);
      return r.type === 'button' ? r : r.children[0];
    };

    return _this;
  }

  _createClass(AlignmentList, [{
    key: "handleRemoveAlignment",
    value: function handleRemoveAlignment(outcome, index) {
      var _this$props = this.props,
          removeAlignment = _this$props.removeAlignment,
          alignedOutcomes = _this$props.alignedOutcomes,
          onUpdate = _this$props.onUpdate;
      var priorListItem = this["position".concat(index - 1)];
      removeAlignment(outcome.id, onUpdate);
      this.props.screenreaderNotification("S'ha eliminat l 'alineaci\xF3 de " + outcome.label);

      if (priorListItem) {
        priorListItem.focus();
      } else if (alignedOutcomes.length > 0) {
        // TBD - need to do something better here if first item is
        // removed, just doing this for now so there's consistent behavior
        var nextListItem = this["position".concat(index + 1)];

        if (nextListItem) {
          nextListItem.focus();
        }
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(oldProps) {
      var alignedOutcomes = this.props.alignedOutcomes;

      if (oldProps.alignedOutcomes.length && !alignedOutcomes.length) {
        this.triggerButton().focus();
      }
    }
  }, {
    key: "renderAddOutcomeButton",
    value: function renderAddOutcomeButton() {
      var _this2 = this;

      return React.createElement("li", {
        className: styles.addOutcome
      }, React.createElement(Button, {
        ref: function ref(d) {
          _this2.triggerRoot = d;
        } // eslint-disable-line immutable/no-mutation
        ,
        variant: "circle-primary",
        size: "small",
        onClick: function onClick() {
          return _this2.handleModalOpen();
        }
      }, React.createElement(IconPlusLine, {
        title: "Alinea els resultats nous"
      })));
    }
  }, {
    key: "renderList",
    value: function renderList() {
      var _this3 = this;

      var _this$props2 = this.props,
          alignedOutcomes = _this$props2.alignedOutcomes,
          _viewAlignment = _this$props2.viewAlignment,
          closeAlignment = _this$props2.closeAlignment,
          isOpen = _this$props2.isOpen,
          artifactTypeName = _this$props2.artifactTypeName,
          displayMasteryDescription = _this$props2.displayMasteryDescription,
          displayMasteryPercentText = _this$props2.displayMasteryPercentText,
          readOnly = _this$props2.readOnly,
          scope = _this$props2.scope;
      return React.createElement("div", null, React.createElement("ul", {
        className: styles.list
      }, alignedOutcomes.map(function (outcome, index) {
        return React.createElement(Alignment, {
          key: outcome.id,
          ref: function ref(o) {
            _this3["position".concat(index)] = o;
          } // eslint-disable-line immutable/no-mutation
          ,
          removeAlignment: function removeAlignment() {
            return _this3.handleRemoveAlignment(outcome, index);
          },
          viewAlignment: function viewAlignment() {
            return _viewAlignment(outcome.id);
          },
          closeAlignment: closeAlignment,
          outcome: outcome,
          isOpen: isOpen(outcome.id),
          artifactTypeName: artifactTypeName,
          displayMasteryDescription: displayMasteryDescription,
          displayMasteryPercentText: displayMasteryPercentText,
          readOnly: readOnly,
          scope: scope
        });
      }), !readOnly && this.renderAddOutcomeButton()));
    }
  }, {
    key: "renderEmpty",
    value: function renderEmpty() {
      var _this4 = this;

      return !this.props.readOnly && React.createElement(Billboard, {
        ref: function ref(d) {
          _this4.triggerRoot = d;
        } // eslint-disable-line immutable/no-mutation
        ,
        heading: this.props.emptySetHeading,
        message: "Feu clic aqu\xED per explorar i afegir els resultats.",
        headingAs: "h3",
        headingLevel: "h3",
        size: "small",
        hero: React.createElement(Clipboard, null),
        type: "button",
        onClick: this.handleModalOpen
      });
    }
  }, {
    key: "renderBody",
    value: function renderBody() {
      var alignedOutcomes = this.props.alignedOutcomes;

      if (alignedOutcomes && alignedOutcomes.length > 0) {
        return this.renderList();
      } else {
        return this.renderEmpty();
      }
    }
  }, {
    key: "renderModal",
    value: function renderModal() {
      var _this$props3 = this.props,
          OutcomePickerModal = _this$props3.addModal,
          pickerProps = _this$props3.pickerProps,
          onUpdate = _this$props3.onUpdate,
          onModalOpen = _this$props3.onModalOpen,
          onModalClose = _this$props3.onModalClose,
          scope = _this$props3.scope,
          artifactTypeName = _this$props3.artifactTypeName,
          displayMasteryDescription = _this$props3.displayMasteryDescription,
          displayMasteryPercentText = _this$props3.displayMasteryPercentText,
          screenreaderNotification = _this$props3.screenreaderNotification,
          liveRegion = _this$props3.liveRegion,
          mountNode = _this$props3.mountNode;
      return React.createElement(OutcomePickerModal, Object.assign({
        onModalClose: onModalClose,
        onModalOpen: onModalOpen,
        onUpdate: onUpdate,
        trigger: this,
        scope: scope,
        artifactTypeName: artifactTypeName,
        displayMasteryDescription: displayMasteryDescription,
        displayMasteryPercentText: displayMasteryPercentText,
        screenreaderNotification: screenreaderNotification,
        liveRegion: liveRegion,
        mountNode: mountNode
      }, pickerProps));
    }
  }, {
    key: "focus",
    value: function focus() {
      if (this.triggerRoot) {
        this.triggerButton().focus();
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement("div", null, this.renderBody(), this.renderModal());
    }
  }]);

  AlignmentList.displayName = "AlignmentList";
  return AlignmentList;
}(React.Component), _class2.propTypes = {
  addModal: PropTypes.func.isRequired,
  pickerType: PropTypes.string,
  pickerProps: PropTypes.object,
  alignedOutcomes: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string.isRequired,
    label: PropTypes.string.isRequired,
    title: PropTypes.string.isRequired
  })).isRequired,
  emptySetHeading: PropTypes.string.isRequired,
  readOnly: PropTypes.bool,
  removeAlignment: PropTypes.func.isRequired,
  onUpdate: PropTypes.func,
  viewAlignment: PropTypes.func.isRequired,
  closeAlignment: PropTypes.func.isRequired,
  isOpen: PropTypes.func.isRequired,
  openOutcomePicker: PropTypes.func.isRequired,
  onModalOpen: PropTypes.func,
  onModalClose: PropTypes.func,
  scope: PropTypes.string.isRequired,
  artifactTypeName: PropTypes.string,
  displayMasteryDescription: PropTypes.bool,
  displayMasteryPercentText: PropTypes.bool,
  screenreaderNotification: PropTypes.func,
  liveRegion: OutcomePickerModal.propTypes.liveRegion,
  mountNode: OutcomePickerModal.propTypes.mountNode
}, _class2.defaultProps = {
  pickerType: 'dialog',
  pickerProps: {},
  onUpdate: null,
  onModalOpen: null,
  onModalClose: null,
  readOnly: false,
  artifactTypeName: null,
  displayMasteryDescription: false,
  displayMasteryPercentText: false,
  screenreaderNotification: null,
  liveRegion: null,
  mountNode: null
}, _temp)) || _class);
export default AlignmentList;
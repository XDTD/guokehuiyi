import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { shallow } from 'enzyme';
import checkA11y from '../../../../test/checkA11y';
import OutcomeList from '../index';
describe('OutcomeList', function () {
  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      outcomes: [{
        id: '1',
        label: 'foo',
        title: 'bar'
      }],
      setFocusedOutcome: sinon.spy(),
      isOutcomeSelected: sinon.spy(),
      selectOutcomeIds: sinon.spy(),
      deselectOutcomeIds: sinon.spy(),
      isLoading: false
    }, props);
  }

  it('renders an OutcomeCheckbox', function () {
    var wrapper = shallow(React.createElement(OutcomeList, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('OutcomeCheckbox')).to.have.length(1);
  });
  it('renders loading spinner when state is loading', function () {
    var props = makeProps({
      isLoading: true
    });
    var wrapper = shallow(React.createElement(OutcomeList, props), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Spinner')).to.have.length(1);
  });
  it('renders pagination', function () {
    var wrapper = shallow(React.createElement(OutcomeList, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Pagination')).to.have.length(1);
  });
  it('meets a11y standards', function () {
    return checkA11y(React.createElement(OutcomeList, makeProps()));
  });
});
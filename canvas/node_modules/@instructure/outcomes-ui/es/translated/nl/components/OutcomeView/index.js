import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import { Text } from '@instructure/ui-text';
import { themeable } from '@instructure/ui-themeable';
import { outcomeResultShape, scoringMethodShape, scoringTierShape, contextShape } from '../../store/shapes';
import ScoringTiers from './ScoringTiers';
import MasteryCounts from './MasteryCounts';
import MasteryDescription from './MasteryDescription';
import { sanitizeHtml } from '../../lib/sanitize';
import theme from '../theme';
var styles = {
  componentId: 'eBKdC',
  template: function template(theme) {
    return "\n\n.outcomes-ui__OutcomeView--title {\n  margin: 2rem 0;\n  word-wrap: break-word; \n  overflow-wrap: break-word;\n}\n\n.outcomes-ui__OutcomeView--description {\n  margin: 2rem 0;\n}\n";
  },
  'title': 'outcomes-ui__OutcomeView--title',
  'description': 'outcomes-ui__OutcomeView--description'
};
import { contextConfiguredWithProficiencies, getScoringMethodFromContext, getScoringTiersFromContext } from '../../util/proficienciesUtils';
var OutcomeView = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits(OutcomeView, _React$Component);

  function OutcomeView() {
    _classCallCheck(this, OutcomeView);

    return _possibleConstructorReturn(this, _getPrototypeOf(OutcomeView).apply(this, arguments));
  }

  _createClass(OutcomeView, [{
    key: "getScoringMethod",
    // eslint-disable-next-line no-undef
    // eslint-disable-next-line no-undef
    value: function getScoringMethod() {
      var _this$props = this.props,
          scoringMethod = _this$props.scoringMethod,
          context = _this$props.context;
      return contextConfiguredWithProficiencies(context) ? getScoringMethodFromContext(context) : scoringMethod;
    }
  }, {
    key: "getScoringTiers",
    value: function getScoringTiers() {
      var _this$props2 = this.props,
          scoringTiers = _this$props2.scoringTiers,
          context = _this$props2.context;

      if ((scoringTiers === null || scoringTiers === void 0 ? void 0 : scoringTiers.length) > 0) {
        return scoringTiers;
      }

      return contextConfiguredWithProficiencies(context) ? getScoringTiersFromContext(context) : null;
    }
  }, {
    key: "getDisplayMasteryInformation",
    value: function getDisplayMasteryInformation() {
      var _this$props3 = this.props,
          context = _this$props3.context,
          outcomeResult = _this$props3.outcomeResult;
      return !(contextConfiguredWithProficiencies(context) && !outcomeResult);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          description = _this$props4.description,
          outcomeResult = _this$props4.outcomeResult,
          title = _this$props4.title,
          artifactTypeName = _this$props4.artifactTypeName,
          displayMasteryDescription = _this$props4.displayMasteryDescription,
          displayMasteryPercentText = _this$props4.displayMasteryPercentText;
      var scoringMethod = this.getScoringMethod();
      var scoringTiers = this.getScoringTiers();
      var displayMasteryInformation = this.getDisplayMasteryInformation();
      return React.createElement("div", null, React.createElement("div", {
        className: styles.title,
        "data-automation": "outcomeView__title"
      }, React.createElement(Text, {
        size: "x-large",
        transform: "uppercase"
      }, title)), scoringMethod && outcomeResult && displayMasteryInformation && React.createElement(MasteryCounts, {
        outcomeResult: outcomeResult,
        scoringMethod: scoringMethod
      }), React.createElement("div", {
        className: styles.description,
        "data-automation": "outcomeView__description"
      }, React.createElement(Text, {
        size: "medium",
        wrap: "break-word"
      }, React.createElement("div", {
        dangerouslySetInnerHTML: {
          // eslint-disable-line react/no-danger
          __html: sanitizeHtml(description)
        }
      }))), scoringTiers && scoringMethod && displayMasteryInformation && React.createElement(ScoringTiers, {
        outcomeResult: outcomeResult,
        scoringTiers: scoringTiers,
        scoringMethod: scoringMethod
      }), displayMasteryDescription && displayMasteryInformation && React.createElement(MasteryDescription, {
        artifactTypeName: artifactTypeName,
        displayMasteryPercentText: displayMasteryPercentText,
        scoringMethod: scoringMethod
      }));
    }
  }]);

  OutcomeView.displayName = "OutcomeView";
  return OutcomeView;
}(React.Component), _class2.propTypes = {
  context: contextShape,
  description: PropTypes.string.isRequired,
  outcomeResult: outcomeResultShape,
  title: PropTypes.string.isRequired,
  scoringMethod: scoringMethodShape,
  scoringTiers: PropTypes.arrayOf(scoringTierShape),
  artifactTypeName: PropTypes.string,
  displayMasteryDescription: PropTypes.bool,
  displayMasteryPercentText: PropTypes.bool
}, _class2.defaultProps = {
  context: null,
  outcomeResult: null,
  scoringMethod: null,
  scoringTiers: null,
  artifactTypeName: null,
  displayMasteryDescription: false,
  displayMasteryPercentText: false
}, _temp)) || _class);
export { OutcomeView as default };
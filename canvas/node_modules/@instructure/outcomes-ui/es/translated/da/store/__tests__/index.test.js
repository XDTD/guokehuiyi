import { expect } from 'chai';
import sinon from 'sinon';
import { getStore, makeScope, makeUserScope } from '../index';
var host = 'http://outcomes.docker';
var jwt = 'jwt';
describe('getStore', function () {
  it('exports a function', function () {
    expect(getStore).to.be.a('function');
  });
  it('returns an object', function () {
    var store = getStore(host, jwt, 'scope');
    expect(store).to.be.an('object');
  });
  it('returns a well formed store', function () {
    var store = getStore(host, jwt, 'scope');
    expect(store).to.contain.all.keys('dispatch subscribe getState replaceReducer'.split(' '));
  });
  it('returns the same store for multiple scopes', function () {
    var store = getStore(host, jwt, 'scope');
    var store2 = getStore(host, jwt, 'scope2');
    expect(store2).to.equal(store);
  });
  it('creates state for each scope', function () {
    var store = getStore(host, jwt, 'scope');
    getStore(host, jwt, 'scope2');
    expect(store.getState().toJS()).to.include.keys('scope', 'scope2');
  });
  it('calls replaceReducer per unique scope', function () {
    var store = getStore(host, jwt, 'scope');
    var stub = sinon.stub(store, 'replaceReducer');
    getStore(host, jwt, 'scope');
    getStore(host, jwt, 'scopefoo');
    getStore(host, jwt, 'scopefoo');
    getStore(host, jwt, 'scopebar');
    getStore(host, jwt, 'scopebar'); // replaceReducer already called once for 'scope' before we stub

    expect(stub).to.have.been.calledTwice;
  });
});
describe('makeScope', function () {
  it('returns unique scope string for different ids', function () {
    var thing1 = makeScope('thing', 1);
    var thing2 = makeScope('thing', 2);
    expect(thing1).not.to.equal(thing2);
  });
  it('returns unique scope for different types', function () {
    var foo = makeScope('foo', 1);
    var bar = makeScope('bar', 1);
    expect(foo).not.to.equal(bar);
  });
});
describe('makeUserScope', function () {
  it('returns unique user scope string for different user uuids', function () {
    var thing1 = makeUserScope('user1');
    var thing2 = makeUserScope('user2');
    expect(thing1).not.to.equal(thing2);
  });
});
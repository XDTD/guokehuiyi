import { fromJS } from 'immutable';
import { expect } from 'chai';
import * as actions from '../actions';
import reducer from '../reducers';
describe('search/reducers', function () {
  var state = fromJS({
    searchText: 'lion',
    isLoading: false,
    entries: [],
    pagination: {
      page: 1,
      total: 10
    }
  });
  describe('searchText', function () {
    it('is set by setSearchText', function () {
      var next = reducer(state, actions.setSearchText('elephant'));
      expect(next.get('searchText')).to.equal('elephant');
    });
  });
  describe('isLoading', function () {
    it('is set by setSearchLoading', function () {
      var next = reducer(state, actions.setSearchLoading(true));
      expect(next.get('isLoading')).to.equal(true);
    });
  });
  describe('entries', function () {
    it('is set by setSearchEntries', function () {
      var next = reducer(state, actions.setSearchEntries([]));
      expect(next.get('entries')).to.deep.equal(fromJS([]));
    });
  });
  describe('page', function () {
    it('is set by setSearchPage', function () {
      var next = reducer(state, actions.setSearchPage(111));
      expect(next.get('pagination').get('page')).to.equal(111);
    });
  });
  describe('total', function () {
    it('is set by setSearchTotal', function () {
      var next = reducer(state, actions.setSearchTotal(9));
      expect(next.get('pagination').get('total')).to.equal(9);
    });
  });
});
import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { mount } from 'enzyme';
import { Pagination as InstuiPagination } from '@instructure/ui-pagination';
import Pagination from '../index';
describe('Pagination', function () {
  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      numPages: 2,
      page: 1,
      updatePage: sinon.spy()
    }, props);
  }

  it('renders page numbers', function () {
    var wrapper = mount(React.createElement(Pagination, makeProps()));
    expect(wrapper.find(InstuiPagination.Page)).to.have.length(2);
  });
  it('calls updatePage when a page is clicked', function () {
    var props = makeProps();
    var wrapper = mount(React.createElement(Pagination, props));
    wrapper.find(InstuiPagination.Page).last().simulate('click');
    expect(props.updatePage.calledWith(2)).to.be.true;
  });
  it('does not include pagination for 0 results', function () {
    var props = makeProps({
      numPages: 0
    });
    var wrapper = mount(React.createElement(Pagination, props), {
      disableLifecycleMethods: true
    });
    var nextPageButton = wrapper.find('button').findWhere(function (z) {
      return z.text() == 'Next Page';
    });
    expect(nextPageButton).to.have.length(0);
  });
});
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { expect } from 'chai';
import { fromJS } from 'immutable';
import { setPage, setPageData, setRollups, setResults, setUsers, viewReportAlignment, closeReportAlignment } from '../actions';
import reducer from '../reducers';
describe('reports/reducers', function () {
  // eslint-disable-next-line camelcase
  var user_uuid = '560fddd9-9b16-4e3a-969c-2f095e7afc78';
  var state = fromJS({
    rollups: {
      100: {
        id: 100,
        label: 'blue',
        title: 'green'
      }
    },
    results: {
      1955: _defineProperty({}, user_uuid, {
        user_uuid: user_uuid,
        percent_score: 0.8,
        points: 80.0,
        points_possible: 100.0
      })
    },
    users: [{
      uuid: '100'
    }, {
      uuid: '200'
    }],
    openReportAlignmentId: 10
  });
  describe('page', function () {
    it('is updated by setPage', function () {
      var newPage = {
        number: 10,
        loading: true
      };
      var newState = reducer(state, setPage(newPage));
      expect(newState.get('page').toJS()).to.deep.equal(newPage);
    });
  });
  describe('pageData', function () {
    it('is updated by setPageData', function () {
      var newPageData = {
        perPage: 50,
        total: 597
      };
      var newState = reducer(state, setPageData(newPageData));
      expect(newState.get('pageData').toJS()).to.deep.equal(newPageData);
    });
  });
  describe('rollups', function () {
    it('is updated by setRollups', function () {
      var newRollup = {
        id: 200,
        label: 'yellow',
        title: 'red'
      };
      var newState = reducer(state, setRollups([newRollup]));
      expect(newState.get('rollups').toJS()).to.deep.equal([newRollup]);
    });
  });
  describe('results', function () {
    it('is updated by setResults', function () {
      var result = {
        user_uuid: user_uuid,
        points: 95.0,
        points_possible: 100
      };
      var newResults = {
        outcomeId: '1955',
        results: [result]
      };
      var newState = reducer(state, setResults(newResults));
      expect(newState.getIn(['results', '1955', user_uuid.toString()]).toJS()).to.deep.equal({
        userId: user_uuid,
        percentScore: result.percent_score,
        points: result.points,
        pointsPossible: result.points_possible
      });
    });
  });
  describe('openReportAlignmentId', function () {
    it('is set by VIEW_REPORT_ALIGNMENT', function () {
      var newState = reducer(state, viewReportAlignment(99));
      expect(newState.get('openReportAlignmentId')).to.equal(99);
    });
    it('is cleared by CLOSE_REPORT_ALIGNMENT', function () {
      var newState = reducer(state, closeReportAlignment(null));
      expect(newState.get('openReportAlignmentId')).to.equal(null);
    });
  });
  describe('users', function () {
    it('is updated by setUsers', function () {
      var newUsers = [{
        uuid: '200'
      }, {
        uuid: '300'
      }];
      var newState = reducer(state, setUsers(newUsers));
      expect(newState.get('users').toJS()).to.deep.equal(newUsers);
    });
  });
});
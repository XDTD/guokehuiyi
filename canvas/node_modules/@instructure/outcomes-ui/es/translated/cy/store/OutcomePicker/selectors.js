import { Map } from 'immutable';
import { isEqual } from 'lodash';
import { createSelector, createSelectorCreator, defaultMemoize } from 'reselect';
import createCachedSelector from 're-reselect';
import { getOutcome, isGroup, makeGetOutcomeSummary } from '../context/selectors';
import { getAnyOutcome } from '../alignments/selectors'; // Deep compare objects to avoid rerendering when contents are the same

var customDeepComparisonSelector = createSelectorCreator(defaultMemoize, isEqual);

function restrict(state, scope) {
  return state.getIn([scope, 'OutcomePicker']) || Map();
}

function selectedOutcomeIds(state, scope) {
  return restrict(state, scope).get('selected');
}

export var getSelectedOutcomeIds = createCachedSelector(selectedOutcomeIds, function (ids) {
  return ids ? ids.toJS() : [];
})(function (_state, scope) {
  return scope;
});
export function getFocusedOutcome(state, scope) {
  return restrict(state, scope).get('focusedOutcome');
}
export var getExpandedIds = createSelector(function (state, scope) {
  return restrict(state, scope).get('expandedIds');
}, function (ids) {
  return ids ? ids.toJS() : [];
});
export var makeIsOutcomeSelected = createCachedSelector(selectedOutcomeIds, function (selected) {
  return function (id) {
    return selected ? selected.has(id.toString()) : false;
  };
})(function (_state, scope) {
  return scope;
});
export function anyOutcomeSelected(state, scope) {
  var ids = restrict(state, scope).get('selected');
  return ids ? !ids.isEmpty() : false;
}
export function getActiveCollectionId(state, scope) {
  return restrict(state, scope).get('activeCollection') || '';
}
export var getOutcomePickerState = function getOutcomePickerState(state, scope) {
  return restrict(state, scope).get('state');
};

var getActiveCollectionOutcome = function getActiveCollectionOutcome(state, scope) {
  var id = getActiveCollectionId(state, scope);
  return id ? getOutcome(state, scope, id) : null;
};

export var getActiveCollection = createCachedSelector(getActiveCollectionOutcome, function (state, scope) {
  var id = getActiveCollectionId(state, scope);
  return id ? makeGetOutcomeSummary(state, scope)(id) : '';
}, function (outcome, summary) {
  return {
    header: outcome ? outcome.title : '',
    id: outcome ? outcome.id : '',
    description: outcome ? outcome.description : '',
    summary: summary
  };
})(getActiveCollectionId);
export var getActiveChildren = createCachedSelector(function (state, scope) {
  var active = getActiveCollectionOutcome(state, scope);

  if (active && active.child_ids) {
    return active.child_ids.map(function (id) {
      return getOutcome(state, scope, id);
    });
  }

  return [];
}, function (childOutcomes) {
  var _childOutcomes$reduce = childOutcomes.reduce(function (acc, val) {
    isGroup(val) ? acc.groups.push(val) : acc.nonGroups.push(val);
    return acc;
  }, {
    groups: [],
    nonGroups: []
  }),
      groups = _childOutcomes$reduce.groups,
      nonGroups = _childOutcomes$reduce.nonGroups;

  return {
    groups: groups,
    nonGroups: nonGroups
  };
})(getActiveCollectionId, {
  selectorCreator: customDeepComparisonSelector
});
export var getSelectedOutcomes = customDeepComparisonSelector(function (state, scope) {
  return getSelectedOutcomeIds(state, scope).map(function (id) {
    return getAnyOutcome(state, scope, id);
  });
}, function (outcomes) {
  return outcomes;
});
import { expect } from 'chai';
import React from 'react';
import { shallow, mount } from 'enzyme';
import sinon from 'sinon';
import SearchResults from '../index';
import checkA11y from '../../../test/checkA11y';
describe('SearchResults', function () {
  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      searchText: 'foo',
      searchPage: 1,
      searchTotal: 99,
      searchOutcomes: sinon.spy(),
      setSearchLoading: sinon.spy(),
      setSearchEntries: sinon.spy(),
      updateSearchPage: sinon.stub(),
      isSearchLoading: true,
      searchEntries: [],
      setActiveCollection: sinon.spy(),
      toggleExpandedIds: sinon.stub(),
      setFocusedOutcome: sinon.spy(),
      isOutcomeSelected: sinon.spy(),
      selectOutcomeIds: sinon.spy(),
      deselectOutcomeIds: sinon.spy(),
      screenreaderNotification: sinon.stub()
    }, props);
  }

  it('renders Spinner when loading', function () {
    var wrapper = shallow(React.createElement(SearchResults, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Spinner')).to.have.length(1);
  });
  it('passes correct params to OutcomeCheckbox components', function () {
    var props = makeProps();
    props.isSearchLoading = false;
    props.searchEntries = [{
      id: '2',
      label: 'abc',
      title: '123'
    }];
    var wrapper = shallow(React.createElement(SearchResults, props), {
      disableLifecycleMethods: true
    });
    var checkbox = wrapper.find('OutcomeCheckbox');
    expect(checkbox).to.have.length(1);
    expect(checkbox.prop('outcome')).to.eql({
      id: '2',
      label: 'abc',
      title: '123'
    });
  });
  describe('returns the correct result count', function () {
    describe('with zero results', function () {
      it('returns a properly formatted string', function () {
        var props = makeProps({
          searchTotal: 0,
          isSearchLoading: false
        });
        var wrapper = shallow(React.createElement(SearchResults, props), {
          disableLifecycleMethods: true
        });
        expect(wrapper.find('Text').prop('children')).to.equal('The search returned no results');
      });
    });
    describe('with one result', function () {
      it('returns a properly formatted string', function () {
        var props = makeProps({
          searchTotal: 1,
          isSearchLoading: false
        });
        var wrapper = shallow(React.createElement(SearchResults, props), {
          disableLifecycleMethods: true
        });
        expect(wrapper.find('Text').prop('children')).to.equal('1 result');
      });
    });
    describe('with more than one result', function () {
      it('returns a properly formatted string', function () {
        var props = makeProps({
          searchTotal: 2,
          isSearchLoading: false
        });
        var wrapper = shallow(React.createElement(SearchResults, props), {
          disableLifecycleMethods: true
        });
        expect(wrapper.find('Text').prop('children')).to.equal('2 results');
      });
    });
  });
  describe('pagination', function () {
    var searchEntries = [{
      id: '1'
    }, {
      id: '2'
    }];
    it('does not include pagination for 0 results', function () {
      var props = makeProps({
        searchEntries: searchEntries,
        searchTotal: 0,
        isSearchLoading: false
      });
      var wrapper = mount(React.createElement(SearchResults, props), {
        disableLifecycleMethods: true
      });
      var nextPageButton = wrapper.find('button').findWhere(function (z) {
        return z.text() == 'Next Page';
      });
      expect(nextPageButton).to.have.length(0);
    });
    it('does not include pagination for < 10 results', function () {
      var props = makeProps({
        searchEntries: searchEntries,
        searchTotal: 0,
        isSearchLoading: false
      });
      var wrapper = mount(React.createElement(SearchResults, props), {
        disableLifecycleMethods: true
      });
      var nextPageButton = wrapper.find('button').findWhere(function (z) {
        return z.text() == 'Next Page';
      });
      expect(nextPageButton).to.have.length(0);
    });
    it('does include pagination for > 10 results', function () {
      var props = makeProps({
        searchEntries: searchEntries,
        searchTotal: 999,
        isSearchLoading: false
      });
      var wrapper = mount(React.createElement(SearchResults, props), {
        disableLifecycleMethods: true
      });
      var nextPageButton = wrapper.find('button').findWhere(function (z) {
        return z.text() == 'Next Page';
      });
      expect(nextPageButton).not.to.have.length(0);
    });
    it('shows the current page', function () {
      var props = makeProps({
        searchEntries: searchEntries,
        searchPage: 25,
        searchTotal: 999,
        isSearchLoading: false
      });
      var wrapper = mount(React.createElement(SearchResults, props), {
        disableLifecycleMethods: true
      });
      var currentPageButton = wrapper.find('button').findWhere(function (z) {
        return z.text() == '25';
      });
      expect(currentPageButton).not.to.have.length(0);
    });
    it('updates the current page when pagination button is clicked', function () {
      var props = makeProps({
        searchEntries: searchEntries,
        isSearchLoading: false
      });
      var wrapper = mount(React.createElement(SearchResults, props), {
        disableLifecycleMethods: true
      });
      var pageTwoButton = wrapper.find('button').findWhere(function (z) {
        return z.text() == '2';
      });
      pageTwoButton.first().simulate('click');
      expect(props.updateSearchPage).to.have.been.calledWith(2);
    });
  });
  describe('screenreaderNotification', function () {
    it('calls the screenreaderNotification when the search loading is complete', function () {
      var props = makeProps({
        isSearchLoading: true
      });
      var wrapper = mount(React.createElement(SearchResults, props));
      expect(props.screenreaderNotification).not.to.have.been.called;
      wrapper.setProps({
        isSearchLoading: false
      });
      expect(props.screenreaderNotification).to.have.been.called;
    });
  });
  it('meets a11y standards', function () {
    return checkA11y(React.createElement(SearchResults, makeProps()));
  });
});
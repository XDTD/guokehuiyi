import { mount } from 'enzyme';
import axe from 'axe-core';
import { expect } from 'chai';
export default function checkA11y(reactElement) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};

  // We can't run aXe outside the browser
  if (process && process.title !== 'browser') {
    return Promise.resolve();
  }

  var ignores = options.ignores || [];
  var wrapper = mount(reactElement, {
    attachTo: document.getElementById('testbed')
  });
  var node = wrapper.getDOMNode(); // eslint-disable-line react/no-find-dom-node

  document.querySelectorAll('*[aria-labelledby]').forEach(function (el) {
    el.getAttribute('aria-labelledby').split(' ').forEach(function (id) {
      var message = 'aria-labelledby cannot reference parent';
      expect(document.getElementById(id).contains(el), message).to.be.false;
    });
  });
  var axeConfig = {
    runOnly: {
      type: 'tag',
      values: ['wcag2a', 'wcag2aa', 'section508', 'best-practice']
    },
    rules: {
      'color-contrast': {
        enabled: false
      } // TODO: high contrast mode

    }
  };
  return axe.run(node, axeConfig).then(function (result) {
    wrapper.unmount();
    var violations = result.violations.filter(function (violation) {
      return !ignores.includes(violation.id);
    });

    if (violations.length > 0) {
      throw new Error(JSON.stringify(violations));
    }

    return result;
  });
}
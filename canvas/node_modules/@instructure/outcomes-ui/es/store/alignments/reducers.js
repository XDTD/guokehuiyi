import { handleActions } from 'redux-actions';
import { combineReducers } from 'redux-immutable';
import { fromJS, Map, List } from 'immutable';
var alignedOutcomes = handleActions({
  SET_ALIGNMENTS: function SET_ALIGNMENTS(state, action) {
    return fromJS(action.payload.outcomes || []);
  },
  UPDATE_ALIGNMENT: function UPDATE_ALIGNMENT(state, action) {
    var outcomeId = action.payload.outcome.id;
    var idx = state.findIndex(function (o) {
      return o.get('id') === outcomeId;
    });

    if (idx === -1) {
      return state;
    }

    var outcome = action.payload.outcome;
    return state.set(idx, Map(outcome));
  }
}, List());
var openAlignmentId = handleActions({
  VIEW_ALIGNMENT: function VIEW_ALIGNMENT(state, action) {
    return action.payload;
  },
  CLOSE_ALIGNMENT: function CLOSE_ALIGNMENT() {
    return null;
  }
}, null);
var alignmentSetId = handleActions({
  SET_ALIGNMENTS: function SET_ALIGNMENTS(state, action) {
    return action.payload.guid || null;
  }
}, null);
export default combineReducers({
  alignedOutcomes: alignedOutcomes,
  openAlignmentId: openAlignmentId,
  alignmentSetId: alignmentSetId
});
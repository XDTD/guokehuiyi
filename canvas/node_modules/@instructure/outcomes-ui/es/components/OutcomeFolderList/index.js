import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";

var _dec, _class, _class2, _temp;

import React from 'react';
import PropTypes from 'prop-types';
import { themeable } from '@instructure/ui-themeable';
import OutcomeFolder from '../OutcomeFolder';
import theme from '../theme';
var styles = {
  componentId: 'cxqlf',
  template: function template(theme) {
    return "\n\n.outcomes-ui__OutcomeFolderList--picker {\n  padding-left: 1rem;\n}\n";
  },
  'picker': 'outcomes-ui__OutcomeFolderList--picker'
};
var OutcomeFolderList = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_React$Component) {
  _inherits(OutcomeFolderList, _React$Component);

  function OutcomeFolderList() {
    _classCallCheck(this, OutcomeFolderList);

    return _possibleConstructorReturn(this, _getPrototypeOf(OutcomeFolderList).apply(this, arguments));
  }

  _createClass(OutcomeFolderList, [{
    key: "render",
    // eslint-disable-next-line no-undef
    value: function render() {
      var _this$props = this.props,
          outcomes = _this$props.outcomes,
          getOutcomeSummary = _this$props.getOutcomeSummary,
          setActiveCollection = _this$props.setActiveCollection,
          toggleExpandedIds = _this$props.toggleExpandedIds,
          activeCollectionId = _this$props.activeCollectionId;

      if (outcomes.length === 0) {
        return React.createElement("div", null);
      }

      return React.createElement("div", {
        className: styles.picker
      }, outcomes.map(function (outcome) {
        return React.createElement(OutcomeFolder, {
          key: outcome.id,
          outcome: outcome,
          getOutcomeSummary: getOutcomeSummary,
          setActiveCollection: setActiveCollection,
          toggleExpandedIds: toggleExpandedIds,
          activeCollectionId: activeCollectionId
        });
      }));
    }
  }]);

  OutcomeFolderList.displayName = "OutcomeFolderList";
  return OutcomeFolderList;
}(React.Component), _class2.propTypes = {
  getOutcomeSummary: PropTypes.func.isRequired,
  setActiveCollection: PropTypes.func.isRequired,
  outcomes: PropTypes.array.isRequired,
  toggleExpandedIds: PropTypes.func.isRequired,
  activeCollectionId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
}, _class2.defaultProps = {
  activeCollectionId: null
}, _temp)) || _class);
export { OutcomeFolderList as default };
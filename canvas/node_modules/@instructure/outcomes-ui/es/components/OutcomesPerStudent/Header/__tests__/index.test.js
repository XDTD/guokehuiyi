import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { shallow, mount } from 'enzyme';
import Header from '../index';
var styles = {
  componentId: 'fbTpU',
  template: function template(theme) {
    return "\n\n.outcomes-ui__Header--header {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  font-weight: normal;\n  line-height: 1.3rem;\n  text-align: left;\n}\n\n[dir=\"ltr\"] .outcomes-ui__Header--header {\n  text-align: left;\n}\n\n[dir=\"rtl\"] .outcomes-ui__Header--header {\n  text-align: left;\n}\n";
  },
  'header': 'outcomes-ui__Header--header'
};
import checkA11y from '../../../../test/checkA11y';
describe('OutcomesPerStudent/Header', function () {
  function makeProps(props) {
    return Object.assign({
      outcomeResult: {
        outcome: {
          id: '1',
          label: 'FOO'
        },
        count: 10,
        mastery_count: 5,
        childArtifactCount: 12
      },
      viewReportAlignment: sinon.spy(),
      getReportOutcome: sinon.stub().returns({
        id: '1',
        label: 'FOO',
        title: 'bar'
      }),
      isOpen: false,
      closeReportAlignment: sinon.spy()
    }, props);
  }

  it('includes a details object', function () {
    var wrapper = shallow(React.createElement(Header, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('HeaderDetails')).to.have.length(1);
  });
  it('renders outcome link with title', function () {
    var props = makeProps();
    var wrapper = mount(React.createElement(Header, props));
    expect(wrapper.text()).to.match(/bar/);
  });
  it('calls viewReportAlignment when the link is clicked', function () {
    var props = makeProps();
    var wrapper = shallow(React.createElement(Header, props), {
      disableLifecycleMethods: true
    });
    var link = wrapper.find(".".concat(styles.header)).find('Link');
    link.simulate('click');
    expect(props.viewReportAlignment.calledOnce).to.be.true;
  });
  it('conditionally renders tooltip based on state.showTooltip', function () {
    var wrapper = shallow(React.createElement(Header, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('Tooltip')).to.have.length(0);
    wrapper.setState({
      showTooltip: true
    });
    expect(wrapper.find('Tooltip')).to.have.length(1);
  });
  it('includes a TruncateText element that can update state', function () {
    var wrapper = mount(React.createElement(Header, makeProps()));
    expect(wrapper.find('TruncateText')).to.have.length(1);
    wrapper.find('TruncateText').props().onUpdate(true);
    expect(wrapper.state().showTooltip).to.equal(true);
  });
  it('includes a AccessibleContent element', function () {
    var wrapper = shallow(React.createElement(Header, makeProps()), {
      disableLifecycleMethods: true
    });
    expect(wrapper.find('AccessibleContent')).to.have.length(1);
  });
  it('meets a11y standards', function () {
    return checkA11y(React.createElement(Header, makeProps()));
  });
});
import { expect } from 'chai';
import React from 'react';
import sinon from 'sinon';
import { shallow } from 'enzyme';
import OutcomePickerLoader from '../index';
import checkA11y from '../../../test/checkA11y';
describe('OutcomePickerLoader', function () {
  function DummyComponent() {
    return React.createElement("div", {
      className: "dummy"
    });
  }

  function makeProps() {
    var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return Object.assign({
      outcomePicker: DummyComponent,
      loadOutcomePicker: sinon.spy(),
      setFocusedOutcome: sinon.spy(),
      outcomePickerState: 'closed',
      scope: 'scopeForTest'
    }, props);
  }

  it('calls loadOutcomePicker on mount', function () {
    var props = makeProps();
    shallow(React.createElement(OutcomePickerLoader, props));
    expect(props.loadOutcomePicker.calledOnce).to.be.true;
    expect(props.loadOutcomePicker.calledWith()).to.be.true;
  });
  it('displays nothing when closed', function () {
    var wrapper = shallow(React.createElement(OutcomePickerLoader, makeProps()));
    expect(wrapper.equals(React.createElement("div", null))).to.be.true;
  });
  it('displays a spinner while loading', function () {
    var props = makeProps({
      outcomePickerState: 'loading'
    });
    var wrapper = shallow(React.createElement(OutcomePickerLoader, props));
    expect(wrapper.find('Spinner')).to.have.length(1);
    expect(wrapper.find('Spinner').prop('renderTitle')).to.equal('Loading');
  });
  it('displays the outcome picker while choosing', function () {
    var props = makeProps({
      outcomePickerState: 'choosing'
    });
    var wrapper = shallow(React.createElement(OutcomePickerLoader, props));
    expect(wrapper.find(DummyComponent)).to.have.length(1);
  });
  it('displays a spinner while saving', function () {
    var props = makeProps({
      outcomePickerState: 'saving'
    });
    var wrapper = shallow(React.createElement(OutcomePickerLoader, props));
    expect(wrapper.find('Spinner')).to.have.length(1);
    expect(wrapper.find('Spinner').prop('renderTitle')).to.equal('Saving');
  });
  it('displays a success message while complete', function () {
    var props = makeProps({
      outcomePickerState: 'complete'
    });
    var wrapper = shallow(React.createElement(OutcomePickerLoader, props));
    expect(wrapper.text()).to.equal('Complete');
  });
  it('meets a11y standards', function () {
    return checkA11y(React.createElement(OutcomePickerLoader, makeProps()));
  });
});
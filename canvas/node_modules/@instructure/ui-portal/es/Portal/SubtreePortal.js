import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import { passthroughProps } from '@instructure/ui-react-utils';
import { bidirectional } from '@instructure/ui-i18n';
import { element } from '@instructure/ui-prop-types';
import { shallowEqual } from '@instructure/ui-utils';
/* istanbul ignore file */

/**
---
private: true
---
@module SubtreePortal
**/

var SubtreePortal = (_dec = bidirectional(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(SubtreePortal, _Component);

  var _super = _createSuper(SubtreePortal);

  function SubtreePortal() {
    _classCallCheck(this, SubtreePortal);

    return _super.apply(this, arguments);
  }

  _createClass(SubtreePortal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.renderPortal(this.props);
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !(shallowEqual(this.props, nextProps) && shallowEqual(this.state, nextState));
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.renderPortal(nextProps);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removePortal(this.props);
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }, {
    key: "renderPortal",
    value: function renderPortal(props) {
      var _this = this;

      var open = props.open,
          insertAt = props.insertAt,
          onOpen = props.onOpen,
          onClose = props.onClose,
          elementRef = props.elementRef,
          children = props.children,
          passThroughProps = _objectWithoutProperties(props, ["open", "insertAt", "onOpen", "onClose", "elementRef", "children"]);

      var isInitialMount = !this.DOMNode;
      var mountNode = this.mountNode;
      var content = children; // Wrap text in a span since subtree will only render a single top-level node

      if (typeof content === 'string' && content.length > 0) {
        content = /*#__PURE__*/React.createElement("span", null, content);
      } // Render subtree if Portal is open and has children to render


      if (open && React.Children.count(content) > 0) {
        // Create node if it doesn't already exist
        if (!this.DOMNode) {
          var node = document.createElement('span');

          var attributes = _objectSpread({}, passthroughProps(passThroughProps), {
            dir: this.dir
          });

          Object.keys(attributes).forEach(function (name) {
            node.setAttribute(name, attributes[name]);
          });
          elementRef(node);
          this.DOMNode = node;
        } // Append node to container if it isn't already


        if (this.DOMNode.parentNode !== mountNode) {
          if (insertAt === 'bottom') {
            mountNode.appendChild(this.DOMNode);
          } else {
            mountNode.insertBefore(this.DOMNode, mountNode.firstChild);
          }
        } // Notify that subtree has been rendered if props ask for it


        var handleMount = function handleMount() {
          // Only fire onOpen if Portal was closed and is now open
          if ((isInitialMount || !_this.props.open && open) && typeof onOpen === 'function') {
            onOpen(_this.DOMNode);
          }
        };

        ReactDOM.unstable_renderSubtreeIntoContainer(this, content, this.DOMNode, handleMount);
      } else {
        this.removePortal(props);
      }
    }
  }, {
    key: "removePortal",
    value: function removePortal(props) {
      var unmounted;

      if (this.DOMNode) {
        unmounted = ReactDOM.unmountComponentAtNode(this.DOMNode);
        this.DOMNode.parentNode && this.DOMNode.parentNode.removeChild(this.DOMNode);
        this.DOMNode = null;
        this.props.elementRef(this.DOMNode);
      }

      if (unmounted && typeof props.onClose === 'function') {
        props.onClose();
      }
    }
  }, {
    key: "mountNode",
    get: function get() {
      var mountNode;

      if (typeof this.props.mountNode === 'function') {
        mountNode = this.props.mountNode();
      } else if (this.props.mountNode) {
        mountNode = this.props.mountNode;
      }

      if (!mountNode || !mountNode.nodeName) {
        mountNode = document.body;
      }

      return mountNode;
    }
  }, {
    key: "DOMNode",
    get: function get() {
      return this._node;
    },
    set: function set(el) {
      this._node = el;
    } // for backwards compatibility:

  }, {
    key: "node",
    get: function get() {
      return this.DOMNode;
    }
  }]);

  SubtreePortal.displayName = "SubtreePortal";
  return SubtreePortal;
}(Component), _class2.propTypes = {
  /**
   * Wheter or not the `<Portal />` is open
   */
  open: PropTypes.bool,

  /**
   * Callback fired when `<Portal />` content has been mounted in the DOM
   */
  onOpen: PropTypes.func,

  /**
   * Callback fired when `<Portal />` has been unmounted from the DOM
   */
  onClose: PropTypes.func,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Portal />` (defaults to `document.body`)
   */
  mountNode: PropTypes.oneOfType([element, PropTypes.func]),

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: PropTypes.oneOf(['bottom', 'top']),

  /**
   * The children to be rendered within the `<Portal />`
   */
  children: PropTypes.node,

  /**
   * provides a reference to the underlying html element
   */
  elementRef: PropTypes.func
}, _class2.defaultProps = {
  open: false,
  insertAt: 'bottom',
  onOpen: function onOpen(DOMNode) {},
  onClose: function onClose() {},
  mountNode: null,
  children: null,
  elementRef: function elementRef(el) {}
}, _temp)) || _class);
export default SubtreePortal;
export { SubtreePortal };
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import { element } from '@instructure/ui-prop-types';
import { ReactPortal } from "./ReactPortal.js";
import { SubtreePortal } from "./SubtreePortal.js";
var IS_CREATE_PORTAL_SUPPORTED = typeof ReactDOM.createPortal === 'function';
/**
---
category: components/utilities
---
@module Portal
**/

var Portal = /*#__PURE__*/function (_Component) {
  _inherits(Portal, _Component);

  var _super = _createSuper(Portal);

  function Portal() {
    var _this;

    _classCallCheck(this, Portal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleElementRef = function (el) {
      if (el) {
        _this.DOMNode = el;

        if (typeof _this.props.elementRef === 'function') {
          _this.props.elementRef(el);
        }
      }
    };

    return _this;
  }

  _createClass(Portal, [{
    key: "render",
    value: function render() {
      return IS_CREATE_PORTAL_SUPPORTED ? /*#__PURE__*/React.createElement(ReactPortal, Object.assign({}, this.props, {
        elementRef: this.handleElementRef
      })) : /*#__PURE__*/React.createElement(SubtreePortal, Object.assign({}, this.props, {
        elementRef: this.handleElementRef
      }));
    }
  }]);

  Portal.displayName = "Portal";
  return Portal;
}(Component);

Portal.propTypes = {
  /**
   * Wheter or not the `<Portal />` is open
   */
  open: PropTypes.bool,

  /**
   * Callback fired when `<Portal />` content has been mounted in the DOM
   */
  onOpen: PropTypes.func,

  /**
   * Callback fired when `<Portal />` has been unmounted from the DOM
   */
  onClose: PropTypes.func,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Portal />` (defaults to `document.body`)
   */
  mountNode: PropTypes.oneOfType([element, PropTypes.func]),

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: PropTypes.oneOf(['bottom', 'top']),

  /**
   * The children to be rendered within the `<Portal />`
   */
  children: PropTypes.node,

  /**
   * provides a reference to the underlying html element
   */
  elementRef: PropTypes.func
};
Portal.defaultProps = {
  open: false,
  insertAt: 'bottom',
  onOpen: function onOpen(DOMNode) {},
  onClose: function onClose() {},
  mountNode: null,
  children: null,
  elementRef: function elementRef(el) {}
};
export default Portal;
export { Portal };
import * as React from 'react';

export type FileDropRenderLabel = ((...args: any[])=>any) | React.ReactNode;

export type FileDropAccept = string | string[];

export type FileDropInteraction = "enabled" | "disabled" | "readonly";

export type FileDropDisplay = "block" | "inline-block";

export type FileDropHeight = string | number;

export type FileDropWidth = string | number;

export type FileDropMaxWidth = string | number;

export type FileDropMinWidth = string | number;

export type FileDropLabel = ((...args: any[])=>any) | React.ReactNode;

export interface FileDropProps {
    /**
     * The id of the input (to link it to its label for a11y)
     */
    id?: string;
    /**
     * The content of FileDrop; can be a component or React node.
     * Components receive `isDragAccepted` and `isDragRejected` as props.
     */
    renderLabel: FileDropRenderLabel;
    /**
     * The mime media type/s or file extension/s allowed to be dropped inside
     */
    accept?: FileDropAccept;
    /**
     * object with shape: `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
    /**
     * Called when clicking on drop area to select files to upload
     */
    onClick?: (...args: any[])=>any;
    /**
     * Called when dropping files or when file dialog window exits successfully
     */
    onDrop?: (...args: any[])=>any;
    /**
     * Called when dropping allowed files
     */
    onDropAccepted?: (...args: any[])=>any;
    /**
     * Called when dropping rejected files
     */
    onDropRejected?: (...args: any[])=>any;
    /**
     * Called when dragging files
     * and passing through FileDrop's content for the first time
     */
    onDragEnter?: (...args: any[])=>any;
    /**
     * Called when dragging files and passing through FileDrop's content
     */
    onDragOver?: (...args: any[])=>any;
    /**
     * Called when dragging files and leaving FileDrop's content
     */
    onDragLeave?: (...args: any[])=>any;
    /**
     * Flag to use window.URL.createObjectURL for each dropped file and pass it through file.preview
     */
    shouldEnablePreview?: boolean;
    /**
     * Flag to allow multiple files to drop at once
     */
    shouldAllowMultiple?: boolean;
    /**
     * Flag to allow upload of the same file more than once
     */
    shouldAllowRepeats?: boolean;
    /**
     * the maximum file size allowed
     */
    maxSize?: number;
    /**
     * the minimum file size allowed
     */
    minSize?: number;
    /**
     * Specifies if interaction with the input is enabled, disabled, or readonly.
     */
    interaction?: FileDropInteraction;
    /**
     * Set the CSS `display` property on FileInput's outermost element
     */
    display?: FileDropDisplay;
    /**
     * Set the CSS `height` property on FileInput's outermost element
     */
    height?: FileDropHeight;
    /**
     * Set the CSS `width` property on FileInput's outermost element
     */
    width?: FileDropWidth;
    /**
     * Set the CSS `maxWidth` property on FileInput's outermost element
     */
    maxWidth?: FileDropMaxWidth;
    /**
     * Set the CSS `minWidth` property on FileInput's outermost element
     */
    minWidth?: FileDropMinWidth;
    /**
     * Valid values are 0, none, auto, xxx-small, xx-small, x-small, small,
     * medium, large, x-large, xx-large. Apply these values via familiar
     * CSS-like shorthand. For example: margin="small auto large".
     */
    margin?: any;
    /**
     * eslint-disable react/require-default-props
     */
    label?: FileDropLabel;
    /**
     * __deprecated: use `shouldEnablePreview`__
     */
    enablePreview?: boolean;
    /**
     * __deprecated: use `shouldAllowRepeats`__
     */
    allowRepeatFileSelection?: boolean;
    /**
     * __deprecated: use `shouldAllowMultiple`__
     */
    allowMultiple?: boolean;
}

export class FileDrop extends React.Component<FileDropProps, any> {
    render(): JSX.Element;

}


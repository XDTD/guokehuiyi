import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _dec3, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import keycode from 'keycode';
import { FormPropTypes, FormFieldMessages } from '@instructure/ui-form-field';
import { View } from '@instructure/ui-view';
import { uid } from '@instructure/uid';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
import { testable } from '@instructure/ui-testable';
import { callRenderProp, deprecated, passthroughProps, getInteraction } from '@instructure/ui-react-utils';
import { isEdge } from '@instructure/ui-utils';
import { accepts, getAcceptList } from "./utils/accepts.js";
import { getEventFiles } from "./utils/getEventFiles.js";
var styles = {
  componentId: 'emSEn',
  template: function template(theme) {
    return "\n\n.emSEn_blJt,.emSEn_bGBk{position:relative}\n\n.emSEn_blJt{box-sizing:border-box;display:block}\n\n.emSEn_blJt.emSEn_JSXc{height:100%}\n\n.emSEn_cwos{border:0;clip:rect(0 0 0 0);height:0.0625rem;margin:-0.0625rem;overflow:hidden;padding:0;position:absolute;width:0.0625rem}\n\n.emSEn_QUBp{border:".concat(theme.borderWidth || 'inherit', " ").concat(theme.borderStyle || 'inherit', " ").concat(theme.borderColor || 'inherit', ";border-radius:").concat(theme.borderRadius || 'inherit', ";box-sizing:border-box;cursor:pointer;display:block;text-align:center;z-index:1}\n\n[dir=ltr] .emSEn_QUBp,[dir=rtl] .emSEn_QUBp{text-align:center}\n\n.emSEn_QUBp:hover{border-color:").concat(theme.hoverBorderColor || 'inherit', "}\n\n.emSEn_QUBp.emSEn_JSXc{height:100%}\n\n.emSEn_byIz{border-radius:").concat(theme.borderRadius || 'inherit', ";display:block;overflow:hidden}\n\n.emSEn_byIz.emSEn_JSXc{height:100%}\n\n.emSEn_cbYS .emSEn_QUBp{border-color:").concat(theme.acceptedColor || 'inherit', "}\n\n.emSEn_cvQK .emSEn_QUBp{border-color:").concat(theme.rejectedColor || 'inherit', "}\n\n.emSEn_cFXB{cursor:not-allowed;pointer-events:none}\n\n.emSEn_eXzv{opacity:0.5}");
  },
  'label': 'emSEn_blJt',
  'root': 'emSEn_bGBk',
  'withHeight': 'emSEn_JSXc',
  'input': 'emSEn_cwos',
  'labelContent': 'emSEn_QUBp',
  'layout': 'emSEn_byIz',
  'dragAccepted': 'emSEn_cbYS',
  'dragRejected': 'emSEn_cvQK',
  'functionallyDisabled': 'emSEn_cFXB',
  'visuallyDisabled': 'emSEn_eXzv'
};
import theme from "./theme.js";

function keyEventIsClickButton(e) {
  return e.keyCode === keycode.codes.space || e.keyCode === keycode.codes.enter;
} // Used try-catch due to missing document/navigator references in Jenkins


function isBrowserMS() {
  var result = false;

  try {
    result = document.documentMode || isEdge;
  } catch (e) {} // eslint-disable-line no-empty


  return result;
}

var IS_MS = isBrowserMS();
/**
---
category: components
---
**/

var FileDrop = (_dec = deprecated('8.0.0', {
  label: 'renderLabel',
  enablePreview: 'shouldEnablePreview',
  allowRepeatFileSelection: 'shouldAllowRepeats',
  allowMultiple: 'shouldAllowMultiple'
}), _dec2 = testable(), _dec3 = themeable(theme, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(FileDrop, _Component);

  var _super = _createSuper(FileDrop);

  function FileDrop(props) {
    var _this;

    _classCallCheck(this, FileDrop);

    _this = _super.call(this, props);
    _this.state = {
      isDragAccepted: false,
      isDragRejected: false,
      isFocused: false,
      isFileBrowserDisplayed: false
    };
    _this.enterCounter = 0;
    _this.fileInputEl = null;
    _this.defaultId = null;

    _this.handleDragEnter = function (e) {
      e.preventDefault(); // Count the dropzone and any children that are entered.

      _this.enterCounter += 1; // Don't trigger onDragEnter for each children after the first one

      if (_this.enterCounter > 1) {
        return;
      }

      var allFilesAccepted = _this.allFilesAccepted(_this.getDataTransferItems(e));

      _this.setState({
        isDragAccepted: allFilesAccepted,
        isDragRejected: !allFilesAccepted
      });

      _this.props.onDragEnter(e);
    };

    _this.handleDragOver = function (e) {
      e.preventDefault();
      e.stopPropagation();

      try {
        var event = e;
        event.dataTransfer.dropEffect = 'copy';
      } catch (err) {// continue regardless of error
      }

      _this.props.onDragOver(e);

      return false;
    };

    _this.handleDragLeave = function (e) {
      e.preventDefault();
      _this.enterCounter -= 1; // Only deactivate once the dropzone and all children was left

      if (_this.enterCounter > 0) {
        return;
      }

      _this.setState({
        isDragAccepted: false,
        isDragRejected: false
      });

      _this.props.onDragLeave(e);
    };

    _this.handleChange = function (e) {
      var _this$props = _this.props,
          onDrop = _this$props.onDrop,
          onDropAccepted = _this$props.onDropAccepted,
          onDropRejected = _this$props.onDropRejected;

      var fileList = _this.getDataTransferItems(e, _this.shouldEnablePreview);

      var _this$parseFiles = _this.parseFiles(fileList),
          _this$parseFiles2 = _slicedToArray(_this$parseFiles, 2),
          accepted = _this$parseFiles2[0],
          rejected = _this$parseFiles2[1];

      e.preventDefault();
      _this.enterCounter = 0;
      onDrop(accepted, rejected, e);

      if (rejected.length > 0) {
        onDropRejected(rejected, e);
      }

      if (accepted.length > 0) {
        onDropAccepted(accepted, e);
      }

      _this.setState({
        isDragAccepted: false,
        isDragRejected: false,
        isFileBrowserDisplayed: false
      });
    };

    _this.fileAccepted = function (file) {
      return accepts(file, _this.props.accept);
    };

    _this.handleRef = function (el) {
      _this.fileInputEl = el;
    };

    _this.handleBlur = function () {
      _this.setState({
        isFocused: false,
        isFileBrowserDisplayed: false
      });
    };

    _this.handleFocus = function () {
      _this.setState({
        isFocused: true,
        isFileBrowserDisplayed: false
      });
    };

    _this.handleClick = function (e) {
      if (_this.fileInputEl.value && _this.shouldAllowRepeats) {
        _this.fileInputEl.value = null;
      } // focus the input (because FF won't)


      _this.fileInputEl.focus();

      _this.props.onClick(e);

      _this.setState({
        isFileBrowserDisplayed: true
      });
    };

    _this.handleKeyDown = function (e) {
      if (_this.state.isFocused && keyEventIsClickButton(e)) {
        if (_this.shouldAllowRepeats) {
          _this.fileInputEl.value = null;
        } // This bit of logic is necessary for MS browsers but causes unwanted warnings in Firefox
        // So we need to apply this logic only on MS browsers

        /* istanbul ignore if  */


        if (IS_MS) {
          e.stopPropagation();
          e.preventDefault();

          _this.fileInputEl.click();
        }
      }
    };

    _this.handleKeyUp = function (e) {
      // This is to handle the case where ESC is pressed inside a Dialog so that
      // closing the file browser dialog doesn't also close the Dialog.
      if (e.keyCode === keycode.codes.esc && _this.state.isFileBrowserDisplayed) {
        e.stopPropagation();
        e.nativeEvent.stopImmediatePropagation();

        _this.setState({
          isFileBrowserDisplayed: false
        });
      }
    };

    _this.defaultId = uid('FileDrop');
    _this.messagesId = uid('FileDrop-messages');
    return _this;
  }

  _createClass(FileDrop, [{
    key: "getDataTransferItems",
    value: function getDataTransferItems(e, shouldEnablePreview) {
      var list = Array.from(getEventFiles(e, this.fileInputEl));

      if (list.length > 1) {
        list = this.shouldAllowMultiple ? list : [list[0]];
      }

      if (shouldEnablePreview) {
        return list.map(function (file) {
          return Object.assign(file, {
            preview: window.URL.createObjectURL(file)
          });
        });
      }

      return list;
    }
  }, {
    key: "parseFiles",
    value: function parseFiles(fileList) {
      var _this2 = this;

      var accepted = [];
      var rejected = [];
      fileList.forEach(function (file) {
        if (_this2.fileAccepted(file) && _this2.fileMatchSize(file)) {
          accepted.push(file);
        } else {
          rejected.push(file);
        }
      });
      return [accepted, rejected];
    }
  }, {
    key: "fileMatchSize",
    value: function fileMatchSize(file) {
      return file.size <= this.props.maxSize && file.size >= this.props.minSize;
    }
  }, {
    key: "allFilesAccepted",
    value: function allFilesAccepted(files) {
      return files.every(this.fileAccepted);
    }
  }, {
    key: "acceptStr",
    value: function acceptStr() {
      var accept = this.props.accept;
      return accept ? getAcceptList(accept).join(',') : null;
    }
  }, {
    key: "renderLabel",
    value: function renderLabel() {
      var _this$props2 = this.props,
          label = _this$props2.label,
          renderLabel = _this$props2.renderLabel;
      return callRenderProp(label || renderLabel, {
        isDragAccepted: this.state.isDragAccepted,
        isDragRejected: this.state.isDragRejected,
        interaction: this.interaction
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _classes, _classnames, _classnames2;

      var _this$props3 = this.props,
          display = _this$props3.display,
          height = _this$props3.height,
          width = _this$props3.width,
          minWidth = _this$props3.minWidth,
          maxWidth = _this$props3.maxWidth,
          margin = _this$props3.margin,
          onDropAccepted = _this$props3.onDropAccepted,
          onDropRejected = _this$props3.onDropRejected,
          props = _objectWithoutProperties(_this$props3, ["display", "height", "width", "minWidth", "maxWidth", "margin", "onDropAccepted", "onDropRejected"]);

      var id = this.props.id || this.defaultId; // make readonly input functionally disabled

      var functionallyDisabled = this.interaction === 'disabled' || this.interaction === 'readonly';
      var focusColor = this.state.isDragRejected || this.invalid ? 'danger' : void 0;
      var classes = (_classes = {}, _defineProperty(_classes, styles.label, true), _defineProperty(_classes, styles.functionallyDisabled, functionallyDisabled), _defineProperty(_classes, styles.visuallyDisabled, this.interaction === 'disabled'), _defineProperty(_classes, styles.dragRejected, this.state.isDragRejected || this.invalid), _defineProperty(_classes, styles.dragAccepted, this.state.isDragAccepted), _defineProperty(_classes, styles.withHeight, height), _classes);
      return /*#__PURE__*/React.createElement(View, {
        display: display,
        position: "relative" // contain visually hidden file input element
        ,
        width: width,
        minWidth: minWidth,
        maxWidth: maxWidth,
        margin: margin,
        height: height
      }, /*#__PURE__*/React.createElement("label", {
        className: classnames(classes),
        htmlFor: id,
        onDragEnter: this.handleDragEnter,
        onDragOver: this.handleDragOver,
        onDragLeave: this.handleDragLeave,
        onDrop: this.handleChange
      }, /*#__PURE__*/React.createElement(View, {
        display: "block",
        position: "relative",
        withFocusOutline: this.state.isFocused,
        borderRadius: "large",
        focusColor: focusColor,
        height: height
      }, /*#__PURE__*/React.createElement("span", {
        className: classnames((_classnames = {}, _defineProperty(_classnames, styles.labelContent, true), _defineProperty(_classnames, styles.withHeight, height), _classnames))
      }, /*#__PURE__*/React.createElement("span", {
        className: classnames((_classnames2 = {}, _defineProperty(_classnames2, styles.layout, true), _defineProperty(_classnames2, styles.withHeight, height), _classnames2))
      }, /*#__PURE__*/React.createElement(View, {
        height: height
      }, this.renderLabel()))))), /*#__PURE__*/React.createElement("input", Object.assign({}, passthroughProps(props), {
        onClick: this.handleClick,
        type: "file",
        className: styles.input,
        id: id,
        ref: this.handleRef,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        onKeyDown: this.handleKeyDown,
        onKeyUp: this.handleKeyUp,
        multiple: this.shouldAllowMultiple,
        accept: this.acceptStr(),
        onChange: this.handleChange,
        "aria-describedby": this.hasMessages ? this.messagesId : null,
        disabled: functionallyDisabled
      })), this.hasMessages ? /*#__PURE__*/React.createElement(View, {
        display: "block",
        margin: "small 0 0"
      }, /*#__PURE__*/React.createElement(FormFieldMessages, {
        id: this.messagesId,
        messages: this.props.messages
      })) : null);
    }
  }, {
    key: "hasMessages",
    get: function get() {
      return this.props.messages && this.props.messages.length > 0;
    }
  }, {
    key: "interaction",
    get: function get() {
      return getInteraction({
        props: this.props
      });
    }
  }, {
    key: "shouldEnablePreview",
    get: function get() {
      // TODO: no longer nec. when `enablePreview` is removed
      return this.props.enablePreview || this.props.shouldEnablePreview;
    }
  }, {
    key: "shouldAllowRepeats",
    get: function get() {
      // TODO: no longer nec. when `allowRepeatFileSelection` is removed
      return this.props.allowRepeatFileSelection || this.props.shouldAllowRepeats;
    }
  }, {
    key: "shouldAllowMultiple",
    get: function get() {
      // TODO: no longer nec. when `allowMultiple` is removed
      return this.props.allowMultiple || this.props.shouldAllowMultiple;
    }
  }, {
    key: "invalid",
    get: function get() {
      return this.hasMessages && this.props.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }]);

  FileDrop.displayName = "FileDrop";
  return FileDrop;
}(Component), _class2.propTypes = {
  /**
   * The id of the input (to link it to its label for a11y)
   */
  id: PropTypes.string,

  /**
   * The content of FileDrop; can be a component or React node.
   * Components receive `isDragAccepted` and `isDragRejected` as props.
   */
  renderLabel: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,

  /**
   * The mime media type/s or file extension/s allowed to be dropped inside
   */
  accept: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),

  /**
   * object with shape: `{
   * text: PropTypes.string,
   * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
   *   }`
   */
  messages: PropTypes.arrayOf(FormPropTypes.message),

  /**
   * Called when clicking on drop area to select files to upload
   */
  onClick: PropTypes.func,

  /**
   * Called when dropping files or when file dialog window exits successfully
   */
  onDrop: PropTypes.func,

  /**
   * Called when dropping allowed files
   */
  onDropAccepted: PropTypes.func,

  /**
   * Called when dropping rejected files
   */
  onDropRejected: PropTypes.func,

  /**
   * Called when dragging files
   * and passing through FileDrop's content for the first time
   */
  onDragEnter: PropTypes.func,

  /**
   * Called when dragging files and passing through FileDrop's content
   */
  onDragOver: PropTypes.func,

  /**
   * Called when dragging files and leaving FileDrop's content
   */
  onDragLeave: PropTypes.func,

  /**
   * Flag to use window.URL.createObjectURL for each dropped file and pass it through file.preview
   */
  shouldEnablePreview: PropTypes.bool,

  /**
   * Flag to allow multiple files to drop at once
   */
  shouldAllowMultiple: PropTypes.bool,

  /**
   * Flag to allow upload of the same file more than once
   */
  shouldAllowRepeats: PropTypes.bool,

  /**
   * the maximum file size allowed
   */
  maxSize: PropTypes.number,

  /**
   * the minimum file size allowed
   */
  minSize: PropTypes.number,

  /**
   * Specifies if interaction with the input is enabled, disabled, or readonly.
   */
  interaction: PropTypes.oneOf(['enabled', 'disabled', 'readonly']),

  /**
   * Set the CSS `display` property on FileInput's outermost element
   */
  display: PropTypes.oneOf(['block', 'inline-block']),

  /**
   * Set the CSS `height` property on FileInput's outermost element
   */
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Set the CSS `width` property on FileInput's outermost element
   */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Set the CSS `maxWidth` property on FileInput's outermost element
   */
  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Set the CSS `minWidth` property on FileInput's outermost element
   */
  minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Valid values are 0, none, auto, xxx-small, xx-small, x-small, small,
   * medium, large, x-large, xx-large. Apply these values via familiar
   * CSS-like shorthand. For example: margin="small auto large".
   */
  margin: ThemeablePropTypes.spacing,

  /* eslint-disable react/require-default-props */

  /**
   * __deprecated: use `renderLabel`__
   */
  label: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),

  /**
   * __deprecated: use `shouldEnablePreview`__
   */
  enablePreview: PropTypes.bool,

  /**
   * __deprecated: use `shouldAllowRepeats`__
   */
  allowRepeatFileSelection: PropTypes.bool,

  /**
   * __deprecated: use `shouldAllowMultiple`__
   */
  allowMultiple: PropTypes.bool
  /* eslint-enable react/require-default-props */

}, _class2.defaultProps = {
  onClick: function onClick(e) {},
  onDrop: function onDrop(accepted, rejected, e) {},
  onDropAccepted: function onDropAccepted(accepted, e) {},
  onDropRejected: function onDropRejected(rejected, e) {},
  onDragEnter: function onDragEnter(e) {},
  onDragOver: function onDragOver(e) {},
  onDragLeave: function onDragLeave(e) {},
  shouldEnablePreview: false,
  shouldAllowMultiple: false,
  shouldAllowRepeats: true,
  maxSize: Infinity,
  minSize: 0,
  // Leave interaction default undefined so that `disabled` and `readOnly` can also be supplied
  interaction: void 0,
  messages: [],
  id: void 0,
  accept: void 0,
  display: 'block',
  height: void 0,
  width: void 0,
  minWidth: void 0,
  maxWidth: void 0,
  margin: void 0
}, _temp)) || _class) || _class) || _class);
export default FileDrop;
export { FileDrop };
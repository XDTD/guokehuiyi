import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { warn as _warn } from "@instructure/console";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { decorator } from '@instructure/ui-decorator';
var experimental = process.env.NODE_ENV == 'production' ? function () {
  return function (Component) {
    return Component;
  };
} : decorator(function (ComposedComponent, experimentalProps, message) {
  return /*#__PURE__*/function (_ComposedComponent) {
    _inherits(ExperimentalComponent, _ComposedComponent);

    var _super = _createSuper(ExperimentalComponent);

    function ExperimentalComponent() {
      _classCallCheck(this, ExperimentalComponent);

      return _super.apply(this, arguments);
    }

    _createClass(ExperimentalComponent, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (!this.props.__dangerouslyIgnoreExperimentalWarnings) {
          if (experimentalProps) {
            warnExperimentalProps(ComposedComponent.displayName, this.props, experimentalProps, message);
          } else {
            warnExperimentalComponent(ComposedComponent.displayName, message);
          }
        }

        if (_get(_getPrototypeOf(ExperimentalComponent.prototype), "componentDidMount", this)) {
          _get(_getPrototypeOf(ExperimentalComponent.prototype), "componentDidMount", this).call(this);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState, prevContext) {
        if (!this.props.__dangerouslyIgnoreExperimentalWarnings) {
          if (experimentalProps) {
            warnExperimentalProps(ComposedComponent.displayName, this.props, experimentalProps, message);
          } else {
            warnExperimentalComponent(ComposedComponent.displayName, message);
          }
        }

        if (_get(_getPrototypeOf(ExperimentalComponent.prototype), "componentDidUpdate", this)) {
          _get(_getPrototypeOf(ExperimentalComponent.prototype), "componentDidUpdate", this).call(this, prevProps, prevState, prevContext);
        }
      }
    }]);

    return ExperimentalComponent;
  }(ComposedComponent);
});

function warnExperimentalProps(displayName, props, experimentalProps) {
  var message = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : '';
  experimentalProps.forEach(function (experimentalProp) {
    /*#__PURE__*/

    /*#__PURE__*/
    _warn(typeof props[experimentalProp] === 'undefined', "[".concat(displayName, "] The `").concat(experimentalProp, "` prop is experimental and its API could change significantly in a future release. ").concat(message));
  });
}

function warnExperimentalComponent(displayName) {
  var message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : '';

  /*#__PURE__*/

  /*#__PURE__*/
  _warn(false, "[".concat(displayName, "] is experimental and its API could change significantly in a future release. ").concat(message));
}

export default experimental;
export {
/**
 * ---
 * category: utilities/react
 * ---
 * Flag React component and component props as experimental.
 * Warnings will display in the console when experimental components/props
 * props are used.
 *
 * ```js
 *  class Example extends Component {
 *    static propTypes = {
 *      currentProp: PropTypes.func
 *    }
 *  }
 *  export default experimental(['experimentalProp'])(Example)
 * ```
 *
 * @module experimental
 * @param {array} experimentalProps (if this argument is null or undefined, the entire component is flagged)
 * @param {string} message
 * @return {function} React component flagged as experimental
 */
experimental };
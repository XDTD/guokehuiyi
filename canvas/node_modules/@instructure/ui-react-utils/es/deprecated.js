import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { warnDeprecated as _warnDeprecated } from "@instructure/console";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { decorator } from '@instructure/ui-decorator';

var deprecated = function () {
  if (process.env.NODE_ENV === 'production') {
    var _deprecated = function _deprecated() {
      return function (ComposedComponent) {
        return ComposedComponent;
      };
    };

    _deprecated.deprecatePropValues = function () {};

    _deprecated.warnDeprecatedProps = function () {};

    _deprecated.warnDeprecatedComponent = function () {};

    _deprecated.changedPackageWarning = function () {};

    return _deprecated;
  }

  var deprecated = decorator(function (ComposedComponent, version, oldProps, message) {
    /**
     * ---
     * category: utilities/react
     * ---
     * Deprecate React component props. Warnings will display in the console when deprecated
     * props are used. Include the version number when the deprecated component will be removed.
     *
     * ```js
     *  class Example extends Component {
     *    static propTypes = {
     *      currentProp: PropTypes.func
     *    }
     *  }
     *  export default deprecated('7.0.0', {
     *    deprecatedProp: 'currentProp',
     *    nowNonExistentProp: true
     *  })(Example)
     * ```
     *
     * @param {string} version
     * @param {object} oldProps (if this argument is null or undefined, the entire component is deprecated)
     * @param {string} message
     * @return {function} React component with deprecated props behavior
     * @module deprecated
     */
    var DeprecatedComponent = /*#__PURE__*/function (_ComposedComponent) {
      _inherits(DeprecatedComponent, _ComposedComponent);

      var _super = _createSuper(DeprecatedComponent);

      function DeprecatedComponent() {
        _classCallCheck(this, DeprecatedComponent);

        return _super.apply(this, arguments);
      }

      return DeprecatedComponent;
    }(ComposedComponent);

    DeprecatedComponent.prototype.componentDidMount = function () {
      if (oldProps) {
        warnDeprecatedProps(ComposedComponent.displayName, version, this.props, oldProps, message);
      } else {
        warnDeprecatedComponent(version, ComposedComponent.displayName, message);
      }

      if (ComposedComponent.prototype.componentDidMount) {
        ComposedComponent.prototype.componentDidMount.call(this);
      }
    };

    DeprecatedComponent.prototype.componentDidUpdate = function (prevProps, prevState, prevContext) {
      if (oldProps) {
        warnDeprecatedProps(ComposedComponent.displayName, version, this.props, oldProps, message);
      } else {
        warnDeprecatedComponent(version, ComposedComponent.displayName, message);
      }

      if (ComposedComponent.prototype.componentDidUpdate) {
        ComposedComponent.prototype.componentDidUpdate.call(this, prevProps, prevState, prevContext);
      }
    };

    return DeprecatedComponent;
  });
  /**
   * ---
   * category: utilities
   * ---
   * Trigger a console warning if the specified prop variant is deprecated
   *
   * @param {function} propType - validates the prop type. Returns null if valid, error otherwise
   * @param {array} deprecated - an array of the deprecated variant names
   * @param {string|function} message - a string with additional information (like the version the prop will be removed) or a function returning a string
   */

  deprecated.deprecatePropValues = function (propType) {
    var deprecated = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var message = arguments.length > 2 ? arguments[2] : void 0;
    return function (props, propName, componentName) {
      var isDeprecatedValue = deprecated.includes(props[propName]);
      var warningMessage = message && typeof message === 'function' ? message({
        props: props,
        propName: propName,
        propValue: props[propName]
      }) : "The '".concat(props[propName], "' value for the `").concat(propName, "` prop is deprecated. ").concat(message || '');

      /*#__PURE__*/

      /*#__PURE__*/
      _warnDeprecated(!isDeprecatedValue, "[".concat(componentName, "] ").concat(warningMessage));

      for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        rest[_key - 3] = arguments[_key];
      }

      return isDeprecatedValue ? null : propType.apply(void 0, [props, propName, componentName].concat(rest));
    };
  };

  function warnDeprecatedProps(componentName, version, props, oldProps) {
    var message = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : '';
    Object.keys(oldProps).forEach(function (oldProp) {
      if (typeof props[oldProp] !== 'undefined') {
        var newProp = typeof oldProps[oldProp] === 'string' ? oldProps[oldProp] : null;
        var newPropMessage = newProp ? ". Use `".concat(newProp, "` instead") : '';

        /*#__PURE__*/

        /*#__PURE__*/
        _warnDeprecated(false, "[".concat(componentName, "] `").concat(oldProp, "` is deprecated and will be removed in version ").concat(version).concat(newPropMessage, ". ").concat(message));
      }
    });
  }

  deprecated.warnDeprecatedProps = warnDeprecatedProps;

  function warnDeprecatedComponent(version, componentName, message) {
    /*#__PURE__*/

    /*#__PURE__*/
    _warnDeprecated(false, "[".concat(componentName, "] is deprecated and will be removed in version ").concat(version, ". ").concat(message || ''));
  }
  /**
   * ---
   * category: utilities
   * ---
   * @param {String} version the version of the package in which the component or function was deprecated
   * @param {String} componentName the displayName of the component or Function.name of the utility function
   * @param {String} message a message to display as a console error in DEV env when condition is false
   */


  deprecated.warnDeprecatedComponent = warnDeprecatedComponent;
  /**
   * ---
   * category: utilities
   * ---
   * @param {String} prevPackage the previous name of the package
   * @param {String} newPackage the new version of the package
   * @return {String} the formatted warning string
   */

  deprecated.changedPackageWarning = function (prevPackage, newPackage) {
    return "It has been moved from @instructure/".concat(prevPackage, " to @instructure/").concat(newPackage, ".");
  };

  return deprecated;
}();

export default deprecated;
export { deprecated };
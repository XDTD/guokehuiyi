"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineSVG = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _uid = require("@instructure/uid");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _theme = _interopRequireDefault(require("./theme"));

var _dec, _dec2, _class, _class2, _temp;

var styles = {
  componentId: 'esvoZ',
  template: function template(theme) {
    return "\n\n.esvoZ_bGBk{fill:currentColor}\n\n.esvoZ_eXrk{display:inline-block}\n\n.esvoZ_cRbP{display:block}\n\n.esvoZ_drOs{color:inherit}\n\n.esvoZ_eCSh{color:".concat(theme.primaryColor || 'inherit', "}\n\n.esvoZ_buuG{color:").concat(theme.secondaryColor || 'inherit', "}\n\n.esvoZ_bFtJ{color:").concat(theme.primaryInverseColor || 'inherit', "}\n\n.esvoZ_dsSB{color:").concat(theme.secondaryInverseColor || 'inherit', "}\n\n.esvoZ_eZal{color:").concat(theme.successColor || 'inherit', "}\n\n.esvoZ_cVUo{color:").concat(theme.brandColor || 'inherit', "}\n\n.esvoZ_eScd{color:").concat(theme.warningColor || 'inherit', "}\n\n.esvoZ_cpQl{color:").concat(theme.errorColor || 'inherit', "}\n\n.esvoZ_cUGG{color:").concat(theme.alertColor || 'inherit', "}");
  },
  'root': 'esvoZ_bGBk',
  'inline': 'esvoZ_eXrk',
  'block': 'esvoZ_cRbP',
  'color--inherit': 'esvoZ_drOs',
  'color--primary': 'esvoZ_eCSh',
  'color--secondary': 'esvoZ_buuG',
  'color--primary-inverse': 'esvoZ_bFtJ',
  'color--secondary-inverse': 'esvoZ_dsSB',
  'color--success': 'esvoZ_eZal',
  'color--brand': 'esvoZ_cVUo',
  'color--warning': 'esvoZ_eScd',
  'color--error': 'esvoZ_cpQl',
  'color--alert': 'esvoZ_cUGG'
};

/**
---
category: components/utilities
---
**/
var InlineSVG = (_dec = (0, _testable.testable)(), _dec2 = (0, _themeable.themeable)(_theme.default, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(InlineSVG, _Component);

  var _super = (0, _createSuper2.default)(InlineSVG);

  function InlineSVG() {
    var _this;

    (0, _classCallCheck2.default)(this, InlineSVG);
    _this = _super.call(this);
    _this.titleId = (0, _uid.uid)('InlineSVG-title');
    _this.descId = (0, _uid.uid)('InlineSVG-desc');
    return _this;
  }

  (0, _createClass2.default)(InlineSVG, [{
    key: "renderTitle",
    value: function renderTitle() {
      var title = this.props.title;
      return title ? /*#__PURE__*/_react.default.createElement("title", {
        id: this.titleId
      }, title) : null;
    }
  }, {
    key: "renderDesc",
    value: function renderDesc(desc) {
      return desc ? /*#__PURE__*/_react.default.createElement("desc", {
        id: this.descId
      }, desc) : null;
    }
  }, {
    key: "renderContent",
    value: function renderContent() {
      if (this.props.src) {
        var src = InlineSVG.prepareSrc(this.props.src);
        return /*#__PURE__*/_react.default.createElement("g", {
          role: "presentation",
          dangerouslySetInnerHTML: {
            __html: src
          } // eslint-disable-line react/no-danger

        });
      } else {
        return /*#__PURE__*/_react.default.createElement("g", {
          role: "presentation"
        }, this.props.children);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          style = _this$props.style,
          title = _this$props.title,
          description = _this$props.description,
          focusable = _this$props.focusable,
          children = _this$props.children,
          src = _this$props.src,
          color = _this$props.color,
          props = (0, _objectWithoutProperties2.default)(_this$props, ["style", "title", "description", "focusable", "children", "src", "color"]); // if width or height are 'auto', don't supply anything to the SVG

      var width = this.props.width === 'auto' ? null : this.props.width;
      var height = this.props.height === 'auto' ? null : this.props.height;
      return /*#__PURE__*/_react.default.createElement("svg", Object.assign({}, parseAttributes(this.props.src), (0, _omitProps.omitProps)(this.props, InlineSVG.propTypes, ['inline']), {
        style: (0, _objectSpread2.default)({}, style, {
          width: width,
          height: height
        }),
        width: width,
        height: height,
        "aria-hidden": title ? null : 'true',
        "aria-labelledby": this.labelledBy,
        role: this.role,
        focusable: focusable ? 'true' : 'false',
        className: (0, _classnames2.default)((_classnames = {}, (0, _defineProperty2.default)(_classnames, styles.root, true), (0, _defineProperty2.default)(_classnames, styles["color--".concat(color)], color !== 'auto'), (0, _defineProperty2.default)(_classnames, styles.inline, this.props.inline), (0, _defineProperty2.default)(_classnames, styles.block, !this.props.inline), (0, _defineProperty2.default)(_classnames, props.className, props.className), _classnames))
      }), this.renderTitle(), this.renderDesc(description), this.renderContent());
    }
  }, {
    key: "role",
    get: function get() {
      if (this.props.title) {
        return 'img';
      } else {
        return 'presentation';
      }
    }
  }, {
    key: "labelledBy",
    get: function get() {
      var ids = [];

      if (this.props.title) {
        ids.push(this.titleId);
      }

      if (this.props.description) {
        ids.push(this.descId);
      }

      return ids.length > 0 ? ids.join(' ') : null;
    }
  }]);
  InlineSVG.displayName = "InlineSVG";
  return InlineSVG;
}(_react.Component), _class2.propTypes = {
  children: _propTypes.default.node,
  src: _propTypes.default.string,
  title: _propTypes.default.string,
  description: _propTypes.default.string,
  focusable: _propTypes.default.bool,

  /**
   * To let the SVG expand to fill its container, use `auto`
   */
  width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * To let the SVG expand to fill its container, use `auto`
   */
  height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  inline: _propTypes.default.bool,
  color: _propTypes.default.oneOf(['inherit', 'primary', 'secondary', 'primary-inverse', 'secondary-inverse', 'success', 'error', 'alert', 'warning', 'brand', 'auto'])
}, _class2.defaultProps = {
  focusable: false,
  src: '',
  title: '',
  description: '',
  inline: true,
  children: null,
  width: '1em',
  height: '1em',
  color: 'inherit'
}, _class2.prepareSrc = function (src) {
  var pattern = /<svg[^>]*>((.|[\n\r])*)<\/svg>/;
  var matches = pattern.exec(src);
  return matches ? matches[1] : src;
}, _temp)) || _class) || _class);
exports.InlineSVG = InlineSVG;

function parseAttributes(src) {
  var attributes = {};
  var SVGAttributesRegExp = /<svg\s+([^>]*)\s*>/;
  var namesAndValuesRegExp = /(\S+)=["']?((?:.(?!["']?\s+(?:\S+)=|[>"']))+.)["']?/g;

  if (typeof src === 'string') {
    var attributesMatches = SVGAttributesRegExp.exec(src);
    var attributesString = attributesMatches ? attributesMatches[1] : '';
    var excludes = ['xmlns', 'xmlns:xlink', 'version'];
    var match = namesAndValuesRegExp.exec(attributesString);

    while (match != null) {
      if (excludes.indexOf(match[1]) === -1) {
        attributes[match[1]] = match[2] || (match[3] ? match[3] : match[4] ? match[4] : match[5]) || match[1]; // eslint-disable-line no-nested-ternary, max-len
      }

      match = namesAndValuesRegExp.exec(attributesString);
    }
  }

  return attributes;
}

var _default = InlineSVG;
exports.default = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFontSize = getFontSize;
exports.default = void 0;

var _canUseDOM = require("./canUseDOM");

var _ownerDocument = require("./ownerDocument");

var _getComputedStyle = require("./getComputedStyle");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var COMPUTED_CACHE = {};
/**
 * ---
 * category: utilities/DOM
 * ---
 *
 * Gets font size in px
 *
 * @param {ReactComponent|DomNode} el - component or DOM node
 * @returns {Object} font size in px
 */

function getFontSize(el, ignoreCache) {
  if (!_canUseDOM.canUseDOM) {
    return 16;
  }

  var container = el || (0, _ownerDocument.ownerDocument)(el).documentElement; // return the cached font size if it's there

  if (!ignoreCache && COMPUTED_CACHE[container]) {
    return COMPUTED_CACHE[container];
  }

  var fontSize = parseInt((0, _getComputedStyle.getComputedStyle)(container).getPropertyValue('font-size')); // cache the computed font size so that we don't have to compute it again

  COMPUTED_CACHE[container] = fontSize;
  return fontSize;
}

var _default = getFontSize;
exports.default = _default;
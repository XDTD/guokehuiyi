import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component, Children } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { Grid } from '@instructure/ui-grid';
import { themeable } from '@instructure/ui-themeable';
import { pickProps, omitProps } from '@instructure/ui-react-utils';
import { FormFieldLayout } from '../FormFieldLayout';
import { FormPropTypes } from '../FormPropTypes';
var styles = {
  componentId: 'efIdg',
  template: function template(theme) {
    return "\n\n.efIdg_cLpc{border:".concat(theme.borderWidth || 'inherit', " ").concat(theme.borderStyle || 'inherit', " ").concat(theme.borderColor || 'inherit', ";border-radius:").concat(theme.borderRadius || 'inherit', ";display:block}\n\n.efIdg_cLpc.efIdg_fszt{border-color:").concat(theme.errorBorderColor || 'inherit', ";padding:").concat(theme.errorFieldsPadding || 'inherit', "}\n\n.efIdg_cLpc.efIdg_ywdX{cursor:not-allowed;opacity:0.6;pointer-events:none}");
  },
  'fields': 'efIdg_cLpc',
  'invalid': 'efIdg_fszt',
  'disabled': 'efIdg_ywdX'
};
import theme from './theme';
/**
---
category: components
---
**/

var FormFieldGroup = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(FormFieldGroup, _Component);

  var _super = _createSuper(FormFieldGroup);

  function FormFieldGroup() {
    _classCallCheck(this, FormFieldGroup);

    return _super.apply(this, arguments);
  }

  _createClass(FormFieldGroup, [{
    key: "renderColumns",
    value: function renderColumns() {
      return Children.map(this.props.children, function (child, index) {
        return child ? /*#__PURE__*/React.createElement(Grid.Col, {
          width: child.props && child.props.width ? 'auto' : null,
          key: index
        }, child) : null;
      });
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      return /*#__PURE__*/React.createElement(Grid, {
        colSpacing: this.props.colSpacing,
        rowSpacing: this.props.rowSpacing,
        vAlign: this.props.vAlign,
        startAt: this.props.startAt || (this.props.layout === 'columns' ? 'medium' : null)
      }, /*#__PURE__*/React.createElement(Grid.Row, null, this.renderColumns()));
    }
  }, {
    key: "renderFields",
    value: function renderFields() {
      var _classnames;

      return /*#__PURE__*/React.createElement("span", {
        key: "fields",
        className: classnames((_classnames = {}, _defineProperty(_classnames, styles.fields, true), _defineProperty(_classnames, styles.invalid, this.invalid), _defineProperty(_classnames, styles.disabled, this.props.disabled), _classnames))
      }, this.renderChildren());
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(FormFieldLayout, Object.assign({}, omitProps(this.props, FormFieldGroup.propTypes), pickProps(this.props, FormFieldLayout.propTypes), {
        vAlign: this.props.vAlign,
        layout: this.props.layout === 'inline' ? 'inline' : 'stacked',
        label: this.props.description,
        "aria-disabled": this.props.disabled ? 'true' : null,
        "aria-invalid": this.invalid ? 'true' : null
      }), this.renderFields());
    }
  }, {
    key: "invalid",
    get: function get() {
      return this.props.messages && this.props.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }]);

  FormFieldGroup.displayName = "FormFieldGroup";
  return FormFieldGroup;
}(Component), _class2.propTypes = {
  description: PropTypes.node.isRequired,

  /**
  * the element type to render as
  */
  as: PropTypes.elementType,

  /**
  * object with shape: `{
  * text: PropTypes.string,
  * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *   }`
  */
  messages: PropTypes.arrayOf(FormPropTypes.message),

  /**
  * id for the form field messages
  */
  messagesId: PropTypes.string,
  disabled: PropTypes.bool,
  children: PropTypes.node,
  layout: PropTypes.oneOf(['stacked', 'columns', 'inline']),
  rowSpacing: PropTypes.oneOf(['none', 'small', 'medium', 'large']),
  colSpacing: PropTypes.oneOf(['none', 'small', 'medium', 'large']),
  vAlign: PropTypes.oneOf(['top', 'middle', 'bottom']),
  startAt: PropTypes.oneOf(['small', 'medium', 'large', 'x-large', null])
}, _class2.defaultProps = {
  children: null,
  layout: void 0,
  startAt: void 0,
  messages: void 0,
  messagesId: void 0,
  as: 'fieldset',
  disabled: false,
  rowSpacing: 'medium',
  colSpacing: 'small',
  vAlign: 'middle'
}, _temp)) || _class);
export default FormFieldGroup;
export { FormFieldGroup };
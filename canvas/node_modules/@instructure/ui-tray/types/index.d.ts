import * as React from 'react';

export type TraySize = "x-small" | "small" | "regular" | "medium" | "large";

export type TrayPlacement = "top" | "bottom" | "start" | "end";

export type TrayDefaultFocusElement = React.ReactElement<any> | ((...args: any[])=>any);

export type TrayMountNode = any | ((...args: any[])=>any);

export type TrayInsertAt = "bottom" | "top";

export type TrayLiveRegion = React.ReactElement<any>[] | React.ReactElement<any> | ((...args: any[])=>any);

export interface TrayProps {
    label: string;
    children?: React.ReactNode;
    /**
     * The size (width) of the `<Tray />` when placement is `start` or `end`
     */
    size?: TraySize;
    /**
     * Placement to determine where the `<Tray />` should display in the viewport
     */
    placement?: TrayPlacement;
    /**
     * Whether or not the `<Tray />` is open
     */
    open?: boolean;
    /**
     * An element or a function returning an element to focus by default
     */
    defaultFocusElement?: TrayDefaultFocusElement;
    /**
     * A function that returns a reference to the content element
     */
    contentRef?: (...args: any[])=>any;
    /**
     * Whether focus should be contained within the `<Tray/>` when it is open
     */
    shouldContainFocus?: boolean;
    /**
     * Whether focus should be restored when the `<Tray/>` is closed
     */
    shouldReturnFocus?: boolean;
    /**
     * Should the `<Tray />` hide when clicks occur outside the content
     */
    shouldCloseOnDocumentClick?: boolean;
    /**
     * Callback fired when `<Tray />` content has been mounted in the DOM
     */
    onOpen?: (...args: any[])=>any;
    /**
     * Callback fired when `<Tray />` has been unmounted from the DOM
     */
    onClose?: (...args: any[])=>any;
    /**
     * Callback fired when the `<Tray />` is requesting to be closed
     */
    onDismiss?: (...args: any[])=>any;
    /**
     * An element or a function returning an element to use as the mount node
     * for the `<Tray />` (defaults to `document.body`)
     */
    mountNode?: TrayMountNode;
    /**
     * Insert the element at the 'top' of the mountNode or at the 'bottom'
     */
    insertAt?: TrayInsertAt;
    /**
     * An element, function returning an element, or array of elements that will not be hidden from
     * the screen reader when the `<Tray />` is open
     */
    liveRegion?: TrayLiveRegion;
    /**
     * Callback fired when the <Tray /> transitions in/out
     */
    onTransition?: (...args: any[])=>any;
    /**
     * Callback fired before the <Tray /> transitions in
     */
    onEnter?: (...args: any[])=>any;
    /**
     * Callback fired as the <Tray /> begins to transition in
     */
    onEntering?: (...args: any[])=>any;
    /**
     * Callback fired after the <Tray /> finishes transitioning in
     */
    onEntered?: (...args: any[])=>any;
    /**
     * Callback fired right before the <Tray /> transitions out
     */
    onExit?: (...args: any[])=>any;
    /**
     * Callback fired as the <Tray /> begins to transition out
     */
    onExiting?: (...args: any[])=>any;
    /**
     * Callback fired after the <Tray /> finishes transitioning out
     */
    onExited?: (...args: any[])=>any;
    /**
     * Should the `<Tray />` have a border
     */
    border?: boolean;
    /**
     * Should the `<Tray />` have a box shadow
     */
    shadow?: boolean;
}

export class Tray extends React.Component<TrayProps, any> {
    render(): JSX.Element;

}


"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log = exports.debug = exports.assert = exports.info = exports.warnDeprecated = exports.warn = exports.error = void 0;

var _react = _interopRequireDefault(require("react"));

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var loggedInitialDeprecationWarning = false;
/* eslint-disable no-console */

function getRenderStack() {
  var renderStack = '';

  try {
    renderStack = _react.default.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactDebugCurrentFrame.getStackAddendum();
  } catch (error) {// log happened outside a react render or couldn't figure out where in the render stack we are.
  }

  return renderStack;
}

function logMessage(level, withRenderStack, condition, message) {
  if (process.env.NODE_ENV !== 'production' && !condition) {
    if (typeof console[level] === 'function') {
      var _console;

      var renderStack = withRenderStack ? getRenderStack() : '';

      for (var _len = arguments.length, args = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        args[_key - 4] = arguments[_key];
      }

      (_console = console)[level].apply(_console, ["Warning: ".concat(message)].concat(args, [renderStack]));
    } else {
      throw new Error("'".concat(level, "' is not a valid console method!"));
    }
  }
}

function logDeprecated(condition, message) {
  if (!process.env.OMIT_INSTUI_DEPRECATION_WARNINGS) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    logMessage.apply(void 0, ['warn', true, condition, message].concat(args));
  } else if (!condition && !loggedInitialDeprecationWarning) {
    loggedInitialDeprecationWarning = true;
    logMessage('warn', false, condition, ['There are Instructure UI deprecation warnings that are being hidden because the `OMIT_INSTUI_DEPRECATION_WARNINGS` environment variable is set. Remove or unset this variable to see the full list of warnings in your console.', 'These warnings will give you advance notice of breaking changes and upgrade guidance to keep your code up to date with the latest Instructure UI versions.'].join('\n\n'));
  }
}

var error = function error() {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  return logMessage.apply(void 0, ['error', true].concat(args));
};

exports.error = error;

var warn = function warn() {
  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }

  return logMessage.apply(void 0, ['warn', true].concat(args));
};

exports.warn = warn;

var warnDeprecated = function warnDeprecated() {
  return logDeprecated.apply(void 0, arguments);
};

exports.warnDeprecated = warnDeprecated;

var info = function info() {
  var _console2;

  return (_console2 = console).info.apply(_console2, arguments);
};

exports.info = info;

var assert = function assert() {
  var _console3;

  return (_console3 = console).assert.apply(_console3, arguments);
};

exports.assert = assert;

var debug = function debug() {
  var _console4;

  return (_console4 = console).debug.apply(_console4, arguments);
};

exports.debug = debug;

var log = function log() {
  var _console5;

  return (_console5 = console).log.apply(_console5, arguments);
};
/* eslint-enable no-console */


exports.log = log;
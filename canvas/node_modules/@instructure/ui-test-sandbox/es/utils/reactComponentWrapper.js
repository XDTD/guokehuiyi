import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';

function getOwnerDocument(element) {
  return element.ownerDocument || document;
}

var ReactComponentWrapper = /*#__PURE__*/function () {
  function ReactComponentWrapper() {
    _classCallCheck(this, ReactComponentWrapper);
  }

  _createClass(ReactComponentWrapper, [{
    key: "mount",
    value: function mount(element) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var type = element.type,
          ref = element.ref,
          props = element.props;
      var Wrapper = createMountWrapper(element, options);
      var doc = getOwnerDocument(element);
      this.unmount();
      this._mountNode = doc.createElement('div');

      this._mountNode.setAttribute('data-ui-test-utils', 'true');

      doc.body.appendChild(this._mountNode);
      var result, rendered;

      var wrapperRef = function wrapperRef(wrapper) {
        if (wrapper && !rendered) {
          result = {
            setProps: function setProps(newProps) {
              return doAsync(function () {
                wrapper.setChildProps(newProps);
              });
            },
            setContext: function setContext(newContext) {
              return doAsync(function () {
                wrapper.setChildContext(newContext);
              });
            },
            getDOMNode: function getDOMNode() {
              return wrapper.getDOMNode();
            }
          };
          rendered = true;
        }

        if (typeof ref === 'function') {
          ref(wrapper);
        }
      };

      var Element = React.createElement(Wrapper, {
        Component: type,
        props: _objectSpread({}, props, {}, options.props),
        context: options.context,
        ref: wrapperRef
      });

      var doAsync = function doAsync(actionFn) {
        return new Promise(function (resolve, reject) {
          var error;
          setTimeout(function () {
            try {
              actionFn();
            } catch (e) {
              // catch unhandeled errors
              error = e;
            }

            if (error) {
              return reject(error);
            } else {
              return resolve(result);
            }
          });
        });
      };

      return doAsync(function () {
        ReactDOM.render(Element, _this._mountNode);
      });
    }
  }, {
    key: "unmount",
    value: function unmount() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        try {
          var result;

          if (_this2._mountNode) {
            result = ReactDOM.unmountComponentAtNode(_this2._mountNode);
            _this2._mountNode && _this2._mountNode.remove();
          }

          resolve(result);
        } catch (err) {
          reject(err);
        }
      });
    }
  }]);

  return ReactComponentWrapper;
}();

function createMountWrapper(element) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};

  var WrapperComponent = /*#__PURE__*/function (_Component) {
    _inherits(WrapperComponent, _Component);

    var _super = _createSuper(WrapperComponent);

    function WrapperComponent() {
      var _this3;

      _classCallCheck(this, WrapperComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this3 = _super.call.apply(_super, [this].concat(args));
      var _this3$props = _this3.props,
          props = _this3$props.props,
          context = _this3$props.context;
      _this3.state = {
        props: props,
        context: context
      };
      return _this3;
    }

    _createClass(WrapperComponent, [{
      key: "getDOMNode",
      value: function getDOMNode() {
        try {
          return ReactDOM.findDOMNode(this);
        } catch (e) {
          console.warn("[ui-test-utils] ".concat(e));
          return null;
        }
      }
    }, {
      key: "setChildProps",
      value: function setChildProps(newProps) {
        var _this4 = this;

        var oldProps = this.state.props;

        var props = _objectSpread({}, oldProps, {}, newProps);

        return new Promise(function (resolve) {
          return _this4.setState({
            props: props
          }, resolve);
        });
      }
    }, {
      key: "setChildContext",
      value: function setChildContext(newContext) {
        var _this5 = this;

        var oldContext = this.state.context;

        var context = _objectSpread({}, oldContext, {}, newContext);

        return new Promise(function (resolve) {
          return _this5.setState({
            context: context
          }, resolve);
        });
      }
    }, {
      key: "render",
      value: function render() {
        var Component = this.props.Component;
        var props = this.state.props;

        var componentRef = props.componentRef,
            componentProps = _objectWithoutProperties(props, ["componentRef"]);

        return /*#__PURE__*/React.createElement(Component, Object.assign({
          ref: componentRef
        }, componentProps));
      }
    }]);

    WrapperComponent.displayName = "WrapperComponent";
    return WrapperComponent;
  }(Component);

  WrapperComponent.propTypes = {
    Component: PropTypes.elementType.isRequired,
    props: PropTypes.object.isRequired,
    context: PropTypes.object
  };
  WrapperComponent.defaultProps = {
    context: {}
  };

  if (element.type.contextTypes) {
    var childContextTypes = _objectSpread({}, element.type.contextTypes);

    WrapperComponent.prototype.getChildContext = function getChildContext() {
      return this.state.context;
    };

    WrapperComponent.childContextTypes = childContextTypes;
  }

  return WrapperComponent;
}

var reactComponentWrapper = new ReactComponentWrapper();
export { reactComponentWrapper as ReactComponentWrapper };
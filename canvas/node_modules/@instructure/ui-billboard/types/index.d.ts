import * as React from 'react';

export type BillboardHero = React.ReactElement<any> | ((...args: any[])=>any);

export type BillboardSize = "small" | "medium" | "large";

export type BillboardHeadingAs = "h1" | "h2" | "h3" | "span";

export type BillboardHeadingLevel = "h1" | "h2" | "h3" | "h4";

export type BillboardMessage = React.ReactNode | ((...args: any[])=>any);

export interface BillboardProps {
    /**
     * Provide an <Img> component or Instructure Icon for the hero image
     */
    hero?: BillboardHero;
    /**
     * If you're using an icon, this prop will size it. Also sets the font-size
     * of the headline and message.
     */
    size?: BillboardSize;
    /**
     * the element type to render as
     */
    as?: any;
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (...args: any[])=>any;
    /**
     * The headline for the Billboard. Is styled as an h1 element by default
     */
    heading?: string;
    /**
     * Choose the appropriately semantic tag for the heading
     */
    headingAs?: BillboardHeadingAs;
    /**
     * Choose the font-size for the heading (see the Heading component)
     */
    headingLevel?: BillboardHeadingLevel;
    /**
     * Instructions or information for the Billboard. Note: you should not pass
     * interactive content to this prop if you are also providing an `href` or
     * `onClick`. That would cause the Billboard to render as a button or link
     * and would result in nested interactive content.
     */
    message?: BillboardMessage;
    /**
     * If you add an onClick prop, the Billboard renders as a clickable button
     */
    onClick?: (...args: any[])=>any;
    /**
     * If `href` is provided, Billboard will render as a link
     */
    href?: string;
    /**
     * Whether or not to disable the billboard
     */
    disabled?: boolean;
    /**
     * Works just like disabled but keeps the same styles as if it were active
     */
    readOnly?: boolean;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
}

export class Billboard extends React.Component<BillboardProps, any> {
    render(): JSX.Element;

}


import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { controllable } from '@instructure/ui-prop-types';
import { DateTime, I18nPropTypes, Locale } from '@instructure/ui-i18n';
import { FormPropTypes, FormFieldGroup } from '@instructure/ui-form-field';
import { deprecated } from '@instructure/ui-react-utils';
import { testable } from '@instructure/ui-testable';
import { DateInput } from '../DateInput';
import { TimeInput } from '../TimeInput';
/**
---
category: components/deprecated
---
**/

var DateTimeInput = (_dec = testable(), _dec2 = deprecated('7.0.0', null, 'Use @instructure/ui-date-input and @instructure/ui-select instead'), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(DateTimeInput, _Component);

  var _super = _createSuper(DateTimeInput);

  function DateTimeInput(props, context) {
    var _this;

    _classCallCheck(this, DateTimeInput);

    _this = _super.call(this, props, context);

    _this.handleChange = function (e, value) {
      var _this$parseISO = _this.parseISO(value),
          iso = _this$parseISO.iso,
          message = _this$parseISO.message;

      if (iso && iso !== _this.state.iso || !message) {
        if (_this.props.onChange) {
          _this.props.onChange(e, iso);
        }

        return _this.setState({
          iso: iso,
          message: message
        });
      }

      return _this.setState({
        message: message
      });
    };

    _this.handleDateChange = function (e, isoValue, rawValue, rawConversionFailed, dateIsDisabled) {
      var date = rawConversionFailed ? rawValue : isoValue;

      var value = _this.combineDateAndTime(date, _this.state.iso);

      _this.handleChange(e, value);
    };

    _this.handleTimeChange = function (e, option) {
      var date = _this.state.iso;

      if (date) {
        var value = option && option.value || '';

        _this.handleChange(e, value);
      } else {
        var label = option && option.label || '';

        _this.setState({
          message: _this.getErrorMessage('', label)
        });
      }
    };

    _this.handleBlur = function (e) {
      if (_this.props.required && !_this.state.iso) {
        _this.setState({
          message: _this.getErrorMessage()
        });
      } // when TABbing from the DateInput to TimeInput or visa-versa, the blur
      // happens on the target before the relatedTarget gets focus.
      // The timeout gives it a moment for that to happen


      if (typeof _this.props.onBlur === 'function') {
        window.setTimeout(function () {
          if (!_this.focused) {
            _this.props.onBlur(e);
          }
        }, 0);
      }
    };

    _this.dateInputComponentRef = function (node) {
      _this._dateInput = node;
    };

    _this.timeInputComponentRef = function (node) {
      _this._timeInput = node;
    };

    _this.state = _objectSpread({}, _this.parseISO(props.value || props.defaultValue));
    _this._dateInput = null;
    _this._timeInput = null;
    return _this;
  }

  _createClass(DateTimeInput, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      var valueChanged = nextProps.value !== this.props.value || nextProps.defaultValue !== this.props.defaultValue;
      var isUpdated = valueChanged || nextProps.locale !== this.props.locale || nextProps.timezone !== this.props.timezone;

      if (isUpdated) {
        this.setState(function (prevState) {
          var iso = valueChanged ? nextProps.value || nextProps.defaultValue : prevState.iso;
          return _objectSpread({}, _this2.parseISO(iso, nextProps.locale, nextProps.timezone));
        });
      }
    }
  }, {
    key: "getErrorMessage",
    value: function getErrorMessage(rawDateValue, rawTimeValue) {
      var invalidDateTimeMessage = this.props.invalidDateTimeMessage;
      var text = typeof invalidDateTimeMessage === 'function' ? invalidDateTimeMessage(rawDateValue, rawTimeValue) : invalidDateTimeMessage;
      return text ? {
        text: text,
        type: 'error'
      } : null;
    }
  }, {
    key: "parseISO",
    value: function parseISO() {
      var iso = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : '';
      var locale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.locale;
      var timezone = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.timezone;
      var parsed = DateTime.parse(iso, locale, timezone);

      if (parsed.isValid()) {
        return {
          iso: parsed.toISOString(true),
          message: {
            type: 'success',
            text: parsed.format(this.props.messageFormat)
          }
        };
      }

      return {
        iso: void 0,
        message: iso ? this.getErrorMessage.apply(this, _toConsumableArray(iso.split('T'))) : null
      };
    }
  }, {
    key: "combineDateAndTime",
    value: function combineDateAndTime(dateISO, timeISO) {
      if (!dateISO) {
        return '';
      }

      if (!timeISO) {
        return dateISO;
      }

      var date = dateISO.replace(/T.*/, '');
      var time = timeISO.replace(/.*T/, '');
      return "".concat(date, "T").concat(time);
    }
  }, {
    key: "focus",

    /**
     * Focus me.
     *
     * When this `DateTimeInput` gets focus, we hand it off to the
     * underlying `DateInput`.
     */
    value: function focus() {
      if (this._dateInput) {
        this._dateInput.focus();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          description = _this$props.description,
          datePlaceholder = _this$props.datePlaceholder,
          dateLabel = _this$props.dateLabel,
          dateNextLabel = _this$props.dateNextLabel,
          datePreviousLabel = _this$props.datePreviousLabel,
          dateFormat = _this$props.dateFormat,
          dateInputRef = _this$props.dateInputRef,
          timeLabel = _this$props.timeLabel,
          timeFormat = _this$props.timeFormat,
          timeStep = _this$props.timeStep,
          timeInputRef = _this$props.timeInputRef,
          locale = _this$props.locale,
          timezone = _this$props.timezone,
          messages = _this$props.messages,
          layout = _this$props.layout,
          required = _this$props.required,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly;
      var _this$state = this.state,
          iso = _this$state.iso,
          message = _this$state.message;
      return /*#__PURE__*/React.createElement(FormFieldGroup, {
        description: description,
        colSpacing: "medium",
        rowSpacing: "small",
        layout: layout,
        vAlign: "top",
        messages: [].concat(_toConsumableArray(message ? [message] : []), _toConsumableArray(messages || []))
      }, /*#__PURE__*/React.createElement(DateInput, {
        dateValue: iso,
        onDateChange: this.handleDateChange,
        onBlur: this.handleBlur,
        ref: this.dateInputComponentRef,
        inputRef: dateInputRef,
        placeholder: datePlaceholder,
        label: dateLabel,
        locale: locale,
        format: dateFormat,
        nextLabel: dateNextLabel,
        previousLabel: datePreviousLabel,
        timezone: timezone,
        validationFeedback: false,
        required: required,
        disabled: disabled,
        readOnly: readOnly
      }), /*#__PURE__*/React.createElement(TimeInput, {
        value: iso,
        onChange: this.handleTimeChange,
        onBlur: this.handleBlur,
        ref: this.timeInputComponentRef,
        label: timeLabel,
        locale: locale,
        format: timeFormat,
        step: timeStep,
        timezone: timezone,
        inputRef: timeInputRef,
        disabled: disabled,
        readOnly: readOnly
      }));
    }
  }, {
    key: "locale",
    get: function get() {
      return this.props.locale || this.context.locale || Locale.browserLocale();
    }
  }, {
    key: "timezone",
    get: function get() {
      return this.props.timezone || this.context.timezone || DateTime.browserTimeZone();
    }
  }, {
    key: "focused",
    get: function get() {
      return this._dateInput && this._dateInput.focused || this._timeInput && this._timeInput.focused;
    }
  }]);

  DateTimeInput.displayName = "DateTimeInput";
  return DateTimeInput;
}(Component), _class2.propTypes = {
  /**
  * The label over the composite `DateTimeInput` component
  **/
  description: PropTypes.node.isRequired,

  /**
  * The label over the Date Input
  **/
  dateLabel: PropTypes.string.isRequired,

  /**
  * The label to put on the previous month button of the calendar.
  **/
  datePreviousLabel: PropTypes.string.isRequired,

  /**
  * The label to put on the next month button of the calendar.
  **/
  dateNextLabel: PropTypes.string.isRequired,

  /**
  * HTML placeholder text to display when the date input has no value.
  * This should be hint text, not a label replacement.
  **/
  datePlaceholder: PropTypes.string,

  /**
  * The format of the date shown in the `DateInput` when a date is selected.
  * Valid formats are compatible with
  * [moment.js formats](https://momentjs.com/docs/#/displaying/format/),
  * including localized formats.
  *
  * If omitted, deferrs to the underlying `DateInput`'s default.
  **/
  dateFormat: PropTypes.string,

  /**
  * The label over the time input
  **/
  timeLabel: PropTypes.string.isRequired,

  /**
   * The number of minutes to increment by when generating the allowable time options.
   */
  timeStep: PropTypes.oneOf([5, 10, 15, 20, 30, 60]),

  /**
  * The format of the time shown in the `TimeInput` when a time is selected.
  * Valid formats are compatible with
  * [moment.js formats](https://momentjs.com/docs/#/displaying/format/),
  * including localized formats.
  *
  * If omitted, deferrs to the underlying `TimeInput`'s default.
  **/
  timeFormat: PropTypes.string,

  /**
  * A standard language identifier.
  *
  * See [moment.js i18n](https://momentjs.com/docs/#/i18n/) for more details.
  *
  * This property can also be set via a context property and if both are set then the component property takes
  * precedence over the context property.
  *
  * The web browser's locale will be used if no value is set via a component property or a context
  * property.
  **/
  locale: PropTypes.string,

  /**
  * A timezone identifier in the format: Area/Location
  *
  * See [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the list
  * of possible options.
  *
  * This property can also be set via a context property and if both are set then the component property takes
  * precedence over the context property.
  *
  * The web browser's timezone will be used if no value is set via a component property or a context
  * property.
  **/
  timezone: PropTypes.string,

  /**
  * The message shown to the user when the data is invalid.
  * If a string, shown to the user anytime the input is invalid.
  *
  * If a function, receives 2 parameters:
  *  *rawDateValue*: the string entered as a date by the user,
  *  *rawTimeValue*: the string entered as a time by the user.
  *
  * Currently, times must be selected from a list, it can never be incorrect,
  * Though `invalidDateTimeMessage` will be called if the user selects a time without
  * setting the date.
  *
  * Either parameter is undefined if the user has not entered anything,
  * which you can use to test for no input if the `DateTimeInput` is required.
  **/
  invalidDateTimeMessage: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,

  /**
  * Messages my parent would like displayed
  * object with shape: `{
  *   text: PropTypes.string,
  *   type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *  }
  */
  messages: PropTypes.arrayOf(FormPropTypes.message),

  /**
  * This format of the composite date-time when displayed in messages.
  * Valid formats are compatible with
  * [moment.js formats](https://momentjs.com/docs/#/displaying/format/),
  * including localized formats.
  **/
  messageFormat: PropTypes.string,

  /**
  * Vertically stacked, horizontally arranged in 2 columns, or inline.
  * See [FormFieldGroup](#FormFieldGroup) for details.
  **/
  layout: PropTypes.oneOf(['stacked', 'columns', 'inline']),

  /**
  * An ISO 8601 formatted date string representing the current date-time
  * (must be accompanied by an onChange prop).
  **/
  value: controllable(I18nPropTypes.iso8601, 'onChange'),

  /**
  * An ISO 8601 formatted date string to use if `value` isn't provided.
  **/
  defaultValue: I18nPropTypes.iso8601,
  required: PropTypes.bool,

  /**
   * Whether or not to disable the inputs
   */
  disabled: PropTypes.bool,

  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: PropTypes.bool,

  /**
  * Called when the date-time value has changed.
  * The passed in parameters are
  * *event*: the triggering event (which may be from the underlying
  * `DateInput` or `TimeInput`), *isoValue*: the new date value in ISO 8601 format.
  **/
  onChange: PropTypes.func,

  /**
  * The <input> element where the date is entered.
  **/
  dateInputRef: PropTypes.func,

  /**
  * The <input> element where the time is entered.
  **/
  timeInputRef: PropTypes.func,

  /**
   * onBlur event handler for when focus leaves DateTimeInput.
   * Does not fire when focus moves between DateInput and TimeInput within the component
   */
  onBlur: PropTypes.func
}, _class2.defaultProps = {
  layout: 'inline',
  timeStep: 30,
  messageFormat: 'LLL',
  required: false,
  disabled: false,
  readOnly: false,
  onBlur: void 0,
  timeInputRef: void 0,
  dateInputRef: void 0,
  onChange: void 0,
  defaultValue: void 0,
  value: void 0,
  messages: void 0,
  timezone: void 0,
  locale: void 0,
  timeFormat: void 0,
  datePlaceholder: void 0,
  dateFormat: void 0
}, _class2.contextTypes = {
  locale: PropTypes.string,
  timezone: PropTypes.string
}, _temp)) || _class) || _class);
export default DateTimeInput;
export { DateTimeInput };
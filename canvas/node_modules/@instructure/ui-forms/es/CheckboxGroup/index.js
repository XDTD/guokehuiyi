import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { controllable, Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import { FormPropTypes } from '@instructure/ui-form-field';
import { deprecated } from '@instructure/ui-react-utils';
import { CheckboxGroup as UICheckboxGroup } from '@instructure/ui-checkbox';
import { Checkbox } from '../Checkbox';
/**
---
category: components/deprecated
id: DeprecatedCheckboxGroup
---
**/

var CheckboxGroup = (_dec = deprecated('7.0.0', null, 'Use CheckboxGroup from ui-checkbox instead.'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(CheckboxGroup, _Component);

  var _super = _createSuper(CheckboxGroup);

  function CheckboxGroup() {
    var _this;

    _classCallCheck(this, CheckboxGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._checkboxGroup = null;
    return _this;
  }

  _createClass(CheckboxGroup, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement(UICheckboxGroup, Object.assign({
        ref: function ref(component) {
          _this2._checkboxGroup = component;
        }
      }, this.props));
    }
  }, {
    key: "hasMessages",
    get: function get() {
      return this._checkboxGroup && this._checkboxGroup.hasMessages;
    }
  }, {
    key: "value",
    get: function get() {
      return this._checkboxGroup && this._checkboxGroup.value;
    }
  }]);

  CheckboxGroup.displayName = "CheckboxGroup";
  return CheckboxGroup;
}(Component), _class2.propTypes = {
  name: PropTypes.string.isRequired,
  description: PropTypes.node.isRequired,

  /**
  * value to set on initial render
  */
  defaultValue: PropTypes.array,

  /**
  * the selected values (must be accompanied by an `onChange` prop)
  */
  value: controllable(PropTypes.array),

  /**
  * when used with the `value` prop, the component will not control its own state
  */
  onChange: PropTypes.func,
  disabled: PropTypes.bool,
  readOnly: PropTypes.bool,

  /**
  * object with shape: `{
  text: PropTypes.string,
  type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
    }`
  */
  messages: PropTypes.arrayOf(FormPropTypes.message),

  /**
  * children of type `Checkbox`
  */
  children: ChildrenPropTypes.oneOf([Checkbox]),
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  layout: PropTypes.oneOf(['stacked', 'columns', 'inline'])
}, _class2.defaultProps = {
  disabled: false,
  readOnly: false,
  size: 'medium',
  layout: 'stacked',
  defaultValue: void 0,
  messages: void 0,
  value: void 0,
  onChange: void 0,
  children: null
}, _temp)) || _class);
export default CheckboxGroup;
export { CheckboxGroup };
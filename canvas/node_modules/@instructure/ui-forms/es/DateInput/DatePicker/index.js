import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { error as _error } from "@instructure/console";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import keycode from 'keycode';
import { controllable } from '@instructure/ui-prop-types';
import { I18nPropTypes, DateTime, Locale } from '@instructure/ui-i18n';
import { themeable } from '@instructure/ui-themeable';
import { PresentationContent, ScreenReaderContent } from '@instructure/ui-a11y-content';
import { testable } from '@instructure/ui-testable';
import { DatePickerPagination } from './DatePickerPagination';
var styles = {
  componentId: 'dfDow',
  template: function template(theme) {
    return "\n\n.dyUpz_bGBk{align-items:stretch;background:".concat(theme.background || 'inherit', ";color:").concat(theme.color || 'inherit', ";display:inline-flex;flex-direction:column;font-family:").concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', "}\n\n.dyUpz_xKLf,[dir=ltr] .dyUpz_xKLf,[dir=rtl] .dyUpz_xKLf{text-align:center}\n\n.dyUpz_drdB{border-collapse:collapse}\n\n.dyUpz_fsuY{font-weight:").concat(theme.headerFontWeight || 'inherit', "}\n\n.dyUpz_bPWd{-moz-appearance:none;-ms-user-select:none;-webkit-appearance:none;-webkit-user-select:none;appearance:none;background-color:").concat(theme.background || 'inherit', ";border:none;border-radius:").concat(theme.borderRadius || 'inherit', ";box-sizing:border-box;cursor:pointer;font-size:").concat(theme.fontSize || 'inherit', ";min-height:").concat(theme.cellMinHeight || 'inherit', ";min-width:").concat(theme.cellMinWidth || 'inherit', ";outline:none;overflow:visible;padding:").concat(theme.cellPadding || 'inherit', ";position:relative;text-align:center;touch-action:manipulation;user-select:none}\n\n[dir=ltr] .dyUpz_bPWd,[dir=rtl] .dyUpz_bPWd{text-align:center}\n\n.dyUpz_bPWd:focus{box-shadow:inset 0 0 0 0.125rem ").concat(theme.background || 'inherit', ",0 0 0 0.0625rem ").concat(theme.focusOutline || 'inherit', "}\n\n.dyUpz_bPWd.dyUpz_bCDV{color:").concat(theme.otherMonthColor || 'inherit', "}\n\n.dyUpz_bPWd.dyUpz_fxYf{background-color:").concat(theme.todayBackground || 'inherit', ";border-radius:").concat(theme.todayBorderRadius || 'inherit', ";color:").concat(theme.todayColor || 'inherit', "}\n\n.dyUpz_bPWd.dyUpz_fGhm{background-color:").concat(theme.selectedBackground || 'inherit', ";border-radius:").concat(theme.borderRadius || 'inherit', ";color:").concat(theme.selectedColor || 'inherit', "}\n\n.dyUpz_blJt{margin:").concat(theme.labelMargin || 'inherit', ";padding:").concat(theme.labelPadding || 'inherit', ";text-align:center}\n\n[dir=ltr] .dyUpz_blJt,[dir=rtl] .dyUpz_blJt{text-align:center}\n\n.dyUpz_ywdX{cursor:not-allowed;opacity:0.5}");
  },
  'root': 'dyUpz_bGBk',
  'calendar': 'dyUpz_xKLf',
  'table': 'dyUpz_drdB',
  'header': 'dyUpz_fsuY',
  'cell': 'dyUpz_bPWd',
  'outside': 'dyUpz_bCDV',
  'today': 'dyUpz_fxYf',
  'selected': 'dyUpz_fGhm',
  'label': 'dyUpz_blJt',
  'disabled': 'dyUpz_ywdX'
};
import theme from './theme';
import { isSameMonth, isSameDay, isDayDisabled } from "../utils/dateHelpers";
/**
---
parent: DateInput
---
**/

var DatePicker = (_dec = testable(), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(DatePicker, _Component);

  var _super = _createSuper(DatePicker);

  function DatePicker(props, context) {
    var _this;

    _classCallCheck(this, DatePicker);

    _this = _super.call(this, props, context);

    _this.findNextEnabledDay = function (date, eventKeycode) {
      var currentIteration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var iterationMax = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 60;

      switch (eventKeycode) {
        case keycode.codes.left:
          date.subtract(1, 'days');
          break;

        case keycode.codes.right:
          date.add(1, 'days');
          break;

        case keycode.codes.up:
          date.subtract(7, 'days');
          break;

        case keycode.codes.down:
          date.add(7, 'days');
          break;

        default:
          break;
      } // Since we allow a datesDisabled callback function, the set of disabled dates is non
      // deterministic, which means without this check the function could recurse infinitely.


      if (currentIteration >= iterationMax) {
        return null;
      } else if (isDayDisabled(date, _this.props.disabledDaysOfWeek, _this.props.disabledDays)) {
        return _this.findNextEnabledDay(date, eventKeycode, currentIteration + 1);
      } else {
        return date;
      }
    };

    _this.handleCalendarKeyDown = function (e) {
      var _keycode$codes = keycode.codes,
          up = _keycode$codes.up,
          down = _keycode$codes.down,
          left = _keycode$codes.left,
          right = _keycode$codes.right;

      if (!(e.keyCode === up || e.keyCode === down || e.keyCode === left || e.keyCode === right)) {
        return;
      }

      var focusedDate = _this.parseDate(_this.state.focusedValue);

      var newFocusedDate = _this.findNextEnabledDay(focusedDate, e.keyCode);

      if (!newFocusedDate) {
        return;
      }

      e.preventDefault();
      e.stopPropagation();
      var newFocusedString = newFocusedDate.format();

      _this.updatePagination(newFocusedString);

      _this.setState({
        focusedValue: newFocusedString
      });
    };

    _this.handlePaginationPrev = function (e) {
      var sliderMoment = _this.parseDate(_this.state.renderedValue);

      var sliderString = sliderMoment.subtract(1, 'months').format();

      _this.setState({
        renderedValue: sliderString
      });

      _this.fireRenderedChange(e, sliderString);
    };

    _this.handlePaginationNext = function (e) {
      var sliderMoment = _this.parseDate(_this.state.renderedValue);

      var sliderString = sliderMoment.add(1, 'months').format();

      _this.setState({
        renderedValue: sliderString
      });

      _this.fireRenderedChange(e, sliderString);
    };

    _this.handleDateClick = function (e, clickedString) {
      _this.updatePagination(clickedString);

      _this.setState({
        selectedValue: clickedString
      });

      _this.fireSelectedChange(e, clickedString);
    };

    _this.handleDateFocus = function (focusedString) {
      _this.setState({
        focusedValue: focusedString
      });
    };

    var locale = _this._locale(props, context);

    var timezone = _this._timezone(props, context);

    var defaultTodayValue = DateTime.now(locale, timezone).hour(0).minute(0).second(0).millisecond(0).format();

    var todayValue = _this._validateDateProp(props.todayValue, defaultTodayValue, 'todayValue', locale, timezone);

    var selectedValue = _this._validateDateProp(props.selectedValue || props.defaultSelectedValue, todayValue, 'selectedValue', locale, timezone);

    var renderedValue = _this._validateDateProp(props.renderedValue || props.defaultRenderedValue, selectedValue, 'renderedValue', locale, timezone);

    var focusedValue = selectedValue;
    _this.state = {
      selectedValue: selectedValue,
      renderedValue: renderedValue,
      todayValue: todayValue,
      focusedValue: focusedValue
    };
    return _this;
  }

  _createClass(DatePicker, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (nextProps.selectedValue !== this.props.selectedValue || nextProps.renderedValue !== this.props.renderedValue || nextProps.todayValue !== this.props.todayValue) {
        this.setState(function (state) {
          return {
            selectedValue: _this2.validateDateProp(nextProps.selectedValue, state.selectedValue, 'selectedValue'),
            renderedValue: _this2.validateDateProp(nextProps.renderedValue, state.renderedValue, 'renderedValue'),
            todayValue: _this2.validateDateProp(nextProps.todayValue, state.todayValue, 'todayValue')
          };
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.state.focusedValue !== prevState.focusedValue && this._focusedDay) {
        this._focusedDay.focus();
      }
    }
  }, {
    key: "_validateDateProp",
    value: function _validateDateProp(dateStr, fallbackDateStr, propName, locale, timezone) {
      var parsedDate = this._parseDate(dateStr, locale, timezone);

      var isEmpty = !dateStr;
      var isValid = parsedDate.isValid();

      /*#__PURE__*/

      /*#__PURE__*/
      _error(isEmpty || isValid, "[DatePicker] Unexpected date format received for '".concat(propName, "' prop: '").concat(dateStr, "'."));

      return isEmpty || !isValid ? fallbackDateStr : dateStr;
    }
  }, {
    key: "validateDateProp",
    value: function validateDateProp(dateStr, fallbackDateStr, propName) {
      return this._validateDateProp(dateStr, fallbackDateStr, propName, this.locale, this.timezone);
    }
  }, {
    key: "_locale",
    value: function _locale(props, context) {
      return props.locale || context.locale || Locale.browserLocale();
    }
  }, {
    key: "_timezone",
    value: function _timezone(props, context) {
      return props.timezone || context.timezone || DateTime.browserTimeZone();
    }
  }, {
    key: "_parseDate",
    value: function _parseDate(dateStr, locale, timezone) {
      return DateTime.parse(dateStr, locale, timezone);
    }
  }, {
    key: "parseDate",
    value: function parseDate(dateStr) {
      return this._parseDate(dateStr, this.locale, this.timezone);
    }
  }, {
    key: "updatePagination",
    value: function updatePagination(newValueString) {
      var newValueMoment = this.parseDate(newValueString);
      var newMonth = newValueMoment.month();
      var newYear = newValueMoment.year();
      var renderedMoment = this.parseDate(this.state.renderedValue);
      var renderedMonth = renderedMoment.month();
      var renderedYear = renderedMoment.year();

      if (newYear < renderedYear) {
        this.handlePaginationPrev();
        return;
      }

      if (newYear > renderedYear) {
        this.handlePaginationNext();
        return;
      }

      if (newMonth < renderedMonth) {
        this.handlePaginationPrev();
      }

      if (newMonth > renderedMonth) {
        this.handlePaginationNext();
      }
    }
  }, {
    key: "fireRenderedChange",
    value: function fireRenderedChange(e, newRenderedString) {
      if (typeof this.props.onRenderedChange === 'function') {
        this.props.onRenderedChange(e, newRenderedString);
      }
    }
  }, {
    key: "fireSelectedChange",
    value: function fireSelectedChange(e, newSelectedString) {
      if (typeof this.props.onSelectedChange === 'function') {
        this.props.onSelectedChange(e, newSelectedString);
      }
    }
  }, {
    key: "renderHeaderCell",
    value: function renderHeaderCell(day) {
      return /*#__PURE__*/React.createElement("th", {
        className: styles.header,
        key: day.dayOfYear()
      }, /*#__PURE__*/React.createElement(PresentationContent, null, day.format('dd')), /*#__PURE__*/React.createElement(ScreenReaderContent, null, day.format('dddd')));
    }
  }, {
    key: "renderHeader",
    value: function renderHeader(rendered) {
      var _this3 = this;

      var firstDay = rendered.clone().startOf('week');
      var days = [0, 1, 2, 3, 4, 5, 6].map(function (n) {
        return firstDay.clone().add(n, 'd');
      });
      return /*#__PURE__*/React.createElement("tr", null, days.map(function (d) {
        return _this3.renderHeaderCell(d);
      }));
    }
  }, {
    key: "renderDayCell",
    value: function renderDayCell(day, today, selected, rendered, focused) {
      var _classes,
          _this4 = this;

      var disabled = isDayDisabled(day, this.props.disabledDaysOfWeek, this.props.disabledDays);
      var classes = (_classes = {}, _defineProperty(_classes, styles.cell, true), _defineProperty(_classes, styles.today, isSameDay(day, today)), _defineProperty(_classes, styles.selected, isSameDay(day, selected)), _defineProperty(_classes, styles.outside, !isSameMonth(day, rendered)), _defineProperty(_classes, styles.disabled, disabled), _classes);
      var handleDateClick = disabled ? function (e) {
        return null;
      } : function (e) {
        return _this4.handleDateClick(e, day.format());
      };

      var handleDateFocus = function handleDateFocus() {
        return _this4.handleDateFocus(day.format());
      };

      return /*#__PURE__*/React.createElement("td", {
        key: day.dayOfYear()
      }, /*#__PURE__*/React.createElement("button", {
        type: "button",
        className: classnames(classes),
        tabIndex: isSameMonth(day, rendered) ? '0' : '-1',
        ref: function ref(c) {
          if (isSameDay(day, focused)) {
            _this4._focusedDay = c;
          }
        },
        onClick: handleDateClick,
        onFocus: handleDateFocus,
        disabled: disabled,
        "aria-current": isSameDay(day, today) ? 'date' : 'false'
      }, day.format('D')));
    }
  }, {
    key: "renderWeekRow",
    value: function renderWeekRow(firstDay, today, selected, rendered, focused) {
      var _this5 = this;

      return /*#__PURE__*/React.createElement("tr", {
        key: firstDay.week()
      }, [0, 1, 2, 3, 4, 5, 6].map(function (n) {
        return _this5.renderDayCell(firstDay.clone().add(n, 'd'), today, selected, rendered, focused);
      }));
    }
  }, {
    key: "renderCalendar",
    value: function renderCalendar(today, selected, rendered, focused) {
      var _this6 = this;

      var firstDay = rendered.clone().startOf('month').startOf('week');

      if (selected) {
        // Copy selected value's time so we don't change it on the user
        firstDay.hour(selected.hour()).minute(selected.minute()).second(selected.second()).millisecond(selected.millisecond());
      }

      return [0, 7, 14, 21, 28, 35].map(function (weekIncrement) {
        var firstOfWeek = firstDay.clone().add(weekIncrement, 'd');
        return _this6.renderWeekRow(firstOfWeek, today, selected, rendered, focused);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this7 = this;

      /* eslint-disable jsx-a11y/no-static-element-interactions */
      var today = this.parseDate(this.state.todayValue);
      var selected = this.parseDate(this.state.selectedValue);
      var rendered = this.parseDate(this.state.renderedValue);
      var focused = this.parseDate(this.state.focusedValue);
      return /*#__PURE__*/React.createElement("div", {
        className: styles.root
      }, /*#__PURE__*/React.createElement(DatePickerPagination, {
        previousLabel: this.props.previousLabel,
        nextLabel: this.props.nextLabel,
        onPrev: this.handlePaginationPrev,
        onNext: this.handlePaginationNext
      }, /*#__PURE__*/React.createElement("div", {
        className: styles.label
      }, /*#__PURE__*/React.createElement("div", null, rendered.format('MMMM')), /*#__PURE__*/React.createElement("div", null, rendered.format('YYYY')))), /*#__PURE__*/React.createElement("div", {
        ref: function ref(c) {
          _this7._calendar = c;
        },
        className: styles.calendar,
        onKeyDown: this.handleCalendarKeyDown
      }, /*#__PURE__*/React.createElement("table", {
        className: styles.table
      }, /*#__PURE__*/React.createElement("thead", null, this.renderHeader(rendered)), /*#__PURE__*/React.createElement("tbody", null, this.renderCalendar(today, selected, rendered, focused)))));
      /* eslint-enable jsx-a11y/no-static-element-interactions */
    }
  }, {
    key: "locale",
    get: function get() {
      return this._locale(this.props, this.context);
    }
  }, {
    key: "timezone",
    get: function get() {
      return this._timezone(this.props, this.context);
    }
  }, {
    key: "todayValue",
    get: function get() {
      return this.state.todayValue;
    }
  }, {
    key: "selectedValue",
    get: function get() {
      return this.state.selectedValue;
    }
  }, {
    key: "renderedValue",
    get: function get() {
      return this.state.renderedValue;
    }
  }, {
    key: "focusedValue",
    get: function get() {
      return this.state.focusedValue;
    }
  }]);

  DatePicker.displayName = "DatePicker";
  return DatePicker;
}(Component), _class2.propTypes = {
  /**
    The label to put on the previous month button of the calendar.
  **/
  previousLabel: PropTypes.string.isRequired,

  /**
    The label to put on the next month button of the calendar.
  **/
  nextLabel: PropTypes.string.isRequired,

  /**
    An ISO 8601 formatted string. The selected value on initial render.
  **/
  defaultSelectedValue: I18nPropTypes.iso8601,

  /**
    An ISO 8601 formatted string. Must be accompanied by an onSelectedChange property.
    Defaults to today's date.
  **/
  selectedValue: controllable(I18nPropTypes.iso8601, 'onSelectedChange', 'defaultSelectedValue'),

  /**
    An ISO 8601 formatted string. The rendered value on initial render.
  **/
  defaultRenderedValue: I18nPropTypes.iso8601,

  /**
    An ISO 8601 formatted string. Must be accompanied by an onRenderedChange property.
    Defaults to today's date.
  **/
  renderedValue: controllable(I18nPropTypes.iso8601, 'onRenderedChange', 'defaultRenderedValue'),

  /**
    An ISO 8601 formatted string. Defaults to the current date. DatePicker doesn't
    attempt to change this value. Defaults to today's date.
  **/
  todayValue: I18nPropTypes.iso8601,

  /**
    A standard language id
  **/
  locale: PropTypes.string,

  /**
    A timezone identifier in the format: Area/Location
  **/
  timezone: PropTypes.string,

  /**
    Called with the triggering event followed by an ISO 8601 formatted string.
  **/
  onSelectedChange: PropTypes.func,

  /**
    Called with the triggering event followed by an ISO 8601 formatted string.
  **/
  onRenderedChange: PropTypes.func,

  /**
    An array of weekdays that should be unselectable. Each day should be an integer
    corresponding to the day of the week, where 0 = Sunday, 1 = Monday, 2 = Tuesday,
    3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday.
  **/
  disabledDaysOfWeek: PropTypes.array,

  /**
    An array of Date objects that should be unselectable or a callback function
    that gets passed a date and should return a boolean indicating where it is
    unselectable.
  **/
  disabledDays: PropTypes.oneOfType([PropTypes.array, PropTypes.func])
}, _class2.defaultProps = {
  disabledDaysOfWeek: [],
  disabledDays: [],
  onRenderedChange: void 0,
  onSelectedChange: void 0,
  locale: void 0,
  timezone: void 0,
  todayValue: void 0,
  renderedValue: void 0,
  defaultRenderedValue: void 0,
  selectedValue: void 0,
  defaultSelectedValue: void 0
}, _class2.contextTypes = {
  locale: PropTypes.string,
  timezone: PropTypes.string
}, _temp)) || _class) || _class);
export default DatePicker;
export { DatePicker, DatePickerPagination };
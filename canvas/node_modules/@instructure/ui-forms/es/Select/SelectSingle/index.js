import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import deepEqual from 'deep-equal';
import { controllable } from '@instructure/ui-prop-types';
import { omitProps } from '@instructure/ui-react-utils';
import { isActiveElement } from '@instructure/ui-dom-utils';
import { testable } from '@instructure/ui-testable';
import { SelectField } from '../SelectField';
import getOptionId from '../utils/getOptionId';
var optionType = PropTypes.shape({
  label: PropTypes.string.isRequired,
  value: PropTypes.string.isRequired,
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  children: PropTypes.node
});
/**
---
parent: DeprecatedSelect
---
**/

var SelectSingle = (_dec = testable(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(SelectSingle, _Component);

  var _super = _createSuper(SelectSingle);

  function SelectSingle(_props) {
    var _this;

    _classCallCheck(this, SelectSingle);

    _this = _super.call(this, _props);
    _this._input = null;

    _this.focus = function () {
      _this._input && _this._input.focus();
    };

    _this.matchSelectedOption = function (state, selectedOption) {
      var inputValue = _this._input.value;
      var match;

      if (selectedOption) {
        // find option with a value that matches current selected value
        match = state.filteredOptions.find(function (option) {
          return option.value === selectedOption.value;
        });
      } else {
        // find option with a label that matches input's value
        match = state.filteredOptions.find(function (option) {
          return option.label.toLowerCase() === inputValue.toLowerCase();
        });
      }

      return match;
    };

    _this.handleClose = function (event, newSelectedOption) {
      return _this.setState(function (prevState, props) {
        var inputValue = _this._input.value;

        var match = _this.matchSelectedOption(prevState, newSelectedOption);

        var selectedOption = newSelectedOption || prevState.selectedOption;

        if (match) {
          _this._input.value = match.label;

          if (!selectedOption || getOptionId(match) !== getOptionId(selectedOption)) {
            props.onChange(event, match);
          }
        } else if (selectedOption) {
          if (props.allowEmpty && _this._input.value === '') {
            props.onChange(event, null);
            return {
              filterText: null,
              filteredOptions: props.options,
              selectedOption: null
            };
          } else if (!_this.props.allowCustom) {
            // reset the value to the last valid value
            _this._input.value = selectedOption.label;
          }
        } else if (!_this.props.allowCustom) {
          // clean wrong values
          _this._input.value = '';
        }

        if (_this._input.value !== inputValue) {
          _this.props.onInputChange(null, _this._input.value);
        }

        return {
          filterText: _this.props.allowCustom ? _this._input.value : null,
          filteredOptions: props.options,
          selectedOption: match || selectedOption
        };
      }, _this.props.onClose);
    };

    _this.handleInputChange = function (event, value) {
      _this.props.onInputChange(event, value);

      var filterText = value.toLowerCase();

      if (_this.state.filterText !== filterText) {
        _this.setState(function (prevState, props) {
          var filteredOptions = props.filter(_this.props.options, filterText || '');
          var selectedOption = prevState.selectedOption;

          if (props.allowCustom && filteredOptions.length === 0) {
            selectedOption = void 0;
          }

          return {
            filterText: filterText,
            filteredOptions: filteredOptions,
            selectedOption: selectedOption
          };
        });
      }
    };

    _this.handleSelect = function (event, selectedOption) {
      if (_this._input.value !== selectedOption.label) {
        _this._input.value = selectedOption.label;

        _this.props.onInputChange(null, _this._input.value);
      }

      _this.setState({
        filterText: null,
        filteredOptions: _this.props.options,
        selectedOption: selectedOption
      }, function () {
        return _this.focus();
      });

      _this.props.onChange(event, selectedOption);
    };

    _this.handleInputRef = function (node) {
      _this._input = node;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      _this.props.inputRef.apply(_assertThisInitialized(_this), [node].concat(args));
    };

    _this.state = {
      filterText: null,
      filteredOptions: _props.options,
      selectedOption: _this.getSelectedOptionFromProps(_props)
    };
    return _this;
  }

  _createClass(SelectSingle, [{
    key: "findSelectedOption",
    value: function findSelectedOption(options, selected) {
      var id = getOptionId(selected);
      var foundOption = options.find(function (option) {
        return getOptionId(option) === id;
      });
      return foundOption || selected;
    }
  }, {
    key: "getSelectedOptionFromProps",
    value: function getSelectedOptionFromProps(props, selected) {
      return selected ? this.findSelectedOption(props.options, selected) : this.findSelectedOption(props.options, props.selectedOption || props.defaultSelectedOption);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.state.selectedOption) {
        this._input.value = this.state.selectedOption.label || '';
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      var optionsChanged = !deepEqual(this.props.options, nextProps.options);
      var selectedChanged = this.props.selectedOption != nextProps.selectedOption // undefined == null -> no change
      && !deepEqual(this.props.selectedOption, nextProps.selectedOption) && !this.props.disabled && !this.props.readOnly;
      var valueChanged = this.props.value !== nextProps.value;

      if (optionsChanged || selectedChanged || valueChanged) {
        this.setState(function (prevState) {
          var selected = selectedChanged ? null : prevState.selectedOption;

          var selectedOption = _this2.getSelectedOptionFromProps(nextProps, selected);

          var filterText = prevState.filterText || '';

          if (nextProps.allowCustom && selectedChanged && !_this2.props.selectedOption) {
            // went from custom text entry to a selection from the options
            filterText = selectedOption && selectedOption.label || '';
          }

          var filteredOptions = nextProps.filter(nextProps.options, filterText);
          var value = selectedOption && selectedOption.label || nextProps.value || '';

          if ((nextProps.allowCustom || prevState.filterText === null) && _this2._input.value !== value) {
            _this2._input.value = value;
            nextProps.onInputChange(null, _this2._input.value);
          }

          if (optionsChanged) {
            nextProps.onOptionsChange(filteredOptions);
          }

          return {
            selectedOption: selectedOption,
            filteredOptions: filteredOptions
          };
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(SelectField, Object.assign({}, omitProps(this.props, SelectSingle.propTypes), {
        editable: this.props.allowCustom || this.props.editable // allowCustom requires editable
        ,
        inputRef: this.handleInputRef,
        options: this.state.filteredOptions,
        selectedOption: this.state.selectedOption,
        disabled: this.props.disabled,
        readOnly: this.props.readOnly,
        onSelect: this.handleSelect,
        onStaticClick: this.focus,
        onClose: this.handleClose,
        onInputChange: this.handleInputChange,
        optionsMaxWidth: this.props.optionsMaxWidth,
        closeOnSelect: this.props.closeOnSelect
      }));
    }
  }, {
    key: "focused",
    get: function get() {
      return isActiveElement(this._input);
    }
  }, {
    key: "value",
    get: function get() {
      var selected = this.state.selectedOption;

      if (selected) {
        return selected.value;
      }

      if (this.props.allowCustom) {
        return this._input.value;
      }

      return null;
    }
  }]);

  SelectSingle.displayName = "SelectSingle";
  return SelectSingle;
}(Component), _class2.propTypes = {
  /**
  * The options to render in the menu
  */
  options: PropTypes.arrayOf(optionType),

  /**
  * a function that provides a reference to the internal input element
  */
  inputRef: PropTypes.func,

  /**
  * the selected value (must be accompanied by an `onChange` prop)
  */
  selectedOption: controllable(PropTypes.oneOfType([PropTypes.string, optionType]), 'onChange', 'defaultSelectedOption'),

  /**
   * Options dropdown can be wider than input if optionsMaxWidth is provided
   */
  optionsMaxWidth: PropTypes.string,

  /**
  * value to set on initial render, meant for an uncontrolled component
  */
  defaultSelectedOption: PropTypes.oneOfType([PropTypes.string, optionType]),

  /**
  * Determines whether the user can type in the input
  */
  editable: PropTypes.bool,

  /**
  * for non-multiple Select, allows the user to empty selection
  */
  allowEmpty: PropTypes.bool,

  /**
   * If true, the user can freely enter a value not available in the options list.
   * Implies editable is true.
   */
  allowCustom: PropTypes.bool,

  /**
   * Whether or not to disable the input
   */
  disabled: PropTypes.bool,

  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: PropTypes.bool,

  /**
   * The filter function applied to the options when writing on the input
   */
  filter: PropTypes.func,

  /**
   * Callback fired when the menu is closed
   */
  onClose: PropTypes.func,

  /**
   * Callback fired when one of the menu options gets selected
   */
  onChange: PropTypes.func,

  /**
   * Callback fired when on the onChange of the internal input
   */
  onInputChange: PropTypes.func,

  /**
   * Callback fired when the options displayed in the menu change
   */
  onOptionsChange: PropTypes.func,

  /**
  * should the menu be closed when a selection happens
  */
  closeOnSelect: PropTypes.bool,

  /**
   * the current value. The selected option's value, or the entered text if allowCustom is true
   */
  value: PropTypes.string
}, _class2.defaultProps = {
  options: void 0,
  selectedOption: void 0,
  defaultSelectedOption: void 0,
  value: void 0,
  filter: void 0,
  readOnly: false,
  disabled: false,
  allowCustom: false,
  allowEmpty: false,
  editable: false,
  optionsMaxWidth: void 0,
  inputRef: function inputRef(node) {},
  onClose: function onClose() {},
  onChange: function onChange(event, selectedOption) {},
  onInputChange: function onInputChange(event, value) {},
  onOptionsChange: function onOptionsChange(filteredOptions) {},
  closeOnSelect: true
}, _temp)) || _class);
export default SelectSingle;
export { SelectSingle };
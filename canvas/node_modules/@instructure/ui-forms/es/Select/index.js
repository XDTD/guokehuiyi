import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { error as _error } from "@instructure/console";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import deepEqual from 'deep-equal';
import { Children, controllable } from '@instructure/ui-prop-types';
import { FormPropTypes } from '@instructure/ui-form-field';
import { LayoutPropTypes } from '@instructure/ui-layout';
import { deprecated, omitProps } from '@instructure/ui-react-utils';
import { testable } from '@instructure/ui-testable';
import { SelectSingle } from './SelectSingle';
import { SelectMultiple } from './SelectMultiple';
import { SelectField } from './SelectField';
import { SelectOptionsList } from './SelectOptionsList';
import parseOptions from './utils/parseOptions';
/**
---
category: components/deprecated
id: DeprecatedSelect
---
**/

var Select = (_dec = testable(), _dec2 = deprecated('7.0.0', null, 'Use SimpleSelect from ui-simple-select for basic configurations or Select from ui-select for more complex configuations.'), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Select, _Component);

  var _super = _createSuper(Select);

  function Select(props) {
    var _this;

    _classCallCheck(this, Select);

    _this = _super.call(this, props);
    _this._input = null;

    _this.focus = function () {
      _this._subComponent && _this._subComponent.focus();
    };

    _this.handleRef = function (node) {
      _this._subComponent = node;
    };

    var options = parseOptions(props.children);

    /*#__PURE__*/

    /*#__PURE__*/
    _error(!(props.allowCustom && props.multiple), "[Select] The 'allowCustom' and 'multiple' props are mutually exclusive.");

    _this.state = {
      options: options
    };
    return _this;
  }

  _createClass(Select, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var options = parseOptions(nextProps.children);

      if (!deepEqual(this.state.options, options)) {
        this.setState({
          options: options
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var Component = this.props.multiple ? SelectMultiple : SelectSingle;
      var defaultSelectedOption = this.props.defaultOption;

      if (!defaultSelectedOption && !this.props.allowCustom) {
        defaultSelectedOption = this.props.value;
      } // select first non-disabled option for standard select components


      if (!this.props.editable && !this.props.allowCustom && !this.props.multiple && typeof defaultSelectedOption === 'undefined') {
        for (var i = 0; this.state.options.length; i++) {
          var option = this.state.options[i];

          if (!option.disabled) {
            defaultSelectedOption = option;
            break;
          }
        }
      }

      return /*#__PURE__*/React.createElement(Component, Object.assign({
        ref: this.handleRef
      }, omitProps(this.props, {}, ['multiple', 'defaultOption', !this.props.multiple ? 'formatSelectedOption' : '']), {
        options: this.state.options,
        defaultSelectedOption: defaultSelectedOption,
        closeOnSelect: this.props.closeOnSelect
      }));
    }
  }, {
    key: "focused",
    get: function get() {
      return this._subComponent && this._subComponent.focused;
    }
  }, {
    key: "invalid",
    get: function get() {
      return !!this.props.messages && this.props.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }, {
    key: "value",
    get: function get() {
      return this._subComponent && this._subComponent.value;
    }
  }]);

  Select.displayName = "Select";
  return Select;
}(Component), _class2.propTypes = {
  /**
   * Determines wether Select allows multiple values
   */
  multiple: PropTypes.bool,

  /**
  * Determines whether the user can type in the input
  */
  editable: PropTypes.bool,

  /**
  * Each children must be an option element.
  */
  children: Children.oneOf(['option', 'optgroup']),

  /**
  * a function that provides a reference to the internal input element
  */
  inputRef: PropTypes.func,
  value: PropTypes.string,

  /**
  * the selected value (must be accompanied by an `onChange` prop)
  */
  selectedOption: controllable(PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    children: PropTypes.node,
    disabled: PropTypes.bool,
    icon: PropTypes.func,
    groupLabel: PropTypes.bool
  }), PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    children: PropTypes.node,
    disabled: PropTypes.bool,
    icon: PropTypes.func,
    groupLabel: PropTypes.bool
  })]))]), 'onChange', 'defaultOption'),

  /**
  * value to set on initial render, meant for an uncontrolled component
  */
  defaultOption: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    children: PropTypes.node,
    disabled: PropTypes.bool,
    icon: PropTypes.func,
    groupLabel: PropTypes.bool
  }), PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    children: PropTypes.node,
    disabled: PropTypes.bool,
    icon: PropTypes.func,
    groupLabel: PropTypes.bool
  })]))]),

  /**
  * for not multiple Select, allows the user to empty selection
  */
  allowEmpty: PropTypes.bool,

  /**
   * SelectSingle only (Mutually exclusive with multiple=true)
   * If true, the user can freely enter a value not available in the options list.
   * Implies editable is true.
   */
  allowCustom: PropTypes.bool,
  id: PropTypes.string,

  /**
   * The placement of the content in relation to the trigger, passed down to Position
   */
  placement: LayoutPropTypes.placement,
  messages: PropTypes.arrayOf(FormPropTypes.message),
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  layout: PropTypes.oneOf(['stacked', 'inline']),

  /**
   * Options dropdown can be wider than input if optionsMaxWidth is provided
   */
  optionsMaxWidth: PropTypes.string,

  /**
   * Give the Spinner a title to be read by screenreaders. Disables menu
   * interaction and renders a Spinner in its place.
   */
  loadingText: PropTypes.string,

  /**
   * The menu content to render when no options are present or are filtered away
   */
  emptyOption: PropTypes.node,

  /**
   * The amount of options that are visible without scrolling
   */
  visibleOptionsCount: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Custom text to be read by the screenreader when Select is focused
   */
  assistiveText: PropTypes.string,

  /**
   * Additional text to provide screenreader feedback upon user action
   */
  announcement: PropTypes.string,

  /**
   * The filter function applied to the options when writing on the input
   */
  filter: PropTypes.func,

  /**
   * The format function called for each Tag to render its contents
   */
  formatSelectedOption: PropTypes.func,

  /**
   * Whether or not to disable the input
   */
  disabled: PropTypes.bool,

  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: PropTypes.bool,

  /**
   * Callback fired when `<Position />` content has been rendered
   */
  onPositioned: PropTypes.func,

  /**
   * Callback fired when the menu is opened
   */
  onOpen: PropTypes.func,

  /**
   * Callback fired when the menu is closed
   */
  onClose: PropTypes.func,

  /**
   * Callback fired when one of the menu options gets selected. Second parameter is the selected option.
   */
  onChange: PropTypes.func,

  /**
   * Callback fired when on the onChange of the internal input.
   */
  onInputChange: PropTypes.func,

  /**
   * Callback fired when the options displayed in the menu change
   */
  onOptionsChange: PropTypes.func,

  /**
   * Callback fired when on the onBlur of the internal input
   */
  onBlur: PropTypes.func,

  /**
   * Callback fired when on the onClick of the internal input
   */
  onClick: PropTypes.func,

  /**
  * should the menu be closed when a selection happens
  */
  closeOnSelect: PropTypes.bool,

  /**
   * The parent in which to constrain the menu.
   * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
   * or a function returning an element
   */
  constrain: LayoutPropTypes.constrain
}, _class2.defaultProps = {
  multiple: false,
  editable: false,
  allowEmpty: true,
  allowCustom: false,
  emptyOption: '---',
  selectedOption: null,
  size: 'medium',
  loadingText: null,
  visibleOptionsCount: 8,
  optionsMaxWidth: null,
  inputRef: function inputRef(node) {},
  filter: function filter(options, filterText) {
    return options.filter(function (option) {
      return option.label.toLowerCase().startsWith(filterText.toLowerCase());
    });
  },
  formatSelectedOption: function formatSelectedOption(tag) {
    return tag.label || tag.children;
  },
  closeOnSelect: true,
  constrain: 'window',
  onBlur: void 0,
  onClick: void 0,
  onOptionsChange: void 0,
  onInputChange: void 0,
  onChange: void 0,
  onClose: void 0,
  onOpen: void 0,
  onPositioned: void 0,
  readOnly: false,
  disabled: false,
  announcement: void 0,
  assistiveText: void 0,
  layout: void 0,
  messages: void 0,
  placement: void 0,
  id: void 0,
  defaultOption: void 0,
  value: void 0,
  children: null
}, _temp)) || _class) || _class);
export default Select;
export { Select, SelectField, SelectOptionsList };
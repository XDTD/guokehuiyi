import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import keycode from 'keycode';
import { Dialog } from '@instructure/ui-dialog';
import { hasVisibleChildren } from '@instructure/ui-a11y-utils';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { FormField, FormFieldLayout, FormPropTypes } from '@instructure/ui-form-field';
import { LayoutPropTypes, Position } from '@instructure/ui-layout';
import { containsActiveElement, findDOMNode, isActiveElement } from '@instructure/ui-dom-utils';
import { createChainedFunction } from '@instructure/ui-utils';
import { uid } from '@instructure/uid';
import { themeable } from '@instructure/ui-themeable';
import { testable } from '@instructure/ui-testable';
import { omitProps, pickProps } from '@instructure/ui-react-utils';
import { IconArrowOpenDownLine } from '@instructure/ui-icons';
import { SelectOptionsList } from '../SelectOptionsList';
import getOptionId from '../utils/getOptionId';
var styles = {
  componentId: 'bgKsu',
  template: function template(theme) {
    return "\n\n.bgKsu_engK{display:block;position:relative}\n\n.bgKsu_engK:before{border:".concat(theme.focusOutlineWidth || 'inherit', " ").concat(theme.focusOutlineStyle || 'inherit', " ").concat(theme.focusOutlineColor || 'inherit', ";border-radius:calc(").concat(theme.borderRadius || 'inherit', "*1.5);bottom:-0.25rem;box-sizing:border-box;content:\"\";display:block;left:-0.25rem;opacity:0;pointer-events:none;position:absolute;right:-0.25rem;top:-0.25rem;transform:scale(0.95);transition:all 0.2s}\n\n.bgKsu_engK.bgKsu_eWbJ:before{opacity:1;transform:scale(1)}\n\n.bgKsu_engK.bgKsu_eWbJ.bgKsu_fszt:before{border-color:").concat(theme.errorOutlineColor || 'inherit', "}\n\n.bgKsu_dtDb{background:").concat(theme.background || 'inherit', ";border:").concat(theme.borderWidth || 'inherit', " ").concat(theme.borderStyle || 'inherit', " ").concat(theme.borderColor || 'inherit', ";border-radius:").concat(theme.borderRadius || 'inherit', ";box-sizing:border-box;display:flex;flex-wrap:wrap;font-family:").concat(theme.fontFamily || 'inherit', ";margin:0;min-width:0.0625rem;overflow:hidden}\n\n.bgKsu_dtDb.bgKsu_fszt,.bgKsu_dtDb.bgKsu_fszt.bgKsu_eWbJ{border-color:").concat(theme.errorBorderColor || 'inherit', "}\n\n.bgKsu_dtDb.bgKsu_ywdX{cursor:not-allowed;opacity:0.5;pointer-events:none}\n\n.bgKsu_dtDb.bgKsu_doqw{font-size:").concat(theme.smallFontSize || 'inherit', "}\n\n.bgKsu_dtDb.bgKsu_ycrn{font-size:").concat(theme.mediumFontSize || 'inherit', "}\n\n.bgKsu_dtDb.bgKsu_cMDj{font-size:").concat(theme.largeFontSize || 'inherit', "}\n\n.bgKsu_ccod{display:flex;flex:1 1 auto;position:relative}\n\n.bgKsu_cwos,input[type].bgKsu_cwos{-moz-appearance:none;-moz-osx-font-smoothing:grayscale;-webkit-appearance:none;-webkit-font-smoothing:antialiased;all:initial;animation:none 0s ease 0s 1 normal none running;appearance:none;backface-visibility:visible;background:transparent none repeat 0 0/auto auto padding-box border-box scroll;border:medium none currentColor;border-collapse:separate;border-image:none;border-radius:0;border-spacing:0;bottom:auto;box-shadow:none;box-sizing:content-box;box-sizing:border-box;caption-side:top;clear:none;clip:auto;color:#000;color:").concat(theme.color || 'inherit', ";column-count:auto;column-fill:balance;column-gap:normal;column-rule:medium none currentColor;column-span:1;column-width:auto;columns:auto;content:normal;counter-increment:none;counter-reset:none;cursor:auto;cursor:default;direction:ltr;display:inline;display:block;empty-cells:show;float:none;font-family:serif;font-family:inherit;font-size:medium;font-size:inherit;font-stretch:normal;font-style:normal;font-variant:normal;font-weight:400;font-weight:").concat(theme.fontWeight || 'inherit', ";height:auto;hyphens:none;left:auto;letter-spacing:normal;line-height:normal;line-height:1;list-style:disc outside none;margin:0;max-height:none;max-width:none;min-height:0;min-width:0;opacity:1;orphans:2;outline:medium none invert;overflow:visible;overflow-x:visible;overflow-y:visible;padding:0;padding:0 ").concat(theme.inputPadding || 'inherit', ";page-break-after:auto;page-break-before:auto;page-break-inside:auto;perspective:none;perspective-origin:50% 50%;position:static;right:auto;tab-size:8;table-layout:auto;text-align:left;text-align:start;text-align-last:auto;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;top:auto;transform:none;transform-origin:50% 50% 0;transform-style:flat;transition:none 0s ease 0s;unicode-bidi:normal;vertical-align:baseline;visibility:visible;white-space:normal;widows:2;width:auto;width:100%;word-spacing:normal;z-index:auto}\n\n[dir=ltr] .bgKsu_cwos,[dir=ltr] input[type].bgKsu_cwos{text-align:left}\n\n[dir=rtl] .bgKsu_cwos,[dir=rtl] input[type].bgKsu_cwos{text-align:right}\n\n.bgKsu_cwos::-ms-clear,input[type].bgKsu_cwos::-ms-clear{display:none}\n\n.bgKsu_cwos.bgKsu_bfxl,input[type].bgKsu_cwos.bgKsu_bfxl{cursor:text}\n\n.bgKsu_cwos[autocomplete=off]::-webkit-contacts-auto-fill-button,input[type].bgKsu_cwos[autocomplete=off]::-webkit-contacts-auto-fill-button{display:none!important}\n\n.bgKsu_cwos:-ms-input-placeholder,input[type].bgKsu_cwos:-ms-input-placeholder{color:").concat(theme.placeholderColor || 'inherit', "}\n\n.bgKsu_cwos::placeholder,input[type].bgKsu_cwos::placeholder{color:").concat(theme.placeholderColor || 'inherit', "}\n\n.bgKsu_doqw .bgKsu_cwos,.bgKsu_doqw input[type].bgKsu_cwos{min-height:calc(").concat(theme.smallHeight || 'inherit', " - 0.125rem)}\n\n.bgKsu_ycrn .bgKsu_cwos,.bgKsu_ycrn input[type].bgKsu_cwos{min-height:calc(").concat(theme.mediumHeight || 'inherit', " - 0.125rem)}\n\n.bgKsu_cMDj .bgKsu_cwos,.bgKsu_cMDj input[type].bgKsu_cwos{min-height:calc(").concat(theme.largeHeight || 'inherit', " - 0.125rem)}\n\n.bgKsu_ewVP{-webkit-margin-end:0;-webkit-margin-start:").concat(theme.inputPadding || 'inherit', ";align-items:center;display:flex;height:100%;margin-inline-end:0;margin-inline-start:").concat(theme.inputPadding || 'inherit', "}\n\n[dir=ltr] .bgKsu_ewVP{margin-left:").concat(theme.inputPadding || 'inherit', ";margin-right:0}\n\n[dir=rtl] .bgKsu_ewVP{margin-left:0;margin-right:").concat(theme.inputPadding || 'inherit', "}\n\n.bgKsu_dnnz{-webkit-margin-end:").concat(theme.inputPadding || 'inherit', ";-webkit-margin-start:0;align-self:center;display:flex;fill:").concat(theme.iconColor || 'inherit', ";flex-shrink:0;margin-inline-end:").concat(theme.inputPadding || 'inherit', ";margin-inline-start:0;pointer-events:none}\n\n[dir=ltr] .bgKsu_dnnz{margin-left:0;margin-right:").concat(theme.inputPadding || 'inherit', "}\n\n[dir=rtl] .bgKsu_dnnz{margin-left:").concat(theme.inputPadding || 'inherit', ";margin-right:0}\n\n.bgKsu_blJt{all:initial;animation:none 0s ease 0s 1 normal none running;backface-visibility:visible;background:transparent none repeat 0 0/auto auto padding-box border-box scroll;border:medium none currentColor;border-collapse:separate;border-image:none;border-radius:0;border-spacing:0;bottom:auto;box-shadow:none;box-sizing:content-box;caption-side:top;clear:none;clip:auto;color:#000;column-count:auto;column-fill:balance;column-gap:normal;column-rule:medium none currentColor;column-span:1;column-width:auto;columns:auto;content:normal;counter-increment:none;counter-reset:none;cursor:auto;direction:ltr;display:inline;display:block;empty-cells:show;float:none;font-family:serif;font-family:inherit;font-size:medium;font-size:inherit;font-stretch:normal;font-style:normal;font-variant:normal;font-weight:400;font-weight:inherit;height:auto;hyphens:none;left:auto;letter-spacing:normal;line-height:normal;line-height:inherit;list-style:disc outside none;margin:0;max-height:none;max-width:none;min-height:0;min-width:0;opacity:1;orphans:2;outline:medium none invert;overflow:visible;overflow-x:visible;overflow-y:visible;padding:0;page-break-after:auto;page-break-before:auto;page-break-inside:auto;perspective:none;perspective-origin:50% 50%;position:static;right:auto;tab-size:8;table-layout:auto;text-align:left;text-align:inherit;text-align-last:auto;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;top:auto;transform:none;transform-origin:50% 50% 0;transform-style:flat;transition:none 0s ease 0s;unicode-bidi:normal;vertical-align:baseline;visibility:visible;white-space:normal;widows:2;width:auto;word-spacing:normal;z-index:auto}\n\n[dir=ltr] .bgKsu_blJt,[dir=rtl] .bgKsu_blJt{text-align:inherit}");
  },
  'inputWidth': 'bgKsu_engK',
  'focus': 'bgKsu_eWbJ',
  'invalid': 'bgKsu_fszt',
  'inputContainer': 'bgKsu_dtDb',
  'disabled': 'bgKsu_ywdX',
  'small': 'bgKsu_doqw',
  'medium': 'bgKsu_ycrn',
  'large': 'bgKsu_cMDj',
  'inputLayout': 'bgKsu_ccod',
  'input': 'bgKsu_cwos',
  'editable': 'bgKsu_bfxl',
  'inputIcon': 'bgKsu_ewVP',
  'icon': 'bgKsu_dnnz',
  'label': 'bgKsu_blJt'
};
import theme from './theme';
/**
---
parent: DeprecatedSelect
---
**/

var SelectField = (_dec = testable(), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(SelectField, _Component);

  var _super = _createSuper(SelectField);

  function SelectField(props) {
    var _this;

    _classCallCheck(this, SelectField);

    _this = _super.call(this, props);
    _this._menu = null;
    _this._input = null;
    _this._inputContainer = null;
    _this._timeouts = [];
    _this.timeoutId = null;

    _this.open = function () {
      _this.setState(function () {
        return {
          expanded: true
        };
      }, function () {
        _this.highlightSelectedOption();

        _this.props.onOpen();
      });
    };

    _this.close = function (event, selectedOption) {
      _this.setState(function (state) {
        if (state.expanded) {
          _this.props.onClose(event, selectedOption);
        }

        return {
          expanded: false
        };
      });
    };

    _this.select = function (event, selectedOption) {
      _this.props.onSelect(event, selectedOption);

      if (_this.props.closeOnSelect) {
        event.preventDefault();

        _this.close(event, selectedOption);
      }
    };

    _this.highlightSelectedOption = function () {
      var index = 0;

      if (_this.selectedIndex > 0) {
        index = _this.selectedIndex;
      } // setTimeout forced due to the need to wait for the browser to render the menu


      _this._timeouts.push(setTimeout(function () {
        _this.highlightOption(index);
      }, 0));
    };

    _this.highlightOption = function (index) {
      var option = _this.props.options[index];

      if (!_this.props.loadingText && option) {
        if (option.disabled || option.groupLabel) {
          // target index is disabled, try next option instead
          if (index > _this.state.highlightedIndex && index + 1 < _this.props.options.length) {
            _this.highlightOption(index + 1);
          } else if (index < _this.state.highlightedIndex && index - 1 >= 0) {
            _this.highlightOption(index - 1);
          }

          return;
        }

        _this.setState({
          highlightedIndex: index
        });

        _this.props.onHighlight(index); // Update scrolling


        var menu = findDOMNode(_this._menu);

        if (menu) {
          var item = menu.querySelectorAll('li')[index];
          var parentTop = menu.scrollTop;
          var elemTop = item.offsetTop;
          var parentBottom = parentTop + menu.clientHeight;
          var elemBottom = elemTop + item.clientHeight;

          if (elemBottom > parentBottom) {
            menu.scrollTop = elemBottom - menu.clientHeight;
          } else if (elemTop < parentTop) {
            menu.scrollTop = elemTop;
          }
        }
      }
    };

    _this.handleHomeKey = function (event) {
      if (_this.props.options.length > 0) {
        _this.highlightOption(0);
      }
    };

    _this.handleEndKey = function (event) {
      if (_this.props.options.length > 0) {
        _this.highlightOption(_this.props.options.length - 1);
      }
    };

    _this.handleEnterKey = function (event) {
      if (_this.expanded && !_this.props.loadingText && _this.props.options.length) {
        _this.select(event, _this.props.options[_this.state.highlightedIndex]);
      }
    };

    _this.handleUpArrowKey = function (event) {
      if (_this.expanded) {
        var index = Math.max(0, _this.state.highlightedIndex - 1);
        var option = _this.props.options[index];

        var el = _this._menu.querySelectorAll('li')[index];

        _this.highlightOption(index); // set dom focus so VO will read highlighted option correctly


        if (el && option && !option.disabled && !option.groupLabel) {
          el.focus();
        }
      } else {
        _this.open();
      }
    };

    _this.handleDownArrowKey = function (event) {
      if (_this.expanded) {
        var index = Math.min(_this.props.options.length - 1, _this.state.highlightedIndex + 1);
        var option = _this.props.options[index];

        var el = _this._menu.querySelectorAll('li')[index];

        _this.highlightOption(index); // set dom focus so VO will read highlighted option correctly


        if (el && option && !option.disabled && !option.groupLabel) {
          el.focus();
        }
      } else {
        _this.open();
      }
    };

    _this.handleSpaceKey = function (event) {
      if (!_this.expanded) {
        event.preventDefault();

        _this.open();
      }
    };

    _this.keyMap = {
      up: _this.handleUpArrowKey,
      down: _this.handleDownArrowKey,
      home: _this.handleHomeKey,
      end: _this.handleEndKey,
      enter: _this.handleEnterKey,
      space: _this.handleSpaceKey
    };

    _this.handlePositioned = function () {
      _this.setState({
        positioned: true
      }, function () {
        return _this.props.onPositioned();
      });
    };

    _this.handleKeyDown = function (event) {
      var key = keycode.names[event.keyCode]; // eslint-disable-next-line no-prototype-builtins

      if (_this.keyMap.hasOwnProperty(key)) {
        if ((key !== 'enter' || _this.expanded) && key !== 'space') {
          event.preventDefault();
        }

        _this.keyMap[key](event);
      } else {
        // return dom focus to input when the user tries to type
        if (_this._input && _this.props.editable) {
          _this._input.focus();
        }
      }

      if (key === 'tab') {
        // return focus to input and back into natural tab order
        _this._input.focus();
      }

      _this.props.onKeyDown(event);
    };

    _this.handleKeyUp = function (event) {
      var key = keycode.names[event.keyCode];

      if (key === 'esc' && _this.expanded) {
        event.preventDefault(); // ensure focus returns to input

        if (_this._input) {
          _this._input.focus();
        }

        _this.close(event);
      }

      _this.props.onKeyUp(event);
    };

    _this.handleMouseDown = function (event) {
      event.preventDefault();
    };

    _this.handleFocus = function (event) {
      _this.setState(function () {
        return {
          focus: true
        };
      });

      _this.props.onFocus(event);
    };

    _this.handleBlur = function (event) {
      event.persist(); // is focus on an input or a tag

      var stillFocused = _this._inputContainer.contains(event.relatedTarget);

      if (!stillFocused && _this.expanded) {
        // is focus on an option
        stillFocused = _this._menu.contains(event.relatedTarget);
      }

      _this.setState(function () {
        return {
          focus: stillFocused
        };
      }, function () {
        if (_this.expanded && !stillFocused) {
          _this._timeouts.push(setTimeout(function () {
            // timeout so we can check where focus went to
            if (!containsActiveElement(_this._menu)) {
              // is focus still not on an option
              _this.close(event);
            }
          }, 0));
        }

        if (!stillFocused) {
          _this.props.onBlur(event);
        }
      });
    };

    _this.handleClick = function (event) {
      event.preventDefault();

      if (_this.props.disabled || _this.props.readOnly) {
        return;
      }

      if (!_this.expanded) {
        if (_this._input && !isActiveElement(_this._input)) {
          _this._input.focus();
        }

        _this.open();
      } else {
        _this.close();
      }

      _this.props.onClick(event);
    };

    _this.handleChange = function (event) {
      if (!_this.expanded) {
        _this.open();
      }

      _this.props.onInputChange(event, event.target.value);
    };

    _this.handleMenuRef = function (node) {
      _this._menu = node;
    };

    _this.handleInputRef = function (node) {
      _this._input = node;
    };

    _this.handleInputContainerRef = function (node) {
      _this._inputContainer = node;
    };

    _this.state = {
      focus: false,
      highlightedIndex: _this.getSelectedIndex(props),
      expanded: false,
      positioned: false
    };
    _this._defaultId = uid('Select');
    _this._optionsId = uid('Select-Options');
    _this._assistId = uid('Select-assistiveText');
    return _this;
  }

  _createClass(SelectField, [{
    key: "getSelectedIndex",
    value: function getSelectedIndex(props) {
      if (props.selectedOption) {
        var index = props.options.findIndex(function (option) {
          return getOptionId(option) === getOptionId(props.selectedOption);
        });
        return Math.max(index, 0);
      } else {
        return -1;
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.options !== nextProps.options) {
        this.highlightSelectedOption();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._timeouts.forEach(function (timeout) {
        return clearTimeout(timeout);
      });
    }
  }, {
    key: "renderIcon",
    value: function renderIcon() {
      if (typeof this.props.selectedOption.icon === 'function') {
        var Icon = this.props.selectedOption.icon;
        return /*#__PURE__*/React.createElement("span", {
          className: styles.inputIcon
        }, /*#__PURE__*/React.createElement(Icon, null));
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames, _classnames2;

      var _this$props = this.props,
          size = _this$props.size,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly,
          editable = _this$props.editable,
          required = _this$props.required,
          width = _this$props.width,
          options = _this$props.options,
          selectedOption = _this$props.selectedOption,
          loadingText = _this$props.loadingText,
          emptyOption = _this$props.emptyOption,
          visibleOptionsCount = _this$props.visibleOptionsCount,
          children = _this$props.children,
          onStaticClick = _this$props.onStaticClick,
          assistiveText = _this$props.assistiveText,
          layout = _this$props.layout,
          announcement = _this$props.announcement,
          constrain = _this$props.constrain;
      var inputProps = omitProps(this.props, SelectField.propTypes, ['allowEmpty', 'assistiveText', 'value'].concat(_toConsumableArray(Object.keys(FormField.propTypes))));
      var highlightedOption = options[this.state.highlightedIndex];

      if (highlightedOption && this.expanded) {
        inputProps['aria-activedescendant'] = "".concat(this._optionsId, "_").concat(highlightedOption.id);
      } else {
        inputProps['aria-activedescendant'] = null;
      }

      var wrappedLabel = /*#__PURE__*/React.createElement("label", {
        htmlFor: this.id,
        className: styles.label
      }, this.props.label);

      if (!hasVisibleChildren(this.props.label)) {
        wrappedLabel = /*#__PURE__*/React.createElement(ScreenReaderContent, null, wrappedLabel);
      }

      return /*#__PURE__*/React.createElement(FormFieldLayout, Object.assign({}, pickProps(this.props, FormFieldLayout.propTypes), {
        as: "span",
        label: wrappedLabel,
        id: this.id,
        vAlign: layout === 'inline' ? 'middle' : null,
        onMouseDown: this.handleMouseDown
      }), /*#__PURE__*/React.createElement("span", {
        style: {
          width: width || 'auto'
        },
        className: classnames(styles.inputWidth, (_classnames = {}, _defineProperty(_classnames, styles.invalid, this.invalid), _defineProperty(_classnames, styles.focus, this.state.focus), _classnames))
      }, /*#__PURE__*/React.createElement("span", {
        ref: this.handleInputContainerRef,
        className: classnames(styles.inputContainer, (_classnames2 = {}, _defineProperty(_classnames2, styles.invalid, this.invalid), _defineProperty(_classnames2, styles.disabled, disabled), _defineProperty(_classnames2, styles[size], size), _defineProperty(_classnames2, styles.focus, this.state.focus), _classnames2))
      }, children, /*#__PURE__*/React.createElement("span", {
        className: styles.inputLayout,
        onClick: this.handleClick
      }, selectedOption && this.renderIcon(), /*#__PURE__*/React.createElement("input", Object.assign({}, inputProps, {
        id: this.id,
        className: classnames(styles.input, _defineProperty({}, styles.editable, editable)),
        onFocus: this.handleFocus,
        onChange: editable ? this.handleChange : null,
        onKeyDown: this.handleKeyDown,
        onKeyUp: this.handleKeyUp,
        onBlur: this.handleBlur,
        type: "text",
        ref: createChainedFunction(this.props.inputRef, this.handleInputRef),
        role: "combobox",
        "aria-expanded": this.expanded,
        "aria-owns": this.expanded ? this._optionsId : null,
        "aria-describedby": this._assistId,
        "aria-controls": this.expanded ? this._optionsId : null,
        "aria-autocomplete": editable ? 'list' : null,
        "aria-haspopup": "true",
        autoComplete: editable ? 'off' : null,
        required: required,
        "aria-required": required,
        "aria-invalid": this.invalid ? 'true' : null,
        readOnly: !editable,
        disabled: disabled || readOnly
      })), /*#__PURE__*/React.createElement(IconArrowOpenDownLine, {
        width: "0.875rem",
        height: "0.875rem",
        className: styles.icon
      })))), /*#__PURE__*/React.createElement(Dialog, {
        open: this.state.expanded
      }, /*#__PURE__*/React.createElement(Position, {
        trackPosition: this.expanded,
        placement: this.placement,
        onPositioned: this.handlePositioned,
        target: this._inputContainer,
        constrain: constrain
      }, /*#__PURE__*/React.createElement(Position.Content, null, /*#__PURE__*/React.createElement(SelectOptionsList, {
        options: options,
        selectedOption: selectedOption,
        optionsId: this._optionsId,
        menuRef: this.handleMenuRef,
        visibleOptionsCount: visibleOptionsCount,
        loadingText: loadingText,
        emptyOption: emptyOption,
        onStaticClick: onStaticClick,
        onHighlightOption: this.highlightOption,
        onSelect: this.select,
        expanded: this.state.expanded,
        onKeyDown: this.handleKeyDown,
        onKeyUp: this.handleKeyUp,
        onBlur: this.handleBlur,
        highlightedIndex: this.state.highlightedIndex,
        maxWidth: this.props.optionsMaxWidth
      })))), /*#__PURE__*/React.createElement("span", {
        id: this._assistId,
        style: {
          display: 'none'
        }
      }, assistiveText), /*#__PURE__*/React.createElement(ScreenReaderContent, null, /*#__PURE__*/React.createElement("span", {
        role: "log",
        "aria-live": "polite",
        "aria-atomic": "true"
      }, announcement)));
    }
  }, {
    key: "id",
    get: function get() {
      return this.props.id || this._defaultId;
    }
  }, {
    key: "expanded",
    get: function get() {
      return this.state.positioned && this.state.expanded;
    }
  }, {
    key: "placement",
    get: function get() {
      if (this.state.expanded) {
        return this.props.placement || 'bottom stretch';
      } else {
        return 'offscreen';
      }
    }
  }, {
    key: "invalid",
    get: function get() {
      return this.props.messages && this.props.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }, {
    key: "selectedIndex",
    get: function get() {
      return this.getSelectedIndex(this.props);
    }
  }]);

  SelectField.displayName = "SelectField";
  return SelectField;
}(Component), _class2.propTypes = {
  /**
  * the selected value (must be accompanied by an `onSelect` prop)
  */
  selectedOption: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    children: PropTypes.node,
    disabled: PropTypes.bool,
    icon: PropTypes.func,
    groupLabel: PropTypes.bool
  })]),
  options: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    children: PropTypes.node,
    disabled: PropTypes.bool,
    icon: PropTypes.func,
    groupLabel: PropTypes.bool
  })),

  /**
   * The placement of the menu in relation to the input, passed down to Position
   */
  placement: LayoutPropTypes.placement,
  label: PropTypes.node.isRequired,
  messages: PropTypes.arrayOf(FormPropTypes.message),
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  layout: PropTypes.oneOf(['stacked', 'inline']),

  /**
   * Options dropdown can be wider than input if optionsMaxWidth is provided
   */
  optionsMaxWidth: PropTypes.string,

  /**
   * Give the Spinner a title to be read by screenreaders. Disables menu
   * interaction and renders a Spinner in its place.
   */
  loadingText: PropTypes.string,

  /**
  * Determines whether the user can type in the input
  */
  editable: PropTypes.bool,

  /**
   * The menu content to render when no options are present or are filtered away
   */
  emptyOption: PropTypes.node,

  /**
   * The amount of options that are visible without scrolling
   */
  visibleOptionsCount: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Custom text to be read by the screenreader when Select is focused
   */
  assistiveText: PropTypes.string,

  /**
   * Additional text to provide screenreader feedback upon user action
   */
  announcement: PropTypes.string,

  /**
   * Callback fired when the options have been positioned
   */
  onPositioned: PropTypes.func,

  /**
   * Callback fired on the option selection
   */
  onSelect: PropTypes.func,

  /**
   * Callback fired when the empty option is selected by click
   */
  onStaticClick: PropTypes.func,

  /**
   * Callback fired when an option gets highlighted
   */
  onHighlight: PropTypes.func,

  /**
   * Width of the whole container
   */
  width: PropTypes.string,

  /**
   * Determines whether or not to display the FormField inline
   */
  inline: PropTypes.bool,

  /**
   * Children to be rendered inside the input container before the actual input
   */
  children: PropTypes.node,

  /**
   * Callback fired when the input gains focus
   */
  onFocus: PropTypes.func,

  /**
   * Callback fired when the input container lost focus
   */
  onBlur: PropTypes.func,

  /**
   * Callback fired on keyDown for the input
   */
  onKeyDown: PropTypes.func,

  /**
   * Callback fired on keyUp for the input
   */
  onKeyUp: PropTypes.func,

  /**
   * Callback fired on click for the input
   */
  onClick: PropTypes.func,

  /**
   * Callback fired on change for the input
   */
  onInputChange: PropTypes.func,

  /**
   * Callback fired when the menu is opened
   */
  onOpen: PropTypes.func,

  /**
   * Callback fired when the menu is closed
   */
  onClose: PropTypes.func,

  /**
   * Optional id for the FormField
   */
  id: PropTypes.string,

  /**
  * a function that provides a reference to the internal input element
  */
  inputRef: PropTypes.func,

  /**
  * should the menu be closed when a selection happens
  */
  closeOnSelect: PropTypes.bool,

  /**
   * The parent in which to constrain the menu.
   * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
   * or a function returning an element
   */
  constrain: LayoutPropTypes.constrain,
  disabled: PropTypes.bool,
  readOnly: PropTypes.bool,
  required: PropTypes.bool
}, _class2.defaultProps = {
  emptyOption: '---',
  selectedOption: null,
  size: 'medium',
  loadingText: null,
  announcement: null,
  options: [],
  visibleOptionsCount: 8,
  closeOnSelect: true,
  editable: false,
  inline: false,
  constrain: 'window',
  onPositioned: function onPositioned() {},
  onSelect: function onSelect(event, selectedOption) {},
  onStaticClick: function onStaticClick(event) {},
  onHighlight: function onHighlight(event) {},
  onClick: function onClick(event) {},
  onInputChange: function onInputChange(event) {},
  onFocus: function onFocus(event) {},
  onBlur: function onBlur(event) {},
  onKeyDown: function onKeyDown(event) {},
  onKeyUp: function onKeyUp(event) {},
  onOpen: function onOpen(event) {},
  onClose: function onClose(event) {},
  disabled: false,
  readOnly: false,
  required: false,
  inputRef: void 0,
  id: void 0,
  children: null,
  width: void 0,
  assistiveText: void 0,
  optionsMaxWidth: void 0,
  layout: void 0,
  messages: void 0,
  placement: void 0
}, _temp)) || _class) || _class);
export default SelectField;
export { SelectField };
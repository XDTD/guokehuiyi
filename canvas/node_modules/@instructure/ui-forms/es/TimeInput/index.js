import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _dec3, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { themeable } from '@instructure/ui-themeable';
import { controllable } from '@instructure/ui-prop-types';
import { I18nPropTypes, DateTime, Locale } from '@instructure/ui-i18n';
import { deprecated, omitProps, pickProps } from '@instructure/ui-react-utils';
import { testable } from '@instructure/ui-testable';
import { Select } from '../Select';
var styles = {
  componentId: 'fabZw',
  template: function template(theme) {
    return "\n\n.fabZw_bGBk{background:".concat(theme.background || 'inherit', ";color:").concat(theme.color || 'inherit', ";font-family:").concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', "}");
  },
  'root': 'fabZw_bGBk'
};
import theme from './theme';
/**
---
category: components/deprecated
id: DeprecatedTimeInput
---
**/

var TimeInput = (_dec = testable(), _dec2 = themeable(theme, styles), _dec3 = deprecated('7.0.0', null, 'Use @instructure/ui-time-select instead'), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(TimeInput, _Component);

  var _super = _createSuper(TimeInput);

  function TimeInput() {
    _classCallCheck(this, TimeInput);

    return _super.apply(this, arguments);
  }

  _createClass(TimeInput, [{
    key: "locale",
    value: function locale() {
      return this.props.locale || this.context.locale || Locale.browserLocale();
    }
  }, {
    key: "timezone",
    value: function timezone() {
      return this.props.timezone || this.context.timezone || DateTime.browserTimeZone();
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          defaultToFirstOption = _this$props.defaultToFirstOption,
          defaultValue = _this$props.defaultValue,
          format = _this$props.format,
          label = _this$props.label,
          onChange = _this$props.onChange,
          step = _this$props.step,
          value = _this$props.value,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly;
      var locale = this.locale();
      var timezone = this.timezone();
      var ignoredProps = ['defaultOption', 'selectedOption'];
      var selectProps = pickProps(this.props, omitProps(Select.propTypes, {}, ignoredProps));
      var options = this.renderOptions(defaultValue, format, locale, step, timezone, value);
      var defaultOption = this.getDefaultOption(defaultToFirstOption, defaultValue, options);
      var selectedOption = this.getSelectedOption(format, locale, timezone, value);
      return /*#__PURE__*/React.createElement(Select, Object.assign({
        ref: function ref(el) {
          _this._select = el;
        },
        editable: true,
        label: label,
        defaultOption: defaultOption,
        selectedOption: selectedOption,
        onChange: onChange,
        disabled: disabled,
        readOnly: readOnly
      }, selectProps), options);
    }
  }, {
    key: "renderOptions",
    value: function renderOptions(defaultValue, format, locale, step, timezone, value) {
      var date = this.getBaseDateForRendering(defaultValue, locale, timezone, value);
      var options = [];

      for (var hour = 0; hour < 24; hour++) {
        for (var minute = 0; minute < 60 / step; minute++) {
          var minutes = minute * step;
          date.hour(hour).minute(minutes);
          options.push( /*#__PURE__*/React.createElement("option", {
            key: "".concat(hour, ":").concat(minutes),
            value: date.toISOString()
          }, date.format(format)));
        }
      }

      return options;
    }
  }, {
    key: "getBaseDateForRendering",
    value: function getBaseDateForRendering(defaultValue, locale, timezone, value) {
      var baseDate;
      var baseValue = value || defaultValue;

      if (baseValue) {
        baseDate = DateTime.parse(baseValue, locale, timezone);
      } else {
        baseDate = DateTime.now(locale, timezone);
      }

      return baseDate.second(0).millisecond(0);
    } // TODO: Change Autocomplete to allow specifying a string for selectedOption (like defaultOption allows)

  }, {
    key: "getSelectedOption",
    value: function getSelectedOption(format, locale, timezone, value) {
      if (!value) {
        return;
      }

      var date = DateTime.parse(value, locale, timezone);
      return {
        value: date.toISOString(),
        label: date.format(format)
      };
    }
  }, {
    key: "getDefaultOption",
    value: function getDefaultOption(defaultToFirstOption, defaultValue, options) {
      return defaultValue || (defaultToFirstOption ? options[0].props.value : void 0);
    }
  }, {
    key: "focused",

    /* eslint-disable react/require-default-props */

    /* eslint-enable react/require-default-props */
    get: function get() {
      return this._select && this._select.focused;
    }
  }]);

  TimeInput.displayName = "TimeInput";
  return TimeInput;
}(Component), _class2.propTypes = {
  /**
   * Whether to default to the first option when `defaultValue` hasn't been specified.
   */
  defaultToFirstOption: PropTypes.bool,

  /**
   * An ISO 8601 formatted date string to use if `value` isn't provided.
   */
  defaultValue: I18nPropTypes.iso8601,

  /**
   * The format to use when displaying the possible and currently selected options.
   *
   * See [moment.js formats](https://momentjs.com/docs/#/displaying/format/) for the list of available formats.
   */
  format: PropTypes.string,

  /**
   * The label associated with the underlying [TextInput](#TextInput).
   */
  label: PropTypes.node.isRequired,

  /**
   * A standard language identifier.
   *
   * See [moment.js i18n](https://momentjs.com/docs/#/i18n/) for more details.
   *
   * This property can also be set via a context property and if both are set then the component property takes
   * precedence over the context property.
   *
   * The web browser's locale will be used if no value is set via a component property or a context
   * property.
   */
  locale: PropTypes.string,

  /**
   * Callback fired when one of the menu options gets selected
   */
  onChange: PropTypes.func,

  /**
   * The number of minutes to increment by when generating the allowable options.
   */
  step: PropTypes.oneOf([5, 10, 15, 20, 30, 60]),

  /**
   * A timezone identifier in the format: Area/Location
   *
   * See [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the list
   * of possible options.
   *
   * This property can also be set via a context property and if both are set then the component property takes
   * precedence over the context property.
   *
   * The web browser's timezone will be used if no value is set via a component property or a context
   * property.
   */
  timezone: PropTypes.string,

  /**
   * An ISO 8601 formatted date string representing the current selected value
   * (must be accompanied by an onChange prop).
   */
  value: controllable(I18nPropTypes.iso8601),

  /**
   * Whether or not to disable the select
   */
  disabled: PropTypes.bool,

  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: PropTypes.bool
}, _class2.defaultProps = {
  defaultToFirstOption: false,
  format: 'LT',
  step: 30
}, _class2.contextTypes = {
  locale: PropTypes.string,
  timezone: PropTypes.string
}, _temp)) || _class) || _class) || _class);
export default TimeInput;
export { TimeInput };
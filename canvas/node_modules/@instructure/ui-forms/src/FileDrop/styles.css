/* stylelint-disable selector-max-class */
.root {
  position: relative;
}

.label {
  display: block;
  box-sizing: border-box;
  position: relative;
}

.input {
  width: 0.0625rem;
  height: 0.0625rem;
  margin: -0.0625rem;
  padding: 0;
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  border: 0;
}

.labelContent {
  display: block;
  box-sizing: border-box;
  position: relative;
  /* stylelint-disable-next-line scale-unlimited/declaration-strict-value */
  z-index: 1;
  text-align: center;
  border-radius: var(--borderRadius);
  border: var(--borderWidth) var(--borderStyle) var(--borderColor);
  cursor: pointer;

  &:hover {
    border-color: var(--hoverBorderColor);
  }

  &::before {
    content: "";
    position: absolute;
    top: -0.375rem;
    left: -0.375rem; /* stylelint-disable-line property-blacklist */
    right: -0.375rem; /* stylelint-disable-line property-blacklist */
    bottom: -0.375rem;
    border: var(--focusBorderWidth) var(--focusBorderStyle) var(--focusBorderColor);
    border-radius: calc(var(--borderRadius) * 1.5);
    opacity: 0;
    transform: scale(0.9);
    transition: all 0.2s;
    pointer-events: none;
  }
}

.layout {
  display: block;
  overflow: hidden;
  border-radius: var(--borderRadius);
}

.focused {
  .labelContent::before {
    opacity: 1;
    transform: scale(1);
  }
}

.dragAccepted {
  .labelContent {
    border-color: var(--acceptedColor);
  }

  &.focused {
    .labelContent::before {
      border-color: var(--acceptedColor);
    }
  }
}

.dragRejected {
  .labelContent {
    border-color: var(--rejectedColor);
  }

  &.focused {
    .labelContent::before {
      border-color: var(--rejectedColor);
    }
  }
}

.functionallyDisabled {
  cursor: not-allowed;
  pointer-events: none;
}

.visuallyDisabled {
  opacity: 0.5;

  .labelContent {
    border-color: var(--disabledColor);
  }
}

/* stylelint-enable selector-max-class */

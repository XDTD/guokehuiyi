"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileDrop = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _keycode = _interopRequireDefault(require("keycode"));

var _FormPropTypes = require("@instructure/ui-form-field/lib/FormPropTypes.js");

var _FormFieldMessages = require("@instructure/ui-form-field/lib/FormFieldMessages");

var _View = require("@instructure/ui-view/lib/View");

var _uid = require("@instructure/uid");

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _isEdge = require("@instructure/ui-utils/lib/isEdge.js");

var _accepts = require("./utils/accepts");

var _getEventFiles = require("./utils/getEventFiles");

var _theme = _interopRequireDefault(require("./theme"));

var _dec, _dec2, _dec3, _class, _class2, _temp;

var styles = {
  componentId: 'cDEpT',
  template: function template(theme) {
    return "\n\n.cDEpT_blJt,.cDEpT_bGBk{position:relative}\n\n.cDEpT_blJt{box-sizing:border-box;display:block}\n\n.cDEpT_cwos{border:0;clip:rect(0 0 0 0);height:0.0625rem;margin:-0.0625rem;overflow:hidden;padding:0;position:absolute;width:0.0625rem}\n\n.cDEpT_QUBp{border:".concat(theme.borderWidth || 'inherit', " ").concat(theme.borderStyle || 'inherit', " ").concat(theme.borderColor || 'inherit', ";border-radius:").concat(theme.borderRadius || 'inherit', ";box-sizing:border-box;cursor:pointer;display:block;position:relative;text-align:center;z-index:1}\n\n[dir=ltr] .cDEpT_QUBp,[dir=rtl] .cDEpT_QUBp{text-align:center}\n\n.cDEpT_QUBp:hover{border-color:").concat(theme.hoverBorderColor || 'inherit', "}\n\n.cDEpT_QUBp:before{border:").concat(theme.focusBorderWidth || 'inherit', " ").concat(theme.focusBorderStyle || 'inherit', " ").concat(theme.focusBorderColor || 'inherit', ";border-radius:calc(").concat(theme.borderRadius || 'inherit', "*1.5);bottom:-0.375rem;content:\"\";left:-0.375rem;opacity:0;pointer-events:none;position:absolute;right:-0.375rem;top:-0.375rem;transform:scale(0.9);transition:all 0.2s}\n\n.cDEpT_byIz{border-radius:").concat(theme.borderRadius || 'inherit', ";display:block;overflow:hidden}\n\n.cDEpT_cVYB .cDEpT_QUBp:before{opacity:1;transform:scale(1)}\n\n.cDEpT_cbYS.cDEpT_cVYB .cDEpT_QUBp:before,.cDEpT_cbYS .cDEpT_QUBp{border-color:").concat(theme.acceptedColor || 'inherit', "}\n\n.cDEpT_cvQK.cDEpT_cVYB .cDEpT_QUBp:before,.cDEpT_cvQK .cDEpT_QUBp{border-color:").concat(theme.rejectedColor || 'inherit', "}\n\n.cDEpT_cFXB{cursor:not-allowed;pointer-events:none}\n\n.cDEpT_eXzv{opacity:0.5}\n\n.cDEpT_eXzv .cDEpT_QUBp{border-color:").concat(theme.disabledColor || 'inherit', "}");
  },
  'label': 'cDEpT_blJt',
  'root': 'cDEpT_bGBk',
  'input': 'cDEpT_cwos',
  'labelContent': 'cDEpT_QUBp',
  'layout': 'cDEpT_byIz',
  'focused': 'cDEpT_cVYB',
  'dragAccepted': 'cDEpT_cbYS',
  'dragRejected': 'cDEpT_cvQK',
  'functionallyDisabled': 'cDEpT_cFXB',
  'visuallyDisabled': 'cDEpT_eXzv'
};

function keyEventIsClickButton(e) {
  return e.keyCode === _keycode.default.codes.space || e.keyCode === _keycode.default.codes.enter;
} // Used try-catch due to missing document/navigator references in Jenkins


function isBrowserMS() {
  var result = false;

  try {
    result = document.documentMode || _isEdge.isEdge;
  } catch (e) {} // eslint-disable-line no-empty


  return result;
}

var IS_MS = isBrowserMS();
/**
---
category: components/deprecated
id: DeprecatedFileDrop
---
**/

var FileDrop = (_dec = (0, _deprecated.deprecated)('7.0.0', null, 'Use FileDrop from ui-file-drop instead.'), _dec2 = (0, _testable.testable)(), _dec3 = (0, _themeable.themeable)(_theme.default, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(FileDrop, _Component);

  var _super = (0, _createSuper2.default)(FileDrop);

  function FileDrop(props) {
    var _this;

    (0, _classCallCheck2.default)(this, FileDrop);
    _this = _super.call(this, props);
    _this.state = {
      isDragAccepted: false,
      isDragRejected: false,
      isFocused: false,
      isFileBrowserDisplayed: false
    };
    _this.enterCounter = 0;
    _this.fileInputEl = null;
    _this.defaultId = null;

    _this.handleDragEnter = function (e) {
      e.preventDefault(); // Count the dropzone and any children that are entered.

      _this.enterCounter += 1; // Don't trigger onDragEnter for each children after the first one

      if (_this.enterCounter > 1) {
        return;
      }

      var allFilesAccepted = _this.allFilesAccepted(_this.getDataTransferItems(e));

      _this.setState({
        isDragAccepted: allFilesAccepted,
        isDragRejected: !allFilesAccepted
      });

      _this.props.onDragEnter(e);
    };

    _this.handleDragOver = function (e) {
      e.preventDefault();
      e.stopPropagation();

      try {
        var event = e;
        event.dataTransfer.dropEffect = 'copy';
      } catch (err) {// continue regardless of error
      }

      _this.props.onDragOver(e);

      return false;
    };

    _this.handleDragLeave = function (e) {
      e.preventDefault();
      _this.enterCounter -= 1; // Only deactivate once the dropzone and all children was left

      if (_this.enterCounter > 0) {
        return;
      }

      _this.setState({
        isDragAccepted: false,
        isDragRejected: false
      });

      _this.props.onDragLeave(e);
    };

    _this.handleChange = function (e) {
      var _this$props = _this.props,
          onDrop = _this$props.onDrop,
          onDropAccepted = _this$props.onDropAccepted,
          onDropRejected = _this$props.onDropRejected,
          enablePreview = _this$props.enablePreview;

      var fileList = _this.getDataTransferItems(e, enablePreview);

      var _this$parseFiles = _this.parseFiles(fileList),
          _this$parseFiles2 = (0, _slicedToArray2.default)(_this$parseFiles, 2),
          acceptedFiles = _this$parseFiles2[0],
          rejectedFiles = _this$parseFiles2[1];

      e.preventDefault();
      _this.enterCounter = 0;
      onDrop(acceptedFiles, rejectedFiles, e);

      if (rejectedFiles.length > 0) {
        onDropRejected(rejectedFiles, e);
      }

      if (acceptedFiles.length > 0) {
        onDropAccepted(acceptedFiles, e);
      }

      _this.setState({
        isDragAccepted: false,
        isDragRejected: false,
        isFileBrowserDisplayed: false
      });
    };

    _this.fileAccepted = function (file) {
      return (0, _accepts.accepts)(file, _this.props.accept);
    };

    _this.handleRef = function (el) {
      _this.fileInputEl = el;
    };

    _this.handleBlur = function () {
      _this.setState({
        isFocused: false,
        isFileBrowserDisplayed: false
      });
    };

    _this.handleFocus = function () {
      _this.setState({
        isFocused: true,
        isFileBrowserDisplayed: false
      });
    };

    _this.handleClick = function (e) {
      if (_this.fileInputEl.value && _this.props.allowRepeatFileSelection) {
        _this.fileInputEl.value = null;
      } // focus the input (because FF won't)


      _this.fileInputEl.focus();

      _this.props.onClick(e);

      _this.setState({
        isFileBrowserDisplayed: true
      });
    };

    _this.handleKeyDown = function (event) {
      if (_this.state.isFocused && keyEventIsClickButton(event)) {
        if (_this.props.allowRepeatFileSelection) {
          _this.fileInputEl.value = null;
        } // This bit of logic is necessary for MS browsers but causes unwanted warnings in Firefox
        // So we need to apply this logic only on MS browsers

        /* istanbul ignore if  */


        if (IS_MS) {
          event.stopPropagation();
          event.preventDefault();

          _this.fileInputEl.click();
        }
      }
    };

    _this.handleKeyUp = function (event) {
      // This is to handle the case where ESC is pressed inside a Dialog so that
      // closing the file browser dialog doesn't also close the Dialog.
      if (event.keyCode === _keycode.default.codes.esc && _this.state.isFileBrowserDisplayed) {
        event.stopPropagation();
        event.nativeEvent.stopImmediatePropagation();

        _this.setState({
          isFileBrowserDisplayed: false
        });
      }
    };

    _this.defaultId = (0, _uid.uid)('FileDrop');
    _this.messagesId = (0, _uid.uid)('FileDrop-messages');
    return _this;
  }

  (0, _createClass2.default)(FileDrop, [{
    key: "getDataTransferItems",
    value: function getDataTransferItems(event, enablePreview) {
      var list = Array.from((0, _getEventFiles.getEventFiles)(event, this.fileInputEl));

      if (list.length > 1) {
        list = this.props.allowMultiple ? list : [list[0]];
      }

      if (enablePreview) {
        return list.map(function (file) {
          return Object.assign(file, {
            preview: window.URL.createObjectURL(file)
          });
        });
      }

      return list;
    }
  }, {
    key: "parseFiles",
    value: function parseFiles(fileList) {
      var _this2 = this;

      var acceptedFiles = [];
      var rejectedFiles = [];
      fileList.forEach(function (file) {
        if (_this2.fileAccepted(file) && _this2.fileMatchSize(file)) {
          acceptedFiles.push(file);
        } else {
          rejectedFiles.push(file);
        }
      });
      return [acceptedFiles, rejectedFiles];
    }
  }, {
    key: "fileMatchSize",
    value: function fileMatchSize(file) {
      return file.size <= this.props.maxSize && file.size >= this.props.minSize;
    }
  }, {
    key: "allFilesAccepted",
    value: function allFilesAccepted(files) {
      return files.every(this.fileAccepted);
    }
  }, {
    key: "acceptStr",
    value: function acceptStr() {
      var accept = this.props.accept;
      return accept ? (0, _accepts.getAcceptList)(accept).join(',') : null;
    }
  }, {
    key: "renderLabel",
    value: function renderLabel() {
      var _this$props2 = this.props,
          label = _this$props2.label,
          interaction = _this$props2.interaction,
          disabled = _this$props2.disabled,
          readOnly = _this$props2.readOnly;
      var Label = label;

      if (typeof Label !== 'function') {
        return Label;
      }

      return /*#__PURE__*/_react.default.createElement(Label, {
        isDragAccepted: this.state.isDragAccepted,
        isDragRejected: this.state.isDragRejected,
        disabled: interaction === 'disabled' || disabled,
        readOnly: interaction === 'readonly' || readOnly,
        interaction: interaction
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _classes;

      var _this$props3 = this.props,
          allowMultiple = _this$props3.allowMultiple,
          disabled = _this$props3.disabled,
          readOnly = _this$props3.readOnly,
          interaction = _this$props3.interaction;
      var id = this.props.id || this.defaultId; // make readonly input functionally disabled

      var functionallyDisabled = disabled || readOnly || interaction === 'disabled' || interaction === 'readonly';
      var classes = (_classes = {}, (0, _defineProperty2.default)(_classes, styles.label, true), (0, _defineProperty2.default)(_classes, styles.functionallyDisabled, functionallyDisabled), (0, _defineProperty2.default)(_classes, styles.visuallyDisabled, interaction === 'disabled' || disabled), (0, _defineProperty2.default)(_classes, styles.dragRejected, this.state.isDragRejected || this.invalid), (0, _defineProperty2.default)(_classes, styles.dragAccepted, this.state.isDragAccepted), (0, _defineProperty2.default)(_classes, styles.focused, this.state.isFocused), _classes);
      var props = (0, _omitProps.omitProps)(this.props, FileDrop.propTypes);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: styles.root
      }, /*#__PURE__*/_react.default.createElement("label", {
        className: (0, _classnames.default)(classes),
        htmlFor: id,
        onDragEnter: this.handleDragEnter,
        onDragOver: this.handleDragOver,
        onDragLeave: this.handleDragLeave,
        onDrop: this.handleChange
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: styles.labelContent
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: styles.layout
      }, this.renderLabel()))), /*#__PURE__*/_react.default.createElement("input", Object.assign({}, props, {
        onClick: this.handleClick,
        type: "file",
        className: styles.input,
        id: id,
        ref: this.handleRef,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        onKeyDown: this.handleKeyDown,
        onKeyUp: this.handleKeyUp,
        multiple: allowMultiple,
        accept: this.acceptStr(),
        onChange: this.handleChange,
        "aria-describedby": this.hasMessages ? this.messagesId : null,
        disabled: functionallyDisabled
      })), this.hasMessages ? /*#__PURE__*/_react.default.createElement(_View.View, {
        display: "block",
        margin: "small 0 0"
      }, /*#__PURE__*/_react.default.createElement(_FormFieldMessages.FormFieldMessages, {
        id: this.messagesId,
        messages: this.props.messages
      })) : null);
    }
  }, {
    key: "hasMessages",
    get: function get() {
      return this.props.messages && this.props.messages.length > 0;
    }
  }, {
    key: "invalid",
    get: function get() {
      return this.hasMessages && this.props.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }]);
  FileDrop.displayName = "FileDrop";
  return FileDrop;
}(_react.Component), _class2.propTypes = {
  /**
  * the id of the input (to link it to its label for a11y)
  */
  id: _propTypes.default.string,

  /**
  * the content of FileDrop, can be a component or an react node.
  * If given a component, it will receive isDragAccepted and isDragRejected as props
  */
  label: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.node]).isRequired,

  /**
  * the mime media type/s or file extension/s allowed to be dropped inside
  */
  accept: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]),

  /**
  * object with shape: `{
  * text: PropTypes.string,
  * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *   }`
  */
  messages: _propTypes.default.arrayOf(_FormPropTypes.FormPropTypes.message),

  /**
  * callback called when clicking on drop area to select files to upload
  */
  onClick: _propTypes.default.func,

  /**
  * callback called when dropping files or when the file dialog window exits successfully
  */
  onDrop: _propTypes.default.func,

  /**
  * callback called when dropping allowed files
  */
  onDropAccepted: _propTypes.default.func,

  /**
  * callback called when dropping rejected files
  */
  onDropRejected: _propTypes.default.func,

  /**
  * callback called when dragging files
  * and passing through FileDrop's content for the first time
  */
  onDragEnter: _propTypes.default.func,

  /**
  * callback called when dragging files and passing through FileDrop's content
  */
  onDragOver: _propTypes.default.func,

  /**
  * callback called when dragging files and leaving FileDrop's content
  */
  onDragLeave: _propTypes.default.func,

  /**
  * flag to use window.URL.createObjectURL for each dropped file and passing it through file.preview
  */
  enablePreview: _propTypes.default.bool,

  /**
  * flag to allow selection multiple files to drop at once
  */
  allowMultiple: _propTypes.default.bool,

  /**
  * the maximum file size allowed
  */
  maxSize: _propTypes.default.number,

  /**
  * the minimum file size allowed
  */
  minSize: _propTypes.default.number,

  /**
   * Whether or not to allow the file browser to upload the same file more than once.
   */
  allowRepeatFileSelection: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  // eslint-disable-line react/require-default-props
  readOnly: _propTypes.default.bool,
  // eslint-disable-line react/require-default-props

  /**
  * Specifies if interaction with the input is enabled, disabled, or readonly.
  */
  interaction: _propTypes.default.oneOf(['enabled', 'disabled', 'readonly'])
}, _class2.defaultProps = {
  onClick: function onClick(e) {},
  onDrop: function onDrop(acceptedFiles, rejectedFiles, e) {},
  onDropAccepted: function onDropAccepted(acceptedFiles, e) {},
  onDropRejected: function onDropRejected(rejectedFiles, e) {},
  onDragEnter: function onDragEnter(e) {},
  onDragOver: function onDragOver(e) {},
  onDragLeave: function onDragLeave(e) {},
  enablePreview: false,
  allowMultiple: false,
  allowRepeatFileSelection: true,
  maxSize: Infinity,
  minSize: 0,
  interaction: 'enabled',
  messages: [],
  id: void 0,
  accept: void 0
}, _temp)) || _class) || _class) || _class);
exports.FileDrop = FileDrop;
var _default = FileDrop;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextArea = exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _controllable = require("@instructure/ui-prop-types/lib/controllable.js");

var _FormPropTypes = require("@instructure/ui-form-field/lib/FormPropTypes.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _TextArea = require("@instructure/ui-text-area/lib/TextArea");

var _dec, _class, _class2, _temp;

/**
---
category: components/deprecated
id: DeprecatedTextArea
---
**/
var TextArea = (_dec = (0, _deprecated.deprecated)('7.0.0', null, 'Use TextArea from ui-text-area instead.'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(TextArea, _Component);

  var _super = (0, _createSuper2.default)(TextArea);

  function TextArea() {
    var _this;

    (0, _classCallCheck2.default)(this, TextArea);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._textArea = null;
    return _this;
  }

  (0, _createClass2.default)(TextArea, [{
    key: "focus",
    value: function focus() {
      this._textArea && this._textArea.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/_react.default.createElement(_TextArea.TextArea, Object.assign({
        ref: function ref(component) {
          _this2._textArea = component;
        }
      }, this.props));
    }
  }, {
    key: "minHeight",
    get: function get() {
      return this._textArea && this._textArea.minHeight;
    }
  }, {
    key: "invalid",
    get: function get() {
      return this._textArea && this._textArea.invalid;
    }
  }, {
    key: "id",
    get: function get() {
      return this._textArea && this._textArea.id;
    }
  }, {
    key: "focused",
    get: function get() {
      return this._textArea && this._textArea.focused;
    }
  }, {
    key: "value",
    get: function get() {
      return this._textArea && this._textArea.value;
    }
  }]);
  TextArea.displayName = "TextArea";
  return TextArea;
}(_react.Component), _class2.propTypes = {
  label: _propTypes.default.node.isRequired,
  id: _propTypes.default.string,

  /**
  * sets the font-size for the textarea
  */
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),
  layout: _propTypes.default.oneOf(['stacked', 'inline']),

  /**
  * the textarea will expand vertically to fit the height of the content,
  * unless its content exceeds `maxHeight`
  */
  autoGrow: _propTypes.default.bool,

  /**
  * is the textarea resizable (in supported browsers)
  */
  resize: _propTypes.default.oneOf(['none', 'both', 'horizontal', 'vertical']),

  /**
  * a fixed width for the textarea
  */
  width: _propTypes.default.string,

  /**
  * a initial height for the textarea (if autoGrow is true it will grow vertically)
  */
  height: _propTypes.default.string,

  /**
  * when autoGrow is true, the textarea will never grow beyond this value
  */
  maxHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
  * object with shape: `{
  * text: PropTypes.string,
  * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *   }`
  */
  messages: _propTypes.default.arrayOf(_FormPropTypes.FormPropTypes.message),
  inline: _propTypes.default.bool,

  /**
  * Html placeholder text to display when the input has no value. This should be hint text, not a label
  * replacement.
  */
  placeholder: _propTypes.default.string,

  /**
   * Whether or not to disable the textarea
   */
  disabled: _propTypes.default.bool,

  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: _propTypes.default.bool,
  required: _propTypes.default.bool,

  /**
  * a function that provides a reference to the actual textarea element
  */
  textareaRef: _propTypes.default.func,

  /**
  * value to set on initial render
  */
  defaultValue: _propTypes.default.string,

  /**
  * the selected value (must be accompanied by an `onChange` prop)
  */
  value: (0, _controllable.controllable)(_propTypes.default.string),

  /**
  * when used with the `value` prop, the component will not control its own state
  */
  onChange: _propTypes.default.func
}, _class2.defaultProps = {
  size: 'medium',
  autoGrow: true,
  resize: 'none',
  inline: false,
  messages: [],
  disabled: false,
  readOnly: false,
  textareaRef: function textareaRef(textarea) {},
  layout: 'stacked',
  id: void 0,
  value: void 0,
  defaultValue: void 0,
  onChange: void 0,
  required: false,
  placeholder: void 0,
  width: void 0,
  height: void 0,
  maxHeight: void 0
}, _temp)) || _class);
exports.TextArea = TextArea;
var _default = TextArea;
exports.default = _default;
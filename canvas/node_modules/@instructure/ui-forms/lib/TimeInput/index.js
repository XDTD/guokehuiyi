"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeInput = exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _controllable = require("@instructure/ui-prop-types/lib/controllable.js");

var _I18nPropTypes = require("@instructure/ui-i18n/lib/I18nPropTypes.js");

var _DateTime = require("@instructure/ui-i18n/lib/DateTime.js");

var _Locale = require("@instructure/ui-i18n/lib/Locale.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _pickProps = require("@instructure/ui-react-utils/lib/pickProps.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _Select = require("../Select");

var _theme = _interopRequireDefault(require("./theme"));

var _dec, _dec2, _dec3, _class, _class2, _temp;

var styles = {
  componentId: 'fabZw',
  template: function template(theme) {
    return "\n\n.fabZw_bGBk{background:".concat(theme.background || 'inherit', ";color:").concat(theme.color || 'inherit', ";font-family:").concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', "}");
  },
  'root': 'fabZw_bGBk'
};

/**
---
category: components/deprecated
id: DeprecatedTimeInput
---
**/
var TimeInput = (_dec = (0, _testable.testable)(), _dec2 = (0, _themeable.themeable)(_theme.default, styles), _dec3 = (0, _deprecated.deprecated)('7.0.0', null, 'Use @instructure/ui-time-select instead'), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(TimeInput, _Component);

  var _super = (0, _createSuper2.default)(TimeInput);

  function TimeInput() {
    (0, _classCallCheck2.default)(this, TimeInput);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(TimeInput, [{
    key: "locale",
    value: function locale() {
      return this.props.locale || this.context.locale || _Locale.Locale.browserLocale();
    }
  }, {
    key: "timezone",
    value: function timezone() {
      return this.props.timezone || this.context.timezone || _DateTime.DateTime.browserTimeZone();
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          defaultToFirstOption = _this$props.defaultToFirstOption,
          defaultValue = _this$props.defaultValue,
          format = _this$props.format,
          label = _this$props.label,
          onChange = _this$props.onChange,
          step = _this$props.step,
          value = _this$props.value,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly;
      var locale = this.locale();
      var timezone = this.timezone();
      var ignoredProps = ['defaultOption', 'selectedOption'];
      var selectProps = (0, _pickProps.pickProps)(this.props, (0, _omitProps.omitProps)(_Select.Select.propTypes, {}, ignoredProps));
      var options = this.renderOptions(defaultValue, format, locale, step, timezone, value);
      var defaultOption = this.getDefaultOption(defaultToFirstOption, defaultValue, options);
      var selectedOption = this.getSelectedOption(format, locale, timezone, value);
      return /*#__PURE__*/_react.default.createElement(_Select.Select, Object.assign({
        ref: function ref(el) {
          _this._select = el;
        },
        editable: true,
        label: label,
        defaultOption: defaultOption,
        selectedOption: selectedOption,
        onChange: onChange,
        disabled: disabled,
        readOnly: readOnly
      }, selectProps), options);
    }
  }, {
    key: "renderOptions",
    value: function renderOptions(defaultValue, format, locale, step, timezone, value) {
      var date = this.getBaseDateForRendering(defaultValue, locale, timezone, value);
      var options = [];

      for (var hour = 0; hour < 24; hour++) {
        for (var minute = 0; minute < 60 / step; minute++) {
          var minutes = minute * step;
          date.hour(hour).minute(minutes);
          options.push( /*#__PURE__*/_react.default.createElement("option", {
            key: "".concat(hour, ":").concat(minutes),
            value: date.toISOString()
          }, date.format(format)));
        }
      }

      return options;
    }
  }, {
    key: "getBaseDateForRendering",
    value: function getBaseDateForRendering(defaultValue, locale, timezone, value) {
      var baseDate;
      var baseValue = value || defaultValue;

      if (baseValue) {
        baseDate = _DateTime.DateTime.parse(baseValue, locale, timezone);
      } else {
        baseDate = _DateTime.DateTime.now(locale, timezone);
      }

      return baseDate.second(0).millisecond(0);
    } // TODO: Change Autocomplete to allow specifying a string for selectedOption (like defaultOption allows)

  }, {
    key: "getSelectedOption",
    value: function getSelectedOption(format, locale, timezone, value) {
      if (!value) {
        return;
      }

      var date = _DateTime.DateTime.parse(value, locale, timezone);

      return {
        value: date.toISOString(),
        label: date.format(format)
      };
    }
  }, {
    key: "getDefaultOption",
    value: function getDefaultOption(defaultToFirstOption, defaultValue, options) {
      return defaultValue || (defaultToFirstOption ? options[0].props.value : void 0);
    }
  }, {
    key: "focused",

    /* eslint-disable react/require-default-props */

    /* eslint-enable react/require-default-props */
    get: function get() {
      return this._select && this._select.focused;
    }
  }]);
  TimeInput.displayName = "TimeInput";
  return TimeInput;
}(_react.Component), _class2.propTypes = {
  /**
   * Whether to default to the first option when `defaultValue` hasn't been specified.
   */
  defaultToFirstOption: _propTypes.default.bool,

  /**
   * An ISO 8601 formatted date string to use if `value` isn't provided.
   */
  defaultValue: _I18nPropTypes.I18nPropTypes.iso8601,

  /**
   * The format to use when displaying the possible and currently selected options.
   *
   * See [moment.js formats](https://momentjs.com/docs/#/displaying/format/) for the list of available formats.
   */
  format: _propTypes.default.string,

  /**
   * The label associated with the underlying [TextInput](#TextInput).
   */
  label: _propTypes.default.node.isRequired,

  /**
   * A standard language identifier.
   *
   * See [moment.js i18n](https://momentjs.com/docs/#/i18n/) for more details.
   *
   * This property can also be set via a context property and if both are set then the component property takes
   * precedence over the context property.
   *
   * The web browser's locale will be used if no value is set via a component property or a context
   * property.
   */
  locale: _propTypes.default.string,

  /**
   * Callback fired when one of the menu options gets selected
   */
  onChange: _propTypes.default.func,

  /**
   * The number of minutes to increment by when generating the allowable options.
   */
  step: _propTypes.default.oneOf([5, 10, 15, 20, 30, 60]),

  /**
   * A timezone identifier in the format: Area/Location
   *
   * See [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the list
   * of possible options.
   *
   * This property can also be set via a context property and if both are set then the component property takes
   * precedence over the context property.
   *
   * The web browser's timezone will be used if no value is set via a component property or a context
   * property.
   */
  timezone: _propTypes.default.string,

  /**
   * An ISO 8601 formatted date string representing the current selected value
   * (must be accompanied by an onChange prop).
   */
  value: (0, _controllable.controllable)(_I18nPropTypes.I18nPropTypes.iso8601),

  /**
   * Whether or not to disable the select
   */
  disabled: _propTypes.default.bool,

  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: _propTypes.default.bool
}, _class2.defaultProps = {
  defaultToFirstOption: false,
  format: 'LT',
  step: 30
}, _class2.contextTypes = {
  locale: _propTypes.default.string,
  timezone: _propTypes.default.string
}, _temp)) || _class) || _class) || _class);
exports.TimeInput = TimeInput;
var _default = TimeInput;
exports.default = _default;
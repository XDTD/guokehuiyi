"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectMultiple = exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _deepEqual = _interopRequireDefault(require("deep-equal"));

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _controllable = require("@instructure/ui-prop-types/lib/controllable.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _isActiveElement = require("@instructure/ui-dom-utils/lib/isActiveElement.js");

var _containsActiveElement = require("@instructure/ui-dom-utils/lib/containsActiveElement.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _Tag = require("@instructure/ui-tag/lib/Tag");

var _SelectField = require("../SelectField");

var _getOptionId = _interopRequireDefault(require("../utils/getOptionId"));

var _theme = _interopRequireDefault(require("./theme"));

var _dec, _dec2, _class, _class2, _temp;

var styles = {
  componentId: 'bknox',
  template: function template(theme) {
    return "\n\n.bknox_dTVD{-webkit-margin-end:0;-webkit-margin-start:".concat(theme.tagStartMargin || 'inherit', ";margin-inline-end:0;margin-inline-start:").concat(theme.tagStartMargin || 'inherit', ";margin-top:calc(").concat(theme.tagTopMargin || 'inherit', " + 0.125rem)}\n\n[dir=ltr] .bknox_dTVD{margin-left:").concat(theme.tagStartMargin || 'inherit', ";margin-right:0}\n\n[dir=rtl] .bknox_dTVD{margin-left:0;margin-right:").concat(theme.tagStartMargin || 'inherit', "}\n\n.bknox_dTVD:last-of-type{margin-bottom:").concat(theme.tagTopMargin || 'inherit', "}");
  },
  'tag': 'bknox_dTVD'
};

var optionType = _propTypes.default.shape({
  label: _propTypes.default.string.isRequired,
  value: _propTypes.default.string.isRequired,
  id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  dismissible: _propTypes.default.bool,
  children: _propTypes.default.node
});
/**
---
parent: DeprecatedSelect
---
**/


var SelectMultiple = (_dec = (0, _testable.testable)(), _dec2 = (0, _themeable.themeable)(_theme.default, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(SelectMultiple, _Component);

  var _super = (0, _createSuper2.default)(SelectMultiple);

  function SelectMultiple(_props) {
    var _this;

    (0, _classCallCheck2.default)(this, SelectMultiple);
    _this = _super.call(this, _props);
    _this._input = null;

    _this.focus = function () {
      _this._input && _this._input.focus();
    };

    _this.cleanInput = function () {
      if (_this._input.value !== '') {
        _this._input.value = '';

        _this.props.onInputChange(null, '');
      }
    };

    _this.matchSelectedOptions = function (state, selectedOption) {
      if (selectedOption) {
        // find options with values that match current selected values
        return state.filteredOptions.filter(function (option) {
          return selectedOption.find(function (selected) {
            return selected.value === option.value;
          });
        });
      } else {
        // find an option with a label that matches input's value
        return [state.filteredOptions.find(function (option) {
          return option.label.toLowerCase() === _this._input.value.toLowerCase();
        })].filter(function (value) {
          return value;
        });
      }
    };

    _this.amendMatchesToState = function (state, props, matches, onChange) {
      if (matches && matches.length > 0) {
        var selectedOption = [].concat((0, _toConsumableArray2.default)(state.selectedOption), (0, _toConsumableArray2.default)(matches));

        if (typeof onChange === 'function') {
          onChange(selectedOption);
        }

        return {
          filteredOptions: _this.getFilteredOptions(props, '', selectedOption),
          selectedOption: selectedOption
        };
      }

      return {
        filteredOptions: _this.getFilteredOptions(props, '', state.selectedOption)
      };
    };

    _this.handleClose = function (event) {
      return _this.setState(function (prevState, props) {
        var matches = _this.matchSelectedOptions(prevState);

        _this.cleanInput();

        return _this.amendMatchesToState(prevState, props, matches, function (selectedOption) {
          props.onChange(event, selectedOption);
        });
      }, _this.props.onClose);
    };

    _this.handleInputChange = function (event, value) {
      _this.props.onInputChange(event, value);

      var filterText = value.toLowerCase();

      if (_this.state.filterText !== filterText) {
        _this.setState(function (prevState, props) {
          return {
            filterText: filterText,
            filteredOptions: _this.getFilteredOptions(props, filterText, prevState.selectedOption)
          };
        });
      }
    };

    _this.handleKeyDown = function (event) {
      var _this$state = _this.state,
          filterText = _this$state.filterText,
          selectedOption = _this$state.selectedOption,
          length = _this$state.selectedOption.length; // If the user pressed backspace while focusing on input, input is emtpy and there's selectedOptions

      if ((event.key === 'Backspace' || event.key === 'Delete') && length > 0 && filterText === '' && (0, _isActiveElement.isActiveElement)(_this._input)) {
        _this.dismiss(event, selectedOption[length - 1]);
      }

      _this.props.onKeyDown(event);
    };

    _this.handleSelect = function (event, newOption) {
      _this.cleanInput();

      var newSelectedOption = [].concat((0, _toConsumableArray2.default)(_this.state.selectedOption), [newOption]);

      _this.setState(function (prevState, props) {
        var selectedOption = _this.isControlled ? prevState.selectedOption : newSelectedOption;
        return {
          filterText: '',
          filteredOptions: _this.getFilteredOptions(props, '', selectedOption),
          selectedOption: selectedOption
        };
      }, _this.focus);

      _this.props.onChange(event, newSelectedOption);
    };

    _this.dismiss = function (event, tag) {
      // to prevent expanding the menu onClick
      event.preventDefault();
      event.stopPropagation();
      var tagId = (0, _getOptionId.default)(tag);

      var newSelectedOption = _this.state.selectedOption.filter(function (o) {
        return (0, _getOptionId.default)(o) !== tagId;
      });

      _this.setState(function (prevState, props) {
        var selectedOption = _this.isControlled ? prevState.selectedOption : newSelectedOption;
        return {
          filteredOptions: _this.getFilteredOptions(props, prevState.filterText, selectedOption),
          selectedOption: selectedOption
        };
      }, _this.focus);

      _this.props.onChange(event, newSelectedOption);
    };

    _this.handleInputRef = function (node) {
      _this._input = node;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      _this.props.inputRef.apply((0, _assertThisInitialized2.default)(_this), [node].concat(args));
    };

    var _selectedOption = _this.getSelectedOptionFromProps(_props);

    var filteredOptions = _this.getFilteredOptions(_props, '', _selectedOption);

    _this.state = {
      filterText: '',
      selectedOption: _selectedOption,
      filteredOptions: filteredOptions
    };
    return _this;
  }

  (0, _createClass2.default)(SelectMultiple, [{
    key: "getOptionMap",
    value: function getOptionMap(options) {
      return options.reduce(function (map, option) {
        map[(0, _getOptionId.default)(option)] = option; // eslint-disable-line no-param-reassign

        return map;
      }, {});
    }
  }, {
    key: "findSelectedOptions",
    value: function findSelectedOptions() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      var optionMap = this.getOptionMap(options);
      return selected.map(function (option) {
        var id = (0, _getOptionId.default)(option);
        var foundOption = optionMap[id];

        if (typeof option === 'object') {
          return (0, _objectSpread2.default)({}, option, {}, foundOption);
        }

        return foundOption || option;
      });
    }
  }, {
    key: "getSelectedOptionFromProps",
    value: function getSelectedOptionFromProps(props, selected) {
      return selected ? this.findSelectedOptions(props.options, selected) : this.findSelectedOptions(props.options, props.selectedOption || props.defaultSelectedOption);
    }
  }, {
    key: "getFilteredOptions",
    value: function getFilteredOptions(_ref, filterText) {
      var filter = _ref.filter,
          options = _ref.options;
      var selectedOption = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      var filteredOptions = filter(options, filterText);
      var optionMap = this.getOptionMap(selectedOption);
      return filteredOptions.filter(function (o) {
        return !optionMap[(0, _getOptionId.default)(o)];
      });
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      var optionsChanged = !(0, _deepEqual.default)(this.props.options, nextProps.options);
      var selectedChanged = !(0, _deepEqual.default)(this.props.selectedOption, nextProps.selectedOption) && !this.props.disabled && !this.props.readOnly;

      if (optionsChanged || selectedChanged) {
        this.setState(function (prevState) {
          var selected = selectedChanged ? null : prevState.selectedOption;

          var selectedOption = _this2.getSelectedOptionFromProps(nextProps, selected);

          var filteredOptions = _this2.getFilteredOptions(nextProps, prevState.filterText, selectedOption);

          if (optionsChanged) {
            _this2.props.onOptionsChange(filteredOptions);
          }

          return {
            selectedOption: selectedOption,
            filteredOptions: filteredOptions
          };
        });
      }
    }
  }, {
    key: "renderTags",
    value: function renderTags() {
      var _this3 = this;

      return this.state.selectedOption.filter(function (option) {
        return option && option.label;
      }).map(function (tag, index) {
        var isDismissible = tag.dismissible !== false;
        var dismissibleProps = {};

        if (isDismissible) {
          dismissibleProps = {
            dismissible: true,
            onClick: function onClick(event) {
              return _this3.dismiss(event, tag);
            },
            onMouseDown: function onMouseDown(event) {
              // prevent event from propagating up to SelectField
              event.stopPropagation();
            }
          };
        }

        return /*#__PURE__*/_react.default.createElement(_Tag.Tag, Object.assign({
          className: styles.tag,
          key: (0, _getOptionId.default)(tag) + tag.label,
          title: tag.label,
          text: _this3.props.formatSelectedOption(tag, index),
          size: _this3.props.size,
          disabled: _this3.props.disabled,
          readOnly: _this3.props.readOnly
        }, dismissibleProps));
      });
    }
  }, {
    key: "renderInputs",
    value: function renderInputs() {
      var _this4 = this;

      return this.state.selectedOption.filter(function (option) {
        return option && option.label;
      }).map(function (tag, index) {
        return /*#__PURE__*/_react.default.createElement("input", {
          type: "hidden",
          key: (0, _getOptionId.default)(tag) + tag.label,
          name: _this4.props.name,
          value: tag.value
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      return /*#__PURE__*/_react.default.createElement(_SelectField.SelectField, Object.assign({}, (0, _omitProps.omitProps)(this.props, SelectMultiple.propTypes), {
        ref: function ref(el) {
          _this5._field = el;
        },
        inputRef: this.handleInputRef,
        editable: this.props.editable,
        options: this.state.filteredOptions,
        size: this.props.size,
        disabled: this.props.disabled,
        readOnly: this.props.readOnly,
        onSelect: this.handleSelect,
        onStaticClick: this.focus,
        onClose: this.handleClose,
        onInputChange: this.handleInputChange,
        onKeyDown: this.handleKeyDown,
        optionsMaxWidth: this.props.optionsMaxWidth,
        closeOnSelect: this.props.closeOnSelect
      }), this.renderTags(), this.renderInputs());
    }
  }, {
    key: "focused",
    get: function get() {
      return (0, _containsActiveElement.containsActiveElement)(this._field);
    }
  }, {
    key: "value",
    get: function get() {
      return this.state.selectedOption.map(function (selected) {
        return selected && selected.value;
      });
    }
  }, {
    key: "isControlled",
    get: function get() {
      return !!this.props.selectedOption;
    }
  }]);
  SelectMultiple.displayName = "SelectMultiple";
  return SelectMultiple;
}(_react.Component), _class2.propTypes = {
  /**
  * The options to render in the menu
  */
  options: _propTypes.default.arrayOf(optionType),

  /**
  * a function that provides a reference to the internal input element
  */
  inputRef: _propTypes.default.func,

  /**
  * the selected value (must be accompanied by an `onChange` prop)
  */
  selectedOption: (0, _controllable.controllable)(_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, optionType])), 'onChange', 'defaultSelectedOption'),

  /**
  * value to set on initial render, meant for an uncontrolled component
  */
  defaultSelectedOption: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, optionType])),

  /**
  * Determines whether the user can type in the input
  */
  editable: _propTypes.default.bool,

  /**
   * Optional name for the FormField
   */
  name: _propTypes.default.string,

  /**
   * The size used for input and menu options
   */
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),

  /**
   * Options dropdown can be wider than input if optionsMaxWidth is provided
   */
  optionsMaxWidth: _propTypes.default.string,

  /**
   * The filter function applied to the options when the value of the input changes
   */
  filter: _propTypes.default.func,

  /**
   * The format function called for each Tag to render its contents
   */
  formatSelectedOption: _propTypes.default.func,

  /**
   * Whether or not to disable the input and tags
   */
  disabled: _propTypes.default.bool,

  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: _propTypes.default.bool,

  /**
   * Callback fired when the menu is closed
   */
  onClose: _propTypes.default.func,

  /**
   * Callback fired when one of the menu options gets selected
   */
  onChange: _propTypes.default.func,

  /**
   * Callback fired on the onChange of the internal input
   */
  onInputChange: _propTypes.default.func,

  /**
   * Callback fired when the options displayed in the menu change
   */
  onOptionsChange: _propTypes.default.func,

  /**
   * Callback fired on the onKeyDown of the internal input
   */
  onKeyDown: _propTypes.default.func,

  /**
  * should the menu be closed when a selection happens
  */
  closeOnSelect: _propTypes.default.bool,

  /**
   * must be false for multiple select
   */
  allowCustom: _propTypes.default.oneOf([false])
}, _class2.defaultProps = {
  inputRef: function inputRef() {},
  formatSelectedOption: function formatSelectedOption(tag) {
    return tag.children || tag.label;
  },
  onClose: function onClose() {},
  onChange: function onChange(event, selectedOption) {},
  onInputChange: function onInputChange(event) {},
  onOptionsChange: function onOptionsChange(filteredOptions) {},
  onKeyDown: function onKeyDown(event) {},
  closeOnSelect: true,
  allowCustom: false,
  readOnly: false,
  disabled: false,
  filter: void 0,
  optionsMaxWidth: void 0,
  size: void 0,
  name: void 0,
  editable: false,
  selectedOption: void 0,
  defaultSelectedOption: void 0,
  options: void 0
}, _temp)) || _class) || _class);
exports.SelectMultiple = SelectMultiple;
var _default = SelectMultiple;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "SelectField", {
  enumerable: true,
  get: function get() {
    return _SelectField.SelectField;
  }
});
Object.defineProperty(exports, "SelectOptionsList", {
  enumerable: true,
  get: function get() {
    return _SelectOptionsList.SelectOptionsList;
  }
});
exports.Select = exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _console = require("@instructure/console");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _deepEqual = _interopRequireDefault(require("deep-equal"));

var _Children = require("@instructure/ui-prop-types/lib/Children.js");

var _controllable = require("@instructure/ui-prop-types/lib/controllable.js");

var _FormPropTypes = require("@instructure/ui-form-field/lib/FormPropTypes.js");

var _LayoutPropTypes = require("@instructure/ui-layout/lib/LayoutPropTypes.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _SelectSingle = require("./SelectSingle");

var _SelectMultiple = require("./SelectMultiple");

var _SelectField = require("./SelectField");

var _SelectOptionsList = require("./SelectOptionsList");

var _parseOptions = _interopRequireDefault(require("./utils/parseOptions"));

var _dec, _dec2, _class, _class2, _temp;

/**
---
category: components/deprecated
id: DeprecatedSelect
---
**/
var Select = (_dec = (0, _testable.testable)(), _dec2 = (0, _deprecated.deprecated)('7.0.0', null, 'Use SimpleSelect from ui-simple-select for basic configurations or Select from ui-select for more complex configuations.'), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Select, _Component);

  var _super = (0, _createSuper2.default)(Select);

  function Select(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Select);
    _this = _super.call(this, props);
    _this._input = null;

    _this.focus = function () {
      _this._subComponent && _this._subComponent.focus();
    };

    _this.handleRef = function (node) {
      _this._subComponent = node;
    };

    var options = (0, _parseOptions.default)(props.children);

    /*#__PURE__*/
    ( /*#__PURE__*/0, _console.error)(!(props.allowCustom && props.multiple), "[Select] The 'allowCustom' and 'multiple' props are mutually exclusive.");
    _this.state = {
      options: options
    };
    return _this;
  }

  (0, _createClass2.default)(Select, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var options = (0, _parseOptions.default)(nextProps.children);

      if (!(0, _deepEqual.default)(this.state.options, options)) {
        this.setState({
          options: options
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var Component = this.props.multiple ? _SelectMultiple.SelectMultiple : _SelectSingle.SelectSingle;
      var defaultSelectedOption = this.props.defaultOption;

      if (!defaultSelectedOption && !this.props.allowCustom) {
        defaultSelectedOption = this.props.value;
      } // select first non-disabled option for standard select components


      if (!this.props.editable && !this.props.allowCustom && !this.props.multiple && typeof defaultSelectedOption === 'undefined') {
        for (var i = 0; this.state.options.length; i++) {
          var option = this.state.options[i];

          if (!option.disabled) {
            defaultSelectedOption = option;
            break;
          }
        }
      }

      return /*#__PURE__*/_react.default.createElement(Component, Object.assign({
        ref: this.handleRef
      }, (0, _omitProps.omitProps)(this.props, {}, ['multiple', 'defaultOption', !this.props.multiple ? 'formatSelectedOption' : '']), {
        options: this.state.options,
        defaultSelectedOption: defaultSelectedOption,
        closeOnSelect: this.props.closeOnSelect
      }));
    }
  }, {
    key: "focused",
    get: function get() {
      return this._subComponent && this._subComponent.focused;
    }
  }, {
    key: "invalid",
    get: function get() {
      return !!this.props.messages && this.props.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }, {
    key: "value",
    get: function get() {
      return this._subComponent && this._subComponent.value;
    }
  }]);
  Select.displayName = "Select";
  return Select;
}(_react.Component), _class2.propTypes = {
  /**
   * Determines wether Select allows multiple values
   */
  multiple: _propTypes.default.bool,

  /**
  * Determines whether the user can type in the input
  */
  editable: _propTypes.default.bool,

  /**
  * Each children must be an option element.
  */
  children: _Children.Children.oneOf(['option', 'optgroup']),

  /**
  * a function that provides a reference to the internal input element
  */
  inputRef: _propTypes.default.func,
  value: _propTypes.default.string,

  /**
  * the selected value (must be accompanied by an `onChange` prop)
  */
  selectedOption: (0, _controllable.controllable)(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
    label: _propTypes.default.string.isRequired,
    value: _propTypes.default.string.isRequired,
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    children: _propTypes.default.node,
    disabled: _propTypes.default.bool,
    icon: _propTypes.default.func,
    groupLabel: _propTypes.default.bool
  }), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
    label: _propTypes.default.string.isRequired,
    value: _propTypes.default.string.isRequired,
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    children: _propTypes.default.node,
    disabled: _propTypes.default.bool,
    icon: _propTypes.default.func,
    groupLabel: _propTypes.default.bool
  })]))]), 'onChange', 'defaultOption'),

  /**
  * value to set on initial render, meant for an uncontrolled component
  */
  defaultOption: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
    label: _propTypes.default.string.isRequired,
    value: _propTypes.default.string.isRequired,
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    children: _propTypes.default.node,
    disabled: _propTypes.default.bool,
    icon: _propTypes.default.func,
    groupLabel: _propTypes.default.bool
  }), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
    label: _propTypes.default.string.isRequired,
    value: _propTypes.default.string.isRequired,
    id: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    children: _propTypes.default.node,
    disabled: _propTypes.default.bool,
    icon: _propTypes.default.func,
    groupLabel: _propTypes.default.bool
  })]))]),

  /**
  * for not multiple Select, allows the user to empty selection
  */
  allowEmpty: _propTypes.default.bool,

  /**
   * SelectSingle only (Mutually exclusive with multiple=true)
   * If true, the user can freely enter a value not available in the options list.
   * Implies editable is true.
   */
  allowCustom: _propTypes.default.bool,
  id: _propTypes.default.string,

  /**
   * The placement of the content in relation to the trigger, passed down to Position
   */
  placement: _LayoutPropTypes.LayoutPropTypes.placement,
  messages: _propTypes.default.arrayOf(_FormPropTypes.FormPropTypes.message),
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),
  layout: _propTypes.default.oneOf(['stacked', 'inline']),

  /**
   * Options dropdown can be wider than input if optionsMaxWidth is provided
   */
  optionsMaxWidth: _propTypes.default.string,

  /**
   * Give the Spinner a title to be read by screenreaders. Disables menu
   * interaction and renders a Spinner in its place.
   */
  loadingText: _propTypes.default.string,

  /**
   * The menu content to render when no options are present or are filtered away
   */
  emptyOption: _propTypes.default.node,

  /**
   * The amount of options that are visible without scrolling
   */
  visibleOptionsCount: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Custom text to be read by the screenreader when Select is focused
   */
  assistiveText: _propTypes.default.string,

  /**
   * Additional text to provide screenreader feedback upon user action
   */
  announcement: _propTypes.default.string,

  /**
   * The filter function applied to the options when writing on the input
   */
  filter: _propTypes.default.func,

  /**
   * The format function called for each Tag to render its contents
   */
  formatSelectedOption: _propTypes.default.func,

  /**
   * Whether or not to disable the input
   */
  disabled: _propTypes.default.bool,

  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: _propTypes.default.bool,

  /**
   * Callback fired when `<Position />` content has been rendered
   */
  onPositioned: _propTypes.default.func,

  /**
   * Callback fired when the menu is opened
   */
  onOpen: _propTypes.default.func,

  /**
   * Callback fired when the menu is closed
   */
  onClose: _propTypes.default.func,

  /**
   * Callback fired when one of the menu options gets selected. Second parameter is the selected option.
   */
  onChange: _propTypes.default.func,

  /**
   * Callback fired when on the onChange of the internal input.
   */
  onInputChange: _propTypes.default.func,

  /**
   * Callback fired when the options displayed in the menu change
   */
  onOptionsChange: _propTypes.default.func,

  /**
   * Callback fired when on the onBlur of the internal input
   */
  onBlur: _propTypes.default.func,

  /**
   * Callback fired when on the onClick of the internal input
   */
  onClick: _propTypes.default.func,

  /**
  * should the menu be closed when a selection happens
  */
  closeOnSelect: _propTypes.default.bool,

  /**
   * The parent in which to constrain the menu.
   * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
   * or a function returning an element
   */
  constrain: _LayoutPropTypes.LayoutPropTypes.constrain
}, _class2.defaultProps = {
  multiple: false,
  editable: false,
  allowEmpty: true,
  allowCustom: false,
  emptyOption: '---',
  selectedOption: null,
  size: 'medium',
  loadingText: null,
  visibleOptionsCount: 8,
  optionsMaxWidth: null,
  inputRef: function inputRef(node) {},
  filter: function filter(options, filterText) {
    return options.filter(function (option) {
      return option.label.toLowerCase().startsWith(filterText.toLowerCase());
    });
  },
  formatSelectedOption: function formatSelectedOption(tag) {
    return tag.label || tag.children;
  },
  closeOnSelect: true,
  constrain: 'window',
  onBlur: void 0,
  onClick: void 0,
  onOptionsChange: void 0,
  onInputChange: void 0,
  onChange: void 0,
  onClose: void 0,
  onOpen: void 0,
  onPositioned: void 0,
  readOnly: false,
  disabled: false,
  announcement: void 0,
  assistiveText: void 0,
  layout: void 0,
  messages: void 0,
  placement: void 0,
  id: void 0,
  defaultOption: void 0,
  value: void 0,
  children: null
}, _temp)) || _class) || _class);
exports.Select = Select;
var _default = Select;
exports.default = _default;
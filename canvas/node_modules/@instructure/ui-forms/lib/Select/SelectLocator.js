"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectLocator = exports.customMethods = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _locator = require("@instructure/ui-test-locator/lib/utils/locator.js");

var _PositionLocator = require("@instructure/ui-layout/lib/Position/PositionLocator");

var _index = require("./index");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// eslint-disable-next-line no-restricted-imports
var InputLocator = (0, _locator.locator)('input[type="text"]');
var OptionsListLocator = (0, _locator.locator)('ul');
var OptionsLocator = (0, _locator.locator)('li');
var customMethods = {
  findInput: function findInput() {
    return InputLocator.find.apply(InputLocator, arguments);
  },
  findOptionsList: function () {
    var _findOptionsList = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(element) {
      var content,
          _len,
          args,
          _key,
          _args = arguments;

      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _PositionLocator.PositionLocator.findContent(element);

            case 2:
              content = _context.sent;

              for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = _args[_key];
              }

              return _context.abrupt("return", content ? OptionsListLocator.find.apply(OptionsListLocator, [content.getDOMNode()].concat(args)) : null);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function findOptionsList(_x) {
      return _findOptionsList.apply(this, arguments);
    }

    return findOptionsList;
  }(),
  findOption: function () {
    var _findOption = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(element) {
      var content,
          _len2,
          args,
          _key2,
          _args2 = arguments;

      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _PositionLocator.PositionLocator.findContent(element);

            case 2:
              content = _context2.sent;

              for (_len2 = _args2.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = _args2[_key2];
              }

              return _context2.abrupt("return", content ? OptionsLocator.find.apply(OptionsLocator, [content.getDOMNode()].concat(args)) : null);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function findOption(_x2) {
      return _findOption.apply(this, arguments);
    }

    return findOption;
  }(),
  findAllOptions: function () {
    var _findAllOptions = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(element) {
      var content,
          _len3,
          args,
          _key3,
          _args3 = arguments;

      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _PositionLocator.PositionLocator.findContent(element);

            case 2:
              content = _context3.sent;

              for (_len3 = _args3.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                args[_key3 - 1] = _args3[_key3];
              }

              return _context3.abrupt("return", content ? OptionsLocator.findAll.apply(OptionsLocator, [content.getDOMNode()].concat(args)) : []);

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function findAllOptions(_x3) {
      return _findAllOptions.apply(this, arguments);
    }

    return findAllOptions;
  }()
};
exports.customMethods = customMethods;
var SelectLocator = (0, _locator.locator)(_index.Select.selector, customMethods);
exports.SelectLocator = SelectLocator;
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseOptions;

var _console = require("@instructure/console");

var _react = _interopRequireWildcard(require("react"));

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
---
parent: DeprecatedSelect
private: True
id: parseOptions
---
*/
function parseOptions(children) {
  var options = _react.Children.map(children, function (child) {
    var _child$props = child.props,
        label = _child$props.label,
        value = _child$props.value,
        children = _child$props.children;

    if (child.type === 'optgroup') {
      var group = [];
      var groupValue = value || label;
      group.push( /*#__PURE__*/_react.default.createElement("option", Object.assign({}, child.props, {
        value: groupValue,
        group: groupValue,
        groupLabel: true,
        disabled: true
      }), label));

      _react.Children.forEach(children, function (option, index) {
        group.push( /*#__PURE__*/_react.default.createElement("option", Object.assign({}, option.props, {
          group: groupValue,
          groupItem: true
        }), option.props.children));
      });

      return group;
    } else {
      return child;
    }
  });

  return _react.Children.map(options, function (option) {
    var _option$props = option.props,
        label = _option$props.label,
        id = _option$props.id,
        value = _option$props.value,
        children = _option$props.children,
        disabled = _option$props.disabled,
        icon = _option$props.icon,
        group = _option$props.group,
        groupLabel = _option$props.groupLabel,
        groupItem = _option$props.groupItem;

    /*#__PURE__*/
    ( /*#__PURE__*/0, _console.error)(typeof value === 'string', "[Select] The 'value' prop on <option> must be a string.");
    return {
      id: id || value,
      label: label || children,
      children: children || label,
      disabled: disabled || false,
      value: value,
      icon: icon || null,
      // the value or label of the group this option belongs to
      group: group || null,
      // whether or not this option is just a label for a group
      groupLabel: groupLabel || false,
      // whether or not this option is an item in a group
      groupItem: groupItem || false
    };
  }) || [];
}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "CheckboxFacade", {
  enumerable: true,
  get: function get() {
    return _CheckboxFacade.CheckboxFacade;
  }
});
Object.defineProperty(exports, "ToggleFacade", {
  enumerable: true,
  get: function get() {
    return _ToggleFacade.ToggleFacade;
  }
});
exports.Checkbox = exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _controllable = require("@instructure/ui-prop-types/lib/controllable.js");

var _FormPropTypes = require("@instructure/ui-form-field/lib/FormPropTypes.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _Checkbox = require("@instructure/ui-checkbox/lib/Checkbox");

var _CheckboxFacade = require("./CheckboxFacade");

var _ToggleFacade = require("./ToggleFacade");

var _dec, _class, _class2, _temp;

/**
---
category: components/deprecated
id: DeprecatedCheckbox
---
**/
var Checkbox = (_dec = (0, _deprecated.deprecated)('7.0.0', null, 'Use Checkbox from ui-checkbox instead.'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Checkbox, _Component);

  var _super = (0, _createSuper2.default)(Checkbox);

  function Checkbox() {
    var _this;

    (0, _classCallCheck2.default)(this, Checkbox);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._checkbox = null;
    return _this;
  }

  (0, _createClass2.default)(Checkbox, [{
    key: "focus",
    value: function focus() {
      this._checkbox && this._checkbox.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/_react.default.createElement(_Checkbox.Checkbox, Object.assign({
        ref: function ref(component) {
          _this2._checkbox = component;
        }
      }, this.props));
    }
  }, {
    key: "id",
    get: function get() {
      return this._checkbox && this._checkbox.id;
    }
  }, {
    key: "checked",
    get: function get() {
      return this._checkbox && this._checkbox.checked;
    }
  }, {
    key: "focused",
    get: function get() {
      return this._checkbox && this._checkbox.focused;
    }
  }]);
  Checkbox.displayName = "Checkbox";
  return Checkbox;
}(_react.Component), _class2.propTypes = {
  label: _propTypes.default.node.isRequired,
  id: _propTypes.default.string,
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
  * object with shape: `{
  * text: PropTypes.string,
  * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *   }`
  */
  messages: _propTypes.default.arrayOf(_FormPropTypes.FormPropTypes.message),

  /* whether to set the input to checked or not on initial render */
  defaultChecked: _propTypes.default.bool,

  /**
  * whether the input is checked or not (must be accompanied by an `onChange` prop)
  */
  checked: (0, _controllable.controllable)(_propTypes.default.bool, 'onChange', 'defaultChecked'),

  /**
  * when used with the `checked` prop, the component will not control its own state
  */
  onChange: _propTypes.default.func,
  onKeyDown: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  onMouseOver: _propTypes.default.func,
  onMouseOut: _propTypes.default.func,

  /**
   * Whether or not to disable the checkbox
   */
  disabled: _propTypes.default.bool,

  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: _propTypes.default.bool,

  /**
  * Visual state showing that child checkboxes are a combination of checked and unchecked
  */
  indeterminate: _propTypes.default.bool,
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),
  variant: _propTypes.default.oneOf(['simple', 'toggle']),
  inline: _propTypes.default.bool,
  labelPlacement: _propTypes.default.oneOf(['top', 'start', 'end'])
}, _class2.defaultProps = {
  size: 'medium',
  variant: 'simple',
  disabled: false,
  inline: false,
  indeterminate: false,
  readOnly: false,
  onChange: void 0,
  onKeyDown: void 0,
  onFocus: void 0,
  onBlur: void 0,
  onMouseOut: void 0,
  onMouseOver: void 0,
  checked: void 0,
  defaultChecked: void 0,
  messages: void 0,
  id: void 0,
  value: void 0,
  labelPlacement: 'end'
}, _temp)) || _class);
exports.Checkbox = Checkbox;
var _default = Checkbox;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextArea = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _controllable = require("@instructure/ui-prop-types/lib/controllable.js");

var _FormField = require("@instructure/ui-form-field/lib/FormField");

var _FormPropTypes = require("@instructure/ui-form-field/lib/FormPropTypes.js");

var _addEventListener = require("@instructure/ui-dom-utils/lib/addEventListener.js");

var _addResizeListener = require("@instructure/ui-dom-utils/lib/addResizeListener.js");

var _findDOMNode = require("@instructure/ui-dom-utils/lib/findDOMNode.js");

var _isActiveElement = require("@instructure/ui-dom-utils/lib/isActiveElement.js");

var _requestAnimationFrame = require("@instructure/ui-dom-utils/lib/requestAnimationFrame.js");

var _debounce = require("@instructure/debounce");

var _uid = require("@instructure/uid");

var _px = require("@instructure/ui-utils/lib/px.js");

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _pickProps = require("@instructure/ui-react-utils/lib/pickProps.js");

var _theme = _interopRequireDefault(require("./theme"));

var _dec, _dec2, _class, _class2, _temp;

var styles = {
  componentId: 'chpSa',
  template: function template(theme) {
    return "\n\n.chpSa_byIz{position:relative}\n\n.chpSa_cPAP{border:".concat(theme.focusOutlineWidth || 'inherit', " ").concat(theme.focusOutlineStyle || 'inherit', " ").concat(theme.focusOutlineColor || 'inherit', ";border-radius:calc(").concat(theme.borderRadius || 'inherit', "*1.5);bottom:-0.25rem;box-sizing:border-box;display:block;left:-0.25rem;opacity:0;pointer-events:none;position:absolute;right:-0.25rem;top:-0.25rem;transform:scale(0.95);transition:all 0.2s}\n\n.chpSa_blLZ{-moz-appearance:none;-moz-osx-font-smoothing:grayscale;-webkit-appearance:none;-webkit-font-smoothing:antialiased;all:initial;animation:none 0s ease 0s 1 normal none running;appearance:none;backface-visibility:visible;background:transparent none repeat 0 0/auto auto padding-box border-box scroll;background:").concat(theme.background || 'inherit', ";border:medium none currentColor;border-bottom-color:").concat(theme.borderBottomColor || 'inherit', ";border-collapse:separate;border-image:none;border-left-color:").concat(theme.borderLeftColor || 'inherit', ";border-radius:0;border-radius:").concat(theme.borderRadius || 'inherit', ";border-right-color:").concat(theme.borderRightColor || 'inherit', ";border-spacing:0;border-style:").concat(theme.borderStyle || 'inherit', ";border-top-color:").concat(theme.borderTopColor || 'inherit', ";border-width:").concat(theme.borderWidth || 'inherit', ";bottom:auto;box-shadow:none;box-sizing:content-box;box-sizing:border-box;caption-side:top;clear:none;clip:auto;color:#000;color:").concat(theme.color || 'inherit', ";column-count:auto;column-fill:balance;column-gap:normal;column-rule:medium none currentColor;column-span:1;column-width:auto;columns:auto;content:normal;counter-increment:none;counter-reset:none;cursor:auto;direction:ltr;display:inline;display:block;empty-cells:show;float:none;font-family:serif;font-family:").concat(theme.fontFamily || 'inherit', ";font-size:medium;font-stretch:normal;font-style:normal;font-variant:normal;font-weight:400;font-weight:").concat(theme.fontWeight || 'inherit', ";height:auto;hyphens:none;left:auto;letter-spacing:normal;line-height:normal;list-style:disc outside none;margin:0;max-height:none;max-width:none;min-height:0;min-width:0;opacity:1;orphans:2;outline:medium none invert;overflow:visible;overflow-x:visible;overflow-y:visible;padding:0;padding:").concat(theme.padding || 'inherit', ";page-break-after:auto;page-break-before:auto;page-break-inside:auto;perspective:none;perspective-origin:50% 50%;position:static;right:auto;tab-size:8;table-layout:auto;text-align:left;text-align:start;text-align-last:auto;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;top:auto;transform:none;transform-origin:50% 50% 0;transform-style:flat;transition:none 0s ease 0s;unicode-bidi:normal;vertical-align:baseline;visibility:visible;white-space:normal;white-space:pre-wrap;widows:2;width:auto;width:100%;word-spacing:normal;word-wrap:break-word;z-index:auto}\n\n[dir=ltr] .chpSa_blLZ{text-align:left}\n\n[dir=rtl] .chpSa_blLZ{text-align:right}\n\n.chpSa_blLZ:focus~.chpSa_cPAP{opacity:1;transform:scale(1)}\n\n.chpSa_blLZ[aria-invalid],.chpSa_blLZ[aria-invalid]:focus,.chpSa_blLZ[aria-invalid]:focus~.chpSa_cPAP{border-color:").concat(theme.errorBorderColor || 'inherit', "}\n\n.chpSa_blLZ:-ms-input-placeholder{color:").concat(theme.placeholderColor || 'inherit', "}\n\n.chpSa_blLZ::placeholder{color:").concat(theme.placeholderColor || 'inherit', "}\n\n.chpSa_blLZ.chpSa_ywdX{cursor:not-allowed;opacity:0.5;pointer-events:none}\n\n.chpSa_doqw{font-size:").concat(theme.smallFontSize || 'inherit', "}\n\n.chpSa_ycrn{font-size:").concat(theme.mediumFontSize || 'inherit', "}\n\n.chpSa_cMDj{font-size:").concat(theme.largeFontSize || 'inherit', "}");
  },
  'layout': 'chpSa_byIz',
  'outline': 'chpSa_cPAP',
  'textarea': 'chpSa_blLZ',
  'disabled': 'chpSa_ywdX',
  'small': 'chpSa_doqw',
  'medium': 'chpSa_ycrn',
  'large': 'chpSa_cMDj'
};

/**
---
category: components
---
**/
var TextArea = (_dec = (0, _testable.testable)(), _dec2 = (0, _themeable.themeable)(_theme.default, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(TextArea, _Component);

  var _super = (0, _createSuper2.default)(TextArea);

  function TextArea() {
    var _this;

    (0, _classCallCheck2.default)(this, TextArea);
    _this = _super.call(this);

    _this._textareaResize = function (evt) {
      var textareaHeight = _this._textarea.style.height;

      if (textareaHeight != _this._height) {
        _this._manuallyResized = true;
        _this._textarea.style.overflowY = 'auto'; // update container minHeight to ensure focus ring always wraps input

        _this._container.style.minHeight = textareaHeight;
      }
    };

    _this.grow = function (evt) {
      if (!_this._textarea || _this._manuallyResized) {
        return;
      }

      var offset = _this._textarea.offsetHeight - _this._textarea.clientHeight;
      var height = ''; // Notes:
      // 1. height has be reset to `auto` every time this method runs, or scrollHeight will not reset
      // 2. `this._textarea.scrollHeight` will not reset if assigned to a variable; it needs to be written out each time

      _this._textarea.style.height = 'auto';
      _this._textarea.style.overflowY = 'hidden'; // hide scrollbars for autoGrow textareas

      height = _this._textarea.scrollHeight + offset + 'px';
      var maxHeight = (0, _px.px)(_this.props.maxHeight, (0, _findDOMNode.findDOMNode)((0, _assertThisInitialized2.default)(_this)));

      if (_this.props.maxHeight && _this._textarea.scrollHeight > maxHeight) {
        _this._textarea.style.overflowY = 'auto'; // add scroll if scrollHeight exceeds maxHeight in pixels
      } else if (_this.props.height) {
        if (_this._textarea.value === '') {
          height = _this.props.height;
        } else if ((0, _px.px)(_this.props.height, (0, _findDOMNode.findDOMNode)((0, _assertThisInitialized2.default)(_this))) > _this._textarea.scrollHeight) {
          _this._textarea.style.overflowY = 'auto'; // add scroll if scrollHeight exceeds height in pixels

          height = _this.props.height;
        }
      } // preserve container height to prevent scroll jumping on long textareas,
      // but make sure container doesn't exceed maxHeight prop


      var heightExceedsMax = (0, _px.px)(height) > maxHeight;

      if (!heightExceedsMax) {
        _this._container.style.minHeight = height;
      }

      _this._height = height;
      _this._textarea.style.height = height;
      _this._textarea.scrollTop = _this._textarea.scrollHeight;
    };

    _this.handleChange = function (event) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          value = _this$props.value,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly;

      if (disabled || readOnly) {
        event.preventDefault();
        return;
      }

      if (typeof value === 'undefined') {
        // if uncontrolled
        _this.autoGrow();
      }

      if (typeof onChange === 'function') {
        onChange(event);
      }
    };

    _this.handleContainerRef = function (node) {
      _this._container = node;
    };

    _this._defaultId = (0, _uid.uid)('TextArea');
    return _this;
  }

  (0, _createClass2.default)(TextArea, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.autoGrow();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.autoGrow();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._listener) {
        this._listener.remove();
      }

      if (this._textareaResizeListener) {
        this._textareaResizeListener.remove();
      }

      if (this._request) {
        this._request.cancel();
      }

      if (this._debounced) {
        this._debounced.cancel();
      }
    }
  }, {
    key: "autoGrow",
    value: function autoGrow() {
      if (this.props.autoGrow) {
        if (!this._debounced) {
          this._debounced = (0, _debounce.debounce)(this.grow, 200, {
            leading: false,
            trailing: true
          });
        }

        if (!this._listener) {
          this._listener = (0, _addEventListener.addEventListener)(window, 'resize', this._debounced);
        }

        if (this._textarea && !this._textareaResizeListener) {
          this._textareaResizeListener = (0, _addResizeListener.addResizeListener)(this._textarea, this._textareaResize, ['height']);
        }

        this._request = (0, _requestAnimationFrame.requestAnimationFrame)(this.grow);
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      this._textarea.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _classes,
          _this2 = this;

      var _this$props2 = this.props,
          autoGrow = _this$props2.autoGrow,
          placeholder = _this$props2.placeholder,
          value = _this$props2.value,
          defaultValue = _this$props2.defaultValue,
          disabled = _this$props2.disabled,
          readOnly = _this$props2.readOnly,
          required = _this$props2.required,
          width = _this$props2.width,
          height = _this$props2.height,
          maxHeight = _this$props2.maxHeight,
          textareaRef = _this$props2.textareaRef,
          resize = _this$props2.resize,
          size = _this$props2.size;
      var props = (0, _omitProps.omitProps)(this.props, TextArea.propTypes);
      var classes = (_classes = {}, (0, _defineProperty2.default)(_classes, styles.textarea, true), (0, _defineProperty2.default)(_classes, styles[size], true), (0, _defineProperty2.default)(_classes, styles.disabled, disabled), _classes);
      var style = {
        width: width,
        resize: resize,
        height: !autoGrow ? height : null,
        maxHeight: maxHeight
      };

      var textarea = /*#__PURE__*/_react.default.createElement("textarea", Object.assign({}, props, {
        value: value,
        defaultValue: defaultValue,
        placeholder: placeholder,
        ref: function ref(textarea) {
          _this2._textarea = textarea;

          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          textareaRef.apply(_this2, [textarea].concat(args));
        },
        style: style,
        id: this.id,
        required: required,
        "aria-required": required,
        "aria-invalid": this.invalid ? 'true' : null,
        disabled: disabled || readOnly,
        className: (0, _classnames.default)(classes),
        onChange: this.handleChange
      }));

      return /*#__PURE__*/_react.default.createElement(_FormField.FormField, Object.assign({}, (0, _pickProps.pickProps)(this.props, _FormField.FormField.propTypes), {
        vAlign: "top",
        id: this.id,
        ref: function ref(el) {
          _this2._node = el;
        }
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: styles.layout,
        style: {
          width: width,
          maxHeight: maxHeight
        },
        ref: this.handleContainerRef
      }, textarea, !disabled && !readOnly ? /*#__PURE__*/_react.default.createElement("span", {
        className: styles.outline,
        "aria-hidden": "true"
      }) : null));
    }
  }, {
    key: "minHeight",
    get: function get() {
      return this._textarea.style.minHeight;
    }
  }, {
    key: "invalid",
    get: function get() {
      return this.props.messages && this.props.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }, {
    key: "id",
    get: function get() {
      return this.props.id || this._defaultId;
    }
  }, {
    key: "focused",
    get: function get() {
      return (0, _isActiveElement.isActiveElement)(this._textarea);
    }
  }, {
    key: "value",
    get: function get() {
      return this._textarea.value;
    }
  }]);
  TextArea.displayName = "TextArea";
  return TextArea;
}(_react.Component), _class2.propTypes = {
  label: _propTypes.default.node.isRequired,
  id: _propTypes.default.string,

  /**
  * sets the font-size for the textarea
  */
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),
  layout: _propTypes.default.oneOf(['stacked', 'inline']),

  /**
  * the textarea will expand vertically to fit the height of the content,
  * unless its content exceeds `maxHeight`
  */
  autoGrow: _propTypes.default.bool,

  /**
  * is the textarea resizable (in supported browsers)
  */
  resize: _propTypes.default.oneOf(['none', 'both', 'horizontal', 'vertical']),

  /**
  * a fixed width for the textarea
  */
  width: _propTypes.default.string,

  /**
  * a initial height for the textarea (if autoGrow is true it will grow vertically)
  */
  height: _propTypes.default.string,

  /**
  * when autoGrow is true, the textarea will never grow beyond this value
  */
  maxHeight: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
  * object with shape: `{
  * text: PropTypes.string,
  * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *   }`
  */
  messages: _propTypes.default.arrayOf(_FormPropTypes.FormPropTypes.message),
  inline: _propTypes.default.bool,

  /**
  * Html placeholder text to display when the input has no value. This should be hint text, not a label
  * replacement.
  */
  placeholder: _propTypes.default.string,

  /**
   * Whether or not to disable the textarea
   */
  disabled: _propTypes.default.bool,

  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: _propTypes.default.bool,
  required: _propTypes.default.bool,

  /**
  * a function that provides a reference to the actual textarea element
  */
  textareaRef: _propTypes.default.func,

  /**
  * value to set on initial render
  */
  defaultValue: _propTypes.default.string,

  /**
  * the selected value (must be accompanied by an `onChange` prop)
  */
  value: (0, _controllable.controllable)(_propTypes.default.string),

  /**
  * when used with the `value` prop, the component will not control its own state
  */
  onChange: _propTypes.default.func
}, _class2.defaultProps = {
  size: 'medium',
  autoGrow: true,
  resize: 'none',
  inline: false,
  messages: [],
  disabled: false,
  readOnly: false,
  textareaRef: function textareaRef(textarea) {},
  layout: 'stacked',
  id: void 0,
  value: void 0,
  defaultValue: void 0,
  onChange: void 0,
  required: false,
  placeholder: void 0,
  width: void 0,
  height: void 0,
  maxHeight: void 0
}, _temp)) || _class) || _class);
exports.TextArea = TextArea;
var _default = TextArea;
exports.default = _default;
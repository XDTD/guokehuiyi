"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioInputGroup = exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _controllable = require("@instructure/ui-prop-types/lib/controllable.js");

var _FormPropTypes = require("@instructure/ui-form-field/lib/FormPropTypes.js");

var _FormFieldGroup = require("@instructure/ui-form-field/lib/FormFieldGroup");

var _uid = require("@instructure/uid");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _matchComponentTypes = require("@instructure/ui-react-utils/lib/matchComponentTypes.js");

var _safeCloneElement = require("@instructure/ui-react-utils/lib/safeCloneElement.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _pickProps = require("@instructure/ui-react-utils/lib/pickProps.js");

var _RadioInput = require("../RadioInput");

var _dec, _class, _class2, _temp;

/**
---
category: components
---
**/
var RadioInputGroup = (_dec = (0, _testable.testable)(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(RadioInputGroup, _Component);

  var _super = (0, _createSuper2.default)(RadioInputGroup);

  function RadioInputGroup(props) {
    var _this;

    (0, _classCallCheck2.default)(this, RadioInputGroup);
    _this = _super.call(this);

    _this.handleChange = function (e) {
      var value = e.target.value;

      if (_this.props.disabled || _this.props.readOnly) {
        e.preventDefault();
        return;
      }

      if (typeof _this.props.value === 'undefined') {
        _this.setState({
          value: value
        });
      }

      if (typeof _this.props.onChange === 'function') {
        _this.props.onChange(e, value);
      }
    };

    if (typeof props.value === 'undefined') {
      _this.state = {
        value: props.defaultValue
      };
    }

    _this._messagesId = (0, _uid.uid)('RadioInputGroup-messages');
    return _this;
  }

  (0, _createClass2.default)(RadioInputGroup, [{
    key: "renderChildren",
    value: function renderChildren() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          name = _this$props.name,
          variant = _this$props.variant,
          size = _this$props.size,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly; // This adds the passed in name property to each RadioInput component
      // and checks the input whose value matches the value property

      return _react.Children.map(children, function (child, index) {
        if ((0, _matchComponentTypes.matchComponentTypes)(child, [_RadioInput.RadioInput])) {
          var isChecked = _this2.value === child.props.value;
          var defaultFocus = !_this2.value && index === 0;
          return (0, _safeCloneElement.safeCloneElement)(child, {
            name: name,
            disabled: disabled || child.props.disabled,
            variant: variant,
            size: size,
            checked: isChecked,
            onChange: _this2.handleChange,
            readOnly: readOnly || child.props.readOnly,
            width: child.props.width || 'auto',
            'aria-describedby': _this2.hasMessages && _this2._messagesId,
            // only one radio in a group should be considered tabbable
            // if a radio is checked, it should be the input to receive focus when tabbed to
            // if none of the inputs are checked, the first should receive the focus
            tabIndex: isChecked || defaultFocus ? '0' : '-1'
          });
        } else {
          return child; // ignore (but preserve) children that aren't RadioInput
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          variant = _this$props2.variant,
          layout = _this$props2.layout;
      return /*#__PURE__*/_react.default.createElement(_FormFieldGroup.FormFieldGroup, Object.assign({}, (0, _omitProps.omitProps)(this.props, RadioInputGroup.propTypes), (0, _pickProps.pickProps)(this.props, _FormFieldGroup.FormFieldGroup.propTypes), {
        // TODO: split out toggle variant into its own component
        layout: layout === 'columns' && variant === 'toggle' ? 'stacked' : layout // toggles already display in cols
        ,
        vAlign: variant === 'toggle' ? 'middle' : 'top',
        rowSpacing: "small",
        colSpacing: variant === 'toggle' ? 'none' : 'small' // keep toggles close together
        ,
        startAt: variant === 'toggle' ? 'small' : void 0,
        messagesId: this._messagesId
      }), this.renderChildren());
    }
  }, {
    key: "hasMessages",
    get: function get() {
      return this.props.messages && this.props.messages.length > 0;
    }
  }, {
    key: "value",
    get: function get() {
      return typeof this.props.value === 'undefined' ? this.state.value : this.props.value;
    }
  }]);
  RadioInputGroup.displayName = "RadioInputGroup";
  return RadioInputGroup;
}(_react.Component), _class2.propTypes = {
  name: _propTypes.default.string.isRequired,
  description: _propTypes.default.node.isRequired,

  /**
  * value to set on initial render
  */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
  * the selected value (must be accompanied by an `onChange` prop)
  */
  value: (0, _controllable.controllable)(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])),

  /**
  * when used with the `value` prop, the component will not control its own state
  */
  onChange: _propTypes.default.func,
  disabled: _propTypes.default.bool,

  /** works just like disabled but keeps the same styles as if it were active */
  readOnly: _propTypes.default.bool,

  /**
  * object with shape: `{
  * text: PropTypes.string,
  * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *   }`
  */
  messages: _propTypes.default.arrayOf(_FormPropTypes.FormPropTypes.message),

  /**
  * any children (ones that aren't `RadioInput` are passed through)
  */
  children: _propTypes.default.node,
  variant: _propTypes.default.oneOf(['simple', 'toggle']),
  // TODO: split toggle out to its own component
  size: _propTypes.default.oneOf(['small', 'medium', 'large']),
  layout: _propTypes.default.oneOf(['stacked', 'columns', 'inline'])
}, _class2.defaultProps = {
  disabled: false,
  variant: 'simple',
  size: 'medium',
  layout: 'stacked',
  readOnly: false,
  defaultValue: void 0,
  value: void 0,
  children: null,
  messages: void 0,
  onChange: void 0
}, _temp)) || _class);
exports.RadioInputGroup = RadioInputGroup;
var _default = RadioInputGroup;
exports.default = _default;
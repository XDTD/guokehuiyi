"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Overlay = exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Dialog = require("@instructure/ui-dialog/lib/Dialog");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _createChainedFunction = require("@instructure/ui-utils/lib/createChainedFunction.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _pickProps = require("@instructure/ui-react-utils/lib/pickProps.js");

var _element = require("@instructure/ui-prop-types/lib/element.js");

var _Portal = require("@instructure/ui-portal/lib/Portal");

var _Transition = require("@instructure/ui-motion/lib/Transition");

var _dec, _class, _class2, _temp;

/**
---
category: components
---
**/
var Overlay = (_dec = (0, _testable.testable)(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Overlay, _Component);

  var _super = (0, _createSuper2.default)(Overlay);

  function Overlay(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Overlay);
    _this = _super.call(this, props);
    _this._timeouts = [];

    _this.handlePortalOpen = function (DOMNode) {
      _this.DOMNode = DOMNode;

      _this._timeouts.push(setTimeout(function () {
        if (_this._isMounted) {
          _this.setState({
            open: true
          });
        }
      }));
    };

    _this.handleTransitionExited = function () {
      _this.setState({
        open: false,
        transitioning: false
      });
    };

    _this.state = {
      open: props.open,
      transitioning: false
    };
    return _this;
  }

  (0, _createClass2.default)(Overlay, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._isMounted = true;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.open && !this.props.open) {
        // closing
        this.setState({
          transitioning: prevProps.transition !== null
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false;

      this._timeouts.forEach(function (timeout) {
        return clearTimeout(timeout);
      });
    }
  }, {
    key: "renderTransition",
    value: function renderTransition(content) {
      return /*#__PURE__*/_react.default.createElement(_Transition.Transition, Object.assign({}, (0, _pickProps.pickProps)(this.props, _Transition.Transition.propTypes), {
        in: this.props.open,
        transitionOnMount: true,
        unmountOnExit: true,
        type: this.props.transition,
        onExited: (0, _createChainedFunction.createChainedFunction)(this.handleTransitionExited, this.props.onExited)
      }), content);
    }
  }, {
    key: "render",
    value: function render() {
      var content = /*#__PURE__*/_react.default.createElement(_Dialog.Dialog, Object.assign({}, (0, _omitProps.omitProps)(this.props, Overlay.propTypes), (0, _pickProps.pickProps)(this.props, _Dialog.Dialog.propTypes), {
        defaultFocusElement: this.props.defaultFocusElement,
        open: this.state.open
      }), this.props.children);

      if (this.props.transition) {
        content = this.renderTransition(content);
      }

      return /*#__PURE__*/_react.default.createElement(_Portal.Portal, Object.assign({}, (0, _pickProps.pickProps)(this.props, _Portal.Portal.propTypes), {
        open: this.props.open || this.state.transitioning,
        onOpen: (0, _createChainedFunction.createChainedFunction)(this.handlePortalOpen, this.props.onOpen)
      }), content);
    }
  }, {
    key: "DOMNode",
    get: function get() {
      return this._DOMNode;
    },
    set: function set(el) {
      this._DOMNode = el;
    }
  }]);
  Overlay.displayName = "Overlay";
  return Overlay;
}(_react.Component), _class2.propTypes = {
  children: _propTypes.default.node,

  /**
   * Whether or not the `<Overlay />` is open
   */
  open: _propTypes.default.bool,

  /**
   * Callback fired when `<Portal />` content has been mounted in the DOM
   */
  onOpen: _propTypes.default.func,

  /**
   * Callback fired when `<Portal />` has been unmounted from the DOM
   */
  onClose: _propTypes.default.func,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Portal />` (defaults to `document.body`)
   */
  mountNode: _propTypes.default.oneOfType([_element.element, _propTypes.default.func]),

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: _propTypes.default.oneOf(['bottom', 'top']),

  /**
   * An accessible label for the `<Overlay />` content
   */
  label: _propTypes.default.string.isRequired,

  /**
   * Callback fired when the `<Overlay />` is requesting to be closed
   */
  onDismiss: _propTypes.default.func,

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),

  /**
   * An element or a function returning an element to apply `aria-hidden` to
   */
  applicationElement: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.element), _propTypes.default.element, _propTypes.default.func]),

  /**
   * An element or a function returning an element that wraps the content of the `<Overlay />`
   */
  contentElement: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),
  shouldContainFocus: _propTypes.default.bool,
  shouldReturnFocus: _propTypes.default.bool,
  shouldCloseOnDocumentClick: _propTypes.default.bool,
  shouldCloseOnEscape: _propTypes.default.bool,

  /**
   * The type of `<Transition />` to use for animating in/out
   */
  transition: _Transition.Transition.propTypes.type,

  /**
   * Show the component; triggers the enter or exit animation
   */
  in: _propTypes.default.bool,

  /**
   * Unmount the component (remove it from the DOM) when it is not shown
   */
  unmountOnExit: _propTypes.default.bool,

  /**
   * Run the enter animation when the component mounts, if it is initially
   * shown
   */
  transitionOnMount: _propTypes.default.bool,

  /**
   * Run the enter animation
   */
  transitionEnter: _propTypes.default.bool,

  /**
   * Run the exit animation
   */
  transitionExit: _propTypes.default.bool,

  /**
   * Callback fired before the "entering" classes are applied
   */
  onEnter: _propTypes.default.func,

  /**
   * Callback fired after the "entering" classes are applied
   */
  onEntering: _propTypes.default.func,

  /**
   * Callback fired after the "enter" classes are applied
   */
  onEntered: _propTypes.default.func,

  /**
   * Callback fired before the "exiting" classes are applied
   */
  onExit: _propTypes.default.func,

  /**
   * Callback fired after the "exiting" classes are applied
   */
  onExiting: _propTypes.default.func,

  /**
   * Callback fired after the "exited" classes are applied
   */
  onExited: _propTypes.default.func
}, _class2.defaultProps = {
  children: null,
  open: false,
  insertAt: 'bottom',
  onOpen: function onOpen() {},
  onClose: function onClose() {},
  mountNode: null,
  shouldContainFocus: false,
  shouldReturnFocus: false,
  shouldCloseOnDocumentClick: false,
  shouldCloseOnEscape: true,
  applicationElement: null,
  defaultFocusElement: null,
  contentElement: null,
  onDismiss: function onDismiss() {},
  transition: null,
  in: false,
  unmountOnExit: false,
  transitionOnMount: false,
  transitionEnter: true,
  transitionExit: true,
  onEnter: function onEnter() {},
  onEntering: function onEntering() {},
  onEntered: function onEntered() {},
  onExit: function onExit() {},
  onExiting: function onExiting() {},
  onExited: function onExited() {}
}, _temp)) || _class);
exports.Overlay = Overlay;
var _default = Overlay;
exports.default = _default;
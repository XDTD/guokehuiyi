import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _dec3, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { PositionPropTypes } from '@instructure/ui-position';
import { themeable } from '@instructure/ui-themeable';
import { deprecated } from '@instructure/ui-react-utils';
import { testable } from '@instructure/ui-testable';
import { Tooltip as UITooltip } from '@instructure/ui-tooltip';
import { element } from '@instructure/ui-prop-types';
var styles = {
  componentId: 'eZLSb',
  template: function template(theme) {
    return "\n\n.eZLSb_bGBk{box-sizing:border-box;display:block;font-family:".concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', ";padding:").concat(theme.padding || 'inherit', "}");
  },
  'root': 'eZLSb_bGBk'
};
import theme from './theme';
/**
---
category: components/deprecated
id: DeprecatedTooltip
---
**/

var Tooltip = (_dec = deprecated('7.0.0', null, 'Use Tooltip from ui-tooltip instead.'), _dec2 = testable(), _dec3 = themeable(theme, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Tooltip, _Component);

  var _super = _createSuper(Tooltip);

  function Tooltip() {
    _classCallCheck(this, Tooltip);

    return _super.apply(this, arguments);
  }

  _createClass(Tooltip, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          tip = _this$props.tip,
          variant = _this$props.variant,
          on = _this$props.on,
          placement = _this$props.placement,
          mountNode = _this$props.mountNode,
          positionTarget = _this$props.positionTarget,
          constrain = _this$props.constrain,
          passthroughProps = _objectWithoutProperties(_this$props, ["children", "tip", "variant", "on", "placement", "mountNode", "positionTarget", "constrain"]);

      return /*#__PURE__*/React.createElement(UITooltip, Object.assign({}, passthroughProps, {
        renderTip: tip,
        on: on,
        color: variant === 'inverse' ? 'primary' : 'primary-inverse',
        placement: placement,
        mountNode: mountNode,
        positionTarget: positionTarget,
        constrain: constrain
      }), children);
    }
  }]);

  Tooltip.displayName = "Tooltip";
  return Tooltip;
}(Component), _class2.propTypes = {
  /**
  * @param {Object} renderProps
  * @param {Boolean} renderProps.focused - Is the Tooltip trigger focused?
  * @param {Function} renderProps.getTriggerProps - Props to be spread onto the trigger element
  */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,
  tip: PropTypes.node.isRequired,

  /**
  * the element type to render as (assumes a single child if 'as' is undefined)
  */
  as: PropTypes.elementType,
  // eslint-disable-line react/require-default-props

  /**
   * The action that causes the Content to display (`click`, `hover`, `focus`)
   */
  on: PropTypes.oneOfType([PropTypes.oneOf(['click', 'hover', 'focus']), PropTypes.arrayOf(PropTypes.oneOf(['click', 'hover', 'focus']))]),
  variant: PropTypes.oneOf(['default', 'inverse']),

  /**
   * Specifies where the Tooltip will be placed in relation to the target element.
   * Ex. placement="bottom" will render the Tooltip below the triggering element
   * (Note: if there is not room, it will position opposite. Ex. "top" will
   * automatically switch to "bottom").
   */
  placement: PositionPropTypes.placement,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Tooltip />` (defaults to `document.body`)
   */
  mountNode: PositionPropTypes.mountNode,

  /**
   * Target element for positioning the Tooltip (if it differs from children/trigger)
   */
  positionTarget: PropTypes.oneOfType([element, PropTypes.func]),

  /**
   * The parent in which to constrain the tooltip.
   * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
   * or a function returning an element
   */
  constrain: PositionPropTypes.constrain
}, _class2.defaultProps = {
  on: void 0,
  variant: 'inverse',
  placement: 'top',
  mountNode: null,
  positionTarget: void 0,
  constrain: 'window'
}, _temp)) || _class) || _class) || _class);
export default Tooltip;
export { Tooltip };
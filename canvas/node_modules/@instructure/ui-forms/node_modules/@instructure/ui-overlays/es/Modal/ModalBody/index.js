import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { error as _error } from "@instructure/console";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { View } from '@instructure/ui-view';
import { omitProps } from '@instructure/ui-react-utils';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
import { testable } from '@instructure/ui-testable';
import { isIE11 } from '@instructure/ui-utils';
var styles = {
  componentId: 'butxX',
  template: function template(theme) {
    return "\n\n.butxX_bGBk{box-sizing:border-box;flex:1 1 auto;overflow-y:auto}\n\n.butxX_bGBk:focus{outline:none}\n\n.butxX_enfx{background:".concat(theme.inverseBackground || 'inherit', "}");
  },
  'root': 'butxX_bGBk',
  'inverse': 'butxX_enfx'
};
import theme from './theme';
/**
---
parent: DeprecatedModal
id: DeprecatedModal.Body
---
**/

var ModalBody = (_dec = testable(), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(ModalBody, _Component);

  var _super = _createSuper(ModalBody);

  function ModalBody() {
    _classCallCheck(this, ModalBody);

    return _super.apply(this, arguments);
  }

  _createClass(ModalBody, [{
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          as = _this$props.as,
          elementRef = _this$props.elementRef,
          overflow = _this$props.overflow,
          variant = _this$props.variant,
          padding = _this$props.padding,
          children = _this$props.children;
      var passthroughProps = View.omitViewProps(omitProps(this.props, ModalBody.propTypes), ModalBody);
      var classes = classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles.inverse, variant === 'inverse'), _classnames));
      var isFit = overflow === 'fit';

      /*#__PURE__*/

      /*#__PURE__*/
      _error(!isIE11 || !isFit, "[Modal] overflow=\"fit\" is only supported with fullscreen modals in Internet Explorer");

      return /*#__PURE__*/React.createElement(View, Object.assign({}, passthroughProps, {
        display: "block",
        width: isFit ? '100%' : null,
        height: isFit ? '100%' : null,
        elementRef: elementRef,
        as: as,
        className: classes,
        padding: padding,
        tabIndex: "-1" // prevent FF from focusing view when scrollable

      }), children);
    }
  }]);

  ModalBody.displayName = "ModalBody";
  return ModalBody;
}(Component), _class2.propTypes = {
  children: PropTypes.node,
  padding: ThemeablePropTypes.spacing,
  elementRef: PropTypes.func,
  as: PropTypes.elementType,
  variant: PropTypes.oneOf(['default', 'inverse']),
  overflow: PropTypes.oneOf(['scroll', 'fit'])
}, _class2.defaultProps = {
  padding: 'medium',
  as: 'div',
  variant: 'default',
  children: null,
  elementRef: void 0,
  overflow: void 0
}, _temp)) || _class) || _class);
export default ModalBody;
export { ModalBody };
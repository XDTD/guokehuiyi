import * as React from 'react';

export type TransitionType = "fade" | "scale" | "slide-down" | "slide-up" | "slide-left" | "slide-right";

export interface TransitionProps {
    type?: TransitionType;
    /**
     * A single element to animate in and out
     */
    children?: React.ReactElement<any>;
    /**
     * Show the component; triggers the enter or exit animation
     */
    in?: boolean;
    /**
     * Unmount the component (remove it from the DOM) when it is not shown
     */
    unmountOnExit?: boolean;
    /**
     * Run the enter animation when the component mounts, if it is initially
     * shown
     */
    transitionOnMount?: boolean;
    /**
     * Run the enter animation
     */
    transitionEnter?: boolean;
    /**
     * Run the exit animation
     */
    transitionExit?: boolean;
    /**
     * Callback fired when transitioning to the next state
     */
    onTransition?: (...args: any[])=>any;
    /**
     * Callback fired before the "entering" classes are applied
     */
    onEnter?: (...args: any[])=>any;
    /**
     * Callback fired after the "entering" classes are applied
     */
    onEntering?: (...args: any[])=>any;
    /**
     * Callback fired after the "enter" classes are applied
     */
    onEntered?: (...args: any[])=>any;
    /**
     * Callback fired before the "exiting" classes are applied
     */
    onExit?: (...args: any[])=>any;
    /**
     * Callback fired after the "exiting" classes are applied
     */
    onExiting?: (...args: any[])=>any;
    /**
     * Callback fired after the "exited" classes are applied
     */
    onExited?: (...args: any[])=>any;
}

export class Transition extends React.Component<TransitionProps, any> {
    render(): JSX.Element;

}


"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCssText = getCssText;
exports.getCssTextWithPolyfill = getCssTextWithPolyfill;
exports.getCssTextWithVariables = getCssTextWithVariables;
exports.default = void 0;

var _replaceValuesWithVariableNames = require("./replaceValuesWithVariableNames");

var _formatVariableNames = require("./formatVariableNames");

var _applyCustomMediaToCss = require("./applyCustomMediaToCss");

var _customPropertiesSupported = require("./customPropertiesSupported");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * ---
 * category: utilities/themes
 * ---
 * Returns the CSS as a string with variables applied
 * @module getCssText
 * @param {Function} template A template function that returns the CSS as a string with variables injected
 * @param {Object} variables JS variables
 * @param {string} prefix CSS variable prefix/namespace
 * @returns {String} css text
 */
function getCssText() {
  if ((0, _customPropertiesSupported.customPropertiesSupported)()) {
    return getCssTextWithVariables.apply(this, arguments);
  } else {
    return getCssTextWithPolyfill.apply(this, arguments);
  }
}

function getCssTextWithPolyfill(template, variables) {
  // inject variable values
  var cssText = template(variables); // inject valules for @custom-media rules

  var customMedia = variables ? (0, _formatVariableNames.formatVariableNames)(variables) : {};
  cssText = (0, _applyCustomMediaToCss.applyCustomMediaToCss)(cssText, customMedia);
  return cssText;
}

function getCssTextWithVariables(template, variables, prefix) {
  var variableNames = variables ? (0, _replaceValuesWithVariableNames.replaceValuesWithVariableNames)(variables, prefix) : {}; // inject the CSS variable names into the style template

  var cssText = template(variableNames); // inject values for @custom-media rules (https://www.w3.org/TR/2016/WD-mediaqueries-4-20160126/#custom-mq)

  var customMedia = variables ? function () {
    return (0, _formatVariableNames.formatVariableNames)(variables);
  } : {};
  cssText = (0, _applyCustomMediaToCss.applyCustomMediaToCss)(cssText, customMedia);
  var cssVariablesString = variables ? (0, _formatVariableNames.formatVariableNames)(variables, prefix) : ''; // append the CSS variables (defaults) to the result

  cssText = [cssText, variablesToCSSText(cssVariablesString)].join('\n');
  return cssText;
}

function variablesToCSSText() {
  var variables = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var rules = [];

  for (var key in variables) {
    if (Object.prototype.hasOwnProperty.call(variables, key) && typeof variables[key] !== 'undefined') {
      rules.push("".concat(key, ": ").concat(variables[key]));
    }
  }

  if (rules.length > 0) {
    return "\n      :root {\n        ".concat(rules.join(';\n'), ";\n      }\n    ");
  } else {
    return '';
  }
}

var _default = getCssText;
exports.default = _default;
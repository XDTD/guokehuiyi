import * as React from 'react';

export type TextInputRenderLabel = React.ReactNode | ((...args: any[])=>any);

export type TextInputType = "text" | "email" | "url" | "tel" | "search" | "password";

export type TextInputInteraction = "enabled" | "disabled" | "readonly";

export type TextInputSize = "small" | "medium" | "large";

export type TextInputTextAlign = "start" | "center";

export type TextInputHtmlSize = string | number;

export type TextInputDisplay = "inline-block" | "block";

export type TextInputRenderBeforeInput = React.ReactNode | ((...args: any[])=>any);

export type TextInputRenderAfterInput = React.ReactNode | ((...args: any[])=>any);

export type TextInputLabel = React.ReactNode | ((...args: any[])=>any);

export interface TextInputProps {
    /**
     * The form field label.
     */
    renderLabel?: TextInputRenderLabel;
    /**
     * The type of input.
     */
    type?: TextInputType;
    /**
     * The id of the text input. One is generated if not supplied.
     */
    id?: string;
    /**
     * the selected value (must be accompanied by an `onChange` prop)
     */
    value?: any;
    /**
     * value to set on initial render
     */
    defaultValue?: string;
    /**
     * Specifies if interaction with the input is enabled, disabled, or readonly.
     * When "disabled", the input changes visibly to indicate that it cannot
     * receive user interactions. When "readonly" the input still cannot receive
     * user interactions but it keeps the same styles as if it were enabled.
     */
    interaction?: TextInputInteraction;
    /**
     * object with shape: `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
    /**
     * The size of the text input.
     */
    size?: TextInputSize;
    /**
     * The text alignment of the input.
     */
    textAlign?: TextInputTextAlign;
    /**
     * The width of the input.
     */
    width?: string;
    /**
     * The width of the input, in characters, if a width is not explicitly
     * provided via the `width` prop. Only applicable if `isInline={true}`.
     */
    htmlSize?: TextInputHtmlSize;
    /**
     * The display of the root element.
     */
    display?: TextInputDisplay;
    /**
     * Prevents the default behavior of wrapping the input and rendered content
     * when available space is exceeded.
     */
    shouldNotWrap?: boolean;
    /**
     * Html placeholder text to display when the input has no value. This should be hint text, not a label
     * replacement.
     */
    placeholder?: string;
    /**
     * Whether or not the text input is required.
     */
    isRequired?: boolean;
    /**
     * a function that provides a reference to the actual input element
     */
    inputRef?: (...args: any[])=>any;
    /**
     * a function that provides a reference a parent of the input element
     */
    inputContainerRef?: (...args: any[])=>any;
    /**
     * Content to display before the input text, such as an icon
     */
    renderBeforeInput?: TextInputRenderBeforeInput;
    /**
     * Content to display after the input text, such as an icon
     */
    renderAfterInput?: TextInputRenderAfterInput;
    /**
     * Callback executed when the input fires a change event.
     * @param {Object} event - the event object
     * @param {Object} value - the string value of the input
     */
    onChange?: (...args: any[])=>any;
    /**
     * Callback fired when input loses focus.
     */
    onBlur?: (...args: any[])=>any;
    /**
     * Callback fired when input receives focus.
     */
    onFocus?: (...args: any[])=>any;
    /**
     * eslint-disable react/require-default-props
     */
    icon?: (...args: any[])=>any;
    /**
     * __Deprecated - use `renderLabel`__
     */
    label?: TextInputLabel;
    /**
     * __Deprecated - use `isRequired`__
     */
    required?: boolean;
    /**
     * __Deprecated - use `display`__
     */
    inline?: boolean;
}

export class TextInput extends React.Component<TextInputProps, any> {
    render(): JSX.Element;

}


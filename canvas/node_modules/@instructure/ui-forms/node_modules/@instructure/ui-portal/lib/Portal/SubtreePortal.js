"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubtreePortal = exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _bidirectional = require("@instructure/ui-i18n/lib/bidirectional.js");

var _element = require("@instructure/ui-prop-types/lib/element.js");

var _shallowEqual = require("@instructure/ui-utils/lib/shallowEqual.js");

var _dec, _class, _class2, _temp;

/* istanbul ignore file */

/**
---
private: true
---
@module SubtreePortal
**/
var SubtreePortal = (_dec = (0, _bidirectional.bidirectional)(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(SubtreePortal, _Component);

  var _super = (0, _createSuper2.default)(SubtreePortal);

  function SubtreePortal() {
    (0, _classCallCheck2.default)(this, SubtreePortal);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(SubtreePortal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.renderPortal(this.props);
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !((0, _shallowEqual.shallowEqual)(this.props, nextProps) && (0, _shallowEqual.shallowEqual)(this.state, nextState));
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.renderPortal(nextProps);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removePortal(this.props);
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }, {
    key: "renderPortal",
    value: function renderPortal(props) {
      var _this = this;

      var open = props.open,
          insertAt = props.insertAt,
          onOpen = props.onOpen,
          onClose = props.onClose,
          elementRef = props.elementRef,
          children = props.children,
          passThroughProps = (0, _objectWithoutProperties2.default)(props, ["open", "insertAt", "onOpen", "onClose", "elementRef", "children"]);
      var isInitialMount = !this.DOMNode;
      var mountNode = this.mountNode;
      var content = children; // Wrap text in a span since subtree will only render a single top-level node

      if (typeof content === 'string' && content.length > 0) {
        content = /*#__PURE__*/_react.default.createElement("span", null, content);
      } // Render subtree if Portal is open and has children to render


      if (open && _react.default.Children.count(content) > 0) {
        // Create node if it doesn't already exist
        if (!this.DOMNode) {
          var node = document.createElement('span');
          var attributes = (0, _objectSpread2.default)({}, (0, _passthroughProps.passthroughProps)(passThroughProps), {
            dir: this.dir
          });
          Object.keys(attributes).forEach(function (name) {
            node.setAttribute(name, attributes[name]);
          });
          elementRef(node);
          this.DOMNode = node;
        } // Append node to container if it isn't already


        if (this.DOMNode.parentNode !== mountNode) {
          if (insertAt === 'bottom') {
            mountNode.appendChild(this.DOMNode);
          } else {
            mountNode.insertBefore(this.DOMNode, mountNode.firstChild);
          }
        } // Notify that subtree has been rendered if props ask for it


        var handleMount = function handleMount() {
          // Only fire onOpen if Portal was closed and is now open
          if ((isInitialMount || !_this.props.open && open) && typeof onOpen === 'function') {
            onOpen(_this.DOMNode);
          }
        };

        _reactDom.default.unstable_renderSubtreeIntoContainer(this, content, this.DOMNode, handleMount);
      } else {
        this.removePortal(props);
      }
    }
  }, {
    key: "removePortal",
    value: function removePortal(props) {
      var unmounted;

      if (this.DOMNode) {
        unmounted = _reactDom.default.unmountComponentAtNode(this.DOMNode);
        this.DOMNode.parentNode && this.DOMNode.parentNode.removeChild(this.DOMNode);
        this.DOMNode = null;
        this.props.elementRef(this.DOMNode);
      }

      if (unmounted && typeof props.onClose === 'function') {
        props.onClose();
      }
    }
  }, {
    key: "mountNode",
    get: function get() {
      var mountNode;

      if (typeof this.props.mountNode === 'function') {
        mountNode = this.props.mountNode();
      } else if (this.props.mountNode) {
        mountNode = this.props.mountNode;
      }

      if (!mountNode || !mountNode.nodeName) {
        mountNode = document.body;
      }

      return mountNode;
    }
  }, {
    key: "DOMNode",
    get: function get() {
      return this._node;
    },
    set: function set(el) {
      this._node = el;
    } // for backwards compatibility:

  }, {
    key: "node",
    get: function get() {
      return this.DOMNode;
    }
  }]);
  SubtreePortal.displayName = "SubtreePortal";
  return SubtreePortal;
}(_react.Component), _class2.propTypes = {
  /**
   * Wheter or not the `<Portal />` is open
   */
  open: _propTypes.default.bool,

  /**
   * Callback fired when `<Portal />` content has been mounted in the DOM
   */
  onOpen: _propTypes.default.func,

  /**
   * Callback fired when `<Portal />` has been unmounted from the DOM
   */
  onClose: _propTypes.default.func,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Portal />` (defaults to `document.body`)
   */
  mountNode: _propTypes.default.oneOfType([_element.element, _propTypes.default.func]),

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: _propTypes.default.oneOf(['bottom', 'top']),

  /**
   * The children to be rendered within the `<Portal />`
   */
  children: _propTypes.default.node,

  /**
  * provides a reference to the underlying html element
  */
  elementRef: _propTypes.default.func
}, _class2.defaultProps = {
  open: false,
  insertAt: 'bottom',
  onOpen: function onOpen(DOMNode) {},
  onClose: function onClose() {},
  mountNode: null,
  children: null,
  elementRef: function elementRef(el) {}
}, _temp)) || _class);
exports.SubtreePortal = SubtreePortal;
var _default = SubtreePortal;
exports.default = _default;
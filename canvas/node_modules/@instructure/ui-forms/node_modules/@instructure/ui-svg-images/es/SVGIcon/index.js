import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { themeable } from '@instructure/ui-themeable';
import { testable } from '@instructure/ui-testable';
import { InlineSVG } from '../InlineSVG';
var styles = {
  componentId: 'cGqzL',
  template: function template(theme) {
    return "\n\n.cGqzL_bGBk{height:1em;line-height:1;vertical-align:middle;width:1em}\n\n.cGqzL_cwgF{transform:rotate(90deg)}\n\n.cGqzL_exaY{transform:rotate(180deg)}\n\n.cGqzL_dTDN{transform:rotate(270deg)}\n\n[dir=rtl] .cGqzL_owrh{transform:scaleX(-1)}\n\n[dir=rtl] .cGqzL_owrh.cGqzL_cwgF{transform:scaleX(-1) rotate(90deg)}\n\n[dir=rtl] .cGqzL_owrh .cGqzL_exaY{transform:scaleX(-1) rotate(180deg)}\n\n[dir=rtl] .cGqzL_owrh .cGqzL_dTDN{transform:scaleX(-1) rotate(270deg)}\n\n.cGqzL_dIzR{font-size:".concat(theme.sizeXSmall || 'inherit', "}\n\n.cGqzL_VCXp{font-size:").concat(theme.sizeSmall || 'inherit', "}\n\n.cGqzL_fKcQ{font-size:").concat(theme.sizeMedium || 'inherit', "}\n\n.cGqzL_cnhd{font-size:").concat(theme.sizeLarge || 'inherit', "}\n\n.cGqzL_fWMB{font-size:").concat(theme.sizeXLarge || 'inherit', "}");
  },
  'root': 'cGqzL_bGBk',
  'rotate--90': 'cGqzL_cwgF',
  'rotate--180': 'cGqzL_exaY',
  'rotate--270': 'cGqzL_dTDN',
  'bidirectional': 'cGqzL_owrh',
  'size--x-small': 'cGqzL_dIzR',
  'size--small': 'cGqzL_VCXp',
  'size--medium': 'cGqzL_fKcQ',
  'size--large': 'cGqzL_cnhd',
  'size--x-large': 'cGqzL_fWMB'
};
import theme from './theme';
/**
---
category: components/utilities
---
**/

var SVGIcon = (_dec = testable(), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(SVGIcon, _Component);

  var _super = _createSuper(SVGIcon);

  function SVGIcon() {
    _classCallCheck(this, SVGIcon);

    return _super.apply(this, arguments);
  }

  _createClass(SVGIcon, [{
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          rotate = _this$props.rotate,
          className = _this$props.className,
          size = _this$props.size,
          bidirectional = _this$props.bidirectional,
          props = _objectWithoutProperties(_this$props, ["rotate", "className", "size", "bidirectional"]);

      return /*#__PURE__*/React.createElement(InlineSVG, Object.assign({}, props, {
        rotate: rotate,
        className: classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles["rotate--".concat(rotate)], rotate && rotate !== '0'), _defineProperty(_classnames, styles["size--".concat(size)], size), _defineProperty(_classnames, styles.bidirectional, bidirectional), _defineProperty(_classnames, className, className), _classnames))
      }));
    }
  }]);

  SVGIcon.displayName = "SVGIcon";
  return SVGIcon;
}(Component), _class2.propTypes = _objectSpread({}, InlineSVG.propTypes, {
  rotate: PropTypes.oneOf(['0', '90', '180', '270']),
  size: PropTypes.oneOf(['x-small', 'small', 'medium', 'large', 'x-large']),
  bidirectional: PropTypes.bool
}), _class2.defaultProps = {
  rotate: '0',
  bidirectional: false,
  size: void 0
}, _temp)) || _class) || _class);
export default SVGIcon;
export { SVGIcon };
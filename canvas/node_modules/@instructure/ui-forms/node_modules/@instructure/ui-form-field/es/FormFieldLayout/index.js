import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { error as _error } from "@instructure/console";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { hasVisibleChildren } from '@instructure/ui-a11y-utils';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { Grid } from '@instructure/ui-grid';
import { themeable } from '@instructure/ui-themeable';
import { omitProps, pickProps, getElementType } from '@instructure/ui-react-utils';
import { uid } from '@instructure/uid';
import { FormFieldLabel } from '../FormFieldLabel';
import { FormFieldMessages } from '../FormFieldMessages';
import { FormPropTypes } from '../FormPropTypes';
var styles = {
  componentId: 'cWmNi',
  template: function template(theme) {
    return "\n\n.cWmNi_bGBk{all:initial;animation:none 0s ease 0s 1 normal none running;backface-visibility:visible;background:transparent none repeat 0 0/auto auto padding-box border-box scroll;border:medium none currentColor;border:0;border-collapse:separate;border-image:none;border-radius:0;border-spacing:0;bottom:auto;box-shadow:none;box-sizing:content-box;caption-side:top;clear:none;clip:auto;color:#000;column-count:auto;column-fill:balance;column-gap:normal;column-rule:medium none currentColor;column-span:1;column-width:auto;columns:auto;content:normal;counter-increment:none;counter-reset:none;cursor:auto;direction:ltr;direction:inherit;display:inline;display:block;empty-cells:show;float:none;font-family:serif;font-size:medium;font-stretch:normal;font-style:normal;font-variant:normal;font-weight:400;height:auto;hyphens:none;left:auto;letter-spacing:normal;line-height:normal;list-style:disc outside none;margin:0;max-height:none;max-width:none;min-height:0;min-width:0;opacity:1;opacity:inherit;orphans:2;outline:medium none invert;overflow:visible;overflow-x:visible;overflow-y:visible;padding:0;page-break-after:auto;page-break-before:auto;page-break-inside:auto;perspective:none;perspective-origin:50% 50%;position:static;right:auto;tab-size:8;table-layout:auto;text-align:left;text-align:start;text-align-last:auto;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;top:auto;transform:none;transform-origin:50% 50% 0;transform-style:flat;transition:none 0s ease 0s;unicode-bidi:normal;vertical-align:baseline;visibility:visible;white-space:normal;widows:2;width:auto;width:100%;word-spacing:normal;z-index:auto}\n\n[dir=ltr] .cWmNi_bGBk{text-align:left}\n\n[dir=rtl] .cWmNi_bGBk{text-align:right}\n\n.cWmNi_eXrk{display:inline-block;vertical-align:middle;width:auto}";
  },
  'root': 'cWmNi_bGBk',
  'inline': 'cWmNi_eXrk'
};
import theme from './theme';
/**
---
parent: FormField
---
**/

var FormFieldLayout = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(FormFieldLayout, _Component);

  var _super = _createSuper(FormFieldLayout);

  function FormFieldLayout(props) {
    var _this;

    _classCallCheck(this, FormFieldLayout);

    _this = _super.call(this);

    _this.handleInputContainerRef = function (node) {
      if (_this.props.inputContainerRef) {
        _this.props.inputContainerRef(node);
      }
    };

    _this._messagesId = props.messagesId || uid('FormFieldLayout-messages');

    /*#__PURE__*/

    /*#__PURE__*/
    _error(typeof props.width !== 'undefined' || !props.inline || props.layout !== 'inline', "[FormFieldLayout] The 'inline' prop is true, and the 'layout' is set to 'inline'.\n      This will cause a layout issue in Internet Explorer 11 unless you also add a value for the 'width' prop.");

    return _this;
  }

  _createClass(FormFieldLayout, [{
    key: "renderLabel",
    value: function renderLabel() {
      if (this.hasVisibleLabel) {
        return /*#__PURE__*/React.createElement(Grid.Col, {
          textAlign: this.props.labelAlign,
          width: this.inlineContainerAndLabel ? 'auto' : 3
        }, /*#__PURE__*/React.createElement(FormFieldLabel, {
          "aria-hidden": this.elementType === 'fieldset' ? 'true' : null
        }, this.props.label));
      } else if (this.elementType !== 'fieldset') {
        // to avoid duplicate label/legend content
        return this.props.label;
      } else {
        return null;
      }
    }
  }, {
    key: "renderLegend",
    value: function renderLegend() {
      // note: the legend element must be the first child of a fieldset element for SR
      // so we render it twice in that case (once for SR-only and one that is visible)
      return /*#__PURE__*/React.createElement(ScreenReaderContent, {
        as: "legend"
      }, this.props.label, this.hasMessages && /*#__PURE__*/React.createElement(FormFieldMessages, {
        messages: this.props.messages
      }));
    }
  }, {
    key: "renderMessages",
    value: function renderMessages() {
      return /*#__PURE__*/React.createElement(FormFieldMessages, {
        id: this._messagesId,
        messages: this.props.messages
      });
    }
  }, {
    key: "renderVisibleMessages",
    value: function renderVisibleMessages() {
      return this.hasMessages ? /*#__PURE__*/React.createElement(Grid.Row, null, /*#__PURE__*/React.createElement(Grid.Col, {
        offset: this.inlineContainerAndLabel ? null : 3,
        textAlign: this.inlineContainerAndLabel ? 'end' : null
      }, /*#__PURE__*/React.createElement(FormFieldMessages, {
        id: this._messagesId,
        messages: this.props.messages
      }))) : null;
    }
  }, {
    key: "render",
    value: function render() {
      var _classes;

      var ElementType = this.elementType;
      var classes = (_classes = {}, _defineProperty(_classes, styles.root, true), _defineProperty(_classes, styles.inline, this.props.inline), _classes);
      return /*#__PURE__*/React.createElement(ElementType, Object.assign({}, omitProps(this.props, _objectSpread({}, FormFieldLayout.propTypes, {}, Grid.propTypes)), {
        className: classnames(classes),
        style: {
          width: this.props.width
        },
        "aria-describedby": this.hasMessages ? this._messagesId : null
      }), this.elementType === 'fieldset' && this.renderLegend(), /*#__PURE__*/React.createElement(Grid, Object.assign({
        rowSpacing: "small",
        colSpacing: "small",
        startAt: this.props.layout === 'inline' && this.hasVisibleLabel ? 'medium' : null
      }, pickProps(this.props, Grid.propTypes)), /*#__PURE__*/React.createElement(Grid.Row, null, this.renderLabel(), /*#__PURE__*/React.createElement(Grid.Col, {
        width: this.inlineContainerAndLabel ? 'auto' : null,
        elementRef: this.handleInputContainerRef
      }, this.props.children)), this.renderVisibleMessages()));
    }
  }, {
    key: "hasVisibleLabel",
    get: function get() {
      return this.props.label && hasVisibleChildren(this.props.label);
    }
  }, {
    key: "hasMessages",
    get: function get() {
      return this.props.messages && this.props.messages.length > 0;
    }
  }, {
    key: "elementType",
    get: function get() {
      return getElementType(FormFieldLayout, this.props);
    }
  }, {
    key: "inlineContainerAndLabel",
    get: function get() {
      // Return if both the component container and label will display inline
      return this.props.inline && this.props.layout === 'inline';
    }
  }]);

  FormFieldLayout.displayName = "FormFieldLayout";
  return FormFieldLayout;
}(Component), _class2.propTypes = {
  label: PropTypes.node.isRequired,

  /**
  * the id of the input (to link it to its label for a11y)
  */
  id: PropTypes.string,

  /**
  * the element type to render as
  */
  as: PropTypes.elementType,

  /**
  * object with shape: `{
  * text: PropTypes.string,
  * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *   }`
  */
  messages: PropTypes.arrayOf(FormPropTypes.message),

  /**
  * id for the form field messages
  */
  messagesId: PropTypes.string,
  children: PropTypes.node,
  inline: PropTypes.bool,
  layout: PropTypes.oneOf(['stacked', 'inline']),
  labelAlign: PropTypes.oneOf(['start', 'end']),
  width: PropTypes.string,
  inputContainerRef: PropTypes.func
}, _class2.defaultProps = {
  id: void 0,
  width: void 0,
  messages: void 0,
  messagesId: void 0,
  children: null,
  inline: false,
  layout: 'stacked',
  as: 'label',
  labelAlign: 'end',
  inputContainerRef: void 0
}, _temp)) || _class);
export default FormFieldLayout;
export { FormFieldLayout };
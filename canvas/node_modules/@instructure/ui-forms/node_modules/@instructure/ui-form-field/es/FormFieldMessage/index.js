import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { themeable } from '@instructure/ui-themeable';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
var styles = {
  componentId: 'bVlfD',
  template: function template(theme) {
    return "\n\n.bVlfD_bGBk{display:block;font-family:".concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', ";line-height:").concat(theme.lineHeight || 'inherit', "}\n\n.bVlfD_dYYb{color:").concat(theme.colorHint || 'inherit', "}\n\n.bVlfD_ddvR{color:").concat(theme.colorError || 'inherit', "}\n\n.bVlfD_cOXX{color:").concat(theme.colorSuccess || 'inherit', "}");
  },
  'root': 'bVlfD_bGBk',
  'hint': 'bVlfD_dYYb',
  'error': 'bVlfD_ddvR',
  'success': 'bVlfD_cOXX'
};
import theme from './theme';
/**
---
parent: FormField
---

This is a helper component that is used by most of the custom form
components. In most cases it shouldn't be used directly.

```js
---
example: true
---
<FormFieldMessage variant="error">Invalid value</FormFieldMessage>
```
**/

var FormFieldMessage = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(FormFieldMessage, _Component);

  var _super = _createSuper(FormFieldMessage);

  function FormFieldMessage() {
    _classCallCheck(this, FormFieldMessage);

    return _super.apply(this, arguments);
  }

  _createClass(FormFieldMessage, [{
    key: "render",
    value: function render() {
      var _classes;

      var classes = (_classes = {}, _defineProperty(_classes, styles.root, true), _defineProperty(_classes, styles[this.props.variant], true), _classes);
      return this.props.variant !== 'screenreader-only' ? /*#__PURE__*/React.createElement("span", {
        className: classnames(classes)
      }, this.props.children) : /*#__PURE__*/React.createElement(ScreenReaderContent, null, this.props.children);
    }
  }]);

  FormFieldMessage.displayName = "FormFieldMessage";
  return FormFieldMessage;
}(Component), _class2.propTypes = {
  variant: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only']),
  children: PropTypes.node
}, _class2.defaultProps = {
  variant: 'hint',
  children: null
}, _temp)) || _class);
export default FormFieldMessage;
export { FormFieldMessage };
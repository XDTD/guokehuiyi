import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { getElementType } from '@instructure/ui-react-utils';
import { getTextDirection } from '../getTextDirection';
import { TextDirectionContext } from '../TextDirectionContext';
/**
---
category: components/utilities
---
**/

var ApplyTextDirection = /*#__PURE__*/function (_Component) {
  _inherits(ApplyTextDirection, _Component);

  var _super = _createSuper(ApplyTextDirection);

  function ApplyTextDirection() {
    var _this;

    _classCallCheck(this, ApplyTextDirection);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._defaultDirection = getTextDirection();
    return _this;
  }

  _createClass(ApplyTextDirection, [{
    key: "getChildContext",
    value: function getChildContext() {
      return TextDirectionContext.makeTextDirectionContext(this.dir);
    }
  }, {
    key: "render",
    value: function render() {
      var ElementType = getElementType(ApplyTextDirection, this.props);
      var children = this.props.children;
      return /*#__PURE__*/React.createElement(ElementType, {
        dir: this.dir
      }, typeof children === 'function' ? children(this.dir, this.dir === TextDirectionContext.DIRECTION.rtl) : children);
    }
  }, {
    key: "dir",
    get: function get() {
      var context = TextDirectionContext.getTextDirectionContext(this.context) || {};
      return this.props.dir || context.dir || this._defaultDirection;
    }
  }]);

  ApplyTextDirection.displayName = "ApplyTextDirection";
  return ApplyTextDirection;
}(Component);

ApplyTextDirection.propTypes = {
  /**
  * string 'ltr' or 'rtl' representing the document direction
  */
  dir: PropTypes.oneOf(['ltr', 'rtl']),

  /**
  * a single child (children must be wrapped in a single component/element) or function
  * returning a child called with the following arguments:
  * @param {string} dir - the string value 'rtl' or 'ltr'
  * @param {Boolean} rtl - boolean value true if the direction is 'rtl'
  */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
  * accepts only one child (children must be wrapped in a single component/element)
  */
  as: PropTypes.elementType
};
ApplyTextDirection.defaultProps = {
  dir: void 0,
  as: 'span',
  children: null
};
ApplyTextDirection.DIRECTION = TextDirectionContext.DIRECTION;
ApplyTextDirection.childContextTypes = TextDirectionContext.types;
ApplyTextDirection.contextTypes = TextDirectionContext.types;
export default ApplyTextDirection;
export { ApplyTextDirection };
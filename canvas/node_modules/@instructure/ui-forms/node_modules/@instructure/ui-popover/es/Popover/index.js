import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { error as _error } from "@instructure/console";

var _dec, _dec2, _class, _class2, _temp, _dec3, _dec4, _class3, _class4, _temp2, _dec5, _dec6, _dec7, _class5, _class6, _temp3;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import keycode from 'keycode';
import { Position, PositionPropTypes, parsePlacement, mirrorHorizontalPlacement } from '@instructure/ui-position';
import { ContextView, View } from '@instructure/ui-view';
import { Dialog } from '@instructure/ui-dialog';
import { bidirectional } from '@instructure/ui-i18n';
import { element } from '@instructure/ui-prop-types';
import { findDOMNode, containsActiveElement, requestAnimationFrame, handleMouseOverOut } from '@instructure/ui-dom-utils';
import { ComponentIdentifier, safeCloneElement, callRenderProp, deprecated } from '@instructure/ui-react-utils';
import { createChainedFunction, shallowEqual, px } from '@instructure/ui-utils';
import { uid } from '@instructure/uid';
import { ThemeablePropTypes } from '@instructure/ui-themeable';
import { testable } from '@instructure/ui-testable';
import { FocusRegion } from '@instructure/ui-a11y-utils';
var PopoverTrigger = (_dec = deprecated('8.0.0', null, 'Use Popover\'s `renderTrigger` prop instead.'), _dec2 = testable(), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_ComponentIdentifier) {
  _inherits(PopoverTrigger, _ComponentIdentifier);

  var _super = _createSuper(PopoverTrigger);

  function PopoverTrigger() {
    _classCallCheck(this, PopoverTrigger);

    return _super.apply(this, arguments);
  }

  return PopoverTrigger;
}(ComponentIdentifier), _class2.displayName = 'PopoverTrigger', _temp)) || _class) || _class);
var PopoverContent = (_dec3 = deprecated('8.0.0', null, 'Use Popover\'s `children` instead.'), _dec4 = testable(), _dec3(_class3 = _dec4(_class3 = (_temp2 = _class4 = /*#__PURE__*/function (_ComponentIdentifier2) {
  _inherits(PopoverContent, _ComponentIdentifier2);

  var _super2 = _createSuper(PopoverContent);

  function PopoverContent() {
    _classCallCheck(this, PopoverContent);

    return _super2.apply(this, arguments);
  }

  return PopoverContent;
}(ComponentIdentifier), _class4.displayName = 'PopoverContent', _temp2)) || _class3) || _class3);
/**
---
category: components
---
**/

var Popover = (_dec5 = deprecated('8.0.0', {
  show: 'isShowingContent',
  defaultShow: 'defaultIsShowingContent',
  variant: 'color',
  label: 'screenReaderLabel',
  trackPosition: 'shouldTrackPosition',
  alignArrow: 'shouldAlignArrow',
  onShow: 'onShowContent',
  onDismiss: 'onHideContent',
  onToggle: 'onShowContent/onHideContent'
}), _dec6 = testable(), _dec7 = bidirectional(), _dec5(_class5 = _dec6(_class5 = _dec7(_class5 = (_temp3 = _class6 = /*#__PURE__*/function (_Component) {
  _inherits(Popover, _Component);

  var _super3 = _createSuper(Popover);

  function Popover(props) {
    var _this;

    _classCallCheck(this, Popover);

    _this = _super3.call(this, props);

    _this.show = function (event) {
      if (typeof _this.props.isShowingContent === 'undefined' && typeof _this.props.show === 'undefined') {
        _this.setState({
          isShowingContent: true
        });
      }

      _this.props.onShowContent(event);

      if (typeof _this.props.onToggle === 'function') {
        _this.props.onToggle(true);
      }
    };

    _this.hide = function (event) {
      var documentClick = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var _this$props = _this.props,
          onHideContent = _this$props.onHideContent,
          isShowingContent = _this$props.isShowingContent,
          show = _this$props.show,
          onToggle = _this$props.onToggle,
          onDismiss = _this$props.onDismiss;

      if (typeof isShowingContent === 'undefined' && typeof show === 'undefined') {
        // uncontrolled, set state, fire callbacks
        _this.setState(function (_ref) {
          var isShowingContent = _ref.isShowingContent;

          if (isShowingContent) {
            onHideContent(event, {
              documentClick: documentClick
            });

            if (typeof onDismiss === 'function') {
              onDismiss(event, documentClick);
            }
          }

          return {
            isShowingContent: false
          };
        });
      } else if (isShowingContent || show) {
        // controlled, fire callback
        onHideContent(event, {
          documentClick: documentClick
        });

        if (typeof onDismiss === 'function') {
          onDismiss(event, documentClick);
        }
      }

      if (typeof onToggle === 'function') {
        onToggle(false);
      }
    };

    _this.toggle = function (event) {
      if (_this.shown) {
        _this.hide(event);
      } else {
        _this.show(event);
      }
    };

    _this.handleDialogDismiss = function () {
      var _this2;

      if (!_this.props.shouldReturnFocus && _this.props.shouldFocusContentOnTriggerBlur) {
        var trigger = findDOMNode(_this._trigger);

        if (trigger && typeof trigger.focus === 'function') {
          trigger.focus();
        }
      }

      (_this2 = _this).hide.apply(_this2, arguments);
    };

    _this.handleDialogBlur = function (event) {
      if (event.keyCode === keycode.codes.tab && event.shiftKey && _this.props.shouldFocusContentOnTriggerBlur) {
        return;
      }

      _this.hide(event);
    };

    _this.handleTriggerKeyDown = function (event) {
      if (!_this.props.shouldFocusContentOnTriggerBlur) {
        return;
      }

      if (event.keyCode === keycode.codes.tab && !event.shiftKey) {
        event.preventDefault();

        _this._raf.push(requestAnimationFrame(function () {
          _this._dialog && _this._dialog.focus();
        }));
      }
    };

    _this.handleTriggerKeyUp = function (event) {
      if (event.keyCode === keycode.codes.esc && _this.shown && _this.isTooltip) {
        // if popover is tooltip, it is managing its own focus region so we need
        // to prevent esc keyup event from reaching FocusRegionManager
        event.preventDefault();

        _this.hide(event);
      }
    };

    _this.handleTriggerBlur = function (event) {
      if (_this.props.on.indexOf('focus') > -1) {
        _this._raf.push(requestAnimationFrame(function () {
          if (!containsActiveElement(_this._view)) {
            _this.hide(event);
          }
        }));
      }
    };

    _this.handlePositioned = function (position) {
      var placement = position.placement;

      _this.setState(_objectSpread({
        placement: placement
      }, _this.computeOffsets(placement)));

      _this.props.onPositioned(position);

      if (typeof _this.props.onShow === 'function') {
        _this.props.onShow(position);
      }
    };

    _this.handlePositionChanged = function (position) {
      var placement = position.placement;

      _this.setState(_objectSpread({
        placement: placement
      }, _this.computeOffsets(placement)));

      _this.props.onPositionChanged(position);
    };

    _this.state = {
      placement: props.placement,
      offsetX: props.offsetX,
      offsetY: props.offsetY
    };

    if (typeof props.isShowingContent === 'undefined' && typeof props.show === 'undefined') {
      _this.state.isShowingContent = props.defaultIsShowingContent || props.defaultShow;
    }

    _this._id = _this.props.id || uid('Popover');
    _this._raf = [];
    _this._handleMouseOver = handleMouseOverOut.bind(null, function (event) {
      _this.show(event);
    });
    _this._handleMouseOut = handleMouseOverOut.bind(null, function (event) {
      _this.hide(event);
    });
    return _this;
  }

  _createClass(Popover, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.isTooltip) {
        // if popover is being used as a tooltip with no focusable content
        // manage its FocusRegion internally rather than registering it with
        // the FocusRegionManager via Dialog
        this._focusRegion = new FocusRegion(this._contentElement, {
          shouldCloseOnEscape: false,
          shouldCloseOnDocumentClick: true,
          onDismiss: this.hide
        });

        if (this.shown) {
          this._focusRegion.activate();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._raf.forEach(function (request) {
        return request.cancel();
      });

      this._raf = [];

      if (this._focusRegion) {
        this._focusRegion.deactivate();

        this._focusRegion.blur();
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this._focusRegion && this.isTooltip) {
        // if focus region exists, popover is acting as a tooltip
        // so we manually activate and deactivate the region when showing/hiding
        if (!prevProps.isShowingContent && this.props.isShowingContent || !prevState.isShowingContent && this.state.isShowingContent) {
          // changed from hiding to showing
          this._focusRegion.activate();

          this._focusRegion.focus();
        }

        if (prevProps.isShowingContent && !this.props.isShowingContent || prevState.isShowingContent && !this.state.isShowingContent) {
          // changed from showing to hiding
          this._focusRegion.deactivate();
        }
      }
    }
  }, {
    key: "computeOffsets",
    value: function computeOffsets(placement) {
      var _this$props2 = this.props,
          offsetX = _this$props2.offsetX,
          offsetY = _this$props2.offsetY;

      if ((this.props.shouldAlignArrow || this.props.alignArrow) && this._view) {
        var secondaryPlacement = parsePlacement(placement)[1];
        var _this$_view$theme = this._view.theme,
            arrowSize = _this$_view$theme.arrowSize,
            arrowBorderWidth = _this$_view$theme.arrowBorderWidth;
        var offsetAmount = (px(arrowSize) + px(arrowBorderWidth)) * 2;

        if (secondaryPlacement === 'start') {
          offsetX = offsetAmount;
        } else if (secondaryPlacement === 'end') {
          offsetX = -offsetAmount;
        } else if (secondaryPlacement === 'top') {
          offsetY = offsetAmount;
        } else if (secondaryPlacement === 'bottom') {
          offsetY = -offsetAmount;
        }
      }

      return {
        offsetX: offsetX,
        offsetY: offsetY
      };
    }
  }, {
    key: "renderTrigger",
    value: function renderTrigger() {
      var _this3 = this;

      var trigger = ComponentIdentifier.pick(Popover.Trigger, this.props.children);

      if (!trigger) {
        trigger = callRenderProp(this.props.renderTrigger);
      }

      if (trigger) {
        var _this$props3 = this.props,
            on = _this$props3.on,
            shouldContainFocus = _this$props3.shouldContainFocus;
        var onClick;
        var onFocus;
        var onMouseOut;
        var onMouseOver;
        var expanded;

        if (on.indexOf('click') > -1) {
          onClick = function onClick(event) {
            _this3.toggle(event);
          };
        }

        if (on.indexOf('hover') > -1) {
          /*#__PURE__*/

          /*#__PURE__*/
          _error(!(on === 'hover'), '[Popover] Specifying only the `"hover"` trigger limits the visibilty of the Popover to just mouse users. ' + 'Consider also including the `"focus"` trigger ' + 'so that touch and keyboard only users can see the Popover content as well.');

          onMouseOver = this._handleMouseOver;
          onMouseOut = this._handleMouseOut;
        }

        if (on.indexOf('focus') > -1) {
          onFocus = function onFocus(event) {
            _this3.show(event);
          };
        }

        if (shouldContainFocus) {
          // only set aria-expanded if popover can contain focus
          expanded = this.shown ? 'true' : 'false';
        } else {
          expanded = null;
        }

        trigger = safeCloneElement(trigger, {
          ref: function ref(el) {
            return _this3._trigger = el;
          },
          'aria-expanded': expanded,
          'data-popover-trigger': true,
          onKeyDown: createChainedFunction(this.handleTriggerKeyDown, this.props.onKeyDown),
          onKeyUp: createChainedFunction(this.handleTriggerKeyUp, this.props.onKeyUp),
          onClick: createChainedFunction(onClick, this.props.onClick),
          onBlur: createChainedFunction(this.handleTriggerBlur, this.props.onBlur),
          onFocus: createChainedFunction(onFocus, this.props.onFocus),
          onMouseOut: createChainedFunction(onMouseOut, this.props.onMouseOut),
          onMouseOver: createChainedFunction(onMouseOver, this.props.onMouseOver)
        });
      }

      return trigger;
    }
  }, {
    key: "renderContent",
    value: function renderContent() {
      var _this4 = this;

      var content = ComponentIdentifier.pick(Popover.Content, this.props.children);

      if (!content) {
        content = callRenderProp(this.props.children);
      }

      if (this.shown && !this.isTooltip) {
        // if popover is NOT being used as a tooltip, create a Dialog
        // to manage the content FocusRegion, when showing
        content = /*#__PURE__*/React.createElement(Dialog, {
          open: this.shown,
          label: this.props.screenReaderLabel || this.props.label,
          ref: function ref(el) {
            return _this4._dialog = el;
          },
          display: "block",
          onBlur: this.handleDialogBlur,
          onDismiss: this.handleDialogDismiss,
          liveRegion: this.props.liveRegion,
          defaultFocusElement: this.props.defaultFocusElement,
          shouldContainFocus: this.props.shouldContainFocus,
          shouldReturnFocus: this.props.shouldReturnFocus,
          shouldFocusOnOpen: !this.props.shouldFocusContentOnTriggerBlur,
          shouldCloseOnDocumentClick: this.props.shouldCloseOnDocumentClick,
          shouldCloseOnEscape: this.props.shouldCloseOnEscape
        }, content);
      }

      if (this.shown || this.props.shouldRenderOffscreen) {
        var ViewElement;
        var color = this.props.variant;

        if (color) {
          color = color === 'inverse' ? 'primary-inverse' : 'primary';
        } else {
          color = this.props.color;
        }

        var viewProps = {
          ref: function ref(c) {
            return _this4._view = c;
          },
          elementRef: function elementRef(el) {
            _this4._contentElement = el;

            _this4.props.contentRef(el);
          },
          background: color,
          stacking: this.props.stacking,
          shadow: this.props.shadow,
          display: 'block'
        };
        var placement = this.state.placement;

        if (this.props.withArrow) {
          ViewElement = ContextView;
          viewProps = _objectSpread({}, viewProps, {
            // TODO: remove background override after contextview is updated
            background: color === 'primary' ? 'default' : 'inverse',
            placement: this.rtl ? mirrorHorizontalPlacement(placement, ' ') : placement
          });
        } else {
          ViewElement = View;
          viewProps = _objectSpread({}, viewProps, {
            borderWidth: 'small',
            borderRadius: 'medium'
          });
        }

        if (this.isTooltip) {
          // preventing pointerEvents reduces tooltip flicker
          viewProps = _objectSpread({}, viewProps, {
            style: {
              pointerEvents: 'none'
            }
          });
        }

        return /*#__PURE__*/React.createElement(ViewElement, viewProps, content);
      } else {
        return null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var positionProps = this.positionProps;

      if (this.props.positionTarget) {
        return /*#__PURE__*/React.createElement("span", null, this.renderTrigger(), /*#__PURE__*/React.createElement(Position, positionProps, this.renderContent()));
      } else {
        return /*#__PURE__*/React.createElement(Position, Object.assign({}, positionProps, {
          renderTarget: this.renderTrigger()
        }), this.renderContent());
      }
    }
  }, {
    key: "isTooltip",
    get: function get() {
      return this.props.shouldRenderOffscreen && !this.props.shouldReturnFocus && !this.props.shouldContainFocus && !this.props.shouldFocusContentOnTriggerBlur;
    }
  }, {
    key: "placement",
    get: function get() {
      var placement = this.props.placement;

      if (this.rtl) {
        placement = mirrorHorizontalPlacement(placement, ' ');
      }

      return !this.shown && this.props.shouldRenderOffscreen ? 'offscreen' : placement;
    }
  }, {
    key: "positionProps",
    get: function get() {
      return {
        offsetX: this.state.offsetX,
        offsetY: this.state.offsetY,
        shouldTrackPosition: (this.props.shouldTrackPosition || this.props.trackPosition) && this.shown,
        insertAt: this.props.insertAt,
        placement: this.placement,
        constrain: this.props.constrain,
        onPositioned: this.handlePositioned,
        onPositionChanged: this.handlePositionChanged,
        target: this.props.positionTarget,
        mountNode: this.props.mountNode,
        id: this._id
      };
    }
  }, {
    key: "shown",
    get: function get() {
      return typeof this.props.isShowingContent === 'undefined' && typeof this.props.show === 'undefined' ? this.state.isShowingContent : this.props.isShowingContent || this.props.show;
    }
  }, {
    key: "defaultFocusElement",
    get: function get() {
      return this.props.defaultFocusElement;
    }
  }]);

  Popover.displayName = "Popover";
  return Popover;
}(Component), _class6.Trigger = PopoverTrigger, _class6.Content = PopoverContent, _class6.propTypes = {
  /**
  * Whether or not the `<Popover />` content is shown
  */
  isShowingContent: PropTypes.bool,

  /**
   * Whether or not to show the content by default, when uncontrolled
   */
  defaultIsShowingContent: PropTypes.bool,

  /**
   * The action that causes the content to display (`click`, `hover`, `focus`)
   */
  on: PropTypes.oneOfType([PropTypes.oneOf(['click', 'hover', 'focus']), PropTypes.arrayOf(PropTypes.oneOf(['click', 'hover', 'focus']))]),

  /**
  * Whether or not an arrow pointing to the trigger should be rendered
  */
  withArrow: PropTypes.bool,

  /**
  * Color variant of the popover content
  */
  color: PropTypes.oneOf(['primary', 'primary-inverse']),

  /**
   * The placement of the content in relation to the trigger
   */
  placement: PositionPropTypes.placement,

  /**
  * Controls the shadow depth for the `<Popover />`
  */
  shadow: ThemeablePropTypes.shadow,

  /**
  * Controls the z-index depth for the `<Popover />` content
  */
  stacking: ThemeablePropTypes.stacking,

  /**
   * A function that returns a reference to the content element
   */
  contentRef: PropTypes.func,

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),

  /**
   * An accessible label for the `<Popover />` content
   */
  screenReaderLabel: PropTypes.string,

  /**
   * The horizontal offset for the positioned content
   */
  offsetX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * The vertical offset for the positioned content
   */
  offsetY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * The parent in which to constrain the popover.
   * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
   * or a function returning an element
   */
  constrain: PositionPropTypes.constrain,

  /**
   * Target element for positioning the Popover (if it differs from the trigger)
   */
  positionTarget: PropTypes.oneOfType([element, PropTypes.func]),

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Popover />` (defaults to `document.body`)
   */
  mountNode: PositionPropTypes.mountNode,

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: PropTypes.oneOf(['bottom', 'top']),

  /**
   * An element, function returning an element, or array of elements that will
   * not be hidden from the screen reader when the `<Popover />` is open
   */
  liveRegion: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element, PropTypes.func]),

  /**
  * An id is generated if not supplied.
  */
  id: PropTypes.string,

  /**
   * Whether or not the content should offset to align by its arrow
   */
  shouldAlignArrow: PropTypes.bool,

  /**
   * Whether or not position should be tracked or just set on initial render
   */
  shouldTrackPosition: PropTypes.bool,

  /**
  * Should the `<Popover />` render offscreen when visually hidden
  */
  shouldRenderOffscreen: PropTypes.bool,

  /**
   * Whether focus should contained within the `<Popover/>` when it is open
   */
  shouldContainFocus: PropTypes.bool,

  /**
   * Whether focus should be returned to the trigger when the `<Popover/>` is closed
   */
  shouldReturnFocus: PropTypes.bool,

  /**
   * Should the `<Popover />` hide when clicks occur outside the content
   */
  shouldCloseOnDocumentClick: PropTypes.bool,

  /**
   * Should the `<Popover />` hide when the escape key is pressed
   */
  shouldCloseOnEscape: PropTypes.bool,

  /**
   * Should the content become focused when the trigger is blurred
   */
  shouldFocusContentOnTriggerBlur: PropTypes.bool,

  /**
   * Callback fired when content is shown. When controlled, this callback is
   * fired when the Popover expects to be shown
   */
  onShowContent: PropTypes.func,

  /**
   * Callback fired when content is hidden. When controlled, this callback is
   * fired when the Popover expects to be hidden
   */
  onHideContent: PropTypes.func,

  /**
   * Callback fired when content has been is initially positioned.
   * If `shouldRenderOffscreen` is true, it will only fire once, the first
   * time the content is shown
   */
  onPositioned: PropTypes.func,

  /**
   * Callback fired when the position changes
   */
  onPositionChanged: PropTypes.func,

  /**
   * Callback fired when component is clicked
   */
  onClick: PropTypes.func,

  /**
   * Callback fired when trigger is focused
   */
  onFocus: PropTypes.func,

  /**
   * Callback fired when component is blurred
   */
  onBlur: PropTypes.func,

  /**
   * Callback fired on keydown
   */
  onKeyDown: PropTypes.func,

  /**
   * Callback fired on keyup
   */
  onKeyUp: PropTypes.func,

  /**
  /**
   * Callback fired when mouse is over trigger
   */
  onMouseOver: PropTypes.func,

  /**
   * Callback fired when mouse leaves trigger
   */
  onMouseOut: PropTypes.func,

  /**
   * The element that triggers the popover
   */
  renderTrigger: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
   * The content to be shown by the popover
   */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /* eslint-disable react/require-default-props */

  /**
   * __Deprecated - use `isShowingContent` instead__
   */
  show: PropTypes.bool,

  /**
   * __Deprecated - use `defaultIsShowingContent` instead__
   */
  defaultShow: PropTypes.bool,

  /**
   * __Deprecated - use `color`__
   */
  variant: PropTypes.oneOf(['default', 'inverse']),

  /**
  * __Deprecated - use `shouldAlignArrow`__
  */
  alignArrow: PropTypes.bool,

  /**
   * __Deprecated - use `screenReaderLabel`__
   */
  label: PropTypes.string,

  /**
   * __Deprecated - use `shouldTrackPosition`__
   */
  trackPosition: PropTypes.bool,

  /**
   * __Deprecated - use `onShowContent`__
   */
  onShow: PropTypes.func,

  /**
   * __Deprecated - use `onHideContent`__
   */
  onDismiss: PropTypes.func,

  /**
   * __Deprecated - use `onShowContent` and `onHideContent`__
   */
  onToggle: PropTypes.func
  /* eslint-enable react/require-default-props */

}, _class6.defaultProps = {
  isShowingContent: void 0,
  defaultIsShowingContent: false,
  placement: 'bottom center',
  stacking: 'topmost',
  shadow: 'resting',
  offsetX: 0,
  offsetY: 0,
  color: 'primary',
  on: ['hover', 'focus'],
  contentRef: function contentRef(el) {},
  withArrow: true,
  constrain: 'window',
  defaultFocusElement: void 0,
  screenReaderLabel: void 0,
  mountNode: void 0,
  insertAt: 'bottom',
  liveRegion: void 0,
  positionTarget: void 0,
  id: void 0,
  shouldAlignArrow: false,
  shouldTrackPosition: true,
  shouldRenderOffscreen: false,
  shouldContainFocus: false,
  shouldReturnFocus: true,
  shouldCloseOnDocumentClick: true,
  shouldFocusContentOnTriggerBlur: false,
  shouldCloseOnEscape: true,
  onShowContent: function onShowContent(event) {},
  onHideContent: function onHideContent(event, _ref2) {
    var documentClick = _ref2.documentClick;
  },
  onClick: function onClick(event) {},
  onFocus: function onFocus(event) {},
  onBlur: function onBlur(event) {},
  onMouseOver: function onMouseOver(event) {},
  onMouseOut: function onMouseOut(event) {},
  onKeyDown: function onKeyDown(event) {},
  onKeyUp: function onKeyUp(event) {},
  onPositioned: function onPositioned(position) {},
  onPositionChanged: function onPositionChanged(position) {},
  renderTrigger: null,
  children: null
}, _temp3)) || _class5) || _class5) || _class5);
export default Popover;
export { Popover, PopoverTrigger, PopoverContent };
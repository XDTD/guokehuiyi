import * as React from 'react';

export type PositionRenderTarget = React.ReactNode | ((...args: any[])=>any);

export type PositionTarget = any | ((...args: any[])=>any);

export type PositionInsertAt = "bottom" | "top";

export type PositionOffsetX = string | number;

export type PositionOffsetY = string | number;

export interface PositionProps {
    /**
     * The node to use as the position target
     */
    renderTarget?: PositionRenderTarget;
    /**
     * The target to be used when not using `renderTarget`
     */
    target?: PositionTarget;
    /**
     * The placement of the content in relation to the target
     */
    placement?: any;
    /**
     * An element or a function returning an element to use as the mount node
     * for the `<Position />` (defaults to `document.body`)
     */
    mountNode?: any;
    /**
     * Insert the element at the 'top' of the mountNode or at the 'bottom'
     */
    insertAt?: PositionInsertAt;
    /**
     * The parent in which to constrain the placement.
     * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
     * or a function returning an element
     */
    constrain?: any;
    /**
     * The horizontal offset for the positioned content
     */
    offsetX?: PositionOffsetX;
    /**
     * The vertical offset for the positioned content
     */
    offsetY?: PositionOffsetY;
    /**
     * An id will be generated if not provided
     */
    id?: string;
    /**
     * Whether or not position of the target should be tracked or just set statically on render
     */
    shouldTrackPosition?: boolean;
    /**
     * Whether or not you want the content to position over the target
     */
    shouldPositionOverTarget?: boolean;
    /**
     * Callback fired when the position changes
     */
    onPositionChanged?: (...args: any[])=>any;
    /**
     * Callback fired when `<Position />` content has been mounted and is initially positioned
     */
    onPositioned?: (...args: any[])=>any;
    /**
     * The content to be positioned
     */
    children?: React.ReactNode;
    /**
     * eslint-disable react/require-default-props
     */
    trackPosition?: boolean;
    /**
     * __Deprecated - use `shouldPositionOverTarget`__
     */
    over?: boolean;
}

export class Position extends React.Component<PositionProps, any> {
    render(): JSX.Element;

}


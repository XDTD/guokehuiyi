import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Children, Component } from 'react';
import PropTypes from 'prop-types';
import { controllable, Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import { FormPropTypes, FormFieldGroup } from '@instructure/ui-form-field';
import { uid } from '@instructure/uid';
import { matchComponentTypes, safeCloneElement, pickProps, omitProps } from '@instructure/ui-react-utils';
import { testable } from '@instructure/ui-testable';
import { Checkbox } from '../Checkbox';
/**
---
category: components
---
**/

var CheckboxGroup = (_dec = testable(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(CheckboxGroup, _Component);

  var _super = _createSuper(CheckboxGroup);

  function CheckboxGroup(props) {
    var _this;

    _classCallCheck(this, CheckboxGroup);

    _this = _super.call(this);

    _this.handleChange = function (e) {
      var newValue = _this.value || [];

      if (_this.props.disabled || _this.props.readOnly) {
        e.preventDefault();
        return;
      }

      if (e.target.checked) {
        newValue.push(e.target.value);
      } else {
        newValue.splice(newValue.indexOf(e.target.value), 1);
      }

      if (typeof _this.props.value === 'undefined') {
        _this.setState({
          value: newValue
        });
      }

      if (typeof _this.props.onChange === 'function') {
        _this.props.onChange(newValue);
      }
    };

    if (typeof props.value === 'undefined') {
      _this.state = {
        value: props.defaultValue
      };
    }

    _this._messagesId = uid('CheckboxGroup-messages');
    return _this;
  }

  _createClass(CheckboxGroup, [{
    key: "renderChildren",
    value: function renderChildren() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          name = _this$props.name,
          size = _this$props.size,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly;
      return Children.map(children, function (child, index) {
        if (matchComponentTypes(child, [Checkbox])) {
          return safeCloneElement(child, {
            key: "".concat(child.props.name),
            name: name,
            disabled: disabled || child.props.disabled,
            readOnly: readOnly || child.props.readOnly,
            size: size,
            checked: _this2.value.indexOf(child.props.value) > -1,
            onChange: _this2.handleChange,
            width: child.props.width || 'auto',
            'aria-describedby': _this2.hasMessages && _this2._messagesId
          });
        } else {
          return child;
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(FormFieldGroup, Object.assign({}, omitProps(this.props, CheckboxGroup.propTypes), pickProps(this.props, FormFieldGroup.propTypes), {
        rowSpacing: "small",
        vAlign: "top",
        messagesId: this._messagesId
      }), this.renderChildren());
    }
  }, {
    key: "hasMessages",
    get: function get() {
      return this.props.messages && this.props.messages.length > 0;
    }
  }, {
    key: "value",
    get: function get() {
      if (typeof this.props.value === 'undefined' && typeof this.state.value === 'undefined') {
        return [];
      } else {
        return typeof this.props.value === 'undefined' ? _toConsumableArray(this.state.value) : _toConsumableArray(this.props.value);
      }
    }
  }]);

  CheckboxGroup.displayName = "CheckboxGroup";
  return CheckboxGroup;
}(Component), _class2.propTypes = {
  name: PropTypes.string.isRequired,
  description: PropTypes.node.isRequired,

  /**
  * value to set on initial render
  */
  defaultValue: PropTypes.array,

  /**
  * the selected values (must be accompanied by an `onChange` prop)
  */
  value: controllable(PropTypes.array),

  /**
  * when used with the `value` prop, the component will not control its own state
  */
  onChange: PropTypes.func,
  disabled: PropTypes.bool,
  readOnly: PropTypes.bool,

  /**
  * object with shape: `{
  text: PropTypes.string,
  type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
    }`
  */
  messages: PropTypes.arrayOf(FormPropTypes.message),

  /**
  * children of type `Checkbox`
  */
  children: ChildrenPropTypes.oneOf([Checkbox]),
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  layout: PropTypes.oneOf(['stacked', 'columns', 'inline'])
}, _class2.defaultProps = {
  disabled: false,
  readOnly: false,
  size: 'medium',
  layout: 'stacked',
  defaultValue: void 0,
  messages: void 0,
  value: void 0,
  onChange: void 0,
  children: null
}, _temp)) || _class);
export default CheckboxGroup;
export { CheckboxGroup };
import * as React from 'react';

export type CheckboxGroupSize = "small" | "medium" | "large";

export type CheckboxGroupLayout = "stacked" | "columns" | "inline";

export interface CheckboxGroupProps {
    name: string;
    description: React.ReactNode;
    /**
     * value to set on initial render
     */
    defaultValue?: any[];
    /**
     * the selected values (must be accompanied by an `onChange` prop)
     */
    value?: any;
    /**
     * when used with the `value` prop, the component will not control its own state
     */
    onChange?: (...args: any[])=>any;
    disabled?: boolean;
    readOnly?: boolean;
    /**
     * object with shape: `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
    /**
     * children of type `Checkbox`
     */
    children?: any;
    size?: CheckboxGroupSize;
    layout?: CheckboxGroupLayout;
}

export class CheckboxGroup extends React.Component<CheckboxGroupProps, any> {
    render(): JSX.Element;

}




export type CheckboxValue = string | number;

export type CheckboxSize = "small" | "medium" | "large";

export type CheckboxVariant = "simple" | "toggle";

export type CheckboxLabelPlacement = "top" | "start" | "end";

export interface CheckboxProps {
    label: React.ReactNode;
    id?: string;
    value?: CheckboxValue;
    /**
     * object with shape: `{
     * text: PropTypes.string,
     * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
     * }`
     */
    messages?: any[];
    /**
     * whether to set the input to checked or not on initial render
     */
    defaultChecked?: boolean;
    /**
     * whether the input is checked or not (must be accompanied by an `onChange` prop)
     */
    checked?: any;
    /**
     * when used with the `checked` prop, the component will not control its own state
     */
    onChange?: (...args: any[])=>any;
    onKeyDown?: (...args: any[])=>any;
    onFocus?: (...args: any[])=>any;
    onBlur?: (...args: any[])=>any;
    onMouseOver?: (...args: any[])=>any;
    onMouseOut?: (...args: any[])=>any;
    /**
     * Whether or not to disable the checkbox
     */
    disabled?: boolean;
    /**
     * Works just like disabled but keeps the same styles as if it were active
     */
    readOnly?: boolean;
    /**
     * Visual state showing that child checkboxes are a combination of checked and unchecked
     */
    indeterminate?: boolean;
    size?: CheckboxSize;
    variant?: CheckboxVariant;
    inline?: boolean;
    labelPlacement?: CheckboxLabelPlacement;
}

export class Checkbox extends React.Component<CheckboxProps, any> {
    render(): JSX.Element;

}


import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _dec3, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { getElementType, omitProps, ensureSingleChild, passthroughProps, callRenderProp, deprecated } from '@instructure/ui-react-utils';
import { PositionPropTypes } from '@instructure/ui-position';
import { uid } from '@instructure/uid';
import { themeable } from '@instructure/ui-themeable';
import { testable } from '@instructure/ui-testable';
import { Popover } from '@instructure/ui-popover';
import { element } from '@instructure/ui-prop-types';
var styles = {
  componentId: 'eZLSb',
  template: function template(theme) {
    return "\n\n.eZLSb_bGBk{box-sizing:border-box;display:block;font-family:".concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', ";padding:").concat(theme.padding || 'inherit', "}");
  },
  'root': 'eZLSb_bGBk'
};
import theme from './theme';
/**
---
category: components
---
**/

var Tooltip = (_dec = deprecated('8.0.0', {
  tip: 'renderTip',
  variant: 'color'
}), _dec2 = testable(), _dec3 = themeable(theme, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Tooltip, _Component);

  var _super = _createSuper(Tooltip);

  function Tooltip() {
    var _this;

    _classCallCheck(this, Tooltip);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._id = uid('Tooltip');
    _this.state = {
      hasFocus: false
    };

    _this.handleFocus = function (event) {
      _this.setState({
        hasFocus: true
      });
    };

    _this.handleBlur = function (event) {
      _this.setState({
        hasFocus: false
      });
    };

    return _this;
  }

  _createClass(Tooltip, [{
    key: "renderTrigger",
    value: function renderTrigger() {
      var _this$props = this.props,
          children = _this$props.children,
          as = _this$props.as;
      var hasFocus = this.state.hasFocus;
      var triggerProps = {
        'aria-describedby': this._id
      };

      if (as) {
        var Trigger = getElementType(Tooltip, this.props);
        var props = omitProps(this.props, Tooltip.propTypes);
        return /*#__PURE__*/React.createElement(Trigger, Object.assign({}, props, triggerProps), children);
      } else if (typeof children === 'function') {
        return children({
          focused: hasFocus,
          getTriggerProps: function getTriggerProps(props) {
            return _objectSpread({}, triggerProps, {}, props);
          }
        });
      } else {
        return ensureSingleChild(this.props.children, triggerProps);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          renderTip = _this$props2.renderTip,
          isShowingContent = _this$props2.isShowingContent,
          defaultIsShowingContent = _this$props2.defaultIsShowingContent,
          on = _this$props2.on,
          placement = _this$props2.placement,
          mountNode = _this$props2.mountNode,
          constrain = _this$props2.constrain,
          offsetX = _this$props2.offsetX,
          offsetY = _this$props2.offsetY,
          positionTarget = _this$props2.positionTarget,
          onShowContent = _this$props2.onShowContent,
          onHideContent = _this$props2.onHideContent,
          tip = _this$props2.tip,
          variant = _this$props2.variant,
          rest = _objectWithoutProperties(_this$props2, ["renderTip", "isShowingContent", "defaultIsShowingContent", "on", "placement", "mountNode", "constrain", "offsetX", "offsetY", "positionTarget", "onShowContent", "onHideContent", "tip", "variant"]);

      var color = this.props.variant;

      if (color) {
        color = color === 'default' ? 'primary-inverse' : 'primary';
      } else {
        color = this.props.color;
      }

      return /*#__PURE__*/React.createElement(Popover, Object.assign({}, passthroughProps(rest), {
        isShowingContent: isShowingContent,
        defaultIsShowingContent: defaultIsShowingContent,
        on: on,
        shouldRenderOffscreen: true,
        shouldReturnFocus: false,
        placement: placement,
        color: color === 'primary' ? 'primary-inverse' : 'primary',
        mountNode: mountNode,
        constrain: constrain,
        shadow: "none",
        offsetX: offsetX,
        offsetY: offsetY,
        positionTarget: positionTarget,
        renderTrigger: function renderTrigger() {
          return _this2.renderTrigger();
        },
        onShowContent: onShowContent,
        onHideContent: onHideContent,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur
      }), /*#__PURE__*/React.createElement("span", {
        id: this._id,
        className: styles.root,
        role: "tooltip"
      }, renderTip ? callRenderProp(renderTip) : tip));
    }
  }]);

  Tooltip.displayName = "Tooltip";
  return Tooltip;
}(Component), _class2.propTypes = {
  /**
  * @param {Object} renderProps
  * @param {Boolean} renderProps.focused - Is the Tooltip trigger focused?
  * @param {Function} renderProps.getTriggerProps - Props to be spread onto the trigger element
  */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,

  /**
  * The content to render in the tooltip
  */
  renderTip: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),

  /**
  * Whether or not the tooltip content is shown, when controlled
  */
  isShowingContent: PropTypes.bool,

  /**
   * Whether or not to show the content by default, when uncontrolled
   */
  defaultIsShowingContent: PropTypes.bool,

  /**
  * the element type to render as (assumes a single child if 'as' is undefined)
  */
  as: PropTypes.elementType,
  // eslint-disable-line react/require-default-props

  /**
   * The action that causes the Content to display (`click`, `hover`, `focus`)
   */
  on: PropTypes.oneOfType([PropTypes.oneOf(['click', 'hover', 'focus']), PropTypes.arrayOf(PropTypes.oneOf(['click', 'hover', 'focus']))]),

  /**
   * The color of the tooltip content
   */
  color: PropTypes.oneOf(['primary', 'primary-inverse']),

  /**
   * Specifies where the Tooltip will be placed in relation to the target element.
   * Ex. placement="bottom" will render the Tooltip below the triggering element
   * (Note: if there is not room, it will position opposite. Ex. "top" will
   * automatically switch to "bottom")
   */
  placement: PositionPropTypes.placement,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Tooltip />` (defaults to `document.body`)
   */
  mountNode: PositionPropTypes.mountNode,

  /**
   * The parent in which to constrain the tooltip.
   * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
   * or a function returning an element
   */
  constrain: PositionPropTypes.constrain,

  /**
   * The horizontal offset for the positioned content
   */
  offsetX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * The vertical offset for the positioned content
   */
  offsetY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Target element for positioning the Tooltip (if it differs from children/trigger)
   */
  positionTarget: PropTypes.oneOfType([element, PropTypes.func]),

  /**
   * Callback fired when content is shown. When controlled, this callback is
   * fired when the tooltip expects to be shown
   */
  onShowContent: PropTypes.func,

  /**
   * Callback fired when content is hidden. When controlled, this callback is
   * fired when the tooltip expects to be hidden
   */
  onHideContent: PropTypes.func,

  /* eslint-disable react/require-default-props */

  /**
  * __Deprecated - use `renderTip`__
  */
  tip: PropTypes.node,

  /**
  * __Deprecated - use `color`__
  */
  variant: PropTypes.oneOf(['default', 'inverse'])
  /* eslint-enable react/require-default-props */

}, _class2.defaultProps = {
  renderTip: void 0,
  isShowingContent: void 0,
  defaultIsShowingContent: false,
  on: void 0,
  color: 'primary',
  placement: 'top',
  mountNode: null,
  constrain: 'window',
  offsetX: 0,
  offsetY: 0,
  positionTarget: void 0,
  onShowContent: function onShowContent(event) {},
  onHideContent: function onHideContent(event, _ref) {
    var documentClick = _ref.documentClick;
  }
}, _temp)) || _class) || _class) || _class);
export default Tooltip;
export { Tooltip };
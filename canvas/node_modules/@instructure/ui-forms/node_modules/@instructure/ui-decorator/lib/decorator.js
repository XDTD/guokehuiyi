"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decorator = decorator;
exports.default = void 0;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * ---
 * category: utilities
 * ---
 * Wraps (decorates) a React component to add additional functionality
 *
 * @module decorator
 * @param {Function} decorator a function that returns a decorated component
 * @returns {Class} a decorated component class
 */
function decorator(decorate) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return function (ComposedComponent) {
      if (typeof decorate === 'function') {
        var displayName = ComposedComponent.displayName || ComposedComponent.name;
        var DecoratedComponent = decorate.apply(void 0, [ComposedComponent].concat(args));
        DecoratedComponent.displayName = displayName;
        return DecoratedComponent;
      } else {
        return ComposedComponent;
      }
    };
  };
}

var _default = decorator;
exports.default = _default;
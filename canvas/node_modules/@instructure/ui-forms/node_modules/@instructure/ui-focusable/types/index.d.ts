import * as React from 'react';

export interface FocusableProps {
    /**
     * @param {Object} renderProps
     * @param {Boolean} renderProps.focused - Is the element focused (via keyboard only)?
     * @param {HTMLElement} renderProps.focusable - The focusable element
     * @param {Boolean} renderProps.focusVisible - Whether the focus state should be visible or not
     */
    children?: (...args: any[])=>any;
    /**
     * Identical to children
     */
    render?: (...args: any[])=>any;
}

export class Focusable extends React.Component<FocusableProps, any> {
    render(): JSX.Element;

}




export type FocusableViewShape = "circular" | "rectangular";

export type FocusableViewColor = "primary" | "error" | "inverse";

export type FocusableViewDisplay = "auto" | "block" | "inline-block" | "flex" | "inline-flex";

export type FocusableViewWidth = string | number;

export type FocusableViewTabIndex = string | number;

export interface FocusableViewProps {
    children?: React.ReactNode;
    /**
     * boolean value indicating focus. When true, the focus ring is visible
     */
    focused?: boolean;
    /**
     * Shape of the focus ring
     */
    shape?: FocusableViewShape;
    /**
     * Color of the focus ring
     */
    color?: FocusableViewColor;
    /**
     * provides a reference to the underlying element
     */
    elementRef?: (...args: any[])=>any;
    /**
     * the element type to render as (will be `<a>` if href is provided)
     */
    as?: any;
    /**
     * If `href` is provided, the `<FocusableView />` will render as a link
     */
    href?: string;
    /**
     * By default the display prop is 'auto', meaning it takes on the
     * display rules of the html element it's rendered as (see `as` prop).
     */
    display?: FocusableViewDisplay;
    /**
     * Set the margin using familiar CSS shorthand
     */
    margin?: any;
    /**
     * Specify a mouse cursor to use when hovering over the `<View />`
     */
    cursor?: string;
    /**
     * Optionally set a width for the FocusableView (either a string or number)
     */
    width?: FocusableViewWidth;
    role?: string;
    onClick?: (...args: any[])=>any;
    tabIndex?: FocusableViewTabIndex;
}

export class FocusableView extends React.Component<FocusableViewProps, any> {
    render(): JSX.Element;

}


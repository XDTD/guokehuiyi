"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Selectable = exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _console = require("@instructure/console");

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _keycode = _interopRequireDefault(require("keycode"));

var _isActiveElement = require("@instructure/ui-dom-utils/lib/isActiveElement.js");

var _createChainedFunction = require("@instructure/ui-utils/lib/createChainedFunction.js");

var _uid = require("@instructure/uid");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
---
category: components
tags: autocomplete, typeahead, combobox, dropdown, search
---
**/
var Selectable = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Selectable, _Component);

  var _super = (0, _createSuper2.default)(Selectable);

  function Selectable() {
    var _this;

    (0, _classCallCheck2.default)(this, Selectable);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._id = _this.props.id || (0, _uid.uid)('Selectable');
    _this._listId = "".concat(_this._id, "-list");
    _this._descriptionId = "".concat(_this._id, "-description");

    _this.isSelectedOption = function (id) {
      var selectedOptionId = _this.props.selectedOptionId;

      if (Array.isArray(selectedOptionId)) {
        return selectedOptionId.indexOf(id) > -1;
      }

      return selectedOptionId === id;
    };

    _this.handleOpenClose = function (event) {
      var _this$props = _this.props,
          isShowingOptions = _this$props.isShowingOptions,
          onRequestShowOptions = _this$props.onRequestShowOptions,
          onRequestHideOptions = _this$props.onRequestHideOptions;
      event.preventDefault();

      if (isShowingOptions) {
        onRequestHideOptions(event);
      } else {
        if (!(0, _isActiveElement.isActiveElement)(_this._trigger)) {
          _this._trigger.focus();
        }

        onRequestShowOptions(event);
      }
    };

    _this.handleKeyDown = function (event) {
      var _this$props2 = _this.props,
          isShowingOptions = _this$props2.isShowingOptions,
          highlightedOptionId = _this$props2.highlightedOptionId,
          onRequestHighlightOption = _this$props2.onRequestHighlightOption,
          onRequestHighlightFirstOption = _this$props2.onRequestHighlightFirstOption,
          onRequestHighlightLastOption = _this$props2.onRequestHighlightLastOption,
          onRequestSelectOption = _this$props2.onRequestSelectOption;
      var key = _keycode.default.names[event.keyCode];

      switch (key) {
        case 'space':
          if (!isShowingOptions) {
            // if options hidden, show them
            _this.handleOpenClose(event);
          }

          break;

        case 'enter':
          if (highlightedOptionId) {
            // select highlighted option
            event.preventDefault();
            onRequestSelectOption(event, {
              id: highlightedOptionId
            });
          }

          break;

        case 'down':
          event.preventDefault();

          if (isShowingOptions) {
            // if options showing, change highlight
            onRequestHighlightOption(event, {
              direction: 1
            });
          } else {
            // otherwise, show options
            _this.handleOpenClose(event);
          }

          break;

        case 'up':
          event.preventDefault();

          if (isShowingOptions) {
            // if options showing, change highlight
            onRequestHighlightOption(event, {
              direction: -1
            });
          } else {
            // otherwise, show options
            _this.handleOpenClose(event);
          }

          break;

        case 'home':
          if (isShowingOptions) {
            // if options showing, highlight first option
            event.preventDefault();
            onRequestHighlightFirstOption(event);
          }

          break;

        case 'end':
          if (isShowingOptions) {
            // if options showing, highlight last option
            event.preventDefault();
            onRequestHighlightLastOption(event);
          }

          break;
      }
    };

    _this.handleKeyUp = function (event) {
      var isShowingOptions = _this.props.isShowingOptions;
      var key = _keycode.default.names[event.keyCode];

      if (key === 'esc') {
        if (isShowingOptions) {
          // if options showing, hide them
          _this.handleOpenClose(event);
        }
      }
    };

    return _this;
  }

  (0, _createClass2.default)(Selectable, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          isShowingOptions = _this$props3.isShowingOptions,
          highlightedOptionId = _this$props3.highlightedOptionId,
          onRequestHighlightOption = _this$props3.onRequestHighlightOption,
          onRequestSelectOption = _this$props3.onRequestSelectOption,
          children = _this$props3.children,
          _this$props3$render = _this$props3.render,
          render = _this$props3$render === void 0 ? children : _this$props3$render;

      if (typeof render === 'function') {
        return render({
          getRootProps: function getRootProps() {
            var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};

            var onMouseDown = _ref.onMouseDown,
                onClick = _ref.onClick,
                rest = (0, _objectWithoutProperties2.default)(_ref, ["onMouseDown", "onClick"]);
            return (0, _objectSpread2.default)({
              onClick: (0, _createChainedFunction.createChainedFunction)(_this2.handleOpenClose, onClick),
              onMouseDown: (0, _createChainedFunction.createChainedFunction)(function (event) {
                if (event.target !== _this2._trigger) {
                  event.preventDefault(); // prevent trigger from losing focus
                }
              }, onMouseDown)
            }, rest);
          },
          getLabelProps: function getLabelProps(props) {
            return (0, _objectSpread2.default)({
              htmlFor: _this2._id
            }, props);
          },
          getTriggerProps: function getTriggerProps() {
            var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};

            var ref = _ref2.ref,
                onKeyDown = _ref2.onKeyDown,
                onKeyUp = _ref2.onKeyUp,
                rest = (0, _objectWithoutProperties2.default)(_ref2, ["ref", "onKeyDown", "onKeyUp"]);
            return (0, _objectSpread2.default)({
              id: _this2._id,
              ref: (0, _createChainedFunction.createChainedFunction)(ref, function (el) {
                return _this2._trigger = el;
              }),
              'aria-haspopup': 'listbox',
              'aria-expanded': isShowingOptions,
              'aria-owns': isShowingOptions ? _this2._listId : null,
              'aria-controls': isShowingOptions ? _this2._listId : null,
              'aria-describedby': _this2._descriptionId,
              'aria-activedescendant': isShowingOptions ? highlightedOptionId : null,
              onKeyDown: (0, _createChainedFunction.createChainedFunction)(_this2.handleKeyDown, onKeyDown),
              onKeyUp: (0, _createChainedFunction.createChainedFunction)(_this2.handleKeyUp, onKeyUp)
            }, rest);
          },
          getInputProps: function getInputProps() {
            var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};

            var readOnly = _ref3.readOnly,
                rest = (0, _objectWithoutProperties2.default)(_ref3, ["readOnly"]);
            return (0, _objectSpread2.default)({
              role: 'combobox',
              'aria-autocomplete': readOnly ? 'none' : 'both',
              autoComplete: 'off',
              readOnly: readOnly
            }, rest);
          },
          getListProps: function getListProps() {
            var _ref4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};

            var onMouseDown = _ref4.onMouseDown,
                onClick = _ref4.onClick,
                rest = (0, _objectWithoutProperties2.default)(_ref4, ["onMouseDown", "onClick"]);
            return (0, _objectSpread2.default)({
              id: _this2._listId,
              role: 'listbox',
              onMouseDown: (0, _createChainedFunction.createChainedFunction)(function (event) {
                event.preventDefault(); // prevent trigger from losing focus
              }, onMouseDown),
              onClick: (0, _createChainedFunction.createChainedFunction)(function (event) {
                // prevent synthetic event from firing on the document
                // this event could inadvertently close a parent dialog
                event.stopPropagation();
                event.nativeEvent.stopImmediatePropagation();
              }, onClick)
            }, rest);
          },
          getOptionProps: function getOptionProps() {
            var _ref5 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};

            var id = _ref5.id,
                onMouseOver = _ref5.onMouseOver,
                onClick = _ref5.onClick,
                rest = (0, _objectWithoutProperties2.default)(_ref5, ["id", "onMouseOver", "onClick"]);

            /*#__PURE__*/
            ( /*#__PURE__*/0, _console.error)(id, "[Selectable] Must provide id for each option via `getOptionProps`.");
            return (0, _objectSpread2.default)({
              id: id,
              role: 'option',
              'aria-selected': _this2.isSelectedOption(id) ? 'true' : 'false',
              onClick: (0, _createChainedFunction.createChainedFunction)(function (event) {
                onRequestSelectOption(event, {
                  id: id
                });
              }, onClick),
              onMouseOver: (0, _createChainedFunction.createChainedFunction)(function (event) {
                onRequestHighlightOption(event, {
                  id: id
                });
              }, onMouseOver)
            }, rest);
          },
          getDisabledOptionProps: function getDisabledOptionProps(props) {
            return (0, _objectSpread2.default)({
              'aria-disabled': 'true'
            }, props);
          },
          getDescriptionProps: function getDescriptionProps(props) {
            return (0, _objectSpread2.default)({
              id: _this2._descriptionId
            }, props);
          }
        });
      } else {
        return null;
      }
    }
  }]);
  Selectable.displayName = "Selectable";
  return Selectable;
}(_react.Component);

exports.Selectable = Selectable;
Selectable.propTypes = {
  /**
   * The id of the trigger element. Set automatically if not provided
   */
  id: _propTypes.default.string,

  /**
   * The id of the option in the list that should be considered highlighted
   */
  highlightedOptionId: _propTypes.default.string,

  /**
   * The id of the option(s) in the list that should be considered selected
   */
  selectedOptionId: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.array]),

  /**
   * Whether or not the options should be visible
   */
  isShowingOptions: _propTypes.default.bool,

  /**
   * Callback fired when the options want to become visible
   */
  onRequestShowOptions: _propTypes.default.func,

  /**
   * Callback fired when the options no longer want to be visible
   */
  onRequestHideOptions: _propTypes.default.func,

  /**
   * Callback fired when option is hovered or highlighted via keyboard
   */
  onRequestHighlightOption: _propTypes.default.func,

  /**
   * Callback fired when first option should be highlighted
   */
  onRequestHighlightFirstOption: _propTypes.default.func,

  /**
   * Callback fired when last option should be highlighted
   */
  onRequestHighlightLastOption: _propTypes.default.func,

  /**
   * Callback fired when option clicked or selected via keyboard
   */
  onRequestSelectOption: _propTypes.default.func,

  /**
   * @param {Object} renderProps
   * @param {Function} renderProps.getRootProps - Prop getter for root element
   * @param {Function} renderProps.getLabelProps - Prop getter for label element
   * @param {Function} renderProps.getTriggerProps - Prop getter for trigger element
   * @param {Function} renderProps.getInputProps - Prop getter for input element
   * @param {Function} renderProps.getListProps - Prop getter for list element
   * @param {Function} renderProps.getOptionProps - Prop getter for option elements
   * @param {Function} renderProps.getDisabledOptionProps - Prop getter for disabled option elements
   * @param {Function} renderProps.getDescriptionProps - Prop getter for screenreader description element
   */
  children: _propTypes.default.func,

  /**
   * Identical to children
   */
  render: _propTypes.default.func
};
Selectable.defaultProps = {
  id: null,
  highlightedOptionId: null,
  selectedOptionId: null,
  isShowingOptions: false,
  onRequestShowOptions: function onRequestShowOptions(event) {},
  onRequestHideOptions: function onRequestHideOptions(event) {},
  onRequestHighlightOption: function onRequestHighlightOption(event, data) {},
  onRequestHighlightFirstOption: function onRequestHighlightFirstOption(event, data) {},
  onRequestHighlightLastOption: function onRequestHighlightLastOption(event, data) {},
  onRequestSelectOption: function onRequestSelectOption(event, data) {},
  children: null,
  render: void 0
};
var _default = Selectable;
exports.default = _default;
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component, Children } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import { omitProps, matchComponentTypes, callRenderProp, safeCloneElement } from '@instructure/ui-react-utils';
import { themeable } from '@instructure/ui-themeable';
import { testable } from '@instructure/ui-testable';
import { uid } from '@instructure/uid';
import { View } from '@instructure/ui-view';
import { Item } from "./Item/index.js";
import { Separator } from "./Separator/index.js";
var styles = {
  componentId: 'ctdXH',
  template: function template(theme) {
    return "\n\n.ctdXH_bGBk{box-sizing:border-box;word-wrap:break-word}\n\n.ctdXH_cpmC{list-style-type:none;position:relative}\n\n.ctdXH_blJt{color:".concat(theme.labelColor || 'inherit', ";cursor:default;display:block;font-weight:").concat(theme.labelFontWeight || 'inherit', ";padding:").concat(theme.nestedLabelPadding || 'inherit', "}");
  },
  'root': 'ctdXH_bGBk',
  'list': 'ctdXH_cpmC',
  'label': 'ctdXH_blJt'
};
import theme from "./theme.js";
/**
---
category: components
---
**/

var Options = (_dec = testable(), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Options, _Component);

  var _super = _createSuper(Options);

  function Options() {
    var _this;

    _classCallCheck(this, Options);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._labelId = uid('Options-label');
    return _this;
  }

  _createClass(Options, [{
    key: "renderLabel",
    value: function renderLabel() {
      var renderLabel = this.props.renderLabel;
      return /*#__PURE__*/React.createElement("span", {
        id: this._labelId,
        role: "presentation",
        "aria-hidden": "true",
        className: classnames(_defineProperty({}, styles.label, true))
      }, callRenderProp(renderLabel));
    }
  }, {
    key: "renderSubList",
    value: function renderSubList(children) {
      return /*#__PURE__*/React.createElement(Item, {
        as: this.childAs,
        role: "presentation",
        className: styles.label
      }, children);
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var _this2 = this;

      var children = this.props.children;
      return Children.map(children, function (child) {
        if (matchComponentTypes(child, ['Options'])) {
          return _this2.renderSubList(child);
        }

        if (matchComponentTypes(child, ['Item', 'Separator'])) {
          return safeCloneElement(child, {
            as: _this2.childAs
          });
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var passthroughProps = View.omitViewProps(omitProps(this.props, Options.propTypes), Options);
      var _this$props = this.props,
          as = _this$props.as,
          role = _this$props.role,
          elementRef = _this$props.elementRef,
          renderLabel = _this$props.renderLabel;
      return /*#__PURE__*/React.createElement("div", {
        className: styles.root,
        role: "presentation"
      }, renderLabel && this.renderLabel(), /*#__PURE__*/React.createElement(View, Object.assign({}, passthroughProps, {
        elementRef: elementRef,
        className: styles.list,
        as: as,
        role: role,
        display: "block",
        margin: "none",
        padding: "none",
        background: "primary",
        "aria-labelledby": renderLabel && this._labelId
      }), this.renderChildren()));
    }
  }, {
    key: "childAs",
    get: function get() {
      var as = this.props.as;

      if (as === 'ul' || as === 'ol') {
        return 'li';
      }

      return void 0;
    }
  }]);

  Options.displayName = "Options";
  return Options;
}(Component), _class2.Item = Item, _class2.Separator = Separator, _class2.propTypes = {
  /**
   * Element type to render as
   */
  as: PropTypes.elementType,

  /**
   * The aria role of the element
   */
  role: PropTypes.string,

  /**
   * The the actual list element
   */
  elementRef: PropTypes.func,

  /**
   * Content to render as a label. Mostly for when the component is nested
   */
  renderLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
  children: ChildrenPropTypes.oneOf(['Options', 'Item', 'Separator'])
}, _class2.defaultProps = {
  as: 'span',
  role: 'list',
  elementRef: function elementRef(node) {},
  renderLabel: null,
  children: null
}, _temp)) || _class) || _class);
export default Options;
export { Options };
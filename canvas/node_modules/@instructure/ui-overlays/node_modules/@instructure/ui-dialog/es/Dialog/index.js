import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { error as _error } from "@instructure/console";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { omitProps, getElementType } from '@instructure/ui-react-utils';
import { findDOMNode, requestAnimationFrame } from '@instructure/ui-dom-utils';
import { FocusRegionManager } from '@instructure/ui-a11y-utils';
/**
---
category: components/utilities
---
@module Dialog
**/

var Dialog = /*#__PURE__*/function (_Component) {
  _inherits(Dialog, _Component);

  var _super = _createSuper(Dialog);

  function Dialog() {
    var _this;

    _classCallCheck(this, Dialog);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._raf = [];
    _this._focusRegion = null;

    _this.getRef = function (el) {
      _this._root = el;
    };

    return _this;
  }

  _createClass(Dialog, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.open) {
        this.open();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var open = this.props.open;

      if (open && !prevProps.open) {
        this.open();
      } else if (!open && prevProps.open) {
        this.close();
      }

      if (this._focusRegion) {
        this._focusRegion.updateElement(this.contentElement);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.open) {
        this.close();
      }

      this._raf.forEach(function (request) {
        return request.cancel();
      });

      this._raf = [];
    }
  }, {
    key: "open",
    value: function open() {
      var _this2 = this;

      var _this$props = this.props,
          open = _this$props.open,
          contentElement = _this$props.contentElement,
          options = _objectWithoutProperties(_this$props, ["open", "contentElement"]);

      this._raf.push(requestAnimationFrame(function () {
        // It needs to wait a heartbeat until the content is fully loaded
        // inside the dialog. If it contains a focusable element, it will
        // get focused on open, and browsers scroll to the focused element.
        // If the css is not fully applied, the element may not be in their
        // final position, making the page jump.
        setTimeout(function () {
          _this2._focusRegion = FocusRegionManager.activateRegion(_this2.contentElement, _objectSpread({}, options));
        }, 0);
      }));
    }
  }, {
    key: "close",
    value: function close() {
      if (this._focusRegion) {
        FocusRegionManager.blurRegion(this.contentElement, this._focusRegion.id);
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      if (!this.props.open || !this.contentElement) {
        /*#__PURE__*/

        /*#__PURE__*/
        _error(false, "[Dialog] Can't focus a Dialog that isn't open.");

        return;
      }

      if (this._focusRegion) {
        FocusRegionManager.focusRegion(this.contentElement, this._focusRegion.id);
      }
    }
  }, {
    key: "blur",
    value: function blur() {
      if (!this.props.open || !this.contentElement) {
        /*#__PURE__*/

        /*#__PURE__*/
        _error(false, "[Dialog] Can't blur a Dialog that isn't open.");

        return;
      }

      this.close();
    }
  }, {
    key: "render",
    value: function render() {
      var ElementType = getElementType(Dialog, this.props);
      return this.props.open ? /*#__PURE__*/React.createElement(ElementType, Object.assign({}, omitProps(this.props, Dialog.propTypes), {
        ref: this.getRef,
        role: this.props.label ? 'dialog' : null,
        "aria-label": this.props.label,
        className: this.props.className // eslint-disable-line react/prop-types

      }), this.props.children) : null;
    }
  }, {
    key: "contentElement",
    get: function get() {
      var contentElement = findDOMNode(this.props.contentElement);

      if (!contentElement) {
        contentElement = findDOMNode(this._root);
      }

      return contentElement;
    }
  }, {
    key: "focused",
    get: function get() {
      return this.contentElement && this._focusRegion && FocusRegionManager.isFocused(this.contentElement, this._focusRegion.id);
    }
  }]);

  Dialog.displayName = "Dialog";
  return Dialog;
}(Component);

Dialog.propTypes = {
  /**
   * The children to be rendered within the `<Dialog />`
   */
  children: PropTypes.node,

  /**
   * The element to render as the component root, `span` by default
   */
  as: PropTypes.elementType,
  // eslint-disable-line react/require-default-props
  display: PropTypes.oneOf(['auto', 'block', 'inline-block']),
  label: PropTypes.string,

  /**
   * Whether or not the `<Dialog />` is open
   */
  open: PropTypes.bool,

  /**
   * Function called when tab focus leaves the `<Dialog />` focusable content. This only
   * occurs when `shouldContainFocus` is set to false.
   */
  onBlur: PropTypes.func,
  onDismiss: PropTypes.func,

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),

  /**
   * An element or a function returning an element that wraps the content of the `<Dialog />`
   */
  contentElement: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),

  /**
   * An element, function returning an element, or array of elements that will not be hidden from
   * the screen reader when the `<Dialog />` is open
   */
  liveRegion: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element, PropTypes.func]),
  shouldContainFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['keyboard', 'screenreader'])]),
  shouldReturnFocus: PropTypes.bool,
  shouldCloseOnDocumentClick: PropTypes.bool,
  shouldCloseOnEscape: PropTypes.bool,
  shouldFocusOnOpen: PropTypes.bool
};
Dialog.defaultProps = {
  children: null,
  display: void 0,
  label: void 0,
  open: false,
  shouldFocusOnOpen: true,
  shouldContainFocus: false,
  shouldReturnFocus: false,
  shouldCloseOnDocumentClick: true,
  shouldCloseOnEscape: true,
  defaultFocusElement: null,
  contentElement: null,
  liveRegion: null,
  onBlur: function onBlur(event) {},
  onDismiss: function onDismiss(event) {}
};
export default Dialog;
export { Dialog };
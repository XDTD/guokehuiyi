import * as React from 'react';

export type MaskPlacement = "top" | "center" | "bottom" | "stretch";

export interface MaskProps {
    onDismiss?: (...args: any[])=>any;
    placement?: MaskPlacement;
    fullscreen?: boolean;
    children?: React.ReactNode;
    onClick?: (...args: any[])=>any;
    elementRef?: (...args: any[])=>any;
}

export class Mask extends React.Component<MaskProps, any> {
    render(): JSX.Element;

}




export type OverlayMountNode = any | ((...args: any[])=>any);

export type OverlayInsertAt = "bottom" | "top";

export type OverlayDefaultFocusElement = React.ReactElement<any> | ((...args: any[])=>any);

export type OverlayApplicationElement = React.ReactElement<any>[] | React.ReactElement<any> | ((...args: any[])=>any);

export type OverlayContentElement = React.ReactElement<any> | ((...args: any[])=>any);

export interface OverlayProps {
    children?: React.ReactNode;
    /**
     * Whether or not the `<Overlay />` is open
     */
    open?: boolean;
    /**
     * Callback fired when `<Portal />` content has been mounted in the DOM
     */
    onOpen?: (...args: any[])=>any;
    /**
     * Callback fired when `<Portal />` has been unmounted from the DOM
     */
    onClose?: (...args: any[])=>any;
    /**
     * An element or a function returning an element to use as the mount node
     * for the `<Portal />` (defaults to `document.body`)
     */
    mountNode?: OverlayMountNode;
    /**
     * Insert the element at the 'top' of the mountNode or at the 'bottom'
     */
    insertAt?: OverlayInsertAt;
    /**
     * An accessible label for the `<Overlay />` content
     */
    label: string;
    /**
     * Callback fired when the `<Overlay />` is requesting to be closed
     */
    onDismiss?: (...args: any[])=>any;
    /**
     * An element or a function returning an element to focus by default
     */
    defaultFocusElement?: OverlayDefaultFocusElement;
    /**
     * An element or a function returning an element to apply `aria-hidden` to
     */
    applicationElement?: OverlayApplicationElement;
    /**
     * An element or a function returning an element that wraps the content of the `<Overlay />`
     */
    contentElement?: OverlayContentElement;
    shouldContainFocus?: boolean;
    shouldReturnFocus?: boolean;
    shouldCloseOnDocumentClick?: boolean;
    shouldCloseOnEscape?: boolean;
    /**
     * The type of `<Transition />` to use for animating in/out
     */
    transition?: any;
    /**
     * Show the component; triggers the enter or exit animation
     */
    in?: boolean;
    /**
     * Unmount the component (remove it from the DOM) when it is not shown
     */
    unmountOnExit?: boolean;
    /**
     * Run the enter animation when the component mounts, if it is initially
     * shown
     */
    transitionOnMount?: boolean;
    /**
     * Run the enter animation
     */
    transitionEnter?: boolean;
    /**
     * Run the exit animation
     */
    transitionExit?: boolean;
    /**
     * Callback fired before the "entering" classes are applied
     */
    onEnter?: (...args: any[])=>any;
    /**
     * Callback fired after the "entering" classes are applied
     */
    onEntering?: (...args: any[])=>any;
    /**
     * Callback fired after the "enter" classes are applied
     */
    onEntered?: (...args: any[])=>any;
    /**
     * Callback fired before the "exiting" classes are applied
     */
    onExit?: (...args: any[])=>any;
    /**
     * Callback fired after the "exiting" classes are applied
     */
    onExiting?: (...args: any[])=>any;
    /**
     * Callback fired after the "exited" classes are applied
     */
    onExited?: (...args: any[])=>any;
}

export class Overlay extends React.Component<OverlayProps, any> {
    render(): JSX.Element;

}


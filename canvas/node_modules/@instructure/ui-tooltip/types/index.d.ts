import * as React from 'react';

export type TooltipChildren = React.ReactNode | ((...args: any[])=>any);

export type TooltipRenderTip = React.ReactNode | ((...args: any[])=>any);

export type TooltipOn = "click" | "hover" | "focus" | ("click" | "hover" | "focus")[];

export type TooltipColor = "primary" | "primary-inverse";

export type TooltipOffsetX = string | number;

export type TooltipOffsetY = string | number;

export type TooltipPositionTarget = any | ((...args: any[])=>any);

export type TooltipVariant = "default" | "inverse";

export interface TooltipProps {
    /**
     * @param {Object} renderProps
     * @param {Boolean} renderProps.focused - Is the Tooltip trigger focused?
     * @param {Function} renderProps.getTriggerProps - Props to be spread onto the trigger element
     */
    children: TooltipChildren;
    /**
     * The content to render in the tooltip
     */
    renderTip?: TooltipRenderTip;
    /**
     * Whether or not the tooltip content is shown, when controlled
     */
    isShowingContent?: boolean;
    /**
     * Whether or not to show the content by default, when uncontrolled
     */
    defaultIsShowingContent?: boolean;
    /**
     * the element type to render as (assumes a single child if 'as' is undefined)
     */
    as?: any;
    on?: TooltipOn;
    /**
     * The color of the tooltip content
     */
    color?: TooltipColor;
    /**
     * Specifies where the Tooltip will be placed in relation to the target element.
     * Ex. placement="bottom" will render the Tooltip below the triggering element
     * (Note: if there is not room, it will position opposite. Ex. "top" will
     * automatically switch to "bottom")
     */
    placement?: any;
    /**
     * An element or a function returning an element to use as the mount node
     * for the `<Tooltip />` (defaults to `document.body`)
     */
    mountNode?: any;
    /**
     * The parent in which to constrain the tooltip.
     * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
     * or a function returning an element
     */
    constrain?: any;
    /**
     * The horizontal offset for the positioned content
     */
    offsetX?: TooltipOffsetX;
    /**
     * The vertical offset for the positioned content
     */
    offsetY?: TooltipOffsetY;
    /**
     * Target element for positioning the Tooltip (if it differs from children/trigger)
     */
    positionTarget?: TooltipPositionTarget;
    /**
     * Callback fired when content is shown. When controlled, this callback is
     * fired when the tooltip expects to be shown
     */
    onShowContent?: (...args: any[])=>any;
    /**
     * Callback fired when content is hidden. When controlled, this callback is
     * fired when the tooltip expects to be hidden
     */
    onHideContent?: (...args: any[])=>any;
    /**
     * eslint-disable react/require-default-props
     */
    tip?: React.ReactNode;
    /**
     * __Deprecated - use `color`__
     */
    variant?: TooltipVariant;
}

export class Tooltip extends React.Component<TooltipProps, any> {
    render(): JSX.Element;

}


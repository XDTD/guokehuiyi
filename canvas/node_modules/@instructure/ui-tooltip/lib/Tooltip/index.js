"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tooltip = exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _getElementType = require("@instructure/ui-react-utils/lib/getElementType.js");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _ensureSingleChild = require("@instructure/ui-react-utils/lib/ensureSingleChild.js");

var _passthroughProps = require("@instructure/ui-react-utils/lib/passthroughProps.js");

var _callRenderProp = require("@instructure/ui-react-utils/lib/callRenderProp.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _PositionPropTypes = require("@instructure/ui-position/lib/PositionPropTypes.js");

var _uid = require("@instructure/uid");

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _Popover = require("@instructure/ui-popover/lib/Popover");

var _element = require("@instructure/ui-prop-types/lib/element.js");

var _theme = _interopRequireDefault(require("./theme.js"));

var _dec, _dec2, _dec3, _class, _class2, _temp;

var styles = {
  componentId: 'eZLSb',
  template: function template(theme) {
    return "\n\n.eZLSb_bGBk{box-sizing:border-box;display:block;font-family:".concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', ";padding:").concat(theme.padding || 'inherit', "}");
  },
  'root': 'eZLSb_bGBk'
};

/**
---
category: components
---
**/
var Tooltip = (_dec = (0, _deprecated.deprecated)('8.0.0', {
  tip: 'renderTip',
  variant: 'color'
}), _dec2 = (0, _testable.testable)(), _dec3 = (0, _themeable.themeable)(_theme.default, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Tooltip, _Component);

  var _super = (0, _createSuper2.default)(Tooltip);

  function Tooltip() {
    var _this;

    (0, _classCallCheck2.default)(this, Tooltip);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._id = (0, _uid.uid)('Tooltip');
    _this.state = {
      hasFocus: false
    };

    _this.handleFocus = function (event) {
      _this.setState({
        hasFocus: true
      });
    };

    _this.handleBlur = function (event) {
      _this.setState({
        hasFocus: false
      });
    };

    return _this;
  }

  (0, _createClass2.default)(Tooltip, [{
    key: "renderTrigger",
    value: function renderTrigger() {
      var _this$props = this.props,
          children = _this$props.children,
          as = _this$props.as;
      var hasFocus = this.state.hasFocus;
      var triggerProps = {
        'aria-describedby': this._id
      };

      if (as) {
        var Trigger = (0, _getElementType.getElementType)(Tooltip, this.props);
        var props = (0, _omitProps.omitProps)(this.props, Tooltip.propTypes);
        return /*#__PURE__*/_react.default.createElement(Trigger, Object.assign({}, props, triggerProps), children);
      } else if (typeof children === 'function') {
        return children({
          focused: hasFocus,
          getTriggerProps: function getTriggerProps(props) {
            return (0, _objectSpread2.default)({}, triggerProps, {}, props);
          }
        });
      } else {
        return (0, _ensureSingleChild.ensureSingleChild)(this.props.children, triggerProps);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          renderTip = _this$props2.renderTip,
          isShowingContent = _this$props2.isShowingContent,
          defaultIsShowingContent = _this$props2.defaultIsShowingContent,
          on = _this$props2.on,
          placement = _this$props2.placement,
          mountNode = _this$props2.mountNode,
          constrain = _this$props2.constrain,
          offsetX = _this$props2.offsetX,
          offsetY = _this$props2.offsetY,
          positionTarget = _this$props2.positionTarget,
          onShowContent = _this$props2.onShowContent,
          onHideContent = _this$props2.onHideContent,
          tip = _this$props2.tip,
          variant = _this$props2.variant,
          rest = (0, _objectWithoutProperties2.default)(_this$props2, ["renderTip", "isShowingContent", "defaultIsShowingContent", "on", "placement", "mountNode", "constrain", "offsetX", "offsetY", "positionTarget", "onShowContent", "onHideContent", "tip", "variant"]);
      var color = this.props.variant;

      if (color) {
        color = color === 'default' ? 'primary-inverse' : 'primary';
      } else {
        color = this.props.color;
      }

      return /*#__PURE__*/_react.default.createElement(_Popover.Popover, Object.assign({}, (0, _passthroughProps.passthroughProps)(rest), {
        isShowingContent: isShowingContent,
        defaultIsShowingContent: defaultIsShowingContent,
        on: on,
        shouldRenderOffscreen: true,
        shouldReturnFocus: false,
        placement: placement,
        color: color === 'primary' ? 'primary-inverse' : 'primary',
        mountNode: mountNode,
        constrain: constrain,
        shadow: "none",
        offsetX: offsetX,
        offsetY: offsetY,
        positionTarget: positionTarget,
        renderTrigger: function renderTrigger() {
          return _this2.renderTrigger();
        },
        onShowContent: onShowContent,
        onHideContent: onHideContent,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur
      }), /*#__PURE__*/_react.default.createElement("span", {
        id: this._id,
        className: styles.root,
        role: "tooltip"
      }, renderTip ? (0, _callRenderProp.callRenderProp)(renderTip) : tip));
    }
  }]);
  Tooltip.displayName = "Tooltip";
  return Tooltip;
}(_react.Component), _class2.propTypes = {
  /**
   * @param {Object} renderProps
   * @param {Boolean} renderProps.focused - Is the Tooltip trigger focused?
   * @param {Function} renderProps.getTriggerProps - Props to be spread onto the trigger element
   */
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]).isRequired,

  /**
   * The content to render in the tooltip
   */
  renderTip: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * Whether or not the tooltip content is shown, when controlled
   */
  isShowingContent: _propTypes.default.bool,

  /**
   * Whether or not to show the content by default, when uncontrolled
   */
  defaultIsShowingContent: _propTypes.default.bool,

  /**
   * the element type to render as (assumes a single child if 'as' is undefined)
   */
  as: _propTypes.default.elementType,
  // eslint-disable-line react/require-default-props

  /**
   * The action that causes the Content to display (`click`, `hover`, `focus`)
   */
  on: _propTypes.default.oneOfType([_propTypes.default.oneOf(['click', 'hover', 'focus']), _propTypes.default.arrayOf(_propTypes.default.oneOf(['click', 'hover', 'focus']))]),

  /**
   * The color of the tooltip content
   */
  color: _propTypes.default.oneOf(['primary', 'primary-inverse']),

  /**
   * Specifies where the Tooltip will be placed in relation to the target element.
   * Ex. placement="bottom" will render the Tooltip below the triggering element
   * (Note: if there is not room, it will position opposite. Ex. "top" will
   * automatically switch to "bottom")
   */
  placement: _PositionPropTypes.PositionPropTypes.placement,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Tooltip />` (defaults to `document.body`)
   */
  mountNode: _PositionPropTypes.PositionPropTypes.mountNode,

  /**
   * The parent in which to constrain the tooltip.
   * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
   * or a function returning an element
   */
  constrain: _PositionPropTypes.PositionPropTypes.constrain,

  /**
   * The horizontal offset for the positioned content
   */
  offsetX: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * The vertical offset for the positioned content
   */
  offsetY: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Target element for positioning the Tooltip (if it differs from children/trigger)
   */
  positionTarget: _propTypes.default.oneOfType([_element.element, _propTypes.default.func]),

  /**
   * Callback fired when content is shown. When controlled, this callback is
   * fired when the tooltip expects to be shown
   */
  onShowContent: _propTypes.default.func,

  /**
   * Callback fired when content is hidden. When controlled, this callback is
   * fired when the tooltip expects to be hidden
   */
  onHideContent: _propTypes.default.func,

  /* eslint-disable react/require-default-props */

  /**
   * __Deprecated - use `renderTip`__
   */
  tip: _propTypes.default.node,

  /**
   * __Deprecated - use `color`__
   */
  variant: _propTypes.default.oneOf(['default', 'inverse'])
  /* eslint-enable react/require-default-props */

}, _class2.defaultProps = {
  renderTip: void 0,
  isShowingContent: void 0,
  defaultIsShowingContent: false,
  on: void 0,
  color: 'primary',
  placement: 'top',
  mountNode: null,
  constrain: 'window',
  offsetX: 0,
  offsetY: 0,
  positionTarget: void 0,
  onShowContent: function onShowContent(event) {},
  onHideContent: function onHideContent(event, _ref) {
    var documentClick = _ref.documentClick;
  }
}, _temp)) || _class) || _class) || _class);
exports.Tooltip = Tooltip;
var _default = Tooltip;
exports.default = _default;
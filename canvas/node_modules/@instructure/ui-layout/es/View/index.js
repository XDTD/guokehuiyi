import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { error as _error } from "@instructure/console";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { themeable, getShorthandPropValue, ThemeablePropTypes, mirrorShorthandEdges, mirrorShorthandCorners } from '@instructure/ui-themeable';
import { getComputedStyle } from '@instructure/ui-dom-utils';
import { bidirectional } from '@instructure/ui-i18n';
import { cursor as cursorPropTypes } from '@instructure/ui-prop-types';
import { getElementType, omitProps, pickProps } from '@instructure/ui-react-utils';
var styles = {
  componentId: 'MYpOQ',
  template: function template(theme) {
    return "\n\n.MYpOQ_bGBk{box-sizing:border-box;font-family:".concat(theme.fontFamily || 'inherit', ";max-width:100%}\n\n.MYpOQ_UeJS{display:block}\n\n.MYpOQ_cuDs{display:inline-block;vertical-align:middle}\n\n.MYpOQ_desw{display:flex}\n\n.MYpOQ_cKQL{display:inline-flex;vertical-align:middle}\n\n.MYpOQ_EMjX{text-align:start}\n\n[dir=ltr] .MYpOQ_EMjX{text-align:left}\n\n[dir=rtl] .MYpOQ_EMjX{text-align:right}\n\n.MYpOQ_ImeN,[dir=ltr] .MYpOQ_ImeN,[dir=rtl] .MYpOQ_ImeN{text-align:center}\n\n.MYpOQ_dBtH{text-align:end}\n\n[dir=ltr] .MYpOQ_dBtH{text-align:right}\n\n[dir=rtl] .MYpOQ_dBtH{text-align:left}\n\n.MYpOQ_bQna{outline:0.0625rem dashed ").concat(theme.debugOutlineColor || 'inherit', "}\n\n.MYpOQ_cMwr{border-style:").concat(theme.borderStyle || 'inherit', "}\n\n.MYpOQ_dsNY{border-color:").concat(theme.borderColorDefault || 'inherit', "}\n\n.MYpOQ_eiMX{border-color:").concat(theme.borderColorInverse || 'inherit', "}\n\n.MYpOQ_cLjf{border-color:").concat(theme.borderColorBrand || 'inherit', "}\n\n.MYpOQ_cXDj{border-color:").concat(theme.borderColorInfo || 'inherit', "}\n\n.MYpOQ_fjbA{border-color:").concat(theme.borderColorSuccess || 'inherit', "}\n\n.MYpOQ_fBpf{border-color:").concat(theme.borderColorWarning || 'inherit', "}\n\n.MYpOQ_bMrG{border-color:").concat(theme.borderColorAlert || 'inherit', "}\n\n.MYpOQ_fdvn{border-color:").concat(theme.borderColorDanger || 'inherit', "}\n\n.MYpOQ_fZwI{background:").concat(theme.background || 'inherit', ";color:").concat(theme.color || 'inherit', "}\n\n.MYpOQ_fzxW{background:").concat(theme.backgroundInverse || 'inherit', ";color:").concat(theme.colorInverse || 'inherit', "}\n\n.MYpOQ_dUgE{background:").concat(theme.backgroundLight || 'inherit', ";color:").concat(theme.color || 'inherit', "}\n\n.MYpOQ_NGNZ{background:").concat(theme.backgroundBrand || 'inherit', ";color:").concat(theme.colorInverse || 'inherit', "}\n\n.MYpOQ_feZy{background:").concat(theme.backgroundAlert || 'inherit', ";color:").concat(theme.colorInverse || 'inherit', "}\n\n.MYpOQ_fYBY{background:").concat(theme.backgroundInfo || 'inherit', ";color:").concat(theme.colorInverse || 'inherit', "}\n\n.MYpOQ_qidh{background:").concat(theme.backgroundSuccess || 'inherit', ";color:").concat(theme.colorInverse || 'inherit', "}\n\n.MYpOQ_fKOP{background:").concat(theme.backgroundDanger || 'inherit', ";color:").concat(theme.colorInverse || 'inherit', "}\n\n.MYpOQ_eOYc{background:").concat(theme.backgroundWarning || 'inherit', ";color:").concat(theme.colorInverse || 'inherit', "}\n\n.MYpOQ_fQrx{z-index:").concat(theme.stackingTopmost || 'inherit', "}\n\n.MYpOQ_dtZX{z-index:").concat(theme.stackingAbove || 'inherit', "}\n\n.MYpOQ_fCiV{z-index:").concat(theme.stackingBelow || 'inherit', "}\n\n.MYpOQ_dJEE{z-index:").concat(theme.stackingDeepest || 'inherit', "}\n\n.MYpOQ_fxuY{box-shadow:").concat(theme.shadowTopmost || 'inherit', "}\n\n.MYpOQ_bxuL{box-shadow:").concat(theme.shadowResting || 'inherit', "}\n\n.MYpOQ_bIta{box-shadow:").concat(theme.shadowAbove || 'inherit', "}\n\n.MYpOQ_fhgP{overflow-x:hidden}\n\n.MYpOQ_dzYG{overflow-x:auto}\n\n.MYpOQ_divt{overflow-y:hidden}\n\n.MYpOQ_fKlg{overflow-y:auto}\n\n.MYpOQ_cBHs{position:relative}\n\n.MYpOQ_cBHs:before{border-color:").concat(theme.focusOutlineColorDefault || 'inherit', ";border-style:").concat(theme.focusOutlineStyle || 'inherit', ";border-width:").concat(theme.focusOutlineWidth || 'inherit', ";content:\"\";opacity:0;pointer-events:none;position:absolute}\n\n.MYpOQ_cBHs.MYpOQ_cnfU:before{transform:scale(0.95);transition:all 0.2s}\n\n.MYpOQ_cBHs.MYpOQ_cBtr:before{bottom:calc(").concat(theme.focusOutlineOffset || 'inherit', "*-1);left:calc(").concat(theme.focusOutlineOffset || 'inherit', "*-1);right:calc(").concat(theme.focusOutlineOffset || 'inherit', "*-1);top:calc(").concat(theme.focusOutlineOffset || 'inherit', "*-1)}\n\n.MYpOQ_cBHs.MYpOQ_bFwB:before{bottom:").concat(theme.focusOutlineInset || 'inherit', ";left:").concat(theme.focusOutlineInset || 'inherit', ";right:").concat(theme.focusOutlineInset || 'inherit', ";top:").concat(theme.focusOutlineInset || 'inherit', "}\n\n.MYpOQ_cBHs.MYpOQ_beQo:before{border-radius:inherit}\n\n.MYpOQ_cBHs.MYpOQ_bnCe:before{border-radius:0}\n\n.MYpOQ_cBHs.MYpOQ_cBtr.MYpOQ_cmRt:before{border-radius:calc(").concat(theme.borderRadiusSmall || 'inherit', " + ").concat(theme.focusOutlineOffset || 'inherit', " - ").concat(theme.focusOutlineWidth || 'inherit', ")}\n\n.MYpOQ_cBHs.MYpOQ_cBtr.MYpOQ_eeJl:before{border-radius:calc(").concat(theme.borderRadiusMedium || 'inherit', " + ").concat(theme.focusOutlineOffset || 'inherit', " - ").concat(theme.focusOutlineWidth || 'inherit', ")}\n\n.MYpOQ_cBHs.MYpOQ_cBtr.MYpOQ_TYCL:before{border-radius:calc(").concat(theme.borderRadiusLarge || 'inherit', " + ").concat(theme.focusOutlineOffset || 'inherit', " - ").concat(theme.focusOutlineWidth || 'inherit', ")}\n\n.MYpOQ_cBHs.MYpOQ_bFwB.MYpOQ_cmRt:before{border-radius:calc(").concat(theme.borderRadiusSmall || 'inherit', " - ").concat(theme.focusOutlineInset || 'inherit', " + ").concat(theme.focusOutlineWidth || 'inherit', ")}\n\n.MYpOQ_cBHs.MYpOQ_bFwB.MYpOQ_eeJl:before{border-radius:calc(").concat(theme.borderRadiusMedium || 'inherit', " - ").concat(theme.focusOutlineInset || 'inherit', " + ").concat(theme.focusOutlineWidth || 'inherit', ")}\n\n.MYpOQ_cBHs.MYpOQ_bFwB.MYpOQ_TYCL:before{border-radius:calc(").concat(theme.borderRadiusLarge || 'inherit', " - ").concat(theme.focusOutlineInset || 'inherit', " + ").concat(theme.focusOutlineWidth || 'inherit', ")}\n\n.MYpOQ_cBHs.MYpOQ_cVYB{outline:none}\n\n.MYpOQ_cBHs.MYpOQ_cVYB:before{opacity:1;transform:scale(1)}\n\n.MYpOQ_cBHs.MYpOQ_fuTR:before{border-color:").concat(theme.focusColorInfo || 'inherit', "}\n\n.MYpOQ_cBHs.MYpOQ_dwHj:before{border-color:").concat(theme.focusColorInverse || 'inherit', "}\n\n.MYpOQ_cBHs.MYpOQ_NhxI:before{border-color:").concat(theme.focusColorSuccess || 'inherit', "}\n\n.MYpOQ_cBHs.MYpOQ_fsVi:before{border-color:").concat(theme.focusColorDanger || 'inherit', "}\n\n.MYpOQ_cSap{position:fixed}\n\n.MYpOQ_fuLp{position:absolute}\n\n.MYpOQ_bZzT{position:-webkit-sticky;position:sticky}");
  },
  'root': 'MYpOQ_bGBk',
  'display--block': 'MYpOQ_UeJS',
  'display--inline-block': 'MYpOQ_cuDs',
  'display--flex': 'MYpOQ_desw',
  'display--inline-flex': 'MYpOQ_cKQL',
  'textAlign--start': 'MYpOQ_EMjX',
  'textAlign--center': 'MYpOQ_ImeN',
  'textAlign--end': 'MYpOQ_dBtH',
  'debug': 'MYpOQ_bQna',
  'hasBorder': 'MYpOQ_cMwr',
  'borderColor--default': 'MYpOQ_dsNY',
  'borderColor--inverse': 'MYpOQ_eiMX',
  'borderColor--brand': 'MYpOQ_cLjf',
  'borderColor--info': 'MYpOQ_cXDj',
  'borderColor--success': 'MYpOQ_fjbA',
  'borderColor--warning': 'MYpOQ_fBpf',
  'borderColor--alert': 'MYpOQ_bMrG',
  'borderColor--danger': 'MYpOQ_fdvn',
  'background--default': 'MYpOQ_fZwI',
  'background--inverse': 'MYpOQ_fzxW',
  'background--light': 'MYpOQ_dUgE',
  'background--brand': 'MYpOQ_NGNZ',
  'background--alert': 'MYpOQ_feZy',
  'background--info': 'MYpOQ_fYBY',
  'background--success': 'MYpOQ_qidh',
  'background--danger': 'MYpOQ_fKOP',
  'background--warning': 'MYpOQ_eOYc',
  'stacking--topmost': 'MYpOQ_fQrx',
  'stacking--above': 'MYpOQ_dtZX',
  'stacking--below': 'MYpOQ_fCiV',
  'stacking--deepest': 'MYpOQ_dJEE',
  'shadow--topmost': 'MYpOQ_fxuY',
  'shadow--resting': 'MYpOQ_bxuL',
  'shadow--above': 'MYpOQ_bIta',
  'overflowX--hidden': 'MYpOQ_fhgP',
  'overflowX--auto': 'MYpOQ_dzYG',
  'overflowY--hidden': 'MYpOQ_divt',
  'overflowY--auto': 'MYpOQ_fKlg',
  'position--relative': 'MYpOQ_cBHs',
  'focusAnimation': 'MYpOQ_cnfU',
  'focusPosition--offset': 'MYpOQ_cBtr',
  'focusPosition--inset': 'MYpOQ_bFwB',
  'focusRing--radiusInherit': 'MYpOQ_beQo',
  'focusRing--radiusNone': 'MYpOQ_bnCe',
  'focusRing--radiusSmall': 'MYpOQ_cmRt',
  'focusRing--radiusMedium': 'MYpOQ_eeJl',
  'focusRing--radiusLarge': 'MYpOQ_TYCL',
  'focused': 'MYpOQ_cVYB',
  'focusColor--info': 'MYpOQ_fuTR',
  'focusColor--inverse': 'MYpOQ_dwHj',
  'focusColor--success': 'MYpOQ_NhxI',
  'focusColor--danger': 'MYpOQ_fsVi',
  'position--fixed': 'MYpOQ_cSap',
  'position--absolute': 'MYpOQ_fuLp',
  'position--sticky': 'MYpOQ_bZzT'
};
import theme from './theme';
/**
---
category: components/deprecated
id: DeprecatedView
---
**/

var View = (_dec = bidirectional(), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(View, _Component);

  var _super = _createSuper(View);

  function View() {
    var _this;

    _classCallCheck(this, View);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleElementRef = function (el) {
      if (typeof _this.props.elementRef === 'function') {
        _this.props.elementRef(el);
      }

      _this._element = el;
    };

    _this.verifyUniformValues = function (value, input) {
      if (typeof input !== "string") return false;
      return input.trim().split(" ").every(function (inputValue) {
        return inputValue === value;
      });
    };

    return _this;
  }

  _createClass(View, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Not calling getComputedStyle can save hundreds of ms in tests and production
      if (process.env.NODE_ENV === 'development') {
        /*#__PURE__*/

        /*#__PURE__*/
        _error(! /*#__PURE__*/function verifySpanMargin(element, margin) {
          if (!element) {
            return;
          }

          var marginValues = margin ? margin.split(' ') : null;
          var display = getComputedStyle(element).display;
          var verticalMargin = false; // either top or bottom margin are set

          if (margin) {
            if (marginValues[0] && marginValues[0] !== 'none' && marginValues[0] !== '0') {
              verticalMargin = true;
            }

            if (marginValues[2] && marginValues[2] !== 'none' && marginValues[2] !== '0') {
              verticalMargin = true;
            }
          }

          return verticalMargin && display === 'inline';
        }(this._element, this.props.margin), "[View] display style is set to 'inline' and will allow for horizontal margins only.");
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _ref, _objectSpread2;

      var _this$props = this.props,
          children = _this$props.children,
          textAlign = _this$props.textAlign,
          background = _this$props.background,
          display = _this$props.display,
          debug = _this$props.debug,
          width = _this$props.width,
          height = _this$props.height,
          minWidth = _this$props.minWidth,
          minHeight = _this$props.minHeight,
          maxWidth = _this$props.maxWidth,
          maxHeight = _this$props.maxHeight,
          overflowX = _this$props.overflowX,
          overflowY = _this$props.overflowY,
          stacking = _this$props.stacking,
          shadow = _this$props.shadow,
          position = _this$props.position,
          focusPosition = _this$props.focusPosition,
          focusColor = _this$props.focusColor,
          shouldAnimateFocus = _this$props.shouldAnimateFocus,
          borderColor = _this$props.borderColor,
          size = _this$props.size,
          className = _this$props.className;
      var ElementType = getElementType(View, this.props);
      var focusOutlineClasses = position === 'relative' ? (_ref = {}, _defineProperty(_ref, styles[this.focusRingRadius], true), _defineProperty(_ref, styles["focusPosition--".concat(focusPosition)], true), _defineProperty(_ref, styles["focusColor--".concat(focusColor)], true), _defineProperty(_ref, styles["focusAnimation"], shouldAnimateFocus), _ref) : {};
      var classes = classnames(_objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, styles.root, true), _defineProperty(_objectSpread2, styles.debug, debug), _defineProperty(_objectSpread2, styles.hasBorder, this.hasBorder), _defineProperty(_objectSpread2, styles["borderColor--".concat(borderColor)], this.hasBorder && borderColor !== 'inverse'), _defineProperty(_objectSpread2, styles['borderColor--inverse'], this.hasBorder && background === 'inverse'), _defineProperty(_objectSpread2, styles["textAlign--".concat(textAlign)], textAlign), _defineProperty(_objectSpread2, styles["background--".concat(background)], background), _defineProperty(_objectSpread2, styles["display--".concat(display)], display && display !== 'auto'), _defineProperty(_objectSpread2, styles["overflowX--".concat(overflowX)], overflowX && overflowX !== 'visible'), _defineProperty(_objectSpread2, styles["overflowY--".concat(overflowY)], overflowY && overflowY !== 'visible'), _defineProperty(_objectSpread2, styles["size--".concat(size)], size && size !== 'auto'), _defineProperty(_objectSpread2, styles["stacking--".concat(stacking)], stacking), _defineProperty(_objectSpread2, styles["shadow--".concat(shadow)], shadow && shadow !== 'none'), _defineProperty(_objectSpread2, styles["position--".concat(position)], position !== 'static'), _defineProperty(_objectSpread2, styles.focused, this.isFocused), _objectSpread2), focusOutlineClasses, _defineProperty({}, className, className)));
      return /*#__PURE__*/React.createElement(ElementType, Object.assign({}, omitProps(this.props, View.propTypes), {
        className: classes,
        style: _objectSpread({}, this.spacingStyle, {}, this.borderStyle, {}, this.offsetStyle, {
          width: width,
          height: height,
          minWidth: minWidth,
          minHeight: minHeight,
          maxWidth: maxWidth,
          maxHeight: maxHeight
        }, this.styleProps),
        ref: this.handleElementRef
      }), children);
    }
  }, {
    key: "isFocused",
    get: function get() {
      var _this$props2 = this.props,
          focused = _this$props2.focused,
          position = _this$props2.position;

      if (focused) {
        if (position === 'relative') {
          return true;
        } else {
          /*#__PURE__*/

          /*#__PURE__*/
          _error(position === 'relative', '[View] the focus ring will only display if the `position` prop is `relative`.');

          return false;
        }
      } else {
        return false;
      }
    }
  }, {
    key: "focusRingRadius",
    get: function get() {
      var borderRadius = this.props.borderRadius;

      if (this.verifyUniformValues('circle', borderRadius) || this.verifyUniformValues('pill', borderRadius)) {
        // if pill or circle, ok for focus ring to inherit parent radius
        return 'focusRing--radiusInherit';
      } else if (this.verifyUniformValues('small', borderRadius)) {
        return 'focusRing--radiusSmall';
      } else if (this.verifyUniformValues('medium', borderRadius)) {
        return 'focusRing--radiusMedium';
      } else if (this.verifyUniformValues('large', borderRadius)) {
        return 'focusRing--radiusLarge';
      } else {
        // for shapes with irregular borders (e.g., `large medium`), leave focus ring square
        return 'focusRing--radiusNone';
      }
    }
  }, {
    key: "hasBorder",
    get: function get() {
      var borderWidth = this.props.borderWidth;
      return borderWidth && borderWidth !== '0' && borderWidth !== 'none';
    }
  }, {
    key: "borderStyle",
    get: function get() {
      var _this$props3 = this.props,
          borderRadius = _this$props3.borderRadius,
          borderWidth = _this$props3.borderWidth;

      if (this.dir === bidirectional.DIRECTION.rtl) {
        borderRadius = mirrorShorthandCorners(borderRadius);
        borderWidth = mirrorShorthandEdges(borderWidth);
      }

      return {
        borderRadius: getShorthandPropValue('View', this.theme, borderRadius, 'borderRadius'),
        borderWidth: getShorthandPropValue('View', this.theme, borderWidth, 'borderWidth')
      };
    }
  }, {
    key: "spacingStyle",
    get: function get() {
      var _this$props4 = this.props,
          margin = _this$props4.margin,
          padding = _this$props4.padding;

      if (this.dir === 'rtl') {
        margin = mirrorShorthandEdges(margin);
        padding = mirrorShorthandEdges(padding);
      }

      return {
        margin: getShorthandPropValue('View', this.theme, margin, 'margin'),
        padding: getShorthandPropValue('View', this.theme, padding, 'padding')
      };
    }
  }, {
    key: "offsetStyle",
    get: function get() {
      var _this$props5 = this.props,
          insetBlockStart = _this$props5.insetBlockStart,
          insetBlockEnd = _this$props5.insetBlockEnd,
          insetInlineStart = _this$props5.insetInlineStart,
          insetInlineEnd = _this$props5.insetInlineEnd;
      var rtl = this.dir === 'rtl';
      var blockStart = {
        top: insetBlockStart,
        insetBlockStart: insetBlockStart
      };
      var blockEnd = {
        bottom: insetBlockEnd,
        insetBlockEnd: insetBlockEnd
      };
      var horizontalOffsets = {
        left: rtl ? insetInlineEnd : insetInlineStart,
        right: rtl ? insetInlineStart : insetInlineEnd,
        insetInlineStart: insetInlineStart,
        insetInlineEnd: insetInlineEnd
      };
      return _objectSpread({}, blockStart, {}, blockEnd, {}, horizontalOffsets);
    }
  }, {
    key: "styleProps",
    get: function get() {
      var _this$props6 = this.props,
          cursor = _this$props6.cursor,
          style = _this$props6.style; // eslint-disable-line react/prop-types

      var whitelisted = pickProps(style || {}, {}, [// Position/calculateElementPosition:
      'top', 'left', 'position', 'display', 'transform', 'overflow', 'minWidth', 'minHeight', // Img:
      'filter', // Flex.Item:
      'flexBasis', // Avatar:
      'backgroundImage']);

      if (cursor) {
        whitelisted.cursor = cursor;
      }

      return whitelisted;
    }
  }]);

  View.displayName = "View";
  return View;
}(Component), _class2.propTypes = {
  /**
  * The element to render as the component root, `span` by default
  */
  as: PropTypes.elementType,

  /**
  * provides a reference to the underlying html element
  */
  elementRef: PropTypes.func,

  /**
  * By default the display prop is 'auto', meaning it takes on the
  * display rules of the html element it's rendered as (see `as` prop).
  */
  display: PropTypes.oneOf(['auto', 'block', 'inline-block', 'flex', 'inline-flex']),
  overflowX: PropTypes.oneOf(['auto', 'hidden', 'visible']),
  overflowY: PropTypes.oneOf(['auto', 'hidden', 'visible']),

  /**
  * Set the margin using familiar CSS shorthand
  */
  margin: ThemeablePropTypes.spacing,

  /**
  * Set the padding using familiar CSS shorthand
  */
  padding: ThemeablePropTypes.spacing,
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maxHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  minHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
  * The children to render inside the `<View />`
  */
  children: PropTypes.node,

  /**
  * Designates the text alignment within the `<View />`
  */
  textAlign: PropTypes.oneOf(['start', 'center', 'end']),

  /**
  * Accepts the familiar CSS shorthand to designate border widths corresponding
  * to edges
  */
  borderWidth: ThemeablePropTypes.borderWidth,

  /**
  * Accepts `small`, `medium`, `large`, `circle`, and `pill`. Border radius can be
  * assigned to individual corners in CSS shorthand style (e.g., `"medium large none pill"`).
  */
  borderRadius: ThemeablePropTypes.borderRadius,

  /**
  * Sets the color of the View border
  */
  borderColor: PropTypes.oneOf(['default', 'inverse', 'brand', 'info', 'success', 'warning', 'alert', 'danger']),

  /**
  * Designates the background style of the `<View />`
  */
  background: PropTypes.oneOf(['default', 'inverse', 'light', 'transparent', 'brand', 'alert', 'info', 'success', 'danger', 'warning']),

  /**
  * Controls the shadow depth for the `<View />`
  */
  shadow: ThemeablePropTypes.shadow,

  /**
  * Controls the z-index depth for the `<View />`
  */
  stacking: ThemeablePropTypes.stacking,

  /**
   * Specify a mouse cursor to use when hovering over the `<View />`
   */
  cursor: cursorPropTypes,

  /**
  * Specify a value for the CSS position property. Use `relative` if `focusable` will be true.
  */
  position: PropTypes.oneOf(['static', 'absolute', 'relative', 'sticky', 'fixed']),

  /**
  * The `left` CSS property in left-to-right interfaces. Will not do anything if `position === "static"`.
  */
  insetInlineStart: PropTypes.string,

  /**
  * The `right` CSS property in left-to-right interfaces. Will not do anything if `position === "static"`.
  */
  insetInlineEnd: PropTypes.string,

  /**
  * The `top` CSS property. Will not do anything if `position === "static"`.
  */
  insetBlockStart: PropTypes.string,

  /**
  * The `bottom` CSS property. Will not do anything if `position === "static"`.
  */
  insetBlockEnd: PropTypes.string,

  /**
   * When true and position prop is `relative`, show focus outline.
   */
  focused: PropTypes.bool,

  /**
   * Determines whether the focus outline displays offset or inset from the focused View
   */
  focusPosition: PropTypes.oneOf(['offset', 'inset']),

  /**
  * Determines the color of the focus outline
  */
  focusColor: PropTypes.oneOf(['info', 'inverse', 'success', 'danger']),
  shouldAnimateFocus: PropTypes.bool,

  /**
  * Activate a dotted outline around the component to make building your
  * layout easier
  */
  debug: PropTypes.bool
}, _class2.defaultProps = {
  display: 'auto',
  // Note:
  // - `as` will default to type span via getElementType, so for consistency and
  // compatibility with Container we are leaving it undefined here. Otherwise
  // it modifies behavior for consuming components because of the logic around
  // default props in getElementType
  as: void 0,
  // - `textAlign` is undefined by default so that View can inherit text alignment
  // from parents
  textAlign: void 0,
  // - Any props used to set inline styles should be undefined so that they
  // don't break consuming components' CSS
  overflowX: 'visible',
  overflowY: 'visible',
  shadow: void 0,
  stacking: void 0,
  debug: false,
  cursor: void 0,
  borderWidth: void 0,
  borderRadius: void 0,
  borderColor: 'default',
  margin: void 0,
  padding: void 0,
  elementRef: void 0,
  background: void 0,
  children: null,
  width: void 0,
  height: void 0,
  maxWidth: void 0,
  maxHeight: void 0,
  minWidth: void 0,
  minHeight: void 0,
  position: 'static',
  focused: false,
  focusPosition: 'offset',
  focusColor: 'info',
  insetInlineStart: void 0,
  insetInlineEnd: void 0,
  insetBlockStart: void 0,
  insetBlockEnd: void 0,
  shouldAnimateFocus: true
}, _temp)) || _class) || _class); // omitViewProps needs to be called on the composed View component so that the
// View.propTypes in the method matches the View.propTypes that will be called in
// the consumers. Otherwise the discrepency could cause unexpected props being
// allowed through.

View.omitViewProps = function (props, Component) {
  if (process.env.NODE_ENV !== 'production') {
    Object.keys(pickProps(props, View.propTypes)).forEach(function (prop) {
      /*#__PURE__*/

      /*#__PURE__*/
      _error(false, "[".concat(Component.displayName, "] prop '").concat(prop, "' is not allowed."));
    });
  }

  return omitProps(props, View.propTypes);
};

export default View;
export { View };
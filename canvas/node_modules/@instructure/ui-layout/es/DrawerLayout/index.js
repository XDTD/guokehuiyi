import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { error as _error } from "@instructure/console";

var _dec, _dec2, _dec3, _dec4, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Children, Component } from 'react';
import PropTypes from 'prop-types';
import { bidirectional } from '@instructure/ui-i18n';
import { themeable } from '@instructure/ui-themeable';
import { Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import { deprecated, matchComponentTypes, safeCloneElement } from '@instructure/ui-react-utils';
import { getBoundingClientRect } from '@instructure/ui-dom-utils';
import { px } from '@instructure/ui-utils';
import { uid } from '@instructure/uid';
import { testable } from '@instructure/ui-testable';
import { mirrorHorizontalPlacement } from '../mirrorHorizontalPlacement';
import { DrawerContent } from './DrawerContent';
import { DrawerTray } from './DrawerTray';
var styles = {
  componentId: 'eyPOA',
  template: function template(theme) {
    return "\n\n.eyPOA_frfg{height:100%;position:relative}";
  },
  'drawerLayoutRoot': 'eyPOA_frfg'
};
/**
---
category: components/deprecated
id: DeprecatedDrawerLayout
---
**/

var DrawerLayout = (_dec = deprecated('7.0.0', null, 'Use DrawerLayout from ui-drawer-layout instead.'), _dec2 = testable(), _dec3 = bidirectional(), _dec4 = themeable(null, styles), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(DrawerLayout, _Component);

  var _super = _createSuper(DrawerLayout);

  function DrawerLayout(_props) {
    var _this;

    _classCallCheck(this, DrawerLayout);

    _this = _super.call(this, _props);
    _this._content = null;

    _this.handleTrayContentRef = function (el) {
      _this._tray = el;
    };

    _this.handleContentSizeChange = function (_ref) {
      var width = _ref.width;

      _this.setState(function (state, props) {
        var nextState = _this.getNextState(props.minWidth, state.trayWidth, width, state.shouldOverlayTray);

        if (state.shouldOverlayTray !== nextState.shouldOverlayTray) {
          _this.notifyOverlayTrayChange(nextState.shouldOverlayTray);
        }

        return nextState;
      });
    };

    _this.handleTraySizeChange = function (_ref2) {
      var width = _ref2.width;

      _this.setState(function (state, props) {
        var nextState = _this.getNextState(props.minWidth, width, state.contentWidth, true);

        if (state.shouldOverlayTray !== nextState.shouldOverlayTray) {
          _this.notifyOverlayTrayChange(nextState.shouldOverlayTray);
        }

        return nextState;
      });
    };

    _this.handleTrayTransitionEnter = function () {
      var width = 0;

      if (_this._tray) {
        width = getBoundingClientRect(_this._tray).width;
      }

      _this.handleTraySizeChange({
        width: width
      });
    };

    _this.handleTrayTransitionExit = function () {
      _this.handleTraySizeChange({
        width: 0
      });
    };

    _this.state = {
      shouldOverlayTray: false,
      trayWidth: 0,
      contentWidth: 0
    };
    _this._id = uid('DrawerLayout');
    return _this;
  }

  _createClass(DrawerLayout, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        shouldOverlayTray: this.state.shouldOverlayTray
      };
    }
  }, {
    key: "shouldOverlayTray",
    value: function shouldOverlayTray(minWidth, trayWidth, contentWidth, trayIsOverlayed) {
      if (!this._content) return false;
      var minWidthPx = px(minWidth, this._content);

      if (trayIsOverlayed) {
        return contentWidth - trayWidth < minWidthPx;
      } else {
        return contentWidth < minWidthPx;
      }
    }
  }, {
    key: "getNextState",
    value: function getNextState(minWidth, trayWidth, contentWidth, trayIsOverlayed) {
      var shouldOverlayTray = this.shouldOverlayTray(minWidth, trayWidth, contentWidth, trayIsOverlayed);
      return {
        trayWidth: trayWidth,
        contentWidth: contentWidth,
        shouldOverlayTray: shouldOverlayTray
      };
    }
  }, {
    key: "notifyOverlayTrayChange",
    value: function notifyOverlayTrayChange(shouldOverlayTray) {
      var onOverlayTrayChange = this.props.onOverlayTrayChange;

      if (typeof onOverlayTrayChange === 'function') {
        onOverlayTrayChange(shouldOverlayTray);
      }
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var _this2 = this;

      var trayCount = 0;
      var contentCount = 0;
      var shouldOverlayTray = this.shouldOverlayTray(this.props.minWidth, this.state.trayWidth, this.state.contentWidth, this.state.shouldOverlayTray);
      var children = Children.map(this.props.children, function (child, index) {
        if (matchComponentTypes(child, [DrawerTray])) {
          var _safeCloneElement;

          trayCount++;
          return safeCloneElement(child, (_safeCloneElement = {
            key: child.props.label
          }, _defineProperty(_safeCloneElement, DrawerTray.locatorAttribute, _this2._id), _defineProperty(_safeCloneElement, "contentRef", _this2.handleTrayContentRef), _defineProperty(_safeCloneElement, "onEnter", _this2.handleTrayTransitionEnter), _defineProperty(_safeCloneElement, "onExit", _this2.handleTrayTransitionExit), _safeCloneElement));
        } else if (matchComponentTypes(child, [DrawerContent])) {
          var _safeCloneElement2;

          contentCount++;

          var handleContentRef = function handleContentRef(el) {
            _this2._content = el;

            if (typeof child.props.contentRef === 'function') {
              child.props.contentRef(el);
            }
          };

          return _this2.state.trayWidth !== null ? safeCloneElement(child, (_safeCloneElement2 = {
            key: child.props.label
          }, _defineProperty(_safeCloneElement2, DrawerContent.locatorAttribute, _this2._id), _defineProperty(_safeCloneElement2, "style", _this2.contentStyle), _defineProperty(_safeCloneElement2, "onSizeChange", _this2.handleContentSizeChange), _defineProperty(_safeCloneElement2, "contentRef", handleContentRef), _defineProperty(_safeCloneElement2, "shouldTransition", !shouldOverlayTray), _safeCloneElement2)) : null;
        } else {
          return child;
        }
      });

      /*#__PURE__*/

      /*#__PURE__*/
      _error(trayCount <= 1, "[DrawerLayout] Only one 'DrawerTray' per 'DrawerLayout' is supported.");

      /*#__PURE__*/

      /*#__PURE__*/
      _error(contentCount <= 1, "[DrawerLayout] Only one 'DrawerContent' per 'DrawerLayout' is supported.");

      return children;
    }
  }, {
    key: "render",
    value: function render() {
      var props = _defineProperty({}, DrawerLayout.locatorAttribute, this._id);

      return /*#__PURE__*/React.createElement("div", Object.assign({}, props, {
        className: styles.drawerLayoutRoot
      }), this.renderChildren());
    }
  }, {
    key: "trayProps",
    get: function get() {
      var tray = Children.toArray(this.props.children).filter(function (child) {
        return matchComponentTypes(child, [DrawerTray]);
      })[0];
      return tray.props;
    }
  }, {
    key: "trayPlacement",
    get: function get() {
      var placement = this.trayProps.placement;
      return this.rtl ? mirrorHorizontalPlacement(placement, ' ') : placement;
    }
  }, {
    key: "contentMargin",
    get: function get() {
      var trayWidth = this.state.trayWidth || 0;
      return this.state.shouldOverlayTray ? 0 : trayWidth;
    }
  }, {
    key: "contentStyle",
    get: function get() {
      var shouldOverlayTray = this.shouldOverlayTray(this.props.minWidth, this.state.trayWidth, this.state.contentWidth, this.state.shouldOverlayTray);
      var marginLeft = 0;
      var marginRight = 0;

      if (!shouldOverlayTray) {
        if (this.trayPlacement === 'start') {
          marginLeft = this.contentMargin;
        }

        if (this.trayPlacement === 'end') {
          marginRight = this.contentMargin;
        }
      }

      return {
        marginLeft: "".concat(marginLeft, "px"),
        marginRight: "".concat(marginRight, "px")
      };
    }
  }]);

  DrawerLayout.displayName = "DrawerLayout";
  return DrawerLayout;
}(Component), _class2.locatorAttribute = 'data-drawer-layout', _class2.propTypes = {
  /**
   * Exactly one of each of the following child types: `DrawerLayout.Content`, `DrawerLayout.Tray`
   */
  children: ChildrenPropTypes.oneOfEach([DrawerContent, DrawerTray]),

  /**
   * Min width for the `<DrawerLayout.Content />`
   */
  minWidth: PropTypes.string,

  /**
   * Function called when the `<DrawerLayout.Content />` is resized and hits the `minWidth` breakpoint
   * Called with a boolean value, `true` if the tray is now overlaying the content or `false` if
   * it is side by side
   */
  onOverlayTrayChange: PropTypes.func
}, _class2.defaultProps = {
  children: null,
  minWidth: '30rem',
  onOverlayTrayChange: function onOverlayTrayChange(shouldOverlayTray) {}
}, _class2.childContextTypes = {
  shouldOverlayTray: PropTypes.bool
}, _class2.Content = DrawerContent, _class2.Tray = DrawerTray, _temp)) || _class) || _class) || _class) || _class);
export default DrawerLayout;
export { DrawerLayout, DrawerContent, DrawerTray };
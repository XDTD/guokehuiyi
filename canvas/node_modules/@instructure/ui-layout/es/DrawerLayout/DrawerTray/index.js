import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _dec3, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { bidirectional } from '@instructure/ui-i18n';
import { Transition } from '@instructure/ui-motion';
import { omitProps } from '@instructure/ui-react-utils';
import { themeable } from '@instructure/ui-themeable';
import { element } from '@instructure/ui-prop-types';
import { createChainedFunction } from '@instructure/ui-utils';
import { testable } from '@instructure/ui-testable';
import { Dialog } from '@instructure/ui-dialog';
import { Portal } from '@instructure/ui-portal';
import { mirrorHorizontalPlacement } from '../../mirrorHorizontalPlacement';
var styles = {
  componentId: 'mtAsz',
  template: function template(theme) {
    return "\n\n.mtAsz_cMPJ{background-color:".concat(theme.background || 'inherit', ";overflow-x:hidden;position:absolute;z-index:").concat(theme.zIndex || 'inherit', "}\n\n.mtAsz_caGd,.mtAsz_cMPJ{box-sizing:content-box;overflow-y:auto}\n\n.mtAsz_caGd{height:100%}\n\n.mtAsz_fSpQ{box-shadow:").concat(theme.boxShadow || 'inherit', "}\n\n.mtAsz_dHtp{border-color:").concat(theme.borderColor || 'inherit', ";border-style:").concat(theme.borderStyle || 'inherit', ";border-width:0}\n\n.mtAsz_bxia{left:0}\n\n.mtAsz_bxia.mtAsz_dHtp{border-right-width:").concat(theme.borderWidth || 'inherit', ";box-sizing:border-box}\n\n.mtAsz_bQpq{right:0}\n\n.mtAsz_bQpq.mtAsz_dHtp{border-left-width:").concat(theme.borderWidth || 'inherit', ";box-sizing:border-box}\n\n.mtAsz_bQpq,.mtAsz_bxia{bottom:0;top:0}");
  },
  'drawerTrayRoot': 'mtAsz_cMPJ',
  'content': 'mtAsz_caGd',
  'shadow': 'mtAsz_fSpQ',
  'border': 'mtAsz_dHtp',
  'placement--start': 'mtAsz_bxia',
  'placement--end': 'mtAsz_bQpq'
};
import theme from './theme';
/**
---
parent: DeprecatedDrawerLayout
id: DeprecatedDrawerLayout.Tray
---
**/

var DrawerTray = (_dec = testable(), _dec2 = bidirectional(), _dec3 = themeable(theme, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(DrawerTray, _Component);

  var _super = _createSuper(DrawerTray);

  function DrawerTray() {
    var _this;

    _classCallCheck(this, DrawerTray);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      transitioning: false,
      portalOpen: false
    };

    _this.handleContentRef = function (node) {
      _this._content = node;

      if (typeof _this.props.contentRef === 'function') {
        _this.props.contentRef(node);
      }
    };

    _this.handleTransitionEntered = function () {
      _this.setState({
        transitioning: false
      });
    };

    _this.handleTransitionExited = function () {
      _this.setState({
        transitioning: false
      });
    };

    _this.handlePortalOpen = function (DOMNode) {
      _this.DOMNode = DOMNode; // We apply the theme here because now we have a DOM node (provided by Portal)

      DOMNode && _this.applyTheme(DOMNode);

      _this.setState({
        portalOpen: true
      });
    };

    return _this;
  }

  _createClass(DrawerTray, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.open !== prevProps.open) {
        this.setState({
          transitioning: true
        });
      }
    }
  }, {
    key: "renderContent",
    value: function renderContent() {
      var _this$props = this.props,
          children = _this$props.children,
          render = _this$props.render;

      if (typeof render === 'function') {
        return render();
      } else if (typeof children === 'function') {
        return children();
      } else {
        return children;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props2 = this.props,
          label = _this$props2.label,
          children = _this$props2.children,
          render = _this$props2.render,
          placement = _this$props2.placement,
          open = _this$props2.open,
          onOpen = _this$props2.onOpen,
          onClose = _this$props2.onClose,
          border = _this$props2.border,
          shadow = _this$props2.shadow,
          onEnter = _this$props2.onEnter,
          onEntering = _this$props2.onEntering,
          onEntered = _this$props2.onEntered,
          onExit = _this$props2.onExit,
          onExiting = _this$props2.onExiting,
          onExited = _this$props2.onExited,
          contentRef = _this$props2.contentRef,
          mountNode = _this$props2.mountNode,
          defaultFocusElement = _this$props2.defaultFocusElement,
          liveRegion = _this$props2.liveRegion,
          onDismiss = _this$props2.onDismiss,
          onTransition = _this$props2.onTransition,
          shouldReturnFocus = _this$props2.shouldReturnFocus,
          shouldCloseOnEscape = _this$props2.shouldCloseOnEscape,
          shouldCloseOnDocumentClick = _this$props2.shouldCloseOnDocumentClick,
          shouldContainFocus = _this$props2.shouldContainFocus,
          props = _objectWithoutProperties(_this$props2, ["label", "children", "render", "placement", "open", "onOpen", "onClose", "border", "shadow", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "contentRef", "mountNode", "defaultFocusElement", "liveRegion", "onDismiss", "onTransition", "shouldReturnFocus", "shouldCloseOnEscape", "shouldCloseOnDocumentClick", "shouldContainFocus"]);

      var shouldOverlayTray = this.context.shouldOverlayTray;
      var portalOpen = this.state.portalOpen;
      var needsPortal = shouldOverlayTray && mountNode;
      var transitionIn = open;

      if (needsPortal && !portalOpen) {
        transitionIn = false;
      }

      var content = /*#__PURE__*/React.createElement(Transition, {
        in: transitionIn,
        type: this.transition,
        onTransition: onTransition,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: createChainedFunction(this.handleTransitionEntered, onEntered, onOpen),
        onExit: onExit,
        onExiting: onExiting,
        onExited: createChainedFunction(this.handleTransitionExited, onExited, onClose),
        unmountOnExit: true
      }, /*#__PURE__*/React.createElement("div", Object.assign({}, omitProps(props, DrawerTray.propTypes), {
        ref: this.handleContentRef,
        className: classnames((_classnames = {}, _defineProperty(_classnames, styles.drawerTrayRoot, true), _defineProperty(_classnames, styles.border, border), _defineProperty(_classnames, styles.shadow, shadow && shouldOverlayTray), _defineProperty(_classnames, styles["placement--".concat(this.placement)], true), _classnames))
      }), this.state.transitioning ? this.renderContent() : /*#__PURE__*/React.createElement(Dialog, {
        open: true,
        role: shouldOverlayTray ? 'dialog' : 'region',
        label: label,
        shouldReturnFocus: shouldReturnFocus,
        shouldContainFocus: shouldContainFocus && shouldOverlayTray,
        shouldCloseOnDocumentClick: shouldCloseOnDocumentClick && shouldOverlayTray,
        shouldCloseOnEscape: shouldCloseOnEscape && shouldOverlayTray,
        defaultFocusElement: defaultFocusElement,
        liveRegion: liveRegion,
        onDismiss: onDismiss,
        as: "div",
        className: styles.content
      }, this.renderContent())));

      if (needsPortal) {
        return /*#__PURE__*/React.createElement(Portal, {
          mountNode: mountNode,
          open: true,
          onOpen: this.handlePortalOpen
        }, content);
      } else {
        return content;
      }
    }
  }, {
    key: "placement",
    get: function get() {
      var placement = this.props.placement;
      return this.rtl ? mirrorHorizontalPlacement(placement, ' ') : placement;
    }
  }, {
    key: "direction",
    get: function get() {
      return this.placement === 'end' ? 'right' : 'left';
    }
  }, {
    key: "transition",
    get: function get() {
      return "slide-".concat(this.direction);
    }
  }, {
    key: "DOMNode",
    get: function get() {
      return this._DOMNode;
    },
    set: function set(el) {
      this._DOMNode = el;
    }
  }]);

  DrawerTray.displayName = "DrawerTray";
  return DrawerTray;
}(Component), _class2.locatorAttribute = 'data-drawer-tray', _class2.propTypes = {
  label: PropTypes.string.isRequired,
  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
  render: PropTypes.func,

  /**
   * Placement of the `<DrawerLayout.Tray />`
   */
  placement: PropTypes.oneOf(['start', 'end']),

  /**
   * If the tray is open or closed.
   */
  open: PropTypes.bool,

  /**
   * Called when the `<DrawerLayout.Tray />` is opened
   */
  onOpen: PropTypes.func,

  /**
   * Called when the `<DrawerLayout.Tray />` is closed
   */
  onClose: PropTypes.func,

  /**
   * Should the `<DrawerLayout.Tray />` have a border
   */
  border: PropTypes.bool,

  /**
   * Should the `<DrawerLayout.Tray />` have a shadow
   */
  shadow: PropTypes.bool,

  /**
   * Callback fired when the `<DrawerLayout.Tray />` transitions in/out
   */
  onTransition: PropTypes.func,

  /**
   * Callback fired before the `<DrawerLayout.Tray />` transitions in
   */
  onEnter: PropTypes.func,

  /**
   * Callback fired as the `<DrawerLayout.Tray />` begins to transition in
   */
  onEntering: PropTypes.func,

  /**
   * Callback fired after the `<DrawerLayout.Tray />` finishes transitioning in
   */
  onEntered: PropTypes.func,

  /**
   * Callback fired right before the `<DrawerLayout.Tray />` transitions out
   */
  onExit: PropTypes.func,

  /**
   * Callback fired as the `<DrawerLayout.Tray />` begins to transition out
   */
  onExiting: PropTypes.func,

  /**
   * Callback fired after the `<DrawerLayout.Tray />` finishes transitioning out
   */
  onExited: PropTypes.func,

  /**
   * Ref function for the `<DrawerLayout.Tray />` content
   */
  contentRef: PropTypes.func,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<DrawerLayout.Tray />` when tray is overlaying content
   */
  mountNode: PropTypes.oneOfType([element, PropTypes.func]),

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),

  /**
   * An element, function returning an element, or array of elements that will not be hidden from
   * the screen reader when the `<DrawerLayout.Tray />` is open
   */
  liveRegion: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element, PropTypes.func]),
  onDismiss: PropTypes.func,
  shouldContainFocus: PropTypes.bool,
  shouldReturnFocus: PropTypes.bool,
  shouldCloseOnDocumentClick: PropTypes.bool,
  shouldCloseOnEscape: PropTypes.bool
}, _class2.defaultProps = {
  children: null,
  render: void 0,
  shouldContainFocus: true,
  shouldCloseOnEscape: true,
  shouldCloseOnDocumentClick: true,
  shouldReturnFocus: true,
  open: false,
  onOpen: function onOpen() {},
  shadow: true,
  border: true,
  placement: 'start',
  mountNode: null,
  onEnter: function onEnter() {},
  onEntering: function onEntering() {},
  onEntered: function onEntered() {},
  onExit: function onExit() {},
  onExiting: function onExiting() {},
  onExited: function onExited() {},
  contentRef: function contentRef(node) {},
  onClose: void 0,
  onDismiss: void 0,
  defaultFocusElement: void 0,
  liveRegion: void 0,
  onTransition: void 0
}, _class2.contextTypes = {
  shouldOverlayTray: PropTypes.bool
}, _temp)) || _class) || _class) || _class);
export default DrawerTray;
export { DrawerTray };
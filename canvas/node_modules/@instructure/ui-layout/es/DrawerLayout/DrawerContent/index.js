import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { debounce } from '@instructure/debounce';
import { addResizeListener, getBoundingClientRect } from '@instructure/ui-dom-utils';
import { omitProps } from '@instructure/ui-react-utils';
import { themeable } from '@instructure/ui-themeable';
import { testable } from '@instructure/ui-testable';
var styles = {
  componentId: 'eHNud',
  template: function template(theme) {
    return "\n\n.eHNud_dBzQ{box-sizing:content-box;height:100%;overflow-y:auto}\n\n.eHNud_fgMr{transition:margin ".concat(theme.duration || 'inherit', "}");
  },
  'drawerContentRoot': 'eHNud_dBzQ',
  'transition': 'eHNud_fgMr'
};
import theme from './theme';
/**
---
parent: DeprecatedDrawerLayout
id: DeprecatedDrawerLayout.Content
---
**/

var DrawerContent = (_dec = testable(), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(DrawerContent, _Component);

  var _super = _createSuper(DrawerContent);

  function DrawerContent() {
    var _this;

    _classCallCheck(this, DrawerContent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      shouldTransition: false
    };
    _this._content = null;
    _this._resizeListener = null;
    _this._debounced = null;
    _this._timeouts = [];

    _this.handleContentRef = function (node) {
      if (typeof _this.props.contentRef === 'function') {
        _this._content = node;

        _this.props.contentRef(node);
      }
    };

    return _this;
  }

  _createClass(DrawerContent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var rect = getBoundingClientRect(this._content); // set initial size

      this.props.onSizeChange({
        width: rect.width,
        height: rect.height
      }); // listen for changes to size

      this._debounced = debounce(this.props.onSizeChange, 100, {
        leading: false,
        trailing: true
      });
      this._resizeListener = addResizeListener(this._content, this._debounced);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this2 = this;

      this._timeouts.push(setTimeout(function () {
        _this2.setState({
          shouldTransition: true
        });
      }));
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._resizeListener) {
        this._resizeListener.remove();
      }

      if (this._debounced) {
        this._debounced.cancel();
      }

      this._timeouts.forEach(function (timeout) {
        clearTimeout(timeout);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          style = _this$props.style,
          label = _this$props.label,
          role = _this$props.role;
      return /*#__PURE__*/React.createElement("div", Object.assign({}, omitProps(this.props, DrawerContent.propTypes, ['shouldTransition']), {
        role: role,
        style: style,
        ref: this.handleContentRef,
        "aria-label": label,
        className: classnames((_classnames = {}, _defineProperty(_classnames, styles.drawerContentRoot, true), _defineProperty(_classnames, styles.transition, this.state.shouldTransition), _classnames))
      }), this.props.children);
    }
  }]);

  DrawerContent.displayName = "DrawerContent";
  return DrawerContent;
}(Component), _class2.locatorAttribute = 'data-drawer-content', _class2.propTypes = {
  label: PropTypes.string.isRequired,
  children: PropTypes.node,
  contentRef: PropTypes.func,

  /**
   * Callback fired whenever the `<DrawerLayout.Content />` changes size
   */
  onSizeChange: PropTypes.func,
  role: PropTypes.string
}, _class2.defaultProps = {
  children: null,
  contentRef: function contentRef(node) {},
  onSizeChange: function onSizeChange(size) {},
  role: 'region'
}, _temp)) || _class) || _class);
export default DrawerContent;
export { DrawerContent };
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _class, _class2, _temp, _dec2, _class3, _class4, _temp2, _dec3, _dec4, _dec5, _class5, _class6, _temp3;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { themeable } from '@instructure/ui-themeable';
import { element } from '@instructure/ui-prop-types';
import { ComponentIdentifier, deprecated } from '@instructure/ui-react-utils';
import { testable } from '@instructure/ui-testable';
import { Position as UIPosition, PositionPropTypes } from '@instructure/ui-position';
var styles = {
  componentId: 'bgLNT',
  template: function template(theme) {
    return "\n\n.bgLNT_bGBk{box-sizing:border-box;z-index:".concat(theme.zIndex || 'inherit', "}");
  },
  'root': 'bgLNT_bGBk'
};
import theme from './theme';
var PositionTarget = (_dec = testable(), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_ComponentIdentifier) {
  _inherits(PositionTarget, _ComponentIdentifier);

  var _super = _createSuper(PositionTarget);

  function PositionTarget() {
    _classCallCheck(this, PositionTarget);

    return _super.apply(this, arguments);
  }

  return PositionTarget;
}(ComponentIdentifier), _class2.displayName = 'PositionTarget', _class2.locatorAttribute = 'data-position-target', _temp)) || _class);
var PositionContent = (_dec2 = testable(), _dec2(_class3 = (_temp2 = _class4 = /*#__PURE__*/function (_ComponentIdentifier2) {
  _inherits(PositionContent, _ComponentIdentifier2);

  var _super2 = _createSuper(PositionContent);

  function PositionContent() {
    _classCallCheck(this, PositionContent);

    return _super2.apply(this, arguments);
  }

  return PositionContent;
}(ComponentIdentifier), _class4.displayName = 'PositionContent', _class4.propTypes = {
  children: PropTypes.node,
  placement: PositionPropTypes.placement
}, _class4.locatorAttribute = 'data-position-content', _temp2)) || _class3);
/**
---
category: components/utilities/deprecated
id: DeprecatedPosition
---
**/

var Position = (_dec3 = deprecated('7.0.0', null, 'Use @instructure/ui-position instead'), _dec4 = testable(), _dec5 = themeable(theme, styles), _dec3(_class5 = _dec4(_class5 = _dec5(_class5 = (_temp3 = _class6 = /*#__PURE__*/function (_Component) {
  _inherits(Position, _Component);

  var _super3 = _createSuper(Position);

  function Position() {
    _classCallCheck(this, Position);

    return _super3.apply(this, arguments);
  }

  _createClass(Position, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          id = _this$props.id,
          trackPosition = _this$props.trackPosition,
          placement = _this$props.placement,
          offsetX = _this$props.offsetX,
          offsetY = _this$props.offsetY,
          mountNode = _this$props.mountNode,
          target = _this$props.target,
          insertAt = _this$props.insertAt,
          over = _this$props.over,
          onPositioned = _this$props.onPositioned,
          onPositionChanged = _this$props.onPositionChanged,
          constrain = _this$props.constrain,
          passthroughProps = _objectWithoutProperties(_this$props, ["children", "id", "trackPosition", "placement", "offsetX", "offsetY", "mountNode", "target", "insertAt", "over", "onPositioned", "onPositionChanged", "constrain"]);

      var renderTarget = ComponentIdentifier.pick(Position.Target, children);
      var content = ComponentIdentifier.pick(Position.Content, children);
      return /*#__PURE__*/React.createElement(UIPosition, Object.assign({}, passthroughProps, {
        target: target,
        renderTarget: renderTarget,
        id: id,
        shouldTrackPosition: trackPosition,
        placement: placement,
        offsetX: offsetX,
        offsetY: offsetY,
        mountNode: mountNode,
        insertAt: insertAt,
        constrain: constrain,
        shouldPositionOverTarget: over,
        onPositioned: onPositioned,
        onPositionChanged: onPositionChanged
      }), content);
    }
  }]);

  Position.displayName = "Position";
  return Position;
}(Component), _class6.Target = PositionTarget, _class6.Content = PositionContent, _class6.locatorAttribute = 'data-position', _class6.propTypes = {
  /**
   * The children to be rendered within the `<Position />`
   */
  children: PropTypes.node,

  /**
   * The target to be used when not using `<PositionTarget />`
   */
  target: PropTypes.oneOfType([element, PropTypes.func]),

  /**
   * Whether or not you want the content to position over the `<PositionTarget />`
   */
  over: PropTypes.bool,

  /**
   * The placement of the content in relation to the trigger
   */
  placement: PositionPropTypes.placement,

  /**
   * The horizontal offset for the positioned content
   */
  offsetX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * The vertical offset for the positioned content
   */
  offsetY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Callback fired when the position changes
   */
  onPositionChanged: PropTypes.func,

  /**
   * Callback fired when `<Position />` content has been mounted and is initially positioned
   */
  onPositioned: PropTypes.func,

  /**
   * Whether or not position of the target should be tracked or just set statically on render
   */
  trackPosition: PropTypes.bool,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Position />` (defaults to `document.body`)
   */
  mountNode: PositionPropTypes.mountNode,

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: PropTypes.oneOf(['bottom', 'top']),

  /**
   * The parent in which to constrain the placement.
   * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
   * or a function returning an element
   */
  constrain: PositionPropTypes.constrain,
  id: PropTypes.string
}, _class6.defaultProps = {
  trackPosition: true,
  placement: 'bottom center',
  offsetX: 0,
  offsetY: 0,
  mountNode: null,
  target: null,
  insertAt: 'bottom',
  over: false,
  onPositioned: function onPositioned(position) {},
  onPositionChanged: function onPositionChanged(position) {},
  constrain: 'window',
  children: null,
  id: void 0
}, _temp3)) || _class5) || _class5) || _class5);
export default Position;
export { Position, PositionTarget, PositionContent };
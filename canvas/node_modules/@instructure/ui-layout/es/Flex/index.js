import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
* The MIT License (MIT)
*
* Copyright (c) 2015 - present Instructure, Inc.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
import React, { Children, Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
import { Children as ChildrenPropTypes } from '@instructure/ui-prop-types';
import { omitProps, safeCloneElement, deprecated } from '@instructure/ui-react-utils';
import { View } from '@instructure/ui-view';
import { FlexItem } from './FlexItem';
var styles = {
  componentId: 'cGJLp',
  template: function template(theme) {
    return "\n\n.cGJLp_bGBk{box-sizing:border-box;font-family:".concat(theme.fontFamily || 'inherit', "}\n\n.cGJLp_bZNM{flex-direction:column}\n\n.cGJLp_eUXf{flex-direction:column-reverse}\n\n.cGJLp_qOas{flex-direction:row}\n\n.cGJLp_sGoV{flex-direction:row-reverse}\n\n.cGJLp_ePRQ{flex-wrap:wrap}\n\n.cGJLp_busO{justify-content:flex-start}\n\n.cGJLp_crdn{justify-content:flex-end}\n\n.cGJLp_eRIA{justify-content:center}\n\n.cGJLp_flTs{justify-content:space-around}\n\n.cGJLp_oDLF{justify-content:space-between}\n\n.cGJLp_fZWR{align-items:center}\n\n.cGJLp_cCxO{align-items:flex-start}\n\n.cGJLp_fncw{align-items:flex-end}\n\n.cGJLp_cQFX{align-items:stretch}\n\n.cGJLp_fFVr{outline:0.0625rem dashed ").concat(theme.debugOutlineColor || 'inherit', "}");
  },
  'root': 'cGJLp_bGBk',
  'column': 'cGJLp_bZNM',
  'column-reverse': 'cGJLp_eUXf',
  'row': 'cGJLp_qOas',
  'row-reverse': 'cGJLp_sGoV',
  'wrapItems': 'cGJLp_ePRQ',
  'justifyItems--start': 'cGJLp_busO',
  'justifyItems--end': 'cGJLp_crdn',
  'justifyItems--center': 'cGJLp_eRIA',
  'justifyItems--space-around': 'cGJLp_flTs',
  'justifyItems--space-between': 'cGJLp_oDLF',
  'alignItems--center': 'cGJLp_fZWR',
  'alignItems--start': 'cGJLp_cCxO',
  'alignItems--end': 'cGJLp_fncw',
  'alignItems--stretch': 'cGJLp_cQFX',
  'visualDebug': 'cGJLp_fFVr'
};
import theme from './theme';
/**
---
category: components/deprecated
id: DeprecatedFlex
---
**/

var Flex = (_dec = deprecated('7.0.0', null, 'Use Flex from ui-flex instead.'), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Flex, _Component);

  var _super = _createSuper(Flex);

  function Flex() {
    _classCallCheck(this, Flex);

    return _super.apply(this, arguments);
  }

  _createClass(Flex, [{
    key: "renderChildren",
    value: function renderChildren() {
      var _this = this;

      return Children.map(this.props.children, function (child) {
        if (child) {
          return safeCloneElement(child, _objectSpread({
            visualDebug: _this.props.visualDebug
          }, child.props, {
            /* child visualDebug prop should override parent */
            direction: _this.props.direction.replace(/-reverse/, '')
          }));
        } else {
          return null;
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _classes;

      var props = omitProps(this.props, Flex.propTypes);
      var _this$props = this.props,
          as = _this$props.as,
          elementRef = _this$props.elementRef,
          children = _this$props.children,
          direction = _this$props.direction,
          height = _this$props.height,
          inline = _this$props.inline,
          margin = _this$props.margin,
          padding = _this$props.padding,
          justifyItems = _this$props.justifyItems,
          textAlign = _this$props.textAlign,
          visualDebug = _this$props.visualDebug,
          width = _this$props.width,
          wrapItems = _this$props.wrapItems; // When flex direction is row, 'center' is the most useful default because it
      // vertically aligns FlexItems. For column direction, though, we want 'stretch'.

      var alignItems = this.props.alignItems || (direction === 'column' || direction === 'column-reverse' ? 'stretch' : 'center');
      var classes = (_classes = {}, _defineProperty(_classes, styles.root, true), _defineProperty(_classes, styles.visualDebug, visualDebug), _defineProperty(_classes, styles["justifyItems--".concat(justifyItems)], true), _defineProperty(_classes, styles["alignItems--".concat(alignItems)], true), _defineProperty(_classes, styles.wrapItems, wrapItems), _classes);

      if (children && React.Children.count(children) > 0) {
        return /*#__PURE__*/React.createElement(View, Object.assign({}, props, {
          className: classnames(classes, styles[direction]),
          elementRef: elementRef,
          as: as,
          display: inline ? 'inline-flex' : 'flex',
          width: width,
          height: height,
          margin: margin,
          padding: padding,
          textAlign: textAlign
        }), this.renderChildren());
      } else {
        return null;
      }
    }
  }]);

  Flex.displayName = "Flex";
  return Flex;
}(Component), _class2.propTypes = {
  /**
  * Flex only accepts Flex.Item as a child
  */
  children: ChildrenPropTypes.oneOf([FlexItem]),

  /**
  * the element type to render as
  */
  as: PropTypes.elementType,

  /**
  * provides a reference to the underlying html root element
  */
  elementRef: PropTypes.func,

  /**
  * Sets the flex-direction to row (horizontal) or column (vertical)
  */
  direction: PropTypes.oneOf(['row', 'column', 'row-reverse', 'column-reverse']),

  /**
  * Sets the height of the component's container (optional)
  */
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
  * Sets the width of the component's container (optional)
  */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  inline: PropTypes.bool,
  textAlign: PropTypes.oneOf(['start', 'center', 'end']),

  /**
  * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
  * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
  * familiar CSS-like shorthand. For example: `margin="small auto large"`.
  */
  margin: ThemeablePropTypes.spacing,

  /**
  * Valid values are `0`, `none`, `xxx-small`, `xx-small`, `x-small`,
  * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
  * familiar CSS-like shorthand. For example: `padding="small x-large large"`.
  */
  padding: ThemeablePropTypes.spacing,
  alignItems: PropTypes.oneOf(['center', 'start', 'end', 'stretch']),
  justifyItems: PropTypes.oneOf(['center', 'start', 'end', 'space-around', 'space-between']),

  /**
  * Places dashed lines around the component's borders to help debug your layout
  */
  visualDebug: PropTypes.bool,
  wrapItems: PropTypes.bool
}, _class2.defaultProps = {
  children: null,
  as: 'span',
  elementRef: function elementRef(el) {},
  direction: 'row',
  justifyItems: 'start',
  inline: false,
  visualDebug: false,
  wrapItems: false,
  width: void 0,
  height: void 0,
  padding: void 0,
  margin: void 0,
  alignItems: void 0,
  textAlign: void 0
}, _class2.Item = FlexItem, _temp)) || _class) || _class);
export default Flex;
export { Flex, FlexItem };
.root {
  box-sizing: border-box;
  font-family: var(--fontFamily);
  max-width: 100%;
}

.display--block {
  display: block;
}

.display--inline-block {
  display: inline-block;
  vertical-align: middle;
}

.display--flex {
  display: flex;
}

.display--inline-flex {
  display: inline-flex;
  vertical-align: middle;
}

.textAlign--start {
  text-align: start;
}

.textAlign--center {
  text-align: center;
}

.textAlign--end {
  text-align: end;
}

.debug {
  outline: 0.0625rem dashed var(--debugOutlineColor);
}

.hasBorder {
  border-style: var(--borderStyle);
}

.borderColor--default {
  border-color: var(--borderColorDefault);
}

.borderColor--inverse {
  border-color: var(--borderColorInverse);
}

.borderColor--brand {
  border-color: var(--borderColorBrand);
}

.borderColor--info {
  border-color: var(--borderColorInfo);
}

.borderColor--success {
  border-color: var(--borderColorSuccess);
}

.borderColor--warning {
  border-color: var(--borderColorWarning);
}

.borderColor--alert {
  border-color: var(--borderColorAlert);
}

.borderColor--danger {
  border-color: var(--borderColorDanger);
}

.background--default {
  color: var(--color);
  background: var(--background);
}

.background--inverse {
  color: var(--colorInverse);
  background: var(--backgroundInverse);
}

.background--light {
  color: var(--color);
  background: var(--backgroundLight);
}

.background--brand {
  color: var(--colorInverse);
  background: var(--backgroundBrand);
}

.background--alert {
  color: var(--colorInverse);
  background: var(--backgroundAlert);
}

.background--info {
  color: var(--colorInverse);
  background: var(--backgroundInfo);
}

.background--success {
  color: var(--colorInverse);
  background: var(--backgroundSuccess);
}

.background--danger {
  color: var(--colorInverse);
  background: var(--backgroundDanger);
}

.background--warning {
  color: var(--colorInverse);
  background: var(--backgroundWarning);
}

.stacking--topmost {
  z-index: var(--stackingTopmost);
}

.stacking--above {
  z-index: var(--stackingAbove);
}

.stacking--resting {}

.stacking--below {
  z-index: var(--stackingBelow);
}

.stacking--deepest {
  z-index: var(--stackingDeepest);
}

.shadow--topmost {
  box-shadow: var(--shadowTopmost);
}

.shadow--resting {
  box-shadow: var(--shadowResting);
}

.shadow--above {
  box-shadow: var(--shadowAbove);
}

.overflowX--hidden {
  overflow-x: hidden;
}

.overflowX--auto {
  overflow-x: auto;
}

.overflowY--hidden {
  overflow-y: hidden;
}

.overflowY--auto {
  overflow-y: auto;
}

.position--relative {
  position: relative;

  &::before {
    pointer-events: none;
    content: "";
    position: absolute;
    border-style: var(--focusOutlineStyle);
    border-width: var(--focusOutlineWidth);
    border-color: var(--focusOutlineColorDefault);
    opacity: 0;
  }

  &.focusAnimation::before {
    transition: all 0.2s;
    transform: scale(0.95);
  }

  &.focusPosition--offset::before {
    top: calc(var(--focusOutlineOffset) * -1);
    left: calc(var(--focusOutlineOffset) * -1); /* stylelint-disable-line property-blacklist */
    right: calc(var(--focusOutlineOffset) * -1); /* stylelint-disable-line property-blacklist */
    bottom: calc(var(--focusOutlineOffset) * -1);
  }

  &.focusPosition--inset::before {
    top: var(--focusOutlineInset);
    left: var(--focusOutlineInset); /* stylelint-disable-line property-blacklist */
    right: var(--focusOutlineInset); /* stylelint-disable-line property-blacklist */
    bottom: var(--focusOutlineInset);
  }

  &.focusRing--radiusInherit::before {
    border-radius: inherit;
  }

  &.focusRing--radiusNone::before {
    border-radius: 0;
  }

  /*
  * Calculations below ensure that the border radius of the focus outline will always be
  * correct regardless of changes to the offset/inset and focusOutlineWidth theme vars
  */

  /* stylelint-disable selector-max-class */

  &.focusPosition--offset.focusRing--radiusSmall::before {
    border-radius: calc(var(--borderRadiusSmall) + (var(--focusOutlineOffset) - var(--focusOutlineWidth)));
  }

  &.focusPosition--offset.focusRing--radiusMedium::before {
    border-radius: calc(var(--borderRadiusMedium) + (var(--focusOutlineOffset) - var(--focusOutlineWidth)));
  }

  &.focusPosition--offset.focusRing--radiusLarge::before {
    border-radius: calc(var(--borderRadiusLarge) + (var(--focusOutlineOffset) - var(--focusOutlineWidth)));
  }

  &.focusPosition--inset.focusRing--radiusSmall::before {
    border-radius: calc(var(--borderRadiusSmall) - (var(--focusOutlineInset) + var(--focusOutlineWidth)));
  }

  &.focusPosition--inset.focusRing--radiusMedium::before {
    border-radius: calc(var(--borderRadiusMedium) - (var(--focusOutlineInset) + var(--focusOutlineWidth)));
  }

  &.focusPosition--inset.focusRing--radiusLarge::before {
    border-radius: calc(var(--borderRadiusLarge) - (var(--focusOutlineInset) + var(--focusOutlineWidth)));
  }

  /* stylelint-enable selector-max-class */

  &.focused {
    outline: none;
  }

  &.focused::before {
    opacity: 1;
    transform: scale(1);
  }

  &.focusColor--info::before {
    border-color: var(--focusColorInfo);
  }

  &.focusColor--inverse::before {
    border-color: var(--focusColorInverse);
  }

  &.focusColor--success::before {
    border-color: var(--focusColorSuccess);
  }

  &.focusColor--danger::before {
    border-color: var(--focusColorDanger);
  }
}

.position--fixed {
  position: fixed;
}

.position--absolute {
  position: absolute;
}

.position--sticky {
  position: sticky;
}

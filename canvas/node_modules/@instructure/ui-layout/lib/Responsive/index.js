"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Responsive = exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _console = require("@instructure/console");

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _findDOMNode = require("@instructure/ui-dom-utils/lib/findDOMNode.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _deepEqual = require("@instructure/ui-utils/lib/deepEqual.js");

var _addElementQueryMatchListener = require("../addElementQueryMatchListener");

var _addMediaQueryMatchListener = require("../addMediaQueryMatchListener");

var _LayoutPropTypes = require("../LayoutPropTypes");

var _dec, _class, _class2, _temp;

/**
---
category: components/utilities/deprecated
id: DeprecatedResponsive
---
**/
var Responsive = (_dec = (0, _deprecated.deprecated)('7.0.0', null, 'Use @instructure/ui-responsive instead'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Responsive, _Component);

  var _super = (0, _createSuper2.default)(Responsive);

  function Responsive() {
    var _this;

    (0, _classCallCheck2.default)(this, Responsive);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._matchListener = null;
    _this.state = {
      matches: []
    };

    _this.updateMatches = function (matches, cb) {
      _this.setState({
        matches: matches
      }, function () {
        if (typeof cb === 'function') {
          cb();
        }
      });
    };

    return _this;
  }

  (0, _createClass2.default)(Responsive, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      /*#__PURE__*/
      ( /*#__PURE__*/0, _console.error)(this.props.render || this.props.children, "[Responsive] must have either a `render` prop or `children` prop.");
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._matchListener = this.addMatchListener(this.props.query, this.updateMatches);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeMatchListener();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this$props = this.props,
          match = _this$props.match,
          query = _this$props.query;

      if (match !== nextProps.match || !(0, _deepEqual.deepEqual)(query, nextProps.query)) {
        this.removeMatchListener();
        this._matchListener = this.addMatchListener(nextProps.query, this.updateMatches, nextProps.match);
      }
    }
  }, {
    key: "addMatchListener",
    value: function addMatchListener(query, updateMatches) {
      var match = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.props.match;
      var matchListener = match === 'element' ? _addElementQueryMatchListener.addElementQueryMatchListener : _addMediaQueryMatchListener.addMediaQueryMatchListener;
      return matchListener(query, (0, _findDOMNode.findDOMNode)(this), updateMatches);
    }
  }, {
    key: "removeMatchListener",
    value: function removeMatchListener() {
      if (this._matchListener) {
        this._matchListener.remove();
      }
    }
  }, {
    key: "mergeProps",
    value: function mergeProps(matches, props) {
      if (!props) {
        return null;
      }

      var mergedProps = {};
      matches.forEach(function (match) {
        var matchProps = props[match]; // Iterate over the props for the current match. If that the prop is
        // already in `mergedProps` that means that the prop was defined for
        // multiple breakpoints, and more than one of those breakpoints is being
        // currently applied so we log an error.

        Object.keys(matchProps).forEach(function (prop) {
          /*#__PURE__*/
          ( /*#__PURE__*/0, _console.error)(!(prop in mergedProps), ["[Responsive] The prop `".concat(prop, "` is defined at 2 or more breakpoints"), "which are currently applied at the same time. Its current value, `".concat(mergedProps[prop], "`,"), "will be overwritten as `".concat(matchProps[prop], "`.")].join(' '));
          mergedProps[prop] = matchProps[prop];
        });
      });
      return mergedProps;
    }
  }, {
    key: "render",
    value: function render() {
      var matches = this.state.matches;
      var _this$props2 = this.props,
          props = _this$props2.props,
          render = _this$props2.render,
          children = _this$props2.children; // Render via the children or render method, whichever is supplied. If
      // both are supplied, give preference to children.

      var renderFunc = children || render;
      return renderFunc(this.mergeProps(matches, props), matches);
    }
  }]);
  Responsive.displayName = "Responsive";
  return Responsive;
}(_react.Component), _class2.propTypes = {
  /**
   * Specifies if the `<Responsive />` component should use element or media queries
   */
  match: _propTypes.default.oneOf(['element', 'media']),

  /**
   * Consists of an object where the keys define the names of breakpoints. The values are query objects
   * with keys representing the breakpoint condition and values representing a breakpoint value as a
   * string or number. Ex. `{small: { maxWidth: 400 }, large: { minWidth: '600em'}}`
   */
  query: _propTypes.default.objectOf(_LayoutPropTypes.LayoutPropTypes.validQuery).isRequired,

  /**
   * Consists of an object where the keys match the breakpoint names used in the query. The values
   * are objects with keys representing prop names and values representing prop values Ex.
   * `{small: { myProp: 'fillscreen' }, large: { myProp: 'fillcontainer' }}`
   */
  props: _propTypes.default.objectOf(_propTypes.default.object),

  /**
   * Function called on render with the following form `(props, matches) => {...}` where the props
   * are the current props to be applied and matches is an array of current matches from the query
   * prop. Either this or a `children` prop function must be supplied.
   */
  render: _propTypes.default.func,

  /**
   * Function that takes the same form and arguments as the render prop. Either this or a `render`
   * prop function must be supplied.
   */
  children: _propTypes.default.func
}, _class2.defaultProps = {
  children: null,
  render: void 0,
  match: 'element',
  props: null
}, _temp)) || _class);
exports.Responsive = Responsive;
var _default = Responsive;
exports.default = _default;
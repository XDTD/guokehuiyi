"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _index = require("../index");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var _ref = /*#__PURE__*/_react.default.createElement(_index.DrawerLayout.Content, {
  label: "Test DrawerContent"
}, /*#__PURE__*/_react.default.createElement("div", null, "Hello from content", /*#__PURE__*/_react.default.createElement("button", null, "Expand")));

var DrawerLayoutFixture = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(DrawerLayoutFixture, _Component);

  var _super = (0, _createSuper2.default)(DrawerLayoutFixture);

  function DrawerLayoutFixture() {
    (0, _classCallCheck2.default)(this, DrawerLayoutFixture);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(DrawerLayoutFixture, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          layoutWidth = _this$props.layoutWidth,
          trayWidth = _this$props.trayWidth,
          open = _this$props.open,
          placement = _this$props.placement,
          onOverlayTrayChange = _this$props.onOverlayTrayChange;
      return /*#__PURE__*/_react.default.createElement("div", {
        style: {
          width: layoutWidth
        }
      }, /*#__PURE__*/_react.default.createElement(_index.DrawerLayout, {
        minWidth: "500px",
        onOverlayTrayChange: onOverlayTrayChange
      }, /*#__PURE__*/_react.default.createElement(_index.DrawerLayout.Tray, {
        open: open,
        placement: placement,
        label: "Test DrawerTray"
      }, /*#__PURE__*/_react.default.createElement("div", {
        style: {
          width: trayWidth
        }
      }, "Hello from tray")), _ref));
    }
  }]);
  DrawerLayoutFixture.displayName = "DrawerLayoutFixture";
  return DrawerLayoutFixture;
}(_react.Component);

exports.default = DrawerLayoutFixture;
DrawerLayoutFixture.propTypes = {
  layoutWidth: _propTypes.default.string,
  trayWidth: _propTypes.default.string,
  placement: _propTypes.default.string,
  open: _propTypes.default.bool,
  onOverlayTrayChange: _propTypes.default.func
};
DrawerLayoutFixture.defaultProps = {
  layoutWidth: '600px',
  trayWidth: '200px',
  open: false,
  placement: 'start',
  onOverlayTrayChange: function onOverlayTrayChange() {}
};
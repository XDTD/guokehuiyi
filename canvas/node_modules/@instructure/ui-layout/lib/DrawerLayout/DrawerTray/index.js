"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawerTray = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _bidirectional = require("@instructure/ui-i18n/lib/bidirectional.js");

var _Transition = require("@instructure/ui-motion/lib/Transition");

var _omitProps = require("@instructure/ui-react-utils/lib/omitProps.js");

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _element = require("@instructure/ui-prop-types/lib/element.js");

var _createChainedFunction = require("@instructure/ui-utils/lib/createChainedFunction.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _Dialog = require("@instructure/ui-dialog/lib/Dialog");

var _Portal = require("@instructure/ui-portal/lib/Portal");

var _mirrorHorizontalPlacement = require("../../mirrorHorizontalPlacement");

var _theme = _interopRequireDefault(require("./theme"));

var _dec, _dec2, _dec3, _class, _class2, _temp;

var styles = {
  componentId: 'mtAsz',
  template: function template(theme) {
    return "\n\n.mtAsz_cMPJ{background-color:".concat(theme.background || 'inherit', ";overflow-x:hidden;position:absolute;z-index:").concat(theme.zIndex || 'inherit', "}\n\n.mtAsz_caGd,.mtAsz_cMPJ{box-sizing:content-box;overflow-y:auto}\n\n.mtAsz_caGd{height:100%}\n\n.mtAsz_fSpQ{box-shadow:").concat(theme.boxShadow || 'inherit', "}\n\n.mtAsz_dHtp{border-color:").concat(theme.borderColor || 'inherit', ";border-style:").concat(theme.borderStyle || 'inherit', ";border-width:0}\n\n.mtAsz_bxia{left:0}\n\n.mtAsz_bxia.mtAsz_dHtp{border-right-width:").concat(theme.borderWidth || 'inherit', ";box-sizing:border-box}\n\n.mtAsz_bQpq{right:0}\n\n.mtAsz_bQpq.mtAsz_dHtp{border-left-width:").concat(theme.borderWidth || 'inherit', ";box-sizing:border-box}\n\n.mtAsz_bQpq,.mtAsz_bxia{bottom:0;top:0}");
  },
  'drawerTrayRoot': 'mtAsz_cMPJ',
  'content': 'mtAsz_caGd',
  'shadow': 'mtAsz_fSpQ',
  'border': 'mtAsz_dHtp',
  'placement--start': 'mtAsz_bxia',
  'placement--end': 'mtAsz_bQpq'
};

/**
---
parent: DeprecatedDrawerLayout
id: DeprecatedDrawerLayout.Tray
---
**/
var DrawerTray = (_dec = (0, _testable.testable)(), _dec2 = (0, _bidirectional.bidirectional)(), _dec3 = (0, _themeable.themeable)(_theme.default, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(DrawerTray, _Component);

  var _super = (0, _createSuper2.default)(DrawerTray);

  function DrawerTray() {
    var _this;

    (0, _classCallCheck2.default)(this, DrawerTray);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      transitioning: false,
      portalOpen: false
    };

    _this.handleContentRef = function (node) {
      _this._content = node;

      if (typeof _this.props.contentRef === 'function') {
        _this.props.contentRef(node);
      }
    };

    _this.handleTransitionEntered = function () {
      _this.setState({
        transitioning: false
      });
    };

    _this.handleTransitionExited = function () {
      _this.setState({
        transitioning: false
      });
    };

    _this.handlePortalOpen = function (DOMNode) {
      _this.DOMNode = DOMNode; // We apply the theme here because now we have a DOM node (provided by Portal)

      DOMNode && _this.applyTheme(DOMNode);

      _this.setState({
        portalOpen: true
      });
    };

    return _this;
  }

  (0, _createClass2.default)(DrawerTray, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.open !== prevProps.open) {
        this.setState({
          transitioning: true
        });
      }
    }
  }, {
    key: "renderContent",
    value: function renderContent() {
      var _this$props = this.props,
          children = _this$props.children,
          render = _this$props.render;

      if (typeof render === 'function') {
        return render();
      } else if (typeof children === 'function') {
        return children();
      } else {
        return children;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props2 = this.props,
          label = _this$props2.label,
          children = _this$props2.children,
          render = _this$props2.render,
          placement = _this$props2.placement,
          open = _this$props2.open,
          onOpen = _this$props2.onOpen,
          onClose = _this$props2.onClose,
          border = _this$props2.border,
          shadow = _this$props2.shadow,
          onEnter = _this$props2.onEnter,
          onEntering = _this$props2.onEntering,
          onEntered = _this$props2.onEntered,
          onExit = _this$props2.onExit,
          onExiting = _this$props2.onExiting,
          onExited = _this$props2.onExited,
          contentRef = _this$props2.contentRef,
          mountNode = _this$props2.mountNode,
          defaultFocusElement = _this$props2.defaultFocusElement,
          liveRegion = _this$props2.liveRegion,
          onDismiss = _this$props2.onDismiss,
          onTransition = _this$props2.onTransition,
          shouldReturnFocus = _this$props2.shouldReturnFocus,
          shouldCloseOnEscape = _this$props2.shouldCloseOnEscape,
          shouldCloseOnDocumentClick = _this$props2.shouldCloseOnDocumentClick,
          shouldContainFocus = _this$props2.shouldContainFocus,
          props = (0, _objectWithoutProperties2.default)(_this$props2, ["label", "children", "render", "placement", "open", "onOpen", "onClose", "border", "shadow", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "contentRef", "mountNode", "defaultFocusElement", "liveRegion", "onDismiss", "onTransition", "shouldReturnFocus", "shouldCloseOnEscape", "shouldCloseOnDocumentClick", "shouldContainFocus"]);
      var shouldOverlayTray = this.context.shouldOverlayTray;
      var portalOpen = this.state.portalOpen;
      var needsPortal = shouldOverlayTray && mountNode;
      var transitionIn = open;

      if (needsPortal && !portalOpen) {
        transitionIn = false;
      }

      var content = /*#__PURE__*/_react.default.createElement(_Transition.Transition, {
        in: transitionIn,
        type: this.transition,
        onTransition: onTransition,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: (0, _createChainedFunction.createChainedFunction)(this.handleTransitionEntered, onEntered, onOpen),
        onExit: onExit,
        onExiting: onExiting,
        onExited: (0, _createChainedFunction.createChainedFunction)(this.handleTransitionExited, onExited, onClose),
        unmountOnExit: true
      }, /*#__PURE__*/_react.default.createElement("div", Object.assign({}, (0, _omitProps.omitProps)(props, DrawerTray.propTypes), {
        ref: this.handleContentRef,
        className: (0, _classnames2.default)((_classnames = {}, (0, _defineProperty2.default)(_classnames, styles.drawerTrayRoot, true), (0, _defineProperty2.default)(_classnames, styles.border, border), (0, _defineProperty2.default)(_classnames, styles.shadow, shadow && shouldOverlayTray), (0, _defineProperty2.default)(_classnames, styles["placement--".concat(this.placement)], true), _classnames))
      }), this.state.transitioning ? this.renderContent() : /*#__PURE__*/_react.default.createElement(_Dialog.Dialog, {
        open: true,
        role: shouldOverlayTray ? 'dialog' : 'region',
        label: label,
        shouldReturnFocus: shouldReturnFocus,
        shouldContainFocus: shouldContainFocus && shouldOverlayTray,
        shouldCloseOnDocumentClick: shouldCloseOnDocumentClick && shouldOverlayTray,
        shouldCloseOnEscape: shouldCloseOnEscape && shouldOverlayTray,
        defaultFocusElement: defaultFocusElement,
        liveRegion: liveRegion,
        onDismiss: onDismiss,
        as: "div",
        className: styles.content
      }, this.renderContent())));

      if (needsPortal) {
        return /*#__PURE__*/_react.default.createElement(_Portal.Portal, {
          mountNode: mountNode,
          open: true,
          onOpen: this.handlePortalOpen
        }, content);
      } else {
        return content;
      }
    }
  }, {
    key: "placement",
    get: function get() {
      var placement = this.props.placement;
      return this.rtl ? (0, _mirrorHorizontalPlacement.mirrorHorizontalPlacement)(placement, ' ') : placement;
    }
  }, {
    key: "direction",
    get: function get() {
      return this.placement === 'end' ? 'right' : 'left';
    }
  }, {
    key: "transition",
    get: function get() {
      return "slide-".concat(this.direction);
    }
  }, {
    key: "DOMNode",
    get: function get() {
      return this._DOMNode;
    },
    set: function set(el) {
      this._DOMNode = el;
    }
  }]);
  DrawerTray.displayName = "DrawerTray";
  return DrawerTray;
}(_react.Component), _class2.locatorAttribute = 'data-drawer-tray', _class2.propTypes = {
  label: _propTypes.default.string.isRequired,
  children: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.node]),
  render: _propTypes.default.func,

  /**
   * Placement of the `<DrawerLayout.Tray />`
   */
  placement: _propTypes.default.oneOf(['start', 'end']),

  /**
   * If the tray is open or closed.
   */
  open: _propTypes.default.bool,

  /**
   * Called when the `<DrawerLayout.Tray />` is opened
   */
  onOpen: _propTypes.default.func,

  /**
   * Called when the `<DrawerLayout.Tray />` is closed
   */
  onClose: _propTypes.default.func,

  /**
   * Should the `<DrawerLayout.Tray />` have a border
   */
  border: _propTypes.default.bool,

  /**
   * Should the `<DrawerLayout.Tray />` have a shadow
   */
  shadow: _propTypes.default.bool,

  /**
   * Callback fired when the `<DrawerLayout.Tray />` transitions in/out
   */
  onTransition: _propTypes.default.func,

  /**
   * Callback fired before the `<DrawerLayout.Tray />` transitions in
   */
  onEnter: _propTypes.default.func,

  /**
   * Callback fired as the `<DrawerLayout.Tray />` begins to transition in
   */
  onEntering: _propTypes.default.func,

  /**
   * Callback fired after the `<DrawerLayout.Tray />` finishes transitioning in
   */
  onEntered: _propTypes.default.func,

  /**
   * Callback fired right before the `<DrawerLayout.Tray />` transitions out
   */
  onExit: _propTypes.default.func,

  /**
   * Callback fired as the `<DrawerLayout.Tray />` begins to transition out
   */
  onExiting: _propTypes.default.func,

  /**
   * Callback fired after the `<DrawerLayout.Tray />` finishes transitioning out
   */
  onExited: _propTypes.default.func,

  /**
   * Ref function for the `<DrawerLayout.Tray />` content
   */
  contentRef: _propTypes.default.func,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<DrawerLayout.Tray />` when tray is overlaying content
   */
  mountNode: _propTypes.default.oneOfType([_element.element, _propTypes.default.func]),

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),

  /**
   * An element, function returning an element, or array of elements that will not be hidden from
   * the screen reader when the `<DrawerLayout.Tray />` is open
   */
  liveRegion: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.element), _propTypes.default.element, _propTypes.default.func]),
  onDismiss: _propTypes.default.func,
  shouldContainFocus: _propTypes.default.bool,
  shouldReturnFocus: _propTypes.default.bool,
  shouldCloseOnDocumentClick: _propTypes.default.bool,
  shouldCloseOnEscape: _propTypes.default.bool
}, _class2.defaultProps = {
  children: null,
  render: void 0,
  shouldContainFocus: true,
  shouldCloseOnEscape: true,
  shouldCloseOnDocumentClick: true,
  shouldReturnFocus: true,
  open: false,
  onOpen: function onOpen() {},
  shadow: true,
  border: true,
  placement: 'start',
  mountNode: null,
  onEnter: function onEnter() {},
  onEntering: function onEntering() {},
  onEntered: function onEntered() {},
  onExit: function onExit() {},
  onExiting: function onExiting() {},
  onExited: function onExited() {},
  contentRef: function contentRef(node) {},
  onClose: void 0,
  onDismiss: void 0,
  defaultFocusElement: void 0,
  liveRegion: void 0,
  onTransition: void 0
}, _class2.contextTypes = {
  shouldOverlayTray: _propTypes.default.bool
}, _temp)) || _class) || _class) || _class);
exports.DrawerTray = DrawerTray;
var _default = DrawerTray;
exports.default = _default;
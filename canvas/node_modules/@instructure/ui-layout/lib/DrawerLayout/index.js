"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DrawerContent", {
  enumerable: true,
  get: function get() {
    return _DrawerContent.DrawerContent;
  }
});
Object.defineProperty(exports, "DrawerTray", {
  enumerable: true,
  get: function get() {
    return _DrawerTray.DrawerTray;
  }
});
exports.DrawerLayout = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _console = require("@instructure/console");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bidirectional = require("@instructure/ui-i18n/lib/bidirectional.js");

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _Children = require("@instructure/ui-prop-types/lib/Children.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _matchComponentTypes = require("@instructure/ui-react-utils/lib/matchComponentTypes.js");

var _safeCloneElement3 = require("@instructure/ui-react-utils/lib/safeCloneElement.js");

var _getBoundingClientRect = require("@instructure/ui-dom-utils/lib/getBoundingClientRect.js");

var _px = require("@instructure/ui-utils/lib/px.js");

var _uid = require("@instructure/uid");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _mirrorHorizontalPlacement = require("../mirrorHorizontalPlacement");

var _DrawerContent = require("./DrawerContent");

var _DrawerTray = require("./DrawerTray");

var _dec, _dec2, _dec3, _dec4, _class, _class2, _temp;

var styles = {
  componentId: 'eyPOA',
  template: function template(theme) {
    return "\n\n.eyPOA_frfg{height:100%;position:relative}";
  },
  'drawerLayoutRoot': 'eyPOA_frfg'
};
/**
---
category: components/deprecated
id: DeprecatedDrawerLayout
---
**/

var DrawerLayout = (_dec = (0, _deprecated.deprecated)('7.0.0', null, 'Use DrawerLayout from ui-drawer-layout instead.'), _dec2 = (0, _testable.testable)(), _dec3 = (0, _bidirectional.bidirectional)(), _dec4 = (0, _themeable.themeable)(null, styles), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(DrawerLayout, _Component);

  var _super = (0, _createSuper2.default)(DrawerLayout);

  function DrawerLayout(_props) {
    var _this;

    (0, _classCallCheck2.default)(this, DrawerLayout);
    _this = _super.call(this, _props);
    _this._content = null;

    _this.handleTrayContentRef = function (el) {
      _this._tray = el;
    };

    _this.handleContentSizeChange = function (_ref) {
      var width = _ref.width;

      _this.setState(function (state, props) {
        var nextState = _this.getNextState(props.minWidth, state.trayWidth, width, state.shouldOverlayTray);

        if (state.shouldOverlayTray !== nextState.shouldOverlayTray) {
          _this.notifyOverlayTrayChange(nextState.shouldOverlayTray);
        }

        return nextState;
      });
    };

    _this.handleTraySizeChange = function (_ref2) {
      var width = _ref2.width;

      _this.setState(function (state, props) {
        var nextState = _this.getNextState(props.minWidth, width, state.contentWidth, true);

        if (state.shouldOverlayTray !== nextState.shouldOverlayTray) {
          _this.notifyOverlayTrayChange(nextState.shouldOverlayTray);
        }

        return nextState;
      });
    };

    _this.handleTrayTransitionEnter = function () {
      var width = 0;

      if (_this._tray) {
        width = (0, _getBoundingClientRect.getBoundingClientRect)(_this._tray).width;
      }

      _this.handleTraySizeChange({
        width: width
      });
    };

    _this.handleTrayTransitionExit = function () {
      _this.handleTraySizeChange({
        width: 0
      });
    };

    _this.state = {
      shouldOverlayTray: false,
      trayWidth: 0,
      contentWidth: 0
    };
    _this._id = (0, _uid.uid)('DrawerLayout');
    return _this;
  }

  (0, _createClass2.default)(DrawerLayout, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        shouldOverlayTray: this.state.shouldOverlayTray
      };
    }
  }, {
    key: "shouldOverlayTray",
    value: function shouldOverlayTray(minWidth, trayWidth, contentWidth, trayIsOverlayed) {
      if (!this._content) return false;
      var minWidthPx = (0, _px.px)(minWidth, this._content);

      if (trayIsOverlayed) {
        return contentWidth - trayWidth < minWidthPx;
      } else {
        return contentWidth < minWidthPx;
      }
    }
  }, {
    key: "getNextState",
    value: function getNextState(minWidth, trayWidth, contentWidth, trayIsOverlayed) {
      var shouldOverlayTray = this.shouldOverlayTray(minWidth, trayWidth, contentWidth, trayIsOverlayed);
      return {
        trayWidth: trayWidth,
        contentWidth: contentWidth,
        shouldOverlayTray: shouldOverlayTray
      };
    }
  }, {
    key: "notifyOverlayTrayChange",
    value: function notifyOverlayTrayChange(shouldOverlayTray) {
      var onOverlayTrayChange = this.props.onOverlayTrayChange;

      if (typeof onOverlayTrayChange === 'function') {
        onOverlayTrayChange(shouldOverlayTray);
      }
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var _this2 = this;

      var trayCount = 0;
      var contentCount = 0;
      var shouldOverlayTray = this.shouldOverlayTray(this.props.minWidth, this.state.trayWidth, this.state.contentWidth, this.state.shouldOverlayTray);

      var children = _react.Children.map(this.props.children, function (child, index) {
        if ((0, _matchComponentTypes.matchComponentTypes)(child, [_DrawerTray.DrawerTray])) {
          var _safeCloneElement;

          trayCount++;
          return (0, _safeCloneElement3.safeCloneElement)(child, (_safeCloneElement = {
            key: child.props.label
          }, (0, _defineProperty2.default)(_safeCloneElement, _DrawerTray.DrawerTray.locatorAttribute, _this2._id), (0, _defineProperty2.default)(_safeCloneElement, "contentRef", _this2.handleTrayContentRef), (0, _defineProperty2.default)(_safeCloneElement, "onEnter", _this2.handleTrayTransitionEnter), (0, _defineProperty2.default)(_safeCloneElement, "onExit", _this2.handleTrayTransitionExit), _safeCloneElement));
        } else if ((0, _matchComponentTypes.matchComponentTypes)(child, [_DrawerContent.DrawerContent])) {
          var _safeCloneElement2;

          contentCount++;

          var handleContentRef = function handleContentRef(el) {
            _this2._content = el;

            if (typeof child.props.contentRef === 'function') {
              child.props.contentRef(el);
            }
          };

          return _this2.state.trayWidth !== null ? (0, _safeCloneElement3.safeCloneElement)(child, (_safeCloneElement2 = {
            key: child.props.label
          }, (0, _defineProperty2.default)(_safeCloneElement2, _DrawerContent.DrawerContent.locatorAttribute, _this2._id), (0, _defineProperty2.default)(_safeCloneElement2, "style", _this2.contentStyle), (0, _defineProperty2.default)(_safeCloneElement2, "onSizeChange", _this2.handleContentSizeChange), (0, _defineProperty2.default)(_safeCloneElement2, "contentRef", handleContentRef), (0, _defineProperty2.default)(_safeCloneElement2, "shouldTransition", !shouldOverlayTray), _safeCloneElement2)) : null;
        } else {
          return child;
        }
      });

      /*#__PURE__*/
      ( /*#__PURE__*/0, _console.error)(trayCount <= 1, "[DrawerLayout] Only one 'DrawerTray' per 'DrawerLayout' is supported.");

      /*#__PURE__*/
      ( /*#__PURE__*/0, _console.error)(contentCount <= 1, "[DrawerLayout] Only one 'DrawerContent' per 'DrawerLayout' is supported.");
      return children;
    }
  }, {
    key: "render",
    value: function render() {
      var props = (0, _defineProperty2.default)({}, DrawerLayout.locatorAttribute, this._id);
      return /*#__PURE__*/_react.default.createElement("div", Object.assign({}, props, {
        className: styles.drawerLayoutRoot
      }), this.renderChildren());
    }
  }, {
    key: "trayProps",
    get: function get() {
      var tray = _react.Children.toArray(this.props.children).filter(function (child) {
        return (0, _matchComponentTypes.matchComponentTypes)(child, [_DrawerTray.DrawerTray]);
      })[0];

      return tray.props;
    }
  }, {
    key: "trayPlacement",
    get: function get() {
      var placement = this.trayProps.placement;
      return this.rtl ? (0, _mirrorHorizontalPlacement.mirrorHorizontalPlacement)(placement, ' ') : placement;
    }
  }, {
    key: "contentMargin",
    get: function get() {
      var trayWidth = this.state.trayWidth || 0;
      return this.state.shouldOverlayTray ? 0 : trayWidth;
    }
  }, {
    key: "contentStyle",
    get: function get() {
      var shouldOverlayTray = this.shouldOverlayTray(this.props.minWidth, this.state.trayWidth, this.state.contentWidth, this.state.shouldOverlayTray);
      var marginLeft = 0;
      var marginRight = 0;

      if (!shouldOverlayTray) {
        if (this.trayPlacement === 'start') {
          marginLeft = this.contentMargin;
        }

        if (this.trayPlacement === 'end') {
          marginRight = this.contentMargin;
        }
      }

      return {
        marginLeft: "".concat(marginLeft, "px"),
        marginRight: "".concat(marginRight, "px")
      };
    }
  }]);
  DrawerLayout.displayName = "DrawerLayout";
  return DrawerLayout;
}(_react.Component), _class2.locatorAttribute = 'data-drawer-layout', _class2.propTypes = {
  /**
   * Exactly one of each of the following child types: `DrawerLayout.Content`, `DrawerLayout.Tray`
   */
  children: _Children.Children.oneOfEach([_DrawerContent.DrawerContent, _DrawerTray.DrawerTray]),

  /**
   * Min width for the `<DrawerLayout.Content />`
   */
  minWidth: _propTypes.default.string,

  /**
   * Function called when the `<DrawerLayout.Content />` is resized and hits the `minWidth` breakpoint
   * Called with a boolean value, `true` if the tray is now overlaying the content or `false` if
   * it is side by side
   */
  onOverlayTrayChange: _propTypes.default.func
}, _class2.defaultProps = {
  children: null,
  minWidth: '30rem',
  onOverlayTrayChange: function onOverlayTrayChange(shouldOverlayTray) {}
}, _class2.childContextTypes = {
  shouldOverlayTray: _propTypes.default.bool
}, _class2.Content = _DrawerContent.DrawerContent, _class2.Tray = _DrawerTray.DrawerTray, _temp)) || _class) || _class) || _class) || _class);
exports.DrawerLayout = DrawerLayout;
var _default = DrawerLayout;
exports.default = _default;
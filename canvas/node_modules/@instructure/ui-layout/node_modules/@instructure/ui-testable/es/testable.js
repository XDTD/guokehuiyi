import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { findDOMNode } from 'react-dom';
import { decorator } from '@instructure/ui-decorator';
var testable = process.env.NODE_ENV === 'production' && // If you would like to the `data-cid` attributes on elements even in your
// production builds (like if you are using them in your e2e builds or
// something), you need to set the environment variable
// ALWAYS_APPEND_UI_TESTABLE_LOCATORS=1
// We do this because adding those `data-cid` locators slows things down.
!process.env.ALWAYS_APPEND_UI_TESTABLE_LOCATORS ? function () {
  return function (Component) {
    return Component;
  };
} : decorator(function (ComposedComponent) {
  var displayName = ComposedComponent.displayName || ComposedComponent.name;
  var locator = {
    attribute: 'data-cid',
    value: displayName
  };
  var selector = "[".concat(locator.attribute, "~=\"").concat(locator.value, "\"]");

  var TestableComponent = /*#__PURE__*/function (_ComposedComponent) {
    _inherits(TestableComponent, _ComposedComponent);

    var _super = _createSuper(TestableComponent);

    function TestableComponent() {
      _classCallCheck(this, TestableComponent);

      return _super.apply(this, arguments);
    }

    _createClass(TestableComponent, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (_get(_getPrototypeOf(TestableComponent.prototype), "componentDidMount", this)) {
          var _get2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          (_get2 = _get(_getPrototypeOf(TestableComponent.prototype), "componentDidMount", this)).call.apply(_get2, [this].concat(args));
        }

        this.appendLocatorAttribute();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (_get(_getPrototypeOf(TestableComponent.prototype), "componentDidUpdate", this)) {
          var _get3;

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          (_get3 = _get(_getPrototypeOf(TestableComponent.prototype), "componentDidUpdate", this)).call.apply(_get3, [this].concat(args));
        }

        this.appendLocatorAttribute();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._testableUnmounted = true;

        if (_get(_getPrototypeOf(TestableComponent.prototype), "componentWillUnmount", this)) {
          var _get4;

          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          (_get4 = _get(_getPrototypeOf(TestableComponent.prototype), "componentWillUnmount", this)).call.apply(_get4, [this].concat(args));
        }

        clearTimeout(this.locatorTimeout);
      }
    }, {
      key: "appendLocatorAttribute",
      value: function appendLocatorAttribute() {
        var _this = this;

        this.locatorTimeout = setTimeout(function () {
          var _node;

          var node;

          if (_this._testableUnmounted) {
            return;
          }

          try {
            // Use this.DOMNode for components that render as non-native Portals...
            node = _this.DOMNode || findDOMNode(_this);
          } catch (e) {}

          if ((_node = node) === null || _node === void 0 ? void 0 : _node.getAttribute) {
            var attribute = node.getAttribute(locator.attribute);
            var values = typeof attribute === 'string' ? attribute.split(/\s+/) : [];

            if (!values.includes(locator.value)) {
              values.push(locator.value);
            }

            node.setAttribute(locator.attribute, values.join(' '));
          }
        });
      }
    }]);

    return TestableComponent;
  }(ComposedComponent);

  TestableComponent.selector = selector;
  return TestableComponent;
});
export default testable;
export { testable };
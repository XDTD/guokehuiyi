"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findFocusable = findFocusable;
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _ = require("./");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Adapted from jQuery UI core
 *
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 **/
function findFocusable(el, filter, shouldSearchRootNode) {
  var element = (0, _.findDOMNode)(el);

  if (!element || typeof element.querySelectorAll !== 'function') {
    return [];
  }

  var focusableSelector = 'a[href],frame,iframe,object,input:not([type=hidden]),select,textarea,button,*[tabindex]';
  var matches = Array.from(element.querySelectorAll(focusableSelector));

  if (shouldSearchRootNode && (0, _.elementMatches)(element, focusableSelector)) {
    matches = [].concat((0, _toConsumableArray2.default)(matches), [element]);
  }

  return matches.filter(function (el) {
    if (typeof filter === 'function') {
      return filter(el) && focusable(el);
    } else {
      return focusable(el);
    }
  });
}

function hidden(element) {
  var cs = (0, _.getComputedStyle)(element);
  return cs.display !== 'inline' && element.offsetWidth <= 0 && element.offsetHeight <= 0 || cs.display === 'none';
}

function positioned(element) {
  var POS = ['fixed', 'absolute'];
  if (POS.includes(element.style.position.toLowerCase())) return true;
  if (POS.includes((0, _.getComputedStyle)(element).getPropertyValue('position').toLowerCase())) return true;
  return false;
}

function visible(element) {
  /* eslint no-param-reassign:0 */
  while (element) {
    if (element === document.body) break;
    if (hidden(element)) return false;
    if (positioned(element)) break;
    element = element.parentNode;
  }

  return true;
}

function focusable(element) {
  return !element.disabled && visible(element);
}

var _default = findFocusable;
exports.default = _default;
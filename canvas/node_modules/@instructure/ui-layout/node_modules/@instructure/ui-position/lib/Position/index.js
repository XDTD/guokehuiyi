"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Position = exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _themeable = require("@instructure/ui-themeable/lib/themeable.js");

var _element = require("@instructure/ui-prop-types/lib/element.js");

var _ComponentIdentifier3 = require("@instructure/ui-react-utils/lib/ComponentIdentifier.js");

var _safeCloneElement3 = require("@instructure/ui-react-utils/lib/safeCloneElement.js");

var _callRenderProp = require("@instructure/ui-react-utils/lib/callRenderProp.js");

var _ensureSingleChild = require("@instructure/ui-react-utils/lib/ensureSingleChild.js");

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _addPositionChangeListener = require("@instructure/ui-dom-utils/lib/addPositionChangeListener.js");

var _findDOMNode = require("@instructure/ui-dom-utils/lib/findDOMNode.js");

var _uid = require("@instructure/uid");

var _shallowEqual = require("@instructure/ui-utils/lib/shallowEqual.js");

var _deepEqual = require("@instructure/ui-utils/lib/deepEqual.js");

var _debounce = require("@instructure/debounce");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _Portal = require("@instructure/ui-portal/lib/Portal");

var _calculateElementPosition = require("../calculateElementPosition");

var _PositionPropTypes = require("../PositionPropTypes");

var _theme = _interopRequireDefault(require("./theme"));

var _dec, _dec2, _class, _class2, _temp, _dec3, _dec4, _class3, _class4, _temp2, _dec5, _dec6, _dec7, _class5, _class6, _temp3;

var styles = {
  componentId: 'eGKPI',
  template: function template(theme) {
    return "\n\n.eGKPI_bGBk{box-sizing:border-box;z-index:".concat(theme.zIndex || 'inherit', "}");
  },
  'root': 'eGKPI_bGBk'
};
var PositionTarget = (_dec = (0, _deprecated.deprecated)('8.0.0', null, 'Use Position\'s `renderTarget` prop instead.'), _dec2 = (0, _testable.testable)(), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_ComponentIdentifier) {
  (0, _inherits2.default)(PositionTarget, _ComponentIdentifier);

  var _super = (0, _createSuper2.default)(PositionTarget);

  function PositionTarget() {
    (0, _classCallCheck2.default)(this, PositionTarget);
    return _super.apply(this, arguments);
  }

  return PositionTarget;
}(_ComponentIdentifier3.ComponentIdentifier), _class2.displayName = 'PositionTarget', _class2.locatorAttribute = 'data-position-target', _temp)) || _class) || _class);
var PositionContent = (_dec3 = (0, _deprecated.deprecated)('8.0.0', null, 'Use Posiition\'s `children` instead.'), _dec4 = (0, _testable.testable)(), _dec3(_class3 = _dec4(_class3 = (_temp2 = _class4 = /*#__PURE__*/function (_ComponentIdentifier2) {
  (0, _inherits2.default)(PositionContent, _ComponentIdentifier2);

  var _super2 = (0, _createSuper2.default)(PositionContent);

  function PositionContent() {
    (0, _classCallCheck2.default)(this, PositionContent);
    return _super2.apply(this, arguments);
  }

  return PositionContent;
}(_ComponentIdentifier3.ComponentIdentifier), _class4.displayName = 'PositionContent', _class4.propTypes = {
  children: _propTypes.default.node,
  placement: _PositionPropTypes.PositionPropTypes.placement
}, _class4.locatorAttribute = 'data-position-content', _temp2)) || _class3) || _class3);
/**
---
category: components/utilities
---
**/

var Position = (_dec5 = (0, _deprecated.deprecated)('8.0.0', {
  trackPosition: 'shouldTrackPosition',
  over: 'shouldPositionOverTarget'
}), _dec6 = (0, _testable.testable)(), _dec7 = (0, _themeable.themeable)(_theme.default, styles), _dec5(_class5 = _dec6(_class5 = _dec7(_class5 = (_temp3 = _class6 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Position, _Component);

  var _super3 = (0, _createSuper2.default)(Position);

  function Position(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Position);
    _this = _super3.call(this, props);
    _this._timeouts = [];

    _this.handlePortalOpen = function () {
      _this.position();

      if (_this.props.shouldTrackPosition || _this.props.trackPosition) {
        _this.startTracking();
      }

      _this._timeouts.push(setTimeout(function () {
        if (_this.state.positioned && typeof _this.props.onPositioned === 'function') {
          _this.props.onPositioned({
            top: _this.state.style.top,
            left: _this.state.style.left,
            placement: _this.state.placement
          });
        }
      }, 0));
    };

    _this.position = function () {
      _this.setState((0, _objectSpread2.default)({
        positioned: true
      }, _this.calculatePosition(_this.props)));
    };

    _this.state = (0, _objectSpread2.default)({
      positioned: false
    }, _this.calculatePosition(props));
    _this.position = (0, _debounce.debounce)(_this.position, 0, {
      leading: false,
      trailing: true
    });
    _this._id = _this.props.id || (0, _uid.uid)('Position');
    return _this;
  }

  (0, _createClass2.default)(Position, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
      return !(0, _deepEqual.deepEqual)(this.state, nextState) || !(0, _shallowEqual.shallowEqual)(this.props, nextProps) || !(0, _shallowEqual.shallowEqual)(this.context, nextContext);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.toggleLocatorAttributes(true);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      this.position();
      this.toggleLocatorAttributes(true);

      if (this.props.shouldTrackPosition !== prevProps.shouldTrackPosition) {
        this.props.shouldTrackPosition ? this.startTracking() : this.stopTracking();
      } else if (this.props.trackPosition !== prevProps.trackPosition) {
        this.props.trackPosition ? this.startTracking() : this.stopTracking();
      }

      var _this$state = this.state,
          style = _this$state.style,
          placement = _this$state.placement;

      if (style && prevState.style && (placement !== prevState.placement || style.top !== prevState.style.top || style.left !== prevState.style.left)) {
        this.props.onPositionChanged({
          top: style.top,
          left: style.left,
          placement: placement
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.position.cancel();
      this.stopTracking();

      this._timeouts.forEach(function (timeout) {
        return clearTimeout(timeout);
      });

      this.toggleLocatorAttributes(false);
    }
  }, {
    key: "toggleLocatorAttributes",
    value: function toggleLocatorAttributes(set) {
      // We have to find the actual DOM nodes and append the attributes
      // directly, as we can't be sure when safe cloning the child that
      // it will accept the data attribute as a prop
      this.toggleLocatorAttribute((0, _findDOMNode.findDOMNode)(this._content), Position.contentLocatorAttribute, set);
      this.toggleLocatorAttribute((0, _findDOMNode.findDOMNode)(this._target), Position.targetLocatorAttribute, set);
    }
  }, {
    key: "toggleLocatorAttribute",
    value: function toggleLocatorAttribute(node, locator, set) {
      if (node && node.hasAttribute) {
        if (set && !node.hasAttribute(locator)) {
          node.setAttribute(locator, this._id);
        }

        if (!set && node.hasAttribute(locator)) {
          node.removeAttribute(locator);
        }
      }
    }
  }, {
    key: "calculatePosition",
    value: function calculatePosition(props) {
      return (0, _calculateElementPosition.calculateElementPosition)(this._content, this._target, {
        placement: props.placement,
        offsetX: props.offsetX,
        offsetY: props.offsetY,
        constrain: props.constrain,
        container: props.mountNode,
        over: props.shouldPositionOverTarget || props.over
      });
    }
  }, {
    key: "startTracking",
    value: function startTracking() {
      this._listener = this._listener || (0, _addPositionChangeListener.addPositionChangeListener)(this._target, this.position);
    }
  }, {
    key: "stopTracking",
    value: function stopTracking() {
      if (this._listener) {
        this._listener.remove();

        this._listener = null;
      }
    }
  }, {
    key: "renderContent",
    value: function renderContent() {
      var _this2 = this;

      var content = _ComponentIdentifier3.ComponentIdentifier.pick(Position.Content, this.props.children);

      if (!content) {
        content = (0, _ensureSingleChild.ensureSingleChild)(this.props.children);
      }

      if (content) {
        var _classnames;

        content = (0, _safeCloneElement3.safeCloneElement)(content, (0, _defineProperty2.default)({
          ref: function ref(el) {
            _this2._content = el;
          },
          style: (0, _objectSpread2.default)({}, content.props.style, {}, this.state.style),
          className: (0, _classnames2.default)((_classnames = {}, (0, _defineProperty2.default)(_classnames, styles.root, true), (0, _defineProperty2.default)(_classnames, content.props.className, content.props.className), _classnames))
        }, Position.contentLocatorAttribute, this._id));
        content = /*#__PURE__*/_react.default.createElement(_Portal.Portal, {
          open: true,
          onOpen: this.handlePortalOpen,
          mountNode: this.props.mountNode,
          insertAt: this.props.insertAt
        }, content);
      }

      return content;
    }
  }, {
    key: "renderTarget",
    value: function renderTarget() {
      var _this3 = this;

      var target = _ComponentIdentifier3.ComponentIdentifier.pick(Position.Target, this.props.children);

      if (!target) {
        target = (0, _callRenderProp.callRenderProp)(this.props.renderTarget);
      }

      if (target) {
        return (0, _safeCloneElement3.safeCloneElement)(target, (0, _defineProperty2.default)({
          ref: function ref(el) {
            _this3._target = el;
          }
        }, Position.targetLocatorAttribute, this._id));
      } else if (this.props.target) {
        this._target = (0, _callRenderProp.callRenderProp)(this.props.target);
      } else {
        return null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var props = (0, _defineProperty2.default)({}, Position.locatorAttribute, this._id);
      return /*#__PURE__*/_react.default.createElement("span", props, this.renderTarget(), this.renderContent());
    }
  }]);
  Position.displayName = "Position";
  return Position;
}(_react.Component), _class6.Target = PositionTarget, _class6.Content = PositionContent, _class6.locatorAttribute = 'data-position', _class6.targetLocatorAttribute = 'data-position-target', _class6.contentLocatorAttribute = 'data-position-content', _class6.propTypes = {
  /**
   * The node to use as the position target
   */
  renderTarget: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /**
   * The target to be used when not using `renderTarget`
   */
  target: _propTypes.default.oneOfType([_element.element, _propTypes.default.func]),

  /**
   * The placement of the content in relation to the target
   */
  placement: _PositionPropTypes.PositionPropTypes.placement,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Position />` (defaults to `document.body`)
   */
  mountNode: _PositionPropTypes.PositionPropTypes.mountNode,

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: _propTypes.default.oneOf(['bottom', 'top']),

  /**
   * The parent in which to constrain the placement.
   * One of: 'window', 'scroll-parent', 'parent', 'none', an element,
   * or a function returning an element
   */
  constrain: _PositionPropTypes.PositionPropTypes.constrain,

  /**
   * The horizontal offset for the positioned content
   */
  offsetX: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * The vertical offset for the positioned content
   */
  offsetY: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * An id will be generated if not provided
   */
  id: _propTypes.default.string,

  /**
   * Whether or not position of the target should be tracked or just set statically on render
   */
  shouldTrackPosition: _propTypes.default.bool,

  /**
   * Whether or not you want the content to position over the target
   */
  shouldPositionOverTarget: _propTypes.default.bool,

  /**
   * Callback fired when the position changes
   */
  onPositionChanged: _propTypes.default.func,

  /**
   * Callback fired when `<Position />` content has been mounted and is initially positioned
   */
  onPositioned: _propTypes.default.func,

  /**
   * The content to be positioned
   */
  children: _propTypes.default.node,

  /* eslint-disable react/require-default-props */

  /**
  * __Deprecated - use `shouldTrackPosition`__
  */
  trackPosition: _propTypes.default.bool,

  /**
  * __Deprecated - use `shouldPositionOverTarget`__
  */
  over: _propTypes.default.bool
  /* eslint-enable react/require-default-props */

}, _class6.defaultProps = {
  renderTarget: void 0,
  target: void 0,
  placement: 'bottom center',
  mountNode: null,
  insertAt: 'bottom',
  constrain: 'window',
  offsetX: 0,
  offsetY: 0,
  id: void 0,
  shouldTrackPosition: true,
  shouldPositionOverTarget: false,
  onPositioned: function onPositioned(position) {},
  onPositionChanged: function onPositionChanged(position) {},
  children: null
}, _temp3)) || _class5) || _class5) || _class5);
exports.Position = Position;
var _default = Position;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.origin = origin;
exports.windowMessageListener = exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _decorator = require("@instructure/ui-decorator/lib/decorator.js");

var _ownerWindow = require("@instructure/ui-dom-utils/lib/ownerWindow.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * ---
 * category: utilities/react
 * ---
 * A decorator or higher order component that provides methods
 * for cross-origin communication (between iframes/windows).
 *
 * see https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
 * @module windowMessageListener
 * @param {Function} messageHandler a handler for messages recieved by the component
 * @param {Function} validSource an optional function that would restrict message handling to a specified source.
 * @returns {Function} a function that decorates a React component with the behavior
 */
var windowMessageListener = (0, _decorator.decorator)(function (ComposedComponent, messageHandler, validSource) {
  var _class, _temp;

  return _temp = _class = /*#__PURE__*/function (_ComposedComponent) {
    (0, _inherits2.default)(_class, _ComposedComponent);

    var _super = (0, _createSuper2.default)(_class);

    function _class() {
      var _this;

      (0, _classCallCheck2.default)(this, _class);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _this.handleMessage = function (e) {
        if (_this.sourceIsValid(e.source) && e.origin === origin((0, _assertThisInitialized2.default)(_this)) && e.data) {
          messageHandler.call((0, _assertThisInitialized2.default)(_this), e.data);
        }
      };

      return _this;
    }

    (0, _createClass2.default)(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var win = (0, _ownerWindow.ownerWindow)(this);
        win.addEventListener('message', this.handleMessage, false);

        if ((0, _get2.default)((0, _getPrototypeOf2.default)(_class.prototype), "componentDidMount", this)) {
          (0, _get2.default)((0, _getPrototypeOf2.default)(_class.prototype), "componentDidMount", this).call(this);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var win = (0, _ownerWindow.ownerWindow)(this);
        win.removeEventListener('message', this.handleMessage, false);

        if ((0, _get2.default)((0, _getPrototypeOf2.default)(_class.prototype), "componentDidMount", this)) {
          (0, _get2.default)((0, _getPrototypeOf2.default)(_class.prototype), "componentDidMount", this).call(this);
        }
      }
    }, {
      key: "sourceIsValid",
      value: function sourceIsValid(eventSource) {
        var expectedSource = typeof validSource === 'function' ? validSource.call(this) : validSource;

        if (!expectedSource) {
          return true;
        } else if (eventSource) {
          var sourceFrame = eventSource.frameElement;
          var sourceName = sourceFrame ? sourceFrame.getAttribute('name') : null;
          return sourceName === expectedSource;
        } else {
          return false;
        }
      }
    }]);
    return _class;
  }(ComposedComponent), _class.postMessage = function (target, message, origin) {
    target.postMessage(message, origin);
  }, _temp;
});
/**
 * Return the origin of the owner window of the DOM element
 *
 * see https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
 *
 * @param {DOMElement} node
 * @returns {String} the origin
 */

exports.windowMessageListener = windowMessageListener;

function origin(node) {
  var ownWindow = (0, _ownerWindow.ownerWindow)(node);
  var location = ownWindow.location;

  if (location.protocol === 'file:') {
    return '*';
  } else if (location.origin) {
    return location.origin;
  } else if (location.port) {
    return "".concat(location.protocol, "//").concat(location.hostname, ":").concat(location.port);
  } else {
    return "".concat(location.protocol, "//").concat(location.hostname);
  }
}

var _default = windowMessageListener;
exports.default = _default;
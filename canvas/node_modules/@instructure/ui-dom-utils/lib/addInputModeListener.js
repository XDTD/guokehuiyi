"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MODES = exports.addInputModeListener = exports.default = void 0;

var _addEventListener = require("./addEventListener.js");

var _canUseDOM = require("./canUseDOM.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var MODES = {
  keyboard: 'keyboard',
  pointer: 'pointer'
};
exports.MODES = MODES;
var _moveListeners = [];
var _downListeners = [];
var _mode = MODES.keyboard;
var _registeredCount = 0;
var _modeChangeHandlers = {};

var handleInitialPointerMove = function handleInitialPointerMove(event) {
  // Work around a Safari quirk that fires a mousemove on <html> whenever the
  // window blurs, even if you're tabbing out of the page. ¯\_(ツ)_/¯
  if (event.target.nodeName.toLowerCase() === 'html') {
    return;
  }

  handleInputModeChange(_mode, MODES.pointer);

  _moveListeners.forEach(function (listener) {
    return listener.remove();
  });
};

var handleInputModeChange = function handleInputModeChange(currentMode, newMode) {
  if (currentMode === newMode) return;
  _mode = newMode;
  Object.keys(_modeChangeHandlers).forEach(function (handlerId) {
    return _modeChangeHandlers[handlerId](currentMode, newMode);
  });
};

var handleKeyDown = function handleKeyDown() {
  handleInputModeChange(_mode, MODES.keyboard);
};

var handlePointerDown = function handlePointerDown() {
  handleInputModeChange(_mode, MODES.pointer);
};

var addMoveListeners = function addMoveListeners() {
  if (_moveListeners.length === 0) {
    _moveListeners.push((0, _addEventListener.addEventListener)(document, 'mousemove', handleInitialPointerMove, true));

    _moveListeners.push((0, _addEventListener.addEventListener)(document, 'mousedown', handleInitialPointerMove, true));

    _moveListeners.push((0, _addEventListener.addEventListener)(document, 'mouseup', handleInitialPointerMove, true));

    _moveListeners.push((0, _addEventListener.addEventListener)(document, 'pointermove', handleInitialPointerMove, true));

    _moveListeners.push((0, _addEventListener.addEventListener)(document, 'pointerdown', handleInitialPointerMove, true));

    _moveListeners.push((0, _addEventListener.addEventListener)(document, 'pointerup', handleInitialPointerMove, true));

    _moveListeners.push((0, _addEventListener.addEventListener)(document, 'touchmove', handleInitialPointerMove, true));

    _moveListeners.push((0, _addEventListener.addEventListener)(document, 'touchstart', handleInitialPointerMove, true));

    _moveListeners.push((0, _addEventListener.addEventListener)(document, 'touchend', handleInitialPointerMove, true));
  }
};

var addDownListeners = function addDownListeners() {
  if (_downListeners.length === 0) {
    _downListeners.push((0, _addEventListener.addEventListener)(document, 'keydown', handleKeyDown, true));

    _downListeners.push((0, _addEventListener.addEventListener)(document, 'mousedown', handlePointerDown, true));

    _downListeners.push((0, _addEventListener.addEventListener)(document, 'pointerdown', handlePointerDown, true));

    _downListeners.push((0, _addEventListener.addEventListener)(document, 'touchstart', handlePointerDown, true));
  }
};

var removeListeners = function removeListeners() {
  _moveListeners.forEach(function (listener) {
    return listener.remove();
  });

  _moveListeners = [];

  _downListeners.forEach(function (listener) {
    return listener.remove();
  });

  _downListeners = [];
};

var addInputModeListener = function addInputModeListener(_ref) {
  var onInputModeChange = _ref.onInputModeChange;
  var id = _registeredCount++;

  if (typeof onInputModeChange === 'function') {
    _modeChangeHandlers[id] = onInputModeChange;
  }

  if (_canUseDOM.canUseDOM) {
    addDownListeners();
    addMoveListeners();
  }

  return {
    isKeyboardMode: function isKeyboardMode() {
      return _mode === MODES.keyboard;
    },
    remove: function remove() {
      if (_registeredCount === 1) {
        removeListeners();
      }

      delete _modeChangeHandlers[id];
      _registeredCount--;
    }
  };
};

exports.addInputModeListener = addInputModeListener;
var _default = addInputModeListener;
exports.default = _default;
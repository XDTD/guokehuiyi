"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isVisible = isVisible;
exports.default = void 0;

var _findDOMNode = require("./findDOMNode.js");

var _getComputedStyle = require("./getComputedStyle.js");

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * ---
 * category: utilities/DOM
 * ---
 *
 * Determine if an element is visible.
 *
 * @param {ReactComponent|DomNode} el - component or DOM node
 * @param {boolean} recursive - by default all parent elements are checked
 * recursively to accurately determine visibility. setting this to `false`
 * will determine visibility based only on the styles of the given node.
 * @returns {boolean} if the element is visible
 */
function isVisible(el) {
  var recursive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var node = el && (0, _findDOMNode.findDOMNode)(el); // skip document or window nodes

  if (node === window || node === document || node === document.body) {
    return true;
  }

  var parent = node.parentNode; // skip text node, check parent

  if (node.nodeType === 3) {
    return isVisible(parent, recursive);
  }

  var style = (0, _getComputedStyle.getComputedStyle)(node); // physically and visually hidden

  if (style.display === 'none') {
    return false;
  } // visually hidden


  if (style.visibility === 'hidden' || style.opacity === '0') {
    return false;
  } // hidden by clipping


  if (style.overflow === 'hidden' && style.position === 'absolute' && style.clip !== 'auto') {
    var rect = style.clip.substring(5).slice(0, -1).split(', ');
    var zeros = true;
    rect.forEach(function (a) {
      if (a !== '0px') {
        zeros = false;
      }
    });

    if (zeros) {
      return false;
    }
  }

  if (recursive && parent) {
    // recursively check parent visibility
    return isVisible(parent);
  } else {
    return true;
  }
}

var _default = isVisible;
exports.default = _default;
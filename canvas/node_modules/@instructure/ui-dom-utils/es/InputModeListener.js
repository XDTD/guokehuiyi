import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { warn as _warn } from "@instructure/console";
import { addEventListener } from "./addEventListener.js";
import { canUseDOM } from "./canUseDOM.js";
export var MODES = {
  keyboard: 'keyboard',
  pointer: 'pointer'
};

var InputModeListenerImpl = /*#__PURE__*/function () {
  function InputModeListenerImpl() {
    var _this = this;

    _classCallCheck(this, InputModeListenerImpl);

    this._listeners = [];
    this._initialized = false;
    this._mode = MODES.keyboard;

    this.onInitialPointerMove = function (event) {
      // Work around a Safari quirk that fires a mousemove on <html> whenever the
      // window blurs, even if you're tabbing out of the page. ¯\_(ツ)_/¯
      if (event.target.nodeName.toLowerCase() === 'html') {
        return;
      }

      _this._mode = MODES.pointer;

      _this._listeners.forEach(function (listener) {
        return listener.remove();
      });
    };

    this.onKeyDown = function () {
      _this._mode = MODES.keyboard;
    };

    this.onPointerDown = function () {
      _this._mode = MODES.pointer;
    };

    this.init = function () {
      if (!canUseDOM || _this._initialized) return;
      addEventListener(document, 'keydown', _this.onKeyDown, true);
      addEventListener(document, 'mousedown', _this.onPointerDown, true);
      addEventListener(document, 'pointerdown', _this.onPointerDown, true);
      addEventListener(document, 'touchstart', _this.onPointerDown, true);

      _this.addInitialPointerMoveListeners();

      _this._initialized = true;
    };

    /*#__PURE__*/

    /*#__PURE__*/
    _warn(false, "[InputModeListener] is deprecated and will be removed in version 7.0.0. Use addInputModeListener instead.");

    this.init();
  }

  _createClass(InputModeListenerImpl, [{
    key: "addInitialPointerMoveListeners",
    value: function addInitialPointerMoveListeners() {
      this._listeners.push(addEventListener(document, 'mousemove', this.onInitialPointerMove, true));

      this._listeners.push(addEventListener(document, 'mousedown', this.onInitialPointerMove, true));

      this._listeners.push(addEventListener(document, 'mouseup', this.onInitialPointerMove, true));

      this._listeners.push(addEventListener(document, 'pointermove', this.onInitialPointerMove, true));

      this._listeners.push(addEventListener(document, 'pointerdown', this.onInitialPointerMove, true));

      this._listeners.push(addEventListener(document, 'pointerup', this.onInitialPointerMove, true));

      this._listeners.push(addEventListener(document, 'touchmove', this.onInitialPointerMove, true));

      this._listeners.push(addEventListener(document, 'touchstart', this.onInitialPointerMove, true));

      this._listeners.push(addEventListener(document, 'touchend', this.onInitialPointerMove, true));
    }
  }, {
    key: "isKeyboardMode",
    value: function isKeyboardMode() {
      this.init();
      return this._mode === MODES.keyboard;
    }
  }, {
    key: "mode",
    get: function get() {
      this.init();
      return this._mode;
    }
  }]);

  return InputModeListenerImpl;
}();

var InputModeListener = new InputModeListenerImpl();
export default InputModeListener;
export { InputModeListener };
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { View } from '@instructure/ui-view';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
import { passthroughProps, deprecated } from '@instructure/ui-react-utils';
import { Transition } from '@instructure/ui-motion';
var styles = {
  componentId: 'dpCPB',
  template: function template(theme) {
    return "\n\n.dpCPB_bGBk{font-family:".concat(theme.fontFamily || 'inherit', ";font-size:").concat(theme.fontSize || 'inherit', ";font-weight:").concat(theme.fontWeight || 'inherit', ";line-height:").concat(theme.lineHeight || 'inherit', "}\n\n.dpCPB_caGd,.dpCPB_bGBk{box-sizing:border-box}\n\n.dpCPB_caGd{background:").concat(theme.background || 'inherit', ";border-color:").concat(theme.borderColor || 'inherit', ";border-style:").concat(theme.borderStyle || 'inherit', ";border-width:").concat(theme.borderWidth || 'inherit', ";color:").concat(theme.color || 'inherit', ";width:100%}\n\n.dpCPB_cLQw{overflow:auto}\n\n.dpCPB_ddES .dpCPB_caGd,.dpCPB_eLeB .dpCPB_caGd{border-bottom:none;border-left:none;border-right:none}");
  },
  'root': 'dpCPB_bGBk',
  'content': 'dpCPB_caGd',
  'overflow': 'dpCPB_cLQw',
  'default': 'dpCPB_ddES',
  'secondary': 'dpCPB_eLeB'
};
import theme from "./theme.js";
/**
---
parent: Tabs
id: Tabs.Panel
---
**/

var Panel = (_dec = deprecated('8.0.0', {
  title: 'renderTitle',
  selected: 'isSelected',
  disabled: 'isDisabled'
}), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(Panel, _Component);

  var _super = _createSuper(Panel);

  function Panel() {
    _classCallCheck(this, Panel);

    return _super.apply(this, arguments);
  }

  _createClass(Panel, [{
    key: "render",
    value: function render() {
      var _classnames, _classnames2;

      var _this$props = this.props,
          selected = _this$props.selected,
          disabled = _this$props.disabled,
          labelledBy = _this$props.labelledBy,
          variant = _this$props.variant,
          id = _this$props.id,
          maxHeight = _this$props.maxHeight,
          minHeight = _this$props.minHeight,
          padding = _this$props.padding,
          textAlign = _this$props.textAlign,
          children = _this$props.children,
          elementRef = _this$props.elementRef,
          props = _objectWithoutProperties(_this$props, ["selected", "disabled", "labelledBy", "variant", "id", "maxHeight", "minHeight", "padding", "textAlign", "children", "elementRef"]); // TODO: clean this up when selected and disabled props are removed in 7.0:


      var isSelected = selected || props.isSelected;
      var isDisabled = disabled || props.isDisabled;
      var isHidden = !isSelected || !!isDisabled;
      return /*#__PURE__*/React.createElement("div", Object.assign({}, passthroughProps(props), {
        className: classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles[variant], true), _classnames)),
        role: "tabpanel",
        id: id,
        "aria-labelledby": labelledBy,
        "aria-hidden": isHidden ? 'true' : null,
        ref: elementRef
      }), /*#__PURE__*/React.createElement(Transition, {
        type: "fade",
        in: !isHidden,
        unmountOnExit: true,
        transitionExit: false
      }, /*#__PURE__*/React.createElement(View, {
        className: classnames((_classnames2 = {}, _defineProperty(_classnames2, styles.content, true), _defineProperty(_classnames2, styles.overflow, maxHeight), _classnames2)),
        maxHeight: maxHeight,
        minHeight: minHeight,
        as: "div",
        padding: padding,
        textAlign: textAlign
      }, children)));
    }
  }]);

  Panel.displayName = "Panel";
  return Panel;
}(Component), _class2.propTypes = {
  /**
   * The content that will be rendered in the corresponding <Tab /> and will label
   * this `<Tabs.Panel />` for screen readers
   */
  renderTitle: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,
  children: PropTypes.node,
  variant: PropTypes.oneOf(['default', 'secondary']),
  isSelected: PropTypes.bool,
  isDisabled: PropTypes.bool,
  maxHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  minHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  id: PropTypes.string,
  labelledBy: PropTypes.string,
  padding: ThemeablePropTypes.spacing,
  textAlign: PropTypes.oneOf(['start', 'center', 'end']),

  /**
   * __Deprecated - use `renderTitle` instead__
   */
  title: PropTypes.node,

  /**
   * __Deprecated - use `isSelected` instead__
   */
  selected: PropTypes.bool,

  /**
   * __Deprecated - use `isDisabled` instead__
   */
  disabled: PropTypes.bool,
  elementRef: PropTypes.func
}, _class2.defaultProps = {
  children: null,
  id: void 0,
  disabled: void 0,
  isDisabled: false,
  maxHeight: void 0,
  minHeight: void 0,
  textAlign: 'start',
  variant: 'default',
  labelledBy: null,
  selected: void 0,
  isSelected: false,
  padding: 'small',
  title: void 0,
  elementRef: function elementRef(el) {}
}, _temp)) || _class) || _class);
export default Panel;
export { Panel };
import * as React from 'react';

export type BadgeType = "count" | "notification";

export type BadgeVariant = "primary" | "success" | "danger";

export interface BadgeProps {
    count?: number;
    /**
     * The number at which the count gets truncated by
     * formatOverflowText. For example, a countUntil of 100
     * would stop the count at 99.
     */
    countUntil?: number;
    children?: React.ReactElement<any>;
    /**
     * Render Badge as a counter (`count`) or as a smaller dot (`notification`) with
     * no count number displayed.
     */
    type?: BadgeType;
    /**
     * Render Badge as an inline html element that is not positioned relative
     * to a child.
     */
    standalone?: boolean;
    /**
     * Make the Badge slowly pulse twice to get the user's attention.
     */
    pulse?: boolean;
    variant?: BadgeVariant;
    /**
     * Supported values are `top start`, `top end`, `end center`, `bottom end`,
     * `bottom start`, and `start center`
     */
    placement?: any;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * provides a reference to the underlying html root element
     */
    elementRef?: (...args: any[])=>any;
    formatOverflowText?: (...args: any[])=>any;
    formatOutput?: (...args: any[])=>any;
    as?: any;
}

export class Badge extends React.Component<BadgeProps, any> {
    render(): JSX.Element;

}


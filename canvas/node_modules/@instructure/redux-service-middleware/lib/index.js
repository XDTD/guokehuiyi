"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CALL_SERVICE = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var CALL_SERVICE = 'inst-redux-service-middleware-CALL_SERVICE';
exports.CALL_SERVICE = CALL_SERVICE;

function createServiceMiddleware(origServices) {
  var services = Object.assign(Object.create(null), origServices);
  return function (store) {
    return function (next) {
      return function (action) {
        if (action.type !== CALL_SERVICE) return next(action);
        var _action$payload = action.payload,
            serviceKey = _action$payload.service,
            method = _action$payload.method,
            args = _action$payload.args;
        var service = services[serviceKey];
        if (!service) throw new Error("service ".concat(serviceKey, " undefined"));
        if (!service[method]) throw new Error("service method ".concat(method, " undefined"));
        var realArgs = args ? args.slice() : [];
        realArgs.push(store);
        var response = service[method].apply(service, _toConsumableArray(realArgs)); // Pass on this event after the service has done what the service wants w/ current state

        next(action); // Then return the service

        return response;
      };
    };
  };
}

var _default = createServiceMiddleware;
exports.default = _default;
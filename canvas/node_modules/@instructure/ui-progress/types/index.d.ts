import * as React from 'react';

export type ProgressSize = "x-small" | "small" | "medium" | "large";

export type ProgressVariant = "bar" | "circle" | "bar-inverse" | "circle-inverse";

export interface ProgressProps {
    /**
     * A label is required for accessibility
     */
    label: string;
    /**
     * Different-sized progress bars and circles
     */
    size?: ProgressSize;
    /**
     * Maximum value (defaults to 100)
     */
    valueMax?: number;
    /**
     * Receives the progress of the event
     */
    valueNow?: number;
    /**
     * A function that returns the current value formatted for screen readers
     */
    formatValueText?: (...args: any[])=>any;
    /**
     * A function to format the displayed value. If null the value will not display.
     */
    formatDisplayedValue?: (...args: any[])=>any;
    /**
     * Animate the progress meter to the current value when the component
     * has mounted
     */
    animateOnMount?: boolean;
    /**
     * The bar changes to your theme's success color when complete
     */
    successColor?: boolean;
    /**
     * Choose either a progress bar or circle. The `-inverse` variants are for
     * when you need the Progress component to appear on inverse backgrounds
     */
    variant?: ProgressVariant;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    elementRef?: (...args: any[])=>any;
}

export class Progress extends React.Component<ProgressProps, any> {
    render(): JSX.Element;

}




export type ProgressBarSize = "x-small" | "small" | "medium" | "large";

export type ProgressBarRenderValue = ((...args: any[])=>any) | React.ReactNode;

export type ProgressBarColor = "primary" | "primary-inverse";

export type ProgressBarMeterColor = ((...args: any[])=>any) | "info" | "warning" | "danger" | "alert" | "success" | "brand";

export interface ProgressBarProps {
    /**
     * A label is required for accessibility
     */
    screenReaderLabel: string;
    /**
     * Control the height of the progress bar
     */
    size?: ProgressBarSize;
    /**
     * Maximum value (defaults to 100)
     */
    valueMax?: number;
    /**
     * Receives the progress of the event
     */
    valueNow?: number;
    /**
     * A function for formatting the text provided to screen readers via `aria-valuenow`
     */
    formatScreenReaderValue?: (...args: any[])=>any;
    /**
     * A function to format the displayed value. If null the value will not display.
     * Takes `valueNow` and `valueMax` as parameters.
     */
    renderValue?: ProgressBarRenderValue;
    /**
     * Controls the overall color scheme of the component
     */
    color?: ProgressBarColor;
    /**
     * Control the color of the progress meter. Defaults to showing theme success
     * color on completion, based on `valueNow` and `valueMax`.
     */
    meterColor?: ProgressBarMeterColor;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * Provides a reference to the component's root HTML element
     */
    elementRef?: (...args: any[])=>any;
    /**
     * Set the element type of the component's root
     */
    as?: any;
}

export class ProgressBar extends React.Component<ProgressBarProps, any> {
    render(): JSX.Element;

}




export type ProgressCircleSize = "x-small" | "small" | "medium" | "large";

export type ProgressCircleFormatScreenReaderValue = ((...args: any[])=>any) | React.ReactNode;

export type ProgressCircleRenderValue = ((...args: any[])=>any) | React.ReactNode;

export type ProgressCircleColor = "primary" | "primary-inverse";

export type ProgressCircleMeterColor = ((...args: any[])=>any) | "info" | "warning" | "danger" | "alert" | "success" | "brand";

export interface ProgressCircleProps {
    /**
     * A label is required for accessibility
     */
    screenReaderLabel: string;
    /**
     * Control the size of the progress circle
     */
    size?: ProgressCircleSize;
    /**
     * Maximum value (defaults to 100)
     */
    valueMax?: number;
    /**
     * Receives the progress of the event
     */
    valueNow?: number;
    /**
     * A function for formatting the text provided to screen readers via `aria-valuenow`
     */
    formatScreenReaderValue?: ProgressCircleFormatScreenReaderValue;
    /**
     * A function to format the displayed value. If null the value will not display.
     * Takes `valueNow` and `valueMax` as parameters.
     */
    renderValue?: ProgressCircleRenderValue;
    /**
     * Controls the overall color scheme of the component
     */
    color?: ProgressCircleColor;
    /**
     * Control the color of the progress meter. Defaults to showing theme success
     * color on completion, based on `valueNow` and `valueMax`.
     */
    meterColor?: ProgressCircleMeterColor;
    /**
     * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
     * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
     * familiar CSS-like shorthand. For example: `margin="small auto large"`.
     */
    margin?: any;
    /**
     * Provides a reference to the component's root HTML element
     */
    elementRef?: (...args: any[])=>any;
    /**
     * Set the element type of the component's root
     */
    as?: any;
    /**
     * Animate the progress meter to the current value when the component
     * has mounted
     */
    shouldAnimateOnMount?: boolean;
    animationDelay?: number;
}

export class ProgressCircle extends React.Component<ProgressCircleProps, any> {
    render(): JSX.Element;

}


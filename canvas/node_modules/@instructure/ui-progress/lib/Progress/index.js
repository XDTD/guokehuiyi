"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Progress = exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _deprecated = require("@instructure/ui-react-utils/lib/deprecated.js");

var _ThemeablePropTypes = require("@instructure/ui-themeable/lib/ThemeablePropTypes.js");

var _testable = require("@instructure/ui-testable/lib/testable.js");

var _index = require("../ProgressBar/index.js");

var _index2 = require("../ProgressCircle/index.js");

var _dec, _dec2, _class, _class2, _temp;

/**
---
category: components
---
**/
var Progress = (_dec = (0, _deprecated.deprecated)('8.0.0', null, 'Use ProgressBar or ProgressCircle instead.'), _dec2 = (0, _testable.testable)(), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Progress, _Component);

  var _super = (0, _createSuper2.default)(Progress);

  function Progress() {
    (0, _classCallCheck2.default)(this, Progress);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(Progress, [{
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          label = _this$props.label,
          successColor = _this$props.successColor,
          animateOnMount = _this$props.animateOnMount,
          variant = _this$props.variant,
          props = (0, _objectWithoutProperties2.default)(_this$props, ["label", "successColor", "animateOnMount", "variant"]);
      var childVariant = variant === 'bar-inverse' || variant === 'circle-inverse' ? 'primary-inverse' : 'primary';
      var formatValueText = typeof this.props.formatValueText === 'function' ? function (_ref) {
        var valueNow = _ref.valueNow,
            valueMax = _ref.valueMax;
        return _this.props.formatValueText(valueNow, valueMax);
      } : void 0;
      var formatDisplayedValue = typeof this.props.formatDisplayedValue === 'function' ? function (_ref2) {
        var valueNow = _ref2.valueNow,
            valueMax = _ref2.valueMax;
        return _this.props.formatDisplayedValue(valueNow, valueMax);
      } : void 0;
      var isCircle = variant === 'circle' || variant === 'circle-inverse'; // translate legacy Progress props into props accepted by the new components

      var updatedProps = (0, _objectSpread2.default)({}, props, {
        formatScreenReaderValue: formatValueText,
        renderValue: formatDisplayedValue,
        screenReaderLabel: label,
        color: childVariant,
        meterColor: !successColor ? 'brand' : void 0,
        shouldAnimateOnMount: isCircle && animateOnMount
      });
      return isCircle ? /*#__PURE__*/_react.default.createElement(_index2.ProgressCircle, updatedProps) : /*#__PURE__*/_react.default.createElement(_index.ProgressBar, updatedProps);
    }
  }]);
  Progress.displayName = "Progress";
  return Progress;
}(_react.Component), _class2.propTypes = {
  /**
   * A label is required for accessibility
   */
  label: _propTypes.default.string.isRequired,

  /**
   * Different-sized progress bars and circles
   */
  size: _propTypes.default.oneOf(['x-small', 'small', 'medium', 'large']),

  /**
   * Maximum value (defaults to 100)
   */
  valueMax: _propTypes.default.number,

  /**
   * Receives the progress of the event
   */
  valueNow: _propTypes.default.number,

  /**
   * A function that returns the current value formatted for screen readers
   */
  formatValueText: _propTypes.default.func,

  /**
   * A function to format the displayed value. If null the value will not display.
   */
  formatDisplayedValue: _propTypes.default.func,

  /**
   * Animate the progress meter to the current value when the component
   * has mounted
   */
  animateOnMount: _propTypes.default.bool,

  /**
   * The bar changes to your theme's success color when complete
   */
  successColor: _propTypes.default.bool,

  /**
   * Choose either a progress bar or circle. The `-inverse` variants are for
   * when you need the Progress component to appear on inverse backgrounds
   */
  variant: _propTypes.default.oneOf(['bar', 'circle', 'bar-inverse', 'circle-inverse']),

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: _ThemeablePropTypes.ThemeablePropTypes.spacing,
  elementRef: _propTypes.default.func
}, _class2.defaultProps = {
  formatValueText: function formatValueText(valueNow, valueMax) {
    return "".concat(valueNow, " / ").concat(valueMax);
  },
  formatDisplayedValue: void 0,
  size: 'medium',
  animateOnMount: false,
  valueMax: 100,
  valueNow: 0,
  variant: 'bar',
  successColor: true,
  elementRef: function elementRef(el) {},
  margin: void 0
}, _temp)) || _class) || _class);
exports.Progress = Progress;
var _default = Progress;
exports.default = _default;
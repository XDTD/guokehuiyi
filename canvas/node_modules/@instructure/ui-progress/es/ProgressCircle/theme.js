/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var radius = {
  xSmall: 1,
  small: 1.8,
  medium: 2.75,
  large: 3.5
};
var size = {
  xSmall: 3,
  small: 5,
  medium: 7,
  large: 9
};
var strokeWidth = {
  xSmall: 0.185,
  small: 0.5,
  medium: 0.625,
  large: 0.875
}; // Necessary to get the 1px border line to go "under" the meter
// strokeWidth is divided in half because SVG strokeWidth is
// centered along the path of the stroke, unlike CSS

var borderWidth = 0.0625;
var borderOffsetRadius = {
  xSmall: radius.xSmall - strokeWidth.xSmall / 2 + borderWidth,
  small: radius.small - strokeWidth.small / 2 + borderWidth,
  medium: radius.medium - strokeWidth.medium / 2 + borderWidth,
  large: radius.large - strokeWidth.large / 2 + borderWidth
};

var circumference = function circumference(r) {
  return (2 * Math.PI * r).toFixed(3);
};

var transform = function transform(s) {
  return s / 2;
};

export default function generator(_ref) {
  var colors = _ref.colors,
      typography = _ref.typography;
  return {
    fontFamily: typography.fontFamily,
    fontWeight: typography.fontWeightNormal,
    lineHeight: typography.lineHeightCondensed,
    xSmallSize: "".concat(size.xSmall, "em"),
    xSmallRadius: "".concat(radius.xSmall, "em"),
    xSmallCircumference: "".concat(circumference(radius.xSmall), "em"),
    xSmallTransform: "".concat(transform(size.xSmall), "em"),
    xSmallStrokeWidth: "".concat(strokeWidth.xSmall, "em"),
    xSmallBorderOffset: "".concat(borderOffsetRadius.xSmall, "em"),
    smallSize: "".concat(size.small, "em"),
    smallRadius: "".concat(radius.small, "em"),
    smallCircumference: "".concat(circumference(radius.small), "em"),
    smallTransform: "".concat(transform(size.small), "em"),
    smallStrokeWidth: "".concat(strokeWidth.small, "em"),
    smallBorderOffset: "".concat(borderOffsetRadius.small, "em"),
    mediumSize: "".concat(size.medium, "em"),
    mediumRadius: "".concat(radius.medium, "em"),
    mediumCircumference: "".concat(circumference(radius.medium), "em"),
    mediumTransform: "".concat(transform(size.medium), "em"),
    mediumStrokeWidth: "".concat(strokeWidth.medium, "em"),
    mediumBorderOffset: "".concat(borderOffsetRadius.medium, "em"),
    largeSize: "".concat(size.large, "em"),
    largeRadius: "".concat(radius.large, "em"),
    largeCircumference: "".concat(circumference(radius.large), "em"),
    largeTransform: "".concat(transform(size.large), "em"),
    largeStrokeWidth: "".concat(strokeWidth.large, "em"),
    largeBorderOffset: "".concat(borderOffsetRadius.large, "em"),
    color: colors.textDarkest,
    colorInverse: colors.textLightest,
    trackColor: colors.backgroundLightest,
    trackColorInverse: 'transparent',
    trackBorderColor: colors.borderMedium,
    trackBorderColorInverse: colors.borderLightest,
    // variables are split out for inverse to allow
    // color value changes for inverse-high-constrast
    meterColorBrand: colors.backgroundBrand,
    meterColorBrandInverse: colors.backgroundBrand,
    meterColorInfo: colors.backgroundInfo,
    meterColorInfoInverse: colors.backgroundInfo,
    meterColorSuccess: colors.backgroundSuccess,
    meterColorSuccessInverse: colors.backgroundSuccess,
    meterColorDanger: colors.backgroundDanger,
    meterColorDangerInverse: colors.backgroundDanger,
    meterColorAlert: colors.backgroundAlert,
    meterColorAlertInverse: colors.backgroundAlert,
    meterColorWarning: colors.backgroundWarning,
    meterColorWarningInverse: colors.backgroundWarning
  };
}

generator.canvas = function (variables) {
  return {
    color: variables['ic-brand-font-color-dark'],
    meterColorBrand: variables['ic-brand-primary']
  };
};

generator['canvas-a11y'] = generator['canvas-high-contrast'] = function (_ref2) {
  var colors = _ref2.colors;
  return {
    meterColorBrandInverse: colors.backgroundLightest,
    meterColorSuccessInverse: colors.backgroundLightest,
    meterColorInfoInverse: colors.backgroundLightest,
    meterColorAlertInverse: colors.backgroundLightest,
    meterColorWarningInverse: colors.backgroundLightest,
    meterColorDangerInverse: colors.backgroundLightest
  };
};
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";

var _dec, _dec2, _class, _class2, _temp;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { ScreenReaderContent } from '@instructure/ui-a11y-content';
import { View } from '@instructure/ui-view';
import { callRenderProp, passthroughProps } from '@instructure/ui-react-utils';
import { testable } from '@instructure/ui-testable';
import { themeable, ThemeablePropTypes } from '@instructure/ui-themeable';
var styles = {
  componentId: 'wIZqC',
  template: function template(theme) {
    return "\n\n.wIZqC_bGBk{display:inline-block;font-family:".concat(theme.fontFamily || 'inherit', ";font-size:1rem;font-weight:").concat(theme.fontWeight || 'inherit', ";line-height:").concat(theme.lineHeight || 'inherit', ";overflow:hidden;position:relative;vertical-align:middle}\n\n.wIZqC_cJVF{transform:rotate(-90deg)}\n\n.wIZqC_cwzs,.wIZqC_cJVF{display:block;left:0;position:absolute;top:0}\n\n.wIZqC_cwzs{transform:translateZ(0);transition:all 0.5s;transition-delay:1s}\n\n.wIZqC_cwzs,.wIZqC_fqzO{border-radius:50%;height:100%;width:100%}\n\n.wIZqC_fqzO{align-items:center;box-sizing:border-box;display:flex;justify-content:center;line-height:1;padding:1.5rem;text-align:center;word-wrap:break-word}\n\n[dir=ltr] .wIZqC_fqzO,[dir=rtl] .wIZqC_fqzO{text-align:center}\n\n.wIZqC_dHtp,.wIZqC_cDWE,.wIZqC_eCEP{fill:none}\n\n.wIZqC_eCEP{opacity:1;transform:translateZ(0);transition:all 0.5s;transition-delay:0.2s}\n\n.wIZqC_dHtp{opacity:1;transform:translateZ(0) scale(1);transition:all 0.5s}\n\n.wIZqC_cDWE{transform:translateZ(0);transition:stroke-dashoffset 1s}\n\n.wIZqC_eCSh .wIZqC_eCEP{stroke:").concat(theme.trackColor || 'inherit', "}\n\n.wIZqC_eCSh .wIZqC_fqzO{color:").concat(theme.color || 'inherit', "}\n\n.wIZqC_eCSh .wIZqC_dHtp{stroke:").concat(theme.trackBorderColor || 'inherit', "}\n\n.wIZqC_eCSh.wIZqC_fEhA .wIZqC_cDWE{stroke:").concat(theme.meterColorBrand || 'inherit', "}\n\n.wIZqC_eCSh.wIZqC_diLM .wIZqC_cDWE{stroke:").concat(theme.meterColorInfo || 'inherit', "}\n\n.wIZqC_eCSh.wIZqC_dyHF .wIZqC_cDWE{stroke:").concat(theme.meterColorWarning || 'inherit', "}\n\n.wIZqC_eCSh.wIZqC_dpQv .wIZqC_cDWE{stroke:").concat(theme.meterColorDanger || 'inherit', "}\n\n.wIZqC_eCSh.wIZqC_fJaO .wIZqC_cDWE{stroke:").concat(theme.meterColorAlert || 'inherit', "}\n\n.wIZqC_eCSh.wIZqC_buIS .wIZqC_cDWE{stroke:").concat(theme.meterColorSuccess || 'inherit', "}\n\n.wIZqC_bFtJ .wIZqC_eCEP{stroke:").concat(theme.trackColorInverse || 'inherit', "}\n\n.wIZqC_bFtJ .wIZqC_fqzO{color:").concat(theme.colorInverse || 'inherit', "}\n\n.wIZqC_bFtJ .wIZqC_dHtp{stroke:").concat(theme.trackBorderColorInverse || 'inherit', "}\n\n.wIZqC_bFtJ.wIZqC_fEhA .wIZqC_cDWE{stroke:").concat(theme.meterColorBrandInverse || 'inherit', "}\n\n.wIZqC_bFtJ.wIZqC_diLM .wIZqC_cDWE{stroke:").concat(theme.meterColorInfoInverse || 'inherit', "}\n\n.wIZqC_bFtJ.wIZqC_dyHF .wIZqC_cDWE{stroke:").concat(theme.meterColorWarningInverse || 'inherit', "}\n\n.wIZqC_bFtJ.wIZqC_dpQv .wIZqC_cDWE{stroke:").concat(theme.meterColorDangerInverse || 'inherit', "}\n\n.wIZqC_bFtJ.wIZqC_fJaO .wIZqC_cDWE{stroke:").concat(theme.meterColorAlertInverse || 'inherit', "}\n\n.wIZqC_bFtJ.wIZqC_buIS .wIZqC_cDWE{stroke:").concat(theme.meterColorSuccessInverse || 'inherit', "}\n\n.wIZqC_dIzR,.wIZqC_dIzR .wIZqC_cJVF{height:").concat(theme.xSmallSize || 'inherit', ";width:").concat(theme.xSmallSize || 'inherit', "}\n\n.wIZqC_dIzR .wIZqC_fqzO{padding:0.5rem}\n\n.wIZqC_dIzR .wIZqC_dHtp,.wIZqC_dIzR .wIZqC_eCEP{transform-origin:").concat(theme.xSmallTransform || 'inherit', " ").concat(theme.xSmallTransform || 'inherit', "}\n\n.wIZqC_dIzR .wIZqC_cDWE,.wIZqC_dIzR .wIZqC_eCEP{stroke-width:").concat(theme.xSmallStrokeWidth || 'inherit', "}\n\n.wIZqC_dIzR .wIZqC_cDWE{stroke-dasharray:").concat(theme.xSmallCircumference || 'inherit', "}\n\n.wIZqC_VCXp,.wIZqC_VCXp .wIZqC_cJVF{height:").concat(theme.smallSize || 'inherit', ";width:").concat(theme.smallSize || 'inherit', "}\n\n.wIZqC_VCXp .wIZqC_dHtp,.wIZqC_VCXp .wIZqC_eCEP{transform-origin:").concat(theme.smallTransform || 'inherit', " ").concat(theme.smallTransform || 'inherit', "}\n\n.wIZqC_VCXp .wIZqC_cDWE,.wIZqC_VCXp .wIZqC_eCEP{stroke-width:").concat(theme.smallStrokeWidth || 'inherit', "}\n\n.wIZqC_VCXp .wIZqC_cDWE{stroke-dasharray:").concat(theme.smallCircumference || 'inherit', "}\n\n.wIZqC_fKcQ,.wIZqC_fKcQ .wIZqC_cJVF{height:").concat(theme.mediumSize || 'inherit', ";width:").concat(theme.mediumSize || 'inherit', "}\n\n.wIZqC_fKcQ .wIZqC_dHtp,.wIZqC_fKcQ .wIZqC_eCEP{transform-origin:").concat(theme.mediumTransform || 'inherit', " ").concat(theme.mediumTransform || 'inherit', "}\n\n.wIZqC_fKcQ .wIZqC_cDWE,.wIZqC_fKcQ .wIZqC_eCEP{stroke-width:").concat(theme.mediumStrokeWidth || 'inherit', "}\n\n.wIZqC_fKcQ .wIZqC_cDWE{stroke-dasharray:").concat(theme.mediumCircumference || 'inherit', "}\n\n.wIZqC_cnhd,.wIZqC_cnhd .wIZqC_cJVF{height:").concat(theme.largeSize || 'inherit', ";width:").concat(theme.largeSize || 'inherit', "}\n\n.wIZqC_cnhd .wIZqC_dHtp,.wIZqC_cnhd .wIZqC_eCEP{transform-origin:").concat(theme.largeTransform || 'inherit', " ").concat(theme.largeTransform || 'inherit', "}\n\n.wIZqC_cnhd .wIZqC_cDWE,.wIZqC_cnhd .wIZqC_eCEP{stroke-width:").concat(theme.largeStrokeWidth || 'inherit', "}\n\n.wIZqC_cnhd .wIZqC_cDWE{stroke-dasharray:").concat(theme.largeCircumference || 'inherit', "}\n\n.wIZqC_fjPu .wIZqC_eCEP{opacity:0;transform:translateZ(0)}\n\n.wIZqC_fjPu .wIZqC_dHtp{opacity:0;transform:translateZ(0) scale(0.75)}\n\n.wIZqC_fjPu .wIZqC_cwzs{opacity:0;transform:translate3d(0,10%,0)}\n\n.wIZqC_fjPu .wIZqC_cDWE{opacity:0}\n\n.wIZqC_fjPu.wIZqC_dIzR .wIZqC_cDWE{stroke-dashoffset:").concat(theme.xSmallCircumference || 'inherit', "!important}\n\n.wIZqC_fjPu.wIZqC_VCXp .wIZqC_cDWE{stroke-dashoffset:").concat(theme.smallCircumference || 'inherit', "!important}\n\n.wIZqC_fjPu.wIZqC_fKcQ .wIZqC_cDWE{stroke-dashoffset:").concat(theme.mediumCircumference || 'inherit', "!important}\n\n.wIZqC_fjPu.wIZqC_cnhd .wIZqC_cDWE{stroke-dashoffset:").concat(theme.largeCircumference || 'inherit', "!important}");
  },
  'root': 'wIZqC_bGBk',
  'circle': 'wIZqC_cJVF',
  'center': 'wIZqC_cwzs',
  'value': 'wIZqC_fqzO',
  'border': 'wIZqC_dHtp',
  'meter': 'wIZqC_cDWE',
  'track': 'wIZqC_eCEP',
  'color--primary': 'wIZqC_eCSh',
  'meterColor--brand': 'wIZqC_fEhA',
  'meterColor--info': 'wIZqC_diLM',
  'meterColor--warning': 'wIZqC_dyHF',
  'meterColor--danger': 'wIZqC_dpQv',
  'meterColor--alert': 'wIZqC_fJaO',
  'meterColor--success': 'wIZqC_buIS',
  'color--primary-inverse': 'wIZqC_bFtJ',
  'size--x-small': 'wIZqC_dIzR',
  'size--small': 'wIZqC_VCXp',
  'size--medium': 'wIZqC_fKcQ',
  'size--large': 'wIZqC_cnhd',
  'shouldAnimateOnMount': 'wIZqC_fjPu'
};
import theme from "./theme.js";
/**
---
category: components
---
**/

var ProgressCircle = (_dec = testable(), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
  _inherits(ProgressCircle, _Component);

  var _super = _createSuper(ProgressCircle);

  function ProgressCircle(props) {
    var _this;

    _classCallCheck(this, ProgressCircle);

    _this = _super.call(this);
    _this._timeouts = [];
    _this.state = {
      shouldAnimateOnMount: props.shouldAnimateOnMount
    };
    return _this;
  }

  _createClass(ProgressCircle, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      if (this.state.shouldAnimateOnMount) {
        this._timeouts.push(setTimeout(function () {
          _this2.setState({
            shouldAnimateOnMount: false
          });
        }, this.props.animationDelay || 500));
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._timeouts.forEach(function (timeout) {
        return clearTimeout(timeout);
      });
    }
  }, {
    key: "circumference",
    value: function circumference() {
      var camelSize = this.props.size === 'x-small' ? 'xSmall' : this.props.size; // get the circumference of the meter circle

      return parseFloat(this.theme["".concat(camelSize, "Circumference")]);
    }
  }, {
    key: "dashOffset",
    value: function dashOffset() {
      var _this$props = this.props,
          valueNow = _this$props.valueNow,
          valueMax = _this$props.valueMax; // send the stroke-dashoffset to the meter circle, checking
      // to make sure current value doesn't exceed max value

      if (valueNow < valueMax) {
        var circumference = this.circumference(); // figure out how much offset to give the stroke to show the % complete

        return circumference - valueNow / valueMax * circumference;
      } else {
        return 0;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classes;

      var _this$props2 = this.props,
          color = _this$props2.color,
          renderValue = _this$props2.renderValue,
          formatScreenReaderValue = _this$props2.formatScreenReaderValue,
          meterColor = _this$props2.meterColor,
          valueNow = _this$props2.valueNow,
          valueMax = _this$props2.valueMax,
          screenReaderLabel = _this$props2.screenReaderLabel,
          size = _this$props2.size,
          props = _objectWithoutProperties(_this$props2, ["color", "renderValue", "formatScreenReaderValue", "meterColor", "valueNow", "valueMax", "screenReaderLabel", "size"]);

      var meterColorClassName = typeof meterColor === 'function' ? meterColor({
        valueNow: valueNow,
        valueMax: valueMax
      }) : meterColor;
      var classes = (_classes = {}, _defineProperty(_classes, styles.root, true), _defineProperty(_classes, styles["size--".concat(size)], true), _defineProperty(_classes, styles["color--".concat(color)], true), _defineProperty(_classes, styles["meterColor--".concat(meterColorClassName)], true), _defineProperty(_classes, styles.shouldAnimateOnMount, this.state.shouldAnimateOnMount), _classes);
      var valueText = typeof formatScreenReaderValue === 'function' && formatScreenReaderValue({
        valueNow: valueNow,
        valueMax: valueMax
      }); // consolidating the label and aria-valuetext to put in aria-label because
      // NVDA does not read aria-valuetext: https://github.com/nvaccess/nvda/issues/913
      // But leaving aria-valuetext because JAWS ignores aria-label

      var labelAndValueText = "".concat(screenReaderLabel, " ").concat(valueText);
      var value = callRenderProp(renderValue, {
        valueNow: valueNow,
        valueMax: valueMax
      });
      var style = this.state.animateOnMount ? null : {
        strokeDashoffset: "".concat(this.dashOffset(), "em")
      };
      return /*#__PURE__*/React.createElement(View, Object.assign({}, passthroughProps(props), {
        as: this.props.as,
        elementRef: this.props.elementRef,
        className: classnames(classes),
        margin: this.props.margin
      }), /*#__PURE__*/React.createElement(ScreenReaderContent, null, /*#__PURE__*/React.createElement("progress", {
        max: valueMax,
        value: valueNow,
        "aria-valuetext": valueText,
        "aria-valuenow": valueNow,
        "aria-valuemax": valueMax,
        "aria-label": labelAndValueText
      })), value && /*#__PURE__*/React.createElement("span", {
        className: styles.center,
        "aria-hidden": "true"
      }, /*#__PURE__*/React.createElement("span", {
        className: styles.value
      }, value)), /*#__PURE__*/React.createElement("svg", {
        className: styles.circle,
        role: "presentation",
        focusable: "false"
      }, /*#__PURE__*/React.createElement("circle", {
        className: styles.track,
        role: "presentation",
        cx: "50%",
        cy: "50%",
        r: this.radii.radius
      }), /*#__PURE__*/React.createElement("circle", {
        className: styles.border,
        role: "presentation",
        cx: "50%",
        cy: "50%",
        r: this.radii.borderOffsetRadius
      }), /*#__PURE__*/React.createElement("circle", {
        className: styles.meter,
        role: "presentation",
        style: style,
        cx: "50%",
        cy: "50%",
        r: this.radii.radius
      })));
    }
  }, {
    key: "radii",
    get: function get() {
      var camelSize = this.props.size === 'x-small' ? 'xSmall' : this.props.size;
      return {
        radius: this.theme["".concat(camelSize, "Radius")],
        borderOffsetRadius: this.theme["".concat(camelSize, "BorderOffset")]
      };
    }
  }]);

  ProgressCircle.displayName = "ProgressCircle";
  return ProgressCircle;
}(Component), _class2.propTypes = {
  /**
   * A label is required for accessibility
   */
  screenReaderLabel: PropTypes.string.isRequired,

  /**
   * Control the size of the progress circle
   */
  size: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),

  /**
   * Maximum value (defaults to 100)
   */
  valueMax: PropTypes.number,

  /**
   * Receives the progress of the event
   */
  valueNow: PropTypes.number,

  /**
   * A function for formatting the text provided to screen readers via `aria-valuenow`
   */
  formatScreenReaderValue: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),

  /**
   * A function to format the displayed value. If null the value will not display.
   * Takes `valueNow` and `valueMax` as parameters.
   */
  renderValue: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),

  /**
   * Controls the overall color scheme of the component
   */
  color: PropTypes.oneOf(['primary', 'primary-inverse']),

  /**
   * Control the color of the progress meter. Defaults to showing theme success
   * color on completion, based on `valueNow` and `valueMax`.
   */
  meterColor: PropTypes.oneOfType([PropTypes.func, PropTypes.oneOf(['info', 'warning', 'danger', 'alert', 'success', 'brand'])]),

  /**
   * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
   * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
   * familiar CSS-like shorthand. For example: `margin="small auto large"`.
   */
  margin: ThemeablePropTypes.spacing,

  /**
   * Provides a reference to the component's root HTML element
   */
  elementRef: PropTypes.func,

  /**
   * Set the element type of the component's root
   */
  as: PropTypes.elementType,

  /**
   * Animate the progress meter to the current value when the component
   * has mounted
   */
  shouldAnimateOnMount: PropTypes.bool,
  animationDelay: PropTypes.number
}, _class2.defaultProps = {
  formatScreenReaderValue: function formatScreenReaderValue(_ref) {
    var valueNow = _ref.valueNow,
        valueMax = _ref.valueMax;
    return "".concat(valueNow, " / ").concat(valueMax);
  },
  size: 'medium',
  valueMax: 100,
  valueNow: 0,
  as: 'div',
  renderValue: void 0,
  margin: void 0,
  elementRef: void 0,
  color: 'primary',
  shouldAnimateOnMount: false,
  animationDelay: void 0,
  // default to showing `success` color on completion
  meterColor: function meterColor(_ref2) {
    var valueNow = _ref2.valueNow,
        valueMax = _ref2.valueMax;
    return valueNow / valueMax >= 1 ? 'success' : 'brand';
  }
}, _temp)) || _class) || _class);
export default ProgressCircle;
export { ProgressCircle };
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { darken } from '@instructure/ui-color-utils';
export default function generator(_ref) {
  var borders = _ref.borders,
      colors = _ref.colors,
      forms = _ref.forms,
      spacing = _ref.spacing,
      typography = _ref.typography;

  var tagVariant = function tagVariant(style, _ref2) {
    var _ref3;

    var borderColor = _ref2.borderColor,
        borderRadius = _ref2.borderRadius,
        borderStyle = _ref2.borderStyle,
        borderWidth = _ref2.borderWidth,
        hoverColor = _ref2.hoverColor,
        iconColor = _ref2.iconColor,
        iconHoverColor = _ref2.iconHoverColor,
        mainColor = _ref2.mainColor,
        textColor = _ref2.textColor;
    return _ref3 = {}, _defineProperty(_ref3, "".concat(style, "BackgroundHover"), hoverColor || darken(mainColor, 5)), _defineProperty(_ref3, "".concat(style, "Background"), mainColor), _defineProperty(_ref3, "".concat(style, "BorderColor"), borderColor), _defineProperty(_ref3, "".concat(style, "BorderRadius"), borderRadius || '999rem'), _defineProperty(_ref3, "".concat(style, "BorderStyle"), borderStyle || borders.style), _defineProperty(_ref3, "".concat(style, "BorderWidth"), borderWidth || borders.widthSmall), _defineProperty(_ref3, "".concat(style, "Color"), textColor), _defineProperty(_ref3, "".concat(style, "IconColor"), iconColor || textColor), _defineProperty(_ref3, "".concat(style, "IconHoverColor"), iconHoverColor || iconColor || textColor), _ref3;
  };

  return _objectSpread({
    fontFamily: typography.fontFamily,
    heightSmall: '1.3125rem',
    // matches Pill component height
    heightMedium: forms.inputHeightSmall,
    heightLarge: forms.inputHeightMedium,
    fontSizeSmall: typography.fontSizeXSmall,
    fontSizeMedium: typography.fontSizeSmall,
    fontSizeLarge: typography.fontSizeMedium,
    padding: "0 ".concat(spacing.xSmall),
    paddingSmall: "0 ".concat(spacing.xSmall),
    focusOutlineColor: colors.borderBrand,
    focusOutlineWidth: borders.widthMedium,
    focusOutlineStyle: borders.style,
    maxWidth: '10rem',
    iconMargin: spacing.small,
    transitionTiming: '0.2s'
  }, tagVariant('default', {
    borderColor: colors.borderMedium,
    iconColor: colors.textDarkest,
    iconHoverColor: colors.textBrand,
    mainColor: colors.textLight,
    textColor: colors.textDarkest
  }), {}, tagVariant('inline', {
    borderColor: colors.borderDark,
    borderRadius: borders.radiusMedium,
    iconColor: colors.textDark,
    iconHoverColor: colors.textDark,
    mainColor: colors.textLightest,
    textColor: colors.textDarkest
  }));
}

generator['canvas-a11y'] = generator['canvas-high-contrast'] = function (_ref4) {
  var colors = _ref4.colors;
  return {
    defaultBackground: colors.backgroundLightest,
    defaultBorderColor: colors.borderDarkest
  };
};

generator.canvas = function (variables) {
  return {
    focusOutlineColor: variables['ic-brand-primary'],
    textColor: variables['ic-brand-font-color-dark'],
    defaultIconColor: variables['ic-brand-font-color-dark'],
    defaultIconHoverColor: variables['ic-brand-primary'],
    defaultColor: variables['ic-brand-font-color-dark']
  };
};